
001Led_Toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001ff4  08001ff4  00011ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800200c  0800200c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800200c  0800200c  0001200c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002014  08002014  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002014  08002014  00012014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002018  08002018  00012018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800201c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000010  0800202c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800202c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a4c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001136  00000000  00000000  00024a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000488  00000000  00000000  00025bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f0  00000000  00000000  00026050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f084  00000000  00000000  00026440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005841  00000000  00000000  000454c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc906  00000000  00000000  0004ad05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010760b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001088  00000000  00000000  00107660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001fdc 	.word	0x08001fdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001fdc 	.word	0x08001fdc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fad4 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f82c 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8de 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 80004d0:	f000 f892 	bl	80005f8 <MX_DMA_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_DMA_Start(&hdma_memtomem_dma2_stream0, (uint32_t)&led_data[0], (uint32_t)(&GPIOD->ODR) + 1, 1);
 80004d4:	490f      	ldr	r1, [pc, #60]	; (8000514 <main+0x54>)
 80004d6:	2301      	movs	r3, #1
 80004d8:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <main+0x58>)
 80004da:	4810      	ldr	r0, [pc, #64]	; (800051c <main+0x5c>)
 80004dc:	f000 fcf2 	bl	8000ec4 <HAL_DMA_Start>
	HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream0, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 80004e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004e4:	2100      	movs	r1, #0
 80004e6:	480d      	ldr	r0, [pc, #52]	; (800051c <main+0x5c>)
 80004e8:	f000 fd97 	bl	800101a <HAL_DMA_PollForTransfer>
	HAL_Delay(100);
 80004ec:	2064      	movs	r0, #100	; 0x64
 80004ee:	f000 fb31 	bl	8000b54 <HAL_Delay>
	HAL_DMA_Start(&hdma_memtomem_dma2_stream0, (uint32_t)&led_data[1], (uint32_t)(&GPIOD->ODR) + 1, 1);
 80004f2:	490b      	ldr	r1, [pc, #44]	; (8000520 <main+0x60>)
 80004f4:	2301      	movs	r3, #1
 80004f6:	4a08      	ldr	r2, [pc, #32]	; (8000518 <main+0x58>)
 80004f8:	4808      	ldr	r0, [pc, #32]	; (800051c <main+0x5c>)
 80004fa:	f000 fce3 	bl	8000ec4 <HAL_DMA_Start>
	HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream0, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 80004fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000502:	2100      	movs	r1, #0
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <main+0x5c>)
 8000506:	f000 fd88 	bl	800101a <HAL_DMA_PollForTransfer>
	HAL_Delay(100);
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	f000 fb22 	bl	8000b54 <HAL_Delay>
	HAL_DMA_Start(&hdma_memtomem_dma2_stream0, (uint32_t)&led_data[0], (uint32_t)(&GPIOD->ODR) + 1, 1);
 8000510:	e7e0      	b.n	80004d4 <main+0x14>
 8000512:	bf00      	nop
 8000514:	20000000 	.word	0x20000000
 8000518:	40020c15 	.word	0x40020c15
 800051c:	2000002c 	.word	0x2000002c
 8000520:	20000001 	.word	0x20000001

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f001 fd4a 	bl	8001fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <SystemClock_Config+0xd0>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2310      	movs	r3, #16
 800058a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000590:	2300      	movs	r3, #0
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000594:	2308      	movs	r3, #8
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000598:	2332      	movs	r3, #50	; 0x32
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800059c:	2304      	movs	r3, #4
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a0:	2307      	movs	r3, #7
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 f8ab 	bl	8001704 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b4:	f000 f9c8 	bl	8000948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fb0c 	bl	8001bf4 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005e2:	f000 f9b1 	bl	8000948 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_DMA_Init+0x88>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1e      	ldr	r2, [pc, #120]	; (8000680 <MX_DMA_Init+0x88>)
 8000608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_DMA_Init+0x88>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_DMA_Init+0x8c>)
 800061c:	4a1a      	ldr	r2, [pc, #104]	; (8000688 <MX_DMA_Init+0x90>)
 800061e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_DMA_Init+0x8c>)
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_DMA_Init+0x8c>)
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_DISABLE;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_DMA_Init+0x8c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_DISABLE;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_DMA_Init+0x8c>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_DMA_Init+0x8c>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_DMA_Init+0x8c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_DMA_Init+0x8c>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_DMA_Init+0x8c>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_DMA_Init+0x8c>)
 8000652:	2204      	movs	r2, #4
 8000654:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_DMA_Init+0x8c>)
 8000658:	2203      	movs	r2, #3
 800065a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_DMA_Init+0x8c>)
 800065e:	2200      	movs	r2, #0
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_DMA_Init+0x8c>)
 8000664:	2200      	movs	r2, #0
 8000666:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_DMA_Init+0x8c>)
 800066a:	f000 fb7d 	bl	8000d68 <HAL_DMA_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_DMA_Init+0x80>
  {
    Error_Handler( );
 8000674:	f000 f968 	bl	8000948 <Error_Handler>
  }

}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	2000002c 	.word	0x2000002c
 8000688:	40026410 	.word	0x40026410

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	4ba2      	ldr	r3, [pc, #648]	; (8000930 <MX_GPIO_Init+0x2a4>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4aa1      	ldr	r2, [pc, #644]	; (8000930 <MX_GPIO_Init+0x2a4>)
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b9f      	ldr	r3, [pc, #636]	; (8000930 <MX_GPIO_Init+0x2a4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0310 	and.w	r3, r3, #16
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	4b9b      	ldr	r3, [pc, #620]	; (8000930 <MX_GPIO_Init+0x2a4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a9a      	ldr	r2, [pc, #616]	; (8000930 <MX_GPIO_Init+0x2a4>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b98      	ldr	r3, [pc, #608]	; (8000930 <MX_GPIO_Init+0x2a4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b94      	ldr	r3, [pc, #592]	; (8000930 <MX_GPIO_Init+0x2a4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a93      	ldr	r2, [pc, #588]	; (8000930 <MX_GPIO_Init+0x2a4>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b91      	ldr	r3, [pc, #580]	; (8000930 <MX_GPIO_Init+0x2a4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b8d      	ldr	r3, [pc, #564]	; (8000930 <MX_GPIO_Init+0x2a4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a8c      	ldr	r2, [pc, #560]	; (8000930 <MX_GPIO_Init+0x2a4>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b8a      	ldr	r3, [pc, #552]	; (8000930 <MX_GPIO_Init+0x2a4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b86      	ldr	r3, [pc, #536]	; (8000930 <MX_GPIO_Init+0x2a4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a85      	ldr	r2, [pc, #532]	; (8000930 <MX_GPIO_Init+0x2a4>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b83      	ldr	r3, [pc, #524]	; (8000930 <MX_GPIO_Init+0x2a4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b7f      	ldr	r3, [pc, #508]	; (8000930 <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a7e      	ldr	r2, [pc, #504]	; (8000930 <MX_GPIO_Init+0x2a4>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b7c      	ldr	r3, [pc, #496]	; (8000930 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2108      	movs	r1, #8
 800074e:	4879      	ldr	r0, [pc, #484]	; (8000934 <MX_GPIO_Init+0x2a8>)
 8000750:	f000 ffbe 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2101      	movs	r1, #1
 8000758:	4877      	ldr	r0, [pc, #476]	; (8000938 <MX_GPIO_Init+0x2ac>)
 800075a:	f000 ffb9 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800075e:	2200      	movs	r2, #0
 8000760:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000764:	4875      	ldr	r0, [pc, #468]	; (800093c <MX_GPIO_Init+0x2b0>)
 8000766:	f000 ffb3 	bl	80016d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800076a:	2308      	movs	r3, #8
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	486c      	ldr	r0, [pc, #432]	; (8000934 <MX_GPIO_Init+0x2a8>)
 8000782:	f000 fe09 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000786:	2301      	movs	r3, #1
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4866      	ldr	r0, [pc, #408]	; (8000938 <MX_GPIO_Init+0x2ac>)
 800079e:	f000 fdfb 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007a2:	2308      	movs	r3, #8
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007b2:	2305      	movs	r3, #5
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	485e      	ldr	r0, [pc, #376]	; (8000938 <MX_GPIO_Init+0x2ac>)
 80007be:	f000 fdeb 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	485a      	ldr	r0, [pc, #360]	; (8000940 <MX_GPIO_Init+0x2b4>)
 80007d8:	f000 fdde 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007dc:	2310      	movs	r3, #16
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007ec:	2306      	movs	r3, #6
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	4852      	ldr	r0, [pc, #328]	; (8000940 <MX_GPIO_Init+0x2b4>)
 80007f8:	f000 fdce 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007fc:	23e0      	movs	r3, #224	; 0xe0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800080c:	2305      	movs	r3, #5
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	484a      	ldr	r0, [pc, #296]	; (8000940 <MX_GPIO_Init+0x2b4>)
 8000818:	f000 fdbe 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800081c:	2304      	movs	r3, #4
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	4845      	ldr	r0, [pc, #276]	; (8000944 <MX_GPIO_Init+0x2b8>)
 8000830:	f000 fdb2 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000846:	2305      	movs	r3, #5
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	483c      	ldr	r0, [pc, #240]	; (8000944 <MX_GPIO_Init+0x2b8>)
 8000852:	f000 fda1 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000856:	f24f 0310 	movw	r3, #61456	; 0xf010
 800085a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	4833      	ldr	r0, [pc, #204]	; (800093c <MX_GPIO_Init+0x2b0>)
 8000870:	f000 fd92 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000874:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000886:	2306      	movs	r3, #6
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4829      	ldr	r0, [pc, #164]	; (8000938 <MX_GPIO_Init+0x2ac>)
 8000892:	f000 fd81 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	4825      	ldr	r0, [pc, #148]	; (8000940 <MX_GPIO_Init+0x2b4>)
 80008ac:	f000 fd74 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008c2:	230a      	movs	r3, #10
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	481c      	ldr	r0, [pc, #112]	; (8000940 <MX_GPIO_Init+0x2b4>)
 80008ce:	f000 fd63 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008d2:	2320      	movs	r3, #32
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4815      	ldr	r0, [pc, #84]	; (800093c <MX_GPIO_Init+0x2b0>)
 80008e6:	f000 fd57 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008ea:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f0:	2312      	movs	r3, #18
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008fc:	2304      	movs	r3, #4
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	480f      	ldr	r0, [pc, #60]	; (8000944 <MX_GPIO_Init+0x2b8>)
 8000908:	f000 fd46 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800090c:	2302      	movs	r3, #2
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000910:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_GPIO_Init+0x2a8>)
 8000922:	f000 fd39 	bl	8001398 <HAL_GPIO_Init>

}
 8000926:	bf00      	nop
 8000928:	3730      	adds	r7, #48	; 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40021000 	.word	0x40021000
 8000938:	40020800 	.word	0x40020800
 800093c:	40020c00 	.word	0x40020c00
 8000940:	40020000 	.word	0x40020000
 8000944:	40020400 	.word	0x40020400

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000992:	2007      	movs	r0, #7
 8000994:	f000 f9b4 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f890 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <SystemInit+0x20>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <SystemInit+0x20>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a22:	490e      	ldr	r1, [pc, #56]	; (8000a5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a38:	4c0b      	ldr	r4, [pc, #44]	; (8000a68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a46:	f7ff ffd7 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f001 fa9b 	bl	8001f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4e:	f7ff fd37 	bl	80004c0 <main>
  bx  lr    
 8000a52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a60:	0800201c 	.word	0x0800201c
  ldr r2, =_sbss
 8000a64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a68:	20000090 	.word	0x20000090

08000a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <HAL_Init+0x40>)
 8000a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_Init+0x40>)
 8000a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x40>)
 8000a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f931 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff ff56 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023c00 	.word	0x40023c00

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f93b 	bl	8000d4e <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af0:	f000 f911 	bl	8000d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000004 	.word	0x20000004
 8000b0c:	2000000c 	.word	0x2000000c
 8000b10:	20000008 	.word	0x20000008

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	2000000c 	.word	0x2000000c
 8000b38:	2000008c 	.word	0x2000008c

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	2000008c 	.word	0x2000008c

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff ffee 	bl	8000b3c <HAL_GetTick>
 8000b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_Delay+0x44>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff ffde 	bl	8000b3c <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000000c 	.word	0x2000000c

08000b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ccc:	d301      	bcc.n	8000cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00f      	b.n	8000cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <SysTick_Config+0x40>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce0:	f7ff ff8e 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SysTick_Config+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <SysTick_Config+0x40>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff47 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff5c 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff8e 	bl	8000c54 <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5d 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ffb0 	bl	8000cbc <SysTick_Config>
 8000d5c:	4603      	mov	r3, r0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff fee2 	bl	8000b3c <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e099      	b.n	8000eb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2202      	movs	r2, #2
 8000d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0201 	bic.w	r2, r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000da4:	e00f      	b.n	8000dc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000da6:	f7ff fec9 	bl	8000b3c <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b05      	cmp	r3, #5
 8000db2:	d908      	bls.n	8000dc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2220      	movs	r2, #32
 8000db8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e078      	b.n	8000eb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1e8      	bne.n	8000da6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <HAL_DMA_Init+0x158>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d107      	bne.n	8000e30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f023 0307 	bic.w	r3, r3, #7
 8000e46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d117      	bne.n	8000e8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d00e      	beq.n	8000e8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 fa17 	bl	80012a0 <DMA_CheckFifoParam>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d008      	beq.n	8000e8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2240      	movs	r2, #64	; 0x40
 8000e7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e86:	2301      	movs	r3, #1
 8000e88:	e016      	b.n	8000eb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f9ce 	bl	8001234 <DMA_CalcBaseAndBitshift>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea0:	223f      	movs	r2, #63	; 0x3f
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	f010803f 	.word	0xf010803f

08000ec4 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d101      	bne.n	8000ee4 <HAL_DMA_Start+0x20>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	e026      	b.n	8000f32 <HAL_DMA_Start+0x6e>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d115      	bne.n	8000f24 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2202      	movs	r2, #2
 8000efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2200      	movs	r2, #0
 8000f04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f000 f963 	bl	80011d8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f042 0201 	orr.w	r2, r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e005      	b.n	8000f30 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8000f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff fdf8 	bl	8000b3c <HAL_GetTick>
 8000f4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d008      	beq.n	8000f6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e052      	b.n	8001012 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0216 	bic.w	r2, r2, #22
 8000f7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d103      	bne.n	8000f9c <HAL_DMA_Abort+0x62>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d007      	beq.n	8000fac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0208 	bic.w	r2, r2, #8
 8000faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fbc:	e013      	b.n	8000fe6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fbe:	f7ff fdbd 	bl	8000b3c <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b05      	cmp	r3, #5
 8000fca:	d90c      	bls.n	8000fe6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2220      	movs	r2, #32
 8000fd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e015      	b.n	8001012 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1e4      	bne.n	8000fbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff8:	223f      	movs	r2, #63	; 0x3f
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b08a      	sub	sp, #40	; 0x28
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	460b      	mov	r3, r1
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8001028:	2300      	movs	r3, #0
 800102a:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 800102c:	f7ff fd86 	bl	8000b3c <HAL_GetTick>
 8001030:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d008      	beq.n	8001050 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e0bf      	b.n	80011d0 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001064:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e0b2      	b.n	80011d0 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800106a:	7afb      	ldrb	r3, [r7, #11]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d106      	bne.n	800107e <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001074:	2220      	movs	r2, #32
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
 800107c:	e005      	b.n	800108a <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001082:	2210      	movs	r2, #16
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8001096:	e05a      	b.n	800114e <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800109e:	d017      	beq.n	80010d0 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <HAL_DMA_PollForTransfer+0x9c>
 80010a6:	f7ff fd49 	bl	8000b3c <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d20c      	bcs.n	80010d0 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2220      	movs	r2, #32
 80010ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e07f      	b.n	80011d0 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010da:	2208      	movs	r2, #8
 80010dc:	409a      	lsls	r2, r3
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ea:	f043 0201 	orr.w	r2, r3, #1
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f6:	2208      	movs	r2, #8
 80010f8:	409a      	lsls	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001102:	2201      	movs	r2, #1
 8001104:	409a      	lsls	r2, r3
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00b      	beq.n	8001126 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001112:	f043 0202 	orr.w	r2, r3, #2
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111e:	2201      	movs	r2, #1
 8001120:	409a      	lsls	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112a:	2204      	movs	r2, #4
 800112c:	409a      	lsls	r2, r3
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	4013      	ands	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800113a:	f043 0204 	orr.w	r2, r3, #4
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001146:	2204      	movs	r2, #4
 8001148:	409a      	lsls	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800114e:	6a3a      	ldr	r2, [r7, #32]
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	4013      	ands	r3, r2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d105      	bne.n	8001164 <HAL_DMA_PollForTransfer+0x14a>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	d099      	beq.n	8001098 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001168:	2b00      	cmp	r3, #0
 800116a:	d018      	beq.n	800119e <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d012      	beq.n	800119e <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f7ff fede 	bl	8000f3a <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001182:	2230      	movs	r2, #48	; 0x30
 8001184:	409a      	lsls	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e018      	b.n	80011d0 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10e      	bne.n	80011c2 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	2230      	movs	r2, #48	; 0x30
 80011aa:	409a      	lsls	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80011c0:	e005      	b.n	80011ce <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c6:	2210      	movs	r2, #16
 80011c8:	409a      	lsls	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b40      	cmp	r3, #64	; 0x40
 8001204:	d108      	bne.n	8001218 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001216:	e007      	b.n	8001228 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	60da      	str	r2, [r3, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	3b10      	subs	r3, #16
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <DMA_CalcBaseAndBitshift+0x64>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800124e:	4a13      	ldr	r2, [pc, #76]	; (800129c <DMA_CalcBaseAndBitshift+0x68>)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d909      	bls.n	8001276 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800126a:	f023 0303 	bic.w	r3, r3, #3
 800126e:	1d1a      	adds	r2, r3, #4
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	659a      	str	r2, [r3, #88]	; 0x58
 8001274:	e007      	b.n	8001286 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800127e:	f023 0303 	bic.w	r3, r3, #3
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	aaaaaaab 	.word	0xaaaaaaab
 800129c:	08002004 	.word	0x08002004

080012a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d11f      	bne.n	80012fa <DMA_CheckFifoParam+0x5a>
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d856      	bhi.n	800136e <DMA_CheckFifoParam+0xce>
 80012c0:	a201      	add	r2, pc, #4	; (adr r2, 80012c8 <DMA_CheckFifoParam+0x28>)
 80012c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c6:	bf00      	nop
 80012c8:	080012d9 	.word	0x080012d9
 80012cc:	080012eb 	.word	0x080012eb
 80012d0:	080012d9 	.word	0x080012d9
 80012d4:	0800136f 	.word	0x0800136f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d046      	beq.n	8001372 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012e8:	e043      	b.n	8001372 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80012f2:	d140      	bne.n	8001376 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012f8:	e03d      	b.n	8001376 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001302:	d121      	bne.n	8001348 <DMA_CheckFifoParam+0xa8>
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d837      	bhi.n	800137a <DMA_CheckFifoParam+0xda>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <DMA_CheckFifoParam+0x70>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	08001321 	.word	0x08001321
 8001314:	08001327 	.word	0x08001327
 8001318:	08001321 	.word	0x08001321
 800131c:	08001339 	.word	0x08001339
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
      break;
 8001324:	e030      	b.n	8001388 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d025      	beq.n	800137e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001336:	e022      	b.n	800137e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001340:	d11f      	bne.n	8001382 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001346:	e01c      	b.n	8001382 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d903      	bls.n	8001356 <DMA_CheckFifoParam+0xb6>
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	2b03      	cmp	r3, #3
 8001352:	d003      	beq.n	800135c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001354:	e018      	b.n	8001388 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
      break;
 800135a:	e015      	b.n	8001388 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00e      	beq.n	8001386 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
      break;
 800136c:	e00b      	b.n	8001386 <DMA_CheckFifoParam+0xe6>
      break;
 800136e:	bf00      	nop
 8001370:	e00a      	b.n	8001388 <DMA_CheckFifoParam+0xe8>
      break;
 8001372:	bf00      	nop
 8001374:	e008      	b.n	8001388 <DMA_CheckFifoParam+0xe8>
      break;
 8001376:	bf00      	nop
 8001378:	e006      	b.n	8001388 <DMA_CheckFifoParam+0xe8>
      break;
 800137a:	bf00      	nop
 800137c:	e004      	b.n	8001388 <DMA_CheckFifoParam+0xe8>
      break;
 800137e:	bf00      	nop
 8001380:	e002      	b.n	8001388 <DMA_CheckFifoParam+0xe8>
      break;   
 8001382:	bf00      	nop
 8001384:	e000      	b.n	8001388 <DMA_CheckFifoParam+0xe8>
      break;
 8001386:	bf00      	nop
    }
  } 
  
  return status; 
 8001388:	7bfb      	ldrb	r3, [r7, #15]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e16b      	b.n	800168c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 815a 	bne.w	8001686 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d005      	beq.n	80013ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d130      	bne.n	800144c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b03      	cmp	r3, #3
 8001456:	d017      	beq.n	8001488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d123      	bne.n	80014dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80b4 	beq.w	8001686 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a5f      	ldr	r2, [pc, #380]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HAL_GPIO_Init+0x310>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_GPIO_Init+0x314>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x226>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <HAL_GPIO_Init+0x318>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x222>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <HAL_GPIO_Init+0x31c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x21e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_GPIO_Init+0x320>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4e      	ldr	r2, [pc, #312]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4d      	ldr	r2, [pc, #308]	; (80016c0 <HAL_GPIO_Init+0x328>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4c      	ldr	r2, [pc, #304]	; (80016c4 <HAL_GPIO_Init+0x32c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x20e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4b      	ldr	r2, [pc, #300]	; (80016c8 <HAL_GPIO_Init+0x330>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x20a>
 800159e:	2307      	movs	r3, #7
 80015a0:	e00e      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a2:	2308      	movs	r3, #8
 80015a4:	e00c      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e00a      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015aa:	2305      	movs	r3, #5
 80015ac:	e008      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015be:	2300      	movs	r3, #0
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	f002 0203 	and.w	r2, r2, #3
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d0:	4935      	ldr	r1, [pc, #212]	; (80016a8 <HAL_GPIO_Init+0x310>)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_GPIO_Init+0x334>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001602:	4a32      	ldr	r2, [pc, #200]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_GPIO_Init+0x334>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_GPIO_Init+0x334>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001656:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_GPIO_Init+0x334>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	f67f ae90 	bls.w	80013b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40013800 	.word	0x40013800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40021400 	.word	0x40021400
 80016c4:	40021800 	.word	0x40021800
 80016c8:	40021c00 	.word	0x40021c00
 80016cc:	40013c00 	.word	0x40013c00

080016d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
 80016dc:	4613      	mov	r3, r2
 80016de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016ec:	e003      	b.n	80016f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	041a      	lsls	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	619a      	str	r2, [r3, #24]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e264      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d075      	beq.n	800180e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001722:	4ba3      	ldr	r3, [pc, #652]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b04      	cmp	r3, #4
 800172c:	d00c      	beq.n	8001748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172e:	4ba0      	ldr	r3, [pc, #640]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001736:	2b08      	cmp	r3, #8
 8001738:	d112      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173a:	4b9d      	ldr	r3, [pc, #628]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001746:	d10b      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	4b99      	ldr	r3, [pc, #612]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d05b      	beq.n	800180c <HAL_RCC_OscConfig+0x108>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d157      	bne.n	800180c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e23f      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d106      	bne.n	8001778 <HAL_RCC_OscConfig+0x74>
 800176a:	4b91      	ldr	r3, [pc, #580]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a90      	ldr	r2, [pc, #576]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x98>
 8001782:	4b8b      	ldr	r3, [pc, #556]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a8a      	ldr	r2, [pc, #552]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b88      	ldr	r3, [pc, #544]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a87      	ldr	r2, [pc, #540]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 800179c:	4b84      	ldr	r3, [pc, #528]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a83      	ldr	r2, [pc, #524]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b81      	ldr	r3, [pc, #516]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a80      	ldr	r2, [pc, #512]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff f9be 	bl	8000b3c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff f9ba 	bl	8000b3c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e204      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b76      	ldr	r3, [pc, #472]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xc0>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff f9aa 	bl	8000b3c <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff f9a6 	bl	8000b3c <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1f0      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	4b6c      	ldr	r3, [pc, #432]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0xe8>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d063      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800181a:	4b65      	ldr	r3, [pc, #404]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001826:	4b62      	ldr	r3, [pc, #392]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001832:	4b5f      	ldr	r3, [pc, #380]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b5c      	ldr	r3, [pc, #368]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1c4      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b56      	ldr	r3, [pc, #344]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4952      	ldr	r1, [pc, #328]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e03a      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b4f      	ldr	r3, [pc, #316]	; (80019b4 <HAL_RCC_OscConfig+0x2b0>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff f95f 	bl	8000b3c <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff f95b 	bl	8000b3c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e1a5      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4940      	ldr	r1, [pc, #256]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b3f      	ldr	r3, [pc, #252]	; (80019b4 <HAL_RCC_OscConfig+0x2b0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff f93e 	bl	8000b3c <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff f93a 	bl	8000b3c <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e184      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d030      	beq.n	8001950 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d016      	beq.n	8001924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f6:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <HAL_RCC_OscConfig+0x2b4>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff f91e 	bl	8000b3c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff f91a 	bl	8000b3c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e164      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x200>
 8001922:	e015      	b.n	8001950 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCC_OscConfig+0x2b4>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff f907 	bl	8000b3c <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff f903 	bl	8000b3c <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e14d      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80a0 	beq.w	8001a9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10f      	bne.n	800198e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <HAL_RCC_OscConfig+0x2ac>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_OscConfig+0x2b8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d121      	bne.n	80019de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_RCC_OscConfig+0x2b8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_RCC_OscConfig+0x2b8>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a6:	f7ff f8c9 	bl	8000b3c <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	e011      	b.n	80019d2 <HAL_RCC_OscConfig+0x2ce>
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	42470000 	.word	0x42470000
 80019b8:	42470e80 	.word	0x42470e80
 80019bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c0:	f7ff f8bc 	bl	8000b3c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e106      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	4b85      	ldr	r3, [pc, #532]	; (8001be8 <HAL_RCC_OscConfig+0x4e4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d106      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2f0>
 80019e6:	4b81      	ldr	r3, [pc, #516]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	4a80      	ldr	r2, [pc, #512]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6713      	str	r3, [r2, #112]	; 0x70
 80019f2:	e01c      	b.n	8001a2e <HAL_RCC_OscConfig+0x32a>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d10c      	bne.n	8001a16 <HAL_RCC_OscConfig+0x312>
 80019fc:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	4a7a      	ldr	r2, [pc, #488]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6713      	str	r3, [r2, #112]	; 0x70
 8001a08:	4b78      	ldr	r3, [pc, #480]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	4a77      	ldr	r2, [pc, #476]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6713      	str	r3, [r2, #112]	; 0x70
 8001a14:	e00b      	b.n	8001a2e <HAL_RCC_OscConfig+0x32a>
 8001a16:	4b75      	ldr	r3, [pc, #468]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a74      	ldr	r2, [pc, #464]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	4b72      	ldr	r3, [pc, #456]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	4a71      	ldr	r2, [pc, #452]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d015      	beq.n	8001a62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff f881 	bl	8000b3c <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff f87d 	bl	8000b3c <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0c5      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	4b65      	ldr	r3, [pc, #404]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ee      	beq.n	8001a3e <HAL_RCC_OscConfig+0x33a>
 8001a60:	e014      	b.n	8001a8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff f86b 	bl	8000b3c <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff f867 	bl	8000b3c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0af      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ee      	bne.n	8001a6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d105      	bne.n	8001a9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a92:	4b56      	ldr	r3, [pc, #344]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a55      	ldr	r2, [pc, #340]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 809b 	beq.w	8001bde <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d05c      	beq.n	8001b6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d141      	bne.n	8001b40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x4ec>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff f83b 	bl	8000b3c <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff f837 	bl	8000b3c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e081      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001adc:	4b43      	ldr	r3, [pc, #268]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	019b      	lsls	r3, r3, #6
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	085b      	lsrs	r3, r3, #1
 8001b00:	3b01      	subs	r3, #1
 8001b02:	041b      	lsls	r3, r3, #16
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	061b      	lsls	r3, r3, #24
 8001b0c:	4937      	ldr	r1, [pc, #220]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b12:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <HAL_RCC_OscConfig+0x4ec>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff f810 	bl	8000b3c <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f80c 	bl	8000b3c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e056      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x41c>
 8001b3e:	e04e      	b.n	8001bde <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_RCC_OscConfig+0x4ec>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7fe fff9 	bl	8000b3c <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7fe fff5 	bl	8000b3c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e03f      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x44a>
 8001b6c:	e037      	b.n	8001bde <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e032      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <HAL_RCC_OscConfig+0x4e8>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d028      	beq.n	8001bda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d121      	bne.n	8001bda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d11a      	bne.n	8001bda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001baa:	4013      	ands	r3, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d111      	bne.n	8001bda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	085b      	lsrs	r3, r3, #1
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40007000 	.word	0x40007000
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	42470060 	.word	0x42470060

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0cc      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b68      	ldr	r3, [pc, #416]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d90c      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b65      	ldr	r3, [pc, #404]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b8      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c48:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	494d      	ldr	r1, [pc, #308]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d044      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d119      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e06f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e067      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f023 0203 	bic.w	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4934      	ldr	r1, [pc, #208]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7fe ff2a 	bl	8000b3c <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f7fe ff26 	bl	8000b3c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e04f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 020c 	and.w	r2, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1eb      	bne.n	8001cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d20c      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e032      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4916      	ldr	r1, [pc, #88]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	490e      	ldr	r1, [pc, #56]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7a:	f000 f821 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	490a      	ldr	r1, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	5ccb      	ldrb	r3, [r1, r3]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fe8a 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00
 8001db0:	40023800 	.word	0x40023800
 8001db4:	08001ff4 	.word	0x08001ff4
 8001db8:	20000004 	.word	0x20000004
 8001dbc:	20000008 	.word	0x20000008

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd8:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d00d      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x40>
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	f200 80bd 	bhi.w	8001f64 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001df2:	e0b7      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b61      	ldr	r3, [pc, #388]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001df6:	60bb      	str	r3, [r7, #8]
       break;
 8001df8:	e0b7      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfa:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001dfc:	60bb      	str	r3, [r7, #8]
      break;
 8001dfe:	e0b4      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e00:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0a:	4b5b      	ldr	r3, [pc, #364]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d04d      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e16:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e26:	f04f 0100 	mov.w	r1, #0
 8001e2a:	ea02 0800 	and.w	r8, r2, r0
 8001e2e:	ea03 0901 	and.w	r9, r3, r1
 8001e32:	4640      	mov	r0, r8
 8001e34:	4649      	mov	r1, r9
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	014b      	lsls	r3, r1, #5
 8001e40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e44:	0142      	lsls	r2, r0, #5
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	ebb0 0008 	subs.w	r0, r0, r8
 8001e4e:	eb61 0109 	sbc.w	r1, r1, r9
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	018b      	lsls	r3, r1, #6
 8001e5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e60:	0182      	lsls	r2, r0, #6
 8001e62:	1a12      	subs	r2, r2, r0
 8001e64:	eb63 0301 	sbc.w	r3, r3, r1
 8001e68:	f04f 0000 	mov.w	r0, #0
 8001e6c:	f04f 0100 	mov.w	r1, #0
 8001e70:	00d9      	lsls	r1, r3, #3
 8001e72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e76:	00d0      	lsls	r0, r2, #3
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	eb12 0208 	adds.w	r2, r2, r8
 8001e80:	eb43 0309 	adc.w	r3, r3, r9
 8001e84:	f04f 0000 	mov.w	r0, #0
 8001e88:	f04f 0100 	mov.w	r1, #0
 8001e8c:	0259      	lsls	r1, r3, #9
 8001e8e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e92:	0250      	lsls	r0, r2, #9
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	f7fe f990 	bl	80001c8 <__aeabi_uldivmod>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4613      	mov	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e04a      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	099b      	lsrs	r3, r3, #6
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ec2:	f04f 0100 	mov.w	r1, #0
 8001ec6:	ea02 0400 	and.w	r4, r2, r0
 8001eca:	ea03 0501 	and.w	r5, r3, r1
 8001ece:	4620      	mov	r0, r4
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	014b      	lsls	r3, r1, #5
 8001edc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ee0:	0142      	lsls	r2, r0, #5
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	1b00      	subs	r0, r0, r4
 8001ee8:	eb61 0105 	sbc.w	r1, r1, r5
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	018b      	lsls	r3, r1, #6
 8001ef6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001efa:	0182      	lsls	r2, r0, #6
 8001efc:	1a12      	subs	r2, r2, r0
 8001efe:	eb63 0301 	sbc.w	r3, r3, r1
 8001f02:	f04f 0000 	mov.w	r0, #0
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	00d9      	lsls	r1, r3, #3
 8001f0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f10:	00d0      	lsls	r0, r2, #3
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	1912      	adds	r2, r2, r4
 8001f18:	eb45 0303 	adc.w	r3, r5, r3
 8001f1c:	f04f 0000 	mov.w	r0, #0
 8001f20:	f04f 0100 	mov.w	r1, #0
 8001f24:	0299      	lsls	r1, r3, #10
 8001f26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f2a:	0290      	lsls	r0, r2, #10
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4610      	mov	r0, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	f7fe f944 	bl	80001c8 <__aeabi_uldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4613      	mov	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	0c1b      	lsrs	r3, r3, #16
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	3301      	adds	r3, #1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	60bb      	str	r3, [r7, #8]
      break;
 8001f62:	e002      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f66:	60bb      	str	r3, [r7, #8]
      break;
 8001f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	00f42400 	.word	0x00f42400
 8001f80:	007a1200 	.word	0x007a1200

08001f84 <__libc_init_array>:
 8001f84:	b570      	push	{r4, r5, r6, lr}
 8001f86:	4d0d      	ldr	r5, [pc, #52]	; (8001fbc <__libc_init_array+0x38>)
 8001f88:	4c0d      	ldr	r4, [pc, #52]	; (8001fc0 <__libc_init_array+0x3c>)
 8001f8a:	1b64      	subs	r4, r4, r5
 8001f8c:	10a4      	asrs	r4, r4, #2
 8001f8e:	2600      	movs	r6, #0
 8001f90:	42a6      	cmp	r6, r4
 8001f92:	d109      	bne.n	8001fa8 <__libc_init_array+0x24>
 8001f94:	4d0b      	ldr	r5, [pc, #44]	; (8001fc4 <__libc_init_array+0x40>)
 8001f96:	4c0c      	ldr	r4, [pc, #48]	; (8001fc8 <__libc_init_array+0x44>)
 8001f98:	f000 f820 	bl	8001fdc <_init>
 8001f9c:	1b64      	subs	r4, r4, r5
 8001f9e:	10a4      	asrs	r4, r4, #2
 8001fa0:	2600      	movs	r6, #0
 8001fa2:	42a6      	cmp	r6, r4
 8001fa4:	d105      	bne.n	8001fb2 <__libc_init_array+0x2e>
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
 8001fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fac:	4798      	blx	r3
 8001fae:	3601      	adds	r6, #1
 8001fb0:	e7ee      	b.n	8001f90 <__libc_init_array+0xc>
 8001fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fb6:	4798      	blx	r3
 8001fb8:	3601      	adds	r6, #1
 8001fba:	e7f2      	b.n	8001fa2 <__libc_init_array+0x1e>
 8001fbc:	08002014 	.word	0x08002014
 8001fc0:	08002014 	.word	0x08002014
 8001fc4:	08002014 	.word	0x08002014
 8001fc8:	08002018 	.word	0x08002018

08001fcc <memset>:
 8001fcc:	4402      	add	r2, r0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d100      	bne.n	8001fd6 <memset+0xa>
 8001fd4:	4770      	bx	lr
 8001fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8001fda:	e7f9      	b.n	8001fd0 <memset+0x4>

08001fdc <_init>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	bf00      	nop
 8001fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe2:	bc08      	pop	{r3}
 8001fe4:	469e      	mov	lr, r3
 8001fe6:	4770      	bx	lr

08001fe8 <_fini>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	bf00      	nop
 8001fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fee:	bc08      	pop	{r3}
 8001ff0:	469e      	mov	lr, r3
 8001ff2:	4770      	bx	lr
