
006Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ae4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001c6c  08001c6c  00011c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c7c  08001c7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001c7c  08001c7c  00011c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c84  08001c84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c84  08001c84  00011c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c88  08001c88  00011c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001c98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001c98  00020074  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097f3  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000151b  00000000  00000000  00029829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002ad48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  0002b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002064a  00000000  00000000  0002beb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a91  00000000  00000000  0004c4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7f19  00000000  00000000  00055f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011dea4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002584  00000000  00000000  0011def8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001c54 	.word	0x08001c54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001c54 	.word	0x08001c54

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96c 	b.w	80004b8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	468e      	mov	lr, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	f040 8082 	bne.w	800030e <__udivmoddi4+0x116>
 800020a:	428a      	cmp	r2, r1
 800020c:	4617      	mov	r7, r2
 800020e:	d946      	bls.n	800029e <__udivmoddi4+0xa6>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x32>
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa05 f302 	lsl.w	r3, r5, r2
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	4097      	lsls	r7, r2
 8000224:	ea41 0e03 	orr.w	lr, r1, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbe fcf8 	udiv	ip, lr, r8
 8000234:	b2b9      	uxth	r1, r7
 8000236:	fb08 ee1c 	mls	lr, r8, ip, lr
 800023a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800023e:	fb0c f001 	mul.w	r0, ip, r1
 8000242:	4298      	cmp	r0, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800024c:	f080 8116 	bcs.w	800047c <__udivmoddi4+0x284>
 8000250:	4298      	cmp	r0, r3
 8000252:	f240 8113 	bls.w	800047c <__udivmoddi4+0x284>
 8000256:	f1ac 0c02 	sub.w	ip, ip, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a1b      	subs	r3, r3, r0
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f101 	mul.w	r1, r0, r1
 8000270:	42a1      	cmp	r1, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x90>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8101 	bcs.w	8000480 <__udivmoddi4+0x288>
 800027e:	42a1      	cmp	r1, r4
 8000280:	f240 80fe 	bls.w	8000480 <__udivmoddi4+0x288>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	1a64      	subs	r4, r4, r1
 800028a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40d4      	lsrs	r4, r2
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d14f      	bne.n	800034a <__udivmoddi4+0x152>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2101      	movs	r1, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c25      	lsrs	r5, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	197d      	adds	r5, r7, r5
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	f200 80e7 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 80002da:	4684      	mov	ip, r0
 80002dc:	1aed      	subs	r5, r5, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb5 f0fe 	udiv	r0, r5, lr
 80002e4:	fb0e 5510 	mls	r5, lr, r0, r5
 80002e8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d7 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7c0      	b.n	8000290 <__udivmoddi4+0x98>
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80af 	beq.w	8000476 <__udivmoddi4+0x27e>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d14b      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0x13e>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80b7 	bhi.w	80004a4 <__udivmoddi4+0x2ac>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0303 	sbc.w	r3, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	469e      	mov	lr, r3
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0aa      	beq.n	800029a <__udivmoddi4+0xa2>
 8000344:	e9c6 4e00 	strd	r4, lr, [r6]
 8000348:	e7a7      	b.n	800029a <__udivmoddi4+0xa2>
 800034a:	f1c2 0c20 	rsb	ip, r2, #32
 800034e:	fa01 f302 	lsl.w	r3, r1, r2
 8000352:	4097      	lsls	r7, r2
 8000354:	fa20 f00c 	lsr.w	r0, r0, ip
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000360:	4318      	orrs	r0, r3
 8000362:	fbbc f1fe 	udiv	r1, ip, lr
 8000366:	0c05      	lsrs	r5, r0, #16
 8000368:	fb0e cc11 	mls	ip, lr, r1, ip
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000374:	fb01 f308 	mul.w	r3, r1, r8
 8000378:	42ab      	cmp	r3, r5
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	197d      	adds	r5, r7, r5
 8000382:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000386:	f080 808b 	bcs.w	80004a0 <__udivmoddi4+0x2a8>
 800038a:	42ab      	cmp	r3, r5
 800038c:	f240 8088 	bls.w	80004a0 <__udivmoddi4+0x2a8>
 8000390:	3902      	subs	r1, #2
 8000392:	443d      	add	r5, r7
 8000394:	1aeb      	subs	r3, r5, r3
 8000396:	b285      	uxth	r5, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	197d      	adds	r5, r7, r5
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d271      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d96f      	bls.n	8000498 <__udivmoddi4+0x2a0>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c1 0c20 	rsb	ip, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 f70c 	lsr.w	r7, r2, ip
 80003ce:	431f      	orrs	r7, r3
 80003d0:	fa20 f40c 	lsr.w	r4, r0, ip
 80003d4:	fa05 f301 	lsl.w	r3, r5, r1
 80003d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003dc:	fa25 f50c 	lsr.w	r5, r5, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb5 f9fe 	udiv	r9, r5, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 5519 	mls	r5, lr, r9, r5
 80003f0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80003f4:	fb09 fa08 	mul.w	sl, r9, r8
 80003f8:	45aa      	cmp	sl, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	fa00 f301 	lsl.w	r3, r0, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x21e>
 8000404:	197d      	adds	r5, r7, r5
 8000406:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040a:	d247      	bcs.n	800049c <__udivmoddi4+0x2a4>
 800040c:	45aa      	cmp	sl, r5
 800040e:	d945      	bls.n	800049c <__udivmoddi4+0x2a4>
 8000410:	f1a9 0902 	sub.w	r9, r9, #2
 8000414:	443d      	add	r5, r7
 8000416:	eba5 050a 	sub.w	r5, r5, sl
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000420:	fb0e 5510 	mls	r5, lr, r0, r5
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb00 f808 	mul.w	r8, r0, r8
 800042c:	45a0      	cmp	r8, r4
 800042e:	d907      	bls.n	8000440 <__udivmoddi4+0x248>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000436:	d22d      	bcs.n	8000494 <__udivmoddi4+0x29c>
 8000438:	45a0      	cmp	r8, r4
 800043a:	d92b      	bls.n	8000494 <__udivmoddi4+0x29c>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000444:	eba4 0408 	sub.w	r4, r4, r8
 8000448:	fba0 8902 	umull	r8, r9, r0, r2
 800044c:	454c      	cmp	r4, r9
 800044e:	46c6      	mov	lr, r8
 8000450:	464d      	mov	r5, r9
 8000452:	d319      	bcc.n	8000488 <__udivmoddi4+0x290>
 8000454:	d016      	beq.n	8000484 <__udivmoddi4+0x28c>
 8000456:	b15e      	cbz	r6, 8000470 <__udivmoddi4+0x278>
 8000458:	ebb3 020e 	subs.w	r2, r3, lr
 800045c:	eb64 0405 	sbc.w	r4, r4, r5
 8000460:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000464:	40ca      	lsrs	r2, r1
 8000466:	ea4c 0202 	orr.w	r2, ip, r2
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c6 2400 	strd	r2, r4, [r6]
 8000470:	2100      	movs	r1, #0
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e70e      	b.n	800029a <__udivmoddi4+0xa2>
 800047c:	46ac      	mov	ip, r5
 800047e:	e6ed      	b.n	800025c <__udivmoddi4+0x64>
 8000480:	4618      	mov	r0, r3
 8000482:	e701      	b.n	8000288 <__udivmoddi4+0x90>
 8000484:	4543      	cmp	r3, r8
 8000486:	d2e6      	bcs.n	8000456 <__udivmoddi4+0x25e>
 8000488:	ebb8 0e02 	subs.w	lr, r8, r2
 800048c:	eb69 0507 	sbc.w	r5, r9, r7
 8000490:	3801      	subs	r0, #1
 8000492:	e7e0      	b.n	8000456 <__udivmoddi4+0x25e>
 8000494:	4628      	mov	r0, r5
 8000496:	e7d3      	b.n	8000440 <__udivmoddi4+0x248>
 8000498:	4660      	mov	r0, ip
 800049a:	e78f      	b.n	80003bc <__udivmoddi4+0x1c4>
 800049c:	4681      	mov	r9, r0
 800049e:	e7ba      	b.n	8000416 <__udivmoddi4+0x21e>
 80004a0:	4661      	mov	r1, ip
 80004a2:	e777      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e74b      	b.n	8000340 <__udivmoddi4+0x148>
 80004a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ac:	443d      	add	r5, r7
 80004ae:	e715      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	443c      	add	r4, r7
 80004b4:	e726      	b.n	8000304 <__udivmoddi4+0x10c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <main>:

/************************************************************************************
 *                             MAIN                                                 *
 ************************************************************************************/

int main(void){
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0


	// This should be the first function to be called
	HAL_Init();
 80004c0:	f000 f968 	bl	8000794 <HAL_Init>

	// Config. the clock
	SystemClock_Config(SYS_CLOCK_FREQ_50_MHZ);
 80004c4:	2032      	movs	r0, #50	; 0x32
 80004c6:	f000 f861 	bl	800058c <SystemClock_Config>

	// Init GPIO LED Pin
	LED_Init();
 80004ca:	f000 f827 	bl	800051c <LED_Init>

	// Init. timer 6
	TIMER6_Init();
 80004ce:	f000 f80b 	bl	80004e8 <TIMER6_Init>

	// Start timer
	HAL_TIM_Base_Start_IT(&timer6_handle);
 80004d2:	4802      	ldr	r0, [pc, #8]	; (80004dc <main+0x20>)
 80004d4:	f001 f950 	bl	8001778 <HAL_TIM_Base_Start_IT>

	for(;;){
 80004d8:	e7fe      	b.n	80004d8 <main+0x1c>
 80004da:	bf00      	nop
 80004dc:	20000028 	.word	0x20000028

080004e0 <Error_handler>:
 *                             FUNCTIONS                                            *
 ************************************************************************************/



void Error_handler(void){
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
	while(1);
 80004e4:	e7fe      	b.n	80004e4 <Error_handler+0x4>
	...

080004e8 <TIMER6_Init>:
}

void TIMER6_Init(void){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	timer6_handle.Instance = TIM6;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <TIMER6_Init+0x2c>)
 80004ee:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <TIMER6_Init+0x30>)
 80004f0:	601a      	str	r2, [r3, #0]
	timer6_handle.Init.Prescaler = 9;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <TIMER6_Init+0x2c>)
 80004f4:	2209      	movs	r2, #9
 80004f6:	605a      	str	r2, [r3, #4]
	timer6_handle.Init.Period = 50 - 1;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <TIMER6_Init+0x2c>)
 80004fa:	2231      	movs	r2, #49	; 0x31
 80004fc:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&timer6_handle) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <TIMER6_Init+0x2c>)
 8000500:	f001 f8ea 	bl	80016d8 <HAL_TIM_Base_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <TIMER6_Init+0x26>
		Error_handler();
 800050a:	f7ff ffe9 	bl	80004e0 <Error_handler>

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000028 	.word	0x20000028
 8000518:	40001000 	.word	0x40001000

0800051c <LED_Init>:

void LED_Init(void){
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef ledgpio;
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <LED_Init+0x48>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <LED_Init+0x48>)
 800052c:	f043 0308 	orr.w	r3, r3, #8
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <LED_Init+0x48>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0308 	and.w	r3, r3, #8
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	60bb      	str	r3, [r7, #8]
	ledgpio.Pin = GPIO_PIN_12;
 8000542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000546:	607b      	str	r3, [r7, #4]
	ledgpio.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
	ledgpio.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800054c:	2301      	movs	r3, #1
 800054e:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOD, &ledgpio);
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	4619      	mov	r1, r3
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <LED_Init+0x4c>)
 8000556:	f000 fac1 	bl	8000adc <HAL_GPIO_Init>

}
 800055a:	bf00      	nop
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800
 8000568:	40020c00 	.word	0x40020c00

0800056c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	// Toggle the LED
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800057a:	f000 fc49 	bl	8000e10 <HAL_GPIO_TogglePin>
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40020c00 	.word	0x40020c00

0800058c <SystemClock_Config>:

void SystemClock_Config(uint8_t clock_freq){
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint32_t FLatency;

	// 1. Init. the oscillator
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000596:	2302      	movs	r3, #2
 8000598:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 800059a:	2301      	movs	r3, #1
 800059c:	62bb      	str	r3, [r7, #40]	; 0x28
	osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059e:	2310      	movs	r3, #16
 80005a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a6:	2300      	movs	r3, #0
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLQ = 2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48

	// 2. Init. the clock
	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |\
 80005ae:	230f      	movs	r3, #15
 80005b0:	60bb      	str	r3, [r7, #8]
			 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	60fb      	str	r3, [r7, #12]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005be:	617b      	str	r3, [r7, #20]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	61bb      	str	r3, [r7, #24]

	// 3. Configurations that depend on clock_freq
	switch(clock_freq){
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2ba8      	cmp	r3, #168	; 0xa8
 80005ca:	d028      	beq.n	800061e <SystemClock_Config+0x92>
 80005cc:	2ba8      	cmp	r3, #168	; 0xa8
 80005ce:	dc56      	bgt.n	800067e <SystemClock_Config+0xf2>
 80005d0:	2b78      	cmp	r3, #120	; 0x78
 80005d2:	d018      	beq.n	8000606 <SystemClock_Config+0x7a>
 80005d4:	2b78      	cmp	r3, #120	; 0x78
 80005d6:	dc52      	bgt.n	800067e <SystemClock_Config+0xf2>
 80005d8:	2b32      	cmp	r3, #50	; 0x32
 80005da:	d002      	beq.n	80005e2 <SystemClock_Config+0x56>
 80005dc:	2b54      	cmp	r3, #84	; 0x54
 80005de:	d009      	beq.n	80005f4 <SystemClock_Config+0x68>
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
			FLatency = FLASH_LATENCY_5;
			break;
		default:
			return;
 80005e0:	e04d      	b.n	800067e <SystemClock_Config+0xf2>
			osc_init.PLL.PLLM = 16;
 80005e2:	2310      	movs	r3, #16
 80005e4:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 100;
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	647b      	str	r3, [r7, #68]	; 0x44
			FLatency = FLASH_LATENCY_1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 80005f2:	e021      	b.n	8000638 <SystemClock_Config+0xac>
			osc_init.PLL.PLLM = 16;
 80005f4:	2310      	movs	r3, #16
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 168;
 80005f8:	23a8      	movs	r3, #168	; 0xa8
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
			FLatency = FLASH_LATENCY_2;
 8000600:	2302      	movs	r3, #2
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 8000604:	e018      	b.n	8000638 <SystemClock_Config+0xac>
			osc_init.PLL.PLLM = 16;
 8000606:	2310      	movs	r3, #16
 8000608:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 240;
 800060a:	23f0      	movs	r3, #240	; 0xf0
 800060c:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000612:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000616:	617b      	str	r3, [r7, #20]
			FLatency = FLASH_LATENCY_3;
 8000618:	2303      	movs	r3, #3
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 800061c:	e00c      	b.n	8000638 <SystemClock_Config+0xac>
			osc_init.PLL.PLLM = 16;
 800061e:	2310      	movs	r3, #16
 8000620:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 336;
 8000622:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 800062c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000630:	617b      	str	r3, [r7, #20]
			FLatency = FLASH_LATENCY_5;
 8000632:	2305      	movs	r3, #5
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 8000636:	bf00      	nop
	}

	// 4. Call the APIs
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fc01 	bl	8000e44 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc0>
		Error_handler();
 8000648:	f7ff ff4a 	bl	80004e0 <Error_handler>
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fe6e 	bl	8001334 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xd6>
		Error_handler();
 800065e:	f7ff ff3f 	bl	80004e0 <Error_handler>

	// 5. Systick
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000662:	f001 f82f 	bl	80016c4 <HAL_RCC_GetHCLKFreq>
 8000666:	4603      	mov	r3, r0
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <SystemClock_Config+0xfc>)
 800066a:	fba2 2303 	umull	r2, r3, r2, r3
 800066e:	099b      	lsrs	r3, r3, #6
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f9fe 	bl	8000a72 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000676:	2004      	movs	r0, #4
 8000678:	f000 fa08 	bl	8000a8c <HAL_SYSTICK_CLKSourceConfig>
 800067c:	e000      	b.n	8000680 <SystemClock_Config+0xf4>
			return;
 800067e:	bf00      	nop

}
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	10624dd3 	.word	0x10624dd3

0800068c <SysTick_Handler>:

#include "stm32f4xx_hal.h"

extern TIM_HandleTypeDef timer6_handle;

void SysTick_Handler(void){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000690:	f000 f8d2 	bl	8000838 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000694:	f000 fa16 	bl	8000ac4 <HAL_SYSTICK_IRQHandler>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&timer6_handle);
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <TIM6_DAC_IRQHandler+0x10>)
 80006a2:	f001 f8d7 	bl	8001854 <HAL_TIM_IRQHandler>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000028 	.word	0x20000028

080006b0 <HAL_MspInit>:
 */

#include "stm32f4xx_hal.h"

/* Low Level processor Init. Called by HAL_Init()*/
void HAL_MspInit(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 f9a7 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x07 << 16;  // En: usg fault, memory fault and bus fault
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <HAL_MspInit+0x40>)
 80006bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006be:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <HAL_MspInit+0x40>)
 80006c0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80006c4:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	f06f 000b 	mvn.w	r0, #11
 80006ce:	f000 f9a6 	bl	8000a1e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	f06f 000a 	mvn.w	r0, #10
 80006da:	f000 f9a0 	bl	8000a1e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	f06f 0009 	mvn.w	r0, #9
 80006e6:	f000 f99a 	bl	8000a1e <HAL_NVIC_SetPriority>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

	// 1. Enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <HAL_TIM_Base_MspInit+0x3c>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <HAL_TIM_Base_MspInit+0x3c>)
 8000706:	f043 0310 	orr.w	r3, r3, #16
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_TIM_Base_MspInit+0x3c>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 0310 	and.w	r3, r3, #16
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]

	// 2. Enable IRQ of timer 6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000718:	2036      	movs	r0, #54	; 0x36
 800071a:	f000 f99c 	bl	8000a56 <HAL_NVIC_EnableIRQ>

	// 3. Set up the priority
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	210f      	movs	r1, #15
 8000722:	2036      	movs	r0, #54	; 0x36
 8000724:	f000 f97b 	bl	8000a1e <HAL_NVIC_SetPriority>

}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800

08000734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000778 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000746:	490e      	ldr	r1, [pc, #56]	; (8000780 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000748:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800075c:	4c0b      	ldr	r4, [pc, #44]	; (800078c <LoopFillZerobss+0x26>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800076a:	f7ff ffe3 	bl	8000734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800076e:	f001 fa4d 	bl	8001c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000772:	f7ff fea3 	bl	80004bc <main>
  bx  lr    
 8000776:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000780:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000784:	08001c8c 	.word	0x08001c8c
  ldr r2, =_sbss
 8000788:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800078c:	20000074 	.word	0x20000074

08000790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC_IRQHandler>
	...

08000794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_Init+0x40>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0d      	ldr	r2, [pc, #52]	; (80007d4 <HAL_Init+0x40>)
 800079e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <HAL_Init+0x40>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <HAL_Init+0x40>)
 80007aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_Init+0x40>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <HAL_Init+0x40>)
 80007b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 f923 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 f808 	bl	80007d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c8:	f7ff ff72 	bl	80006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023c00 	.word	0x40023c00

080007d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_InitTick+0x54>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_InitTick+0x58>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f93b 	bl	8000a72 <HAL_SYSTICK_Config>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e00e      	b.n	8000824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d80a      	bhi.n	8000822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800080c:	2200      	movs	r2, #0
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000814:	f000 f903 	bl	8000a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000818:	4a06      	ldr	r2, [pc, #24]	; (8000834 <HAL_InitTick+0x5c>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	e000      	b.n	8000824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000000 	.word	0x20000000
 8000830:	20000008 	.word	0x20000008
 8000834:	20000004 	.word	0x20000004

08000838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_IncTick+0x1c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x20>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4413      	add	r3, r2
 8000848:	4a03      	ldr	r2, [pc, #12]	; (8000858 <HAL_IncTick+0x20>)
 800084a:	6013      	str	r3, [r2, #0]
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	20000008 	.word	0x20000008
 8000858:	20000070 	.word	0x20000070

0800085c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;
 8000860:	4b02      	ldr	r3, [pc, #8]	; (800086c <HAL_GetTick+0x10>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	20000070 	.word	0x20000070

08000870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_GetPriorityGrouping+0x18>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	f003 0307 	and.w	r3, r3, #7
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	db0b      	blt.n	80008fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 021f 	and.w	r2, r3, #31
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <__NVIC_EnableIRQ+0x34>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	095b      	lsrs	r3, r3, #5
 80008f4:	2001      	movs	r0, #1
 80008f6:	fa00 f202 	lsl.w	r2, r0, r2
 80008fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	e000e100 	.word	0xe000e100

0800090c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db0a      	blt.n	8000936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	490c      	ldr	r1, [pc, #48]	; (8000958 <__NVIC_SetPriority+0x4c>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	0112      	lsls	r2, r2, #4
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	440b      	add	r3, r1
 8000930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000934:	e00a      	b.n	800094c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <__NVIC_SetPriority+0x50>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	3b04      	subs	r3, #4
 8000944:	0112      	lsls	r2, r2, #4
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	440b      	add	r3, r1
 800094a:	761a      	strb	r2, [r3, #24]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000960:	b480      	push	{r7}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f1c3 0307 	rsb	r3, r3, #7
 800097a:	2b04      	cmp	r3, #4
 800097c:	bf28      	it	cs
 800097e:	2304      	movcs	r3, #4
 8000980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3304      	adds	r3, #4
 8000986:	2b06      	cmp	r3, #6
 8000988:	d902      	bls.n	8000990 <NVIC_EncodePriority+0x30>
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3b03      	subs	r3, #3
 800098e:	e000      	b.n	8000992 <NVIC_EncodePriority+0x32>
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43da      	mvns	r2, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43d9      	mvns	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	4313      	orrs	r3, r2
         );
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3724      	adds	r7, #36	; 0x24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d4:	d301      	bcc.n	80009da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00f      	b.n	80009fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <SysTick_Config+0x40>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e2:	210f      	movs	r1, #15
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e8:	f7ff ff90 	bl	800090c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SysTick_Config+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SysTick_Config+0x40>)
 80009f4:	2207      	movs	r2, #7
 80009f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	e000e010 	.word	0xe000e010

08000a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff2d 	bl	8000870 <__NVIC_SetPriorityGrouping>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a30:	f7ff ff42 	bl	80008b8 <__NVIC_GetPriorityGrouping>
 8000a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff ff90 	bl	8000960 <NVIC_EncodePriority>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff5f 	bl	800090c <__NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff35 	bl	80008d4 <__NVIC_EnableIRQ>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffa2 	bl	80009c4 <SysTick_Config>
 8000a80:	4603      	mov	r3, r0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	d106      	bne.n	8000aa8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000aa6:	e005      	b.n	8000ab4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000aae:	f023 0304 	bic.w	r3, r3, #4
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ac8:	f000 f802 	bl	8000ad0 <HAL_SYSTICK_Callback>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
 8000af6:	e16b      	b.n	8000dd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000af8:	2201      	movs	r2, #1
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	f040 815a 	bne.w	8000dca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d005      	beq.n	8000b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d130      	bne.n	8000b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2203      	movs	r2, #3
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	4013      	ands	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	68da      	ldr	r2, [r3, #12]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b64:	2201      	movs	r2, #1
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	091b      	lsrs	r3, r3, #4
 8000b7a:	f003 0201 	and.w	r2, r3, #1
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d017      	beq.n	8000bcc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	689a      	ldr	r2, [r3, #8]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d123      	bne.n	8000c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	08da      	lsrs	r2, r3, #3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3208      	adds	r2, #8
 8000be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	f003 0307 	and.w	r3, r3, #7
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	220f      	movs	r2, #15
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	691a      	ldr	r2, [r3, #16]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	08da      	lsrs	r2, r3, #3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3208      	adds	r2, #8
 8000c1a:	69b9      	ldr	r1, [r7, #24]
 8000c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0203 	and.w	r2, r3, #3
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f000 80b4 	beq.w	8000dca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b5f      	ldr	r3, [pc, #380]	; (8000de4 <HAL_GPIO_Init+0x308>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a5e      	ldr	r2, [pc, #376]	; (8000de4 <HAL_GPIO_Init+0x308>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b5c      	ldr	r3, [pc, #368]	; (8000de4 <HAL_GPIO_Init+0x308>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c7e:	4a5a      	ldr	r2, [pc, #360]	; (8000de8 <HAL_GPIO_Init+0x30c>)
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	3302      	adds	r3, #2
 8000c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	220f      	movs	r2, #15
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a51      	ldr	r2, [pc, #324]	; (8000dec <HAL_GPIO_Init+0x310>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d02b      	beq.n	8000d02 <HAL_GPIO_Init+0x226>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a50      	ldr	r2, [pc, #320]	; (8000df0 <HAL_GPIO_Init+0x314>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d025      	beq.n	8000cfe <HAL_GPIO_Init+0x222>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a4f      	ldr	r2, [pc, #316]	; (8000df4 <HAL_GPIO_Init+0x318>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d01f      	beq.n	8000cfa <HAL_GPIO_Init+0x21e>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a4e      	ldr	r2, [pc, #312]	; (8000df8 <HAL_GPIO_Init+0x31c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d019      	beq.n	8000cf6 <HAL_GPIO_Init+0x21a>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a4d      	ldr	r2, [pc, #308]	; (8000dfc <HAL_GPIO_Init+0x320>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d013      	beq.n	8000cf2 <HAL_GPIO_Init+0x216>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a4c      	ldr	r2, [pc, #304]	; (8000e00 <HAL_GPIO_Init+0x324>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d00d      	beq.n	8000cee <HAL_GPIO_Init+0x212>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a4b      	ldr	r2, [pc, #300]	; (8000e04 <HAL_GPIO_Init+0x328>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d007      	beq.n	8000cea <HAL_GPIO_Init+0x20e>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a4a      	ldr	r2, [pc, #296]	; (8000e08 <HAL_GPIO_Init+0x32c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d101      	bne.n	8000ce6 <HAL_GPIO_Init+0x20a>
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	e00e      	b.n	8000d04 <HAL_GPIO_Init+0x228>
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	e00c      	b.n	8000d04 <HAL_GPIO_Init+0x228>
 8000cea:	2306      	movs	r3, #6
 8000cec:	e00a      	b.n	8000d04 <HAL_GPIO_Init+0x228>
 8000cee:	2305      	movs	r3, #5
 8000cf0:	e008      	b.n	8000d04 <HAL_GPIO_Init+0x228>
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	e006      	b.n	8000d04 <HAL_GPIO_Init+0x228>
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e004      	b.n	8000d04 <HAL_GPIO_Init+0x228>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e002      	b.n	8000d04 <HAL_GPIO_Init+0x228>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <HAL_GPIO_Init+0x228>
 8000d02:	2300      	movs	r3, #0
 8000d04:	69fa      	ldr	r2, [r7, #28]
 8000d06:	f002 0203 	and.w	r2, r2, #3
 8000d0a:	0092      	lsls	r2, r2, #2
 8000d0c:	4093      	lsls	r3, r2
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d14:	4934      	ldr	r1, [pc, #208]	; (8000de8 <HAL_GPIO_Init+0x30c>)
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d22:	4b3a      	ldr	r3, [pc, #232]	; (8000e0c <HAL_GPIO_Init+0x330>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d46:	4a31      	ldr	r2, [pc, #196]	; (8000e0c <HAL_GPIO_Init+0x330>)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <HAL_GPIO_Init+0x330>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d70:	4a26      	ldr	r2, [pc, #152]	; (8000e0c <HAL_GPIO_Init+0x330>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <HAL_GPIO_Init+0x330>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <HAL_GPIO_Init+0x330>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <HAL_GPIO_Init+0x330>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dc4:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <HAL_GPIO_Init+0x330>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	61fb      	str	r3, [r7, #28]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	f67f ae90 	bls.w	8000af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40013800 	.word	0x40013800
 8000dec:	40020000 	.word	0x40020000
 8000df0:	40020400 	.word	0x40020400
 8000df4:	40020800 	.word	0x40020800
 8000df8:	40020c00 	.word	0x40020c00
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40021400 	.word	0x40021400
 8000e04:	40021800 	.word	0x40021800
 8000e08:	40021c00 	.word	0x40021c00
 8000e0c:	40013c00 	.word	0x40013c00

08000e10 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4013      	ands	r3, r2
 8000e28:	041a      	lsls	r2, r3, #16
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43d9      	mvns	r1, r3
 8000e2e:	887b      	ldrh	r3, [r7, #2]
 8000e30:	400b      	ands	r3, r1
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	619a      	str	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
	...

08000e44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e264      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d075      	beq.n	8000f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e62:	4ba3      	ldr	r3, [pc, #652]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f003 030c 	and.w	r3, r3, #12
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	d00c      	beq.n	8000e88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e6e:	4ba0      	ldr	r3, [pc, #640]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e76:	2b08      	cmp	r3, #8
 8000e78:	d112      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e7a:	4b9d      	ldr	r3, [pc, #628]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e86:	d10b      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e88:	4b99      	ldr	r3, [pc, #612]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d05b      	beq.n	8000f4c <HAL_RCC_OscConfig+0x108>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d157      	bne.n	8000f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e23f      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea8:	d106      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x74>
 8000eaa:	4b91      	ldr	r3, [pc, #580]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a90      	ldr	r2, [pc, #576]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e01d      	b.n	8000ef4 <HAL_RCC_OscConfig+0xb0>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ec0:	d10c      	bne.n	8000edc <HAL_RCC_OscConfig+0x98>
 8000ec2:	4b8b      	ldr	r3, [pc, #556]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a8a      	ldr	r2, [pc, #552]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	4b88      	ldr	r3, [pc, #544]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a87      	ldr	r2, [pc, #540]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e00b      	b.n	8000ef4 <HAL_RCC_OscConfig+0xb0>
 8000edc:	4b84      	ldr	r3, [pc, #528]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a83      	ldr	r2, [pc, #524]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b81      	ldr	r3, [pc, #516]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a80      	ldr	r2, [pc, #512]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d013      	beq.n	8000f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efc:	f7ff fcae 	bl	800085c <HAL_GetTick>
 8000f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f02:	e008      	b.n	8000f16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f04:	f7ff fcaa 	bl	800085c <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b64      	cmp	r3, #100	; 0x64
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e204      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f16:	4b76      	ldr	r3, [pc, #472]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f0      	beq.n	8000f04 <HAL_RCC_OscConfig+0xc0>
 8000f22:	e014      	b.n	8000f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fc9a 	bl	800085c <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fc96 	bl	800085c <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b64      	cmp	r3, #100	; 0x64
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e1f0      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3e:	4b6c      	ldr	r3, [pc, #432]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f0      	bne.n	8000f2c <HAL_RCC_OscConfig+0xe8>
 8000f4a:	e000      	b.n	8000f4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d063      	beq.n	8001022 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f5a:	4b65      	ldr	r3, [pc, #404]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00b      	beq.n	8000f7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f66:	4b62      	ldr	r3, [pc, #392]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d11c      	bne.n	8000fac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f72:	4b5f      	ldr	r3, [pc, #380]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d116      	bne.n	8000fac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f7e:	4b5c      	ldr	r3, [pc, #368]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d005      	beq.n	8000f96 <HAL_RCC_OscConfig+0x152>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d001      	beq.n	8000f96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e1c4      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f96:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4952      	ldr	r1, [pc, #328]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000faa:	e03a      	b.n	8001022 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d020      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb4:	4b4f      	ldr	r3, [pc, #316]	; (80010f4 <HAL_RCC_OscConfig+0x2b0>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fba:	f7ff fc4f 	bl	800085c <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc2:	f7ff fc4b 	bl	800085c <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e1a5      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd4:	4b46      	ldr	r3, [pc, #280]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f0      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe0:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4940      	ldr	r1, [pc, #256]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	600b      	str	r3, [r1, #0]
 8000ff4:	e015      	b.n	8001022 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff6:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <HAL_RCC_OscConfig+0x2b0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fc2e 	bl	800085c <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001004:	f7ff fc2a 	bl	800085c <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e184      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001016:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b00      	cmp	r3, #0
 800102c:	d030      	beq.n	8001090 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d016      	beq.n	8001064 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <HAL_RCC_OscConfig+0x2b4>)
 8001038:	2201      	movs	r2, #1
 800103a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800103c:	f7ff fc0e 	bl	800085c <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001044:	f7ff fc0a 	bl	800085c <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e164      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8001058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f0      	beq.n	8001044 <HAL_RCC_OscConfig+0x200>
 8001062:	e015      	b.n	8001090 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_RCC_OscConfig+0x2b4>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106a:	f7ff fbf7 	bl	800085c <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001072:	f7ff fbf3 	bl	800085c <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e14d      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 8001086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1f0      	bne.n	8001072 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80a0 	beq.w	80011de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10f      	bne.n	80010ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ca:	2301      	movs	r3, #1
 80010cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_RCC_OscConfig+0x2b8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d121      	bne.n	800111e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_RCC_OscConfig+0x2b8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_RCC_OscConfig+0x2b8>)
 80010e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fbb9 	bl	800085c <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ec:	e011      	b.n	8001112 <HAL_RCC_OscConfig+0x2ce>
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	42470000 	.word	0x42470000
 80010f8:	42470e80 	.word	0x42470e80
 80010fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001100:	f7ff fbac 	bl	800085c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e106      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001112:	4b85      	ldr	r3, [pc, #532]	; (8001328 <HAL_RCC_OscConfig+0x4e4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d106      	bne.n	8001134 <HAL_RCC_OscConfig+0x2f0>
 8001126:	4b81      	ldr	r3, [pc, #516]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 8001128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800112a:	4a80      	ldr	r2, [pc, #512]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6713      	str	r3, [r2, #112]	; 0x70
 8001132:	e01c      	b.n	800116e <HAL_RCC_OscConfig+0x32a>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b05      	cmp	r3, #5
 800113a:	d10c      	bne.n	8001156 <HAL_RCC_OscConfig+0x312>
 800113c:	4b7b      	ldr	r3, [pc, #492]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 800113e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001140:	4a7a      	ldr	r2, [pc, #488]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6713      	str	r3, [r2, #112]	; 0x70
 8001148:	4b78      	ldr	r3, [pc, #480]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 800114a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800114c:	4a77      	ldr	r2, [pc, #476]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6713      	str	r3, [r2, #112]	; 0x70
 8001154:	e00b      	b.n	800116e <HAL_RCC_OscConfig+0x32a>
 8001156:	4b75      	ldr	r3, [pc, #468]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 8001158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800115a:	4a74      	ldr	r2, [pc, #464]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	6713      	str	r3, [r2, #112]	; 0x70
 8001162:	4b72      	ldr	r3, [pc, #456]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 8001164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001166:	4a71      	ldr	r2, [pc, #452]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 8001168:	f023 0304 	bic.w	r3, r3, #4
 800116c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d015      	beq.n	80011a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001176:	f7ff fb71 	bl	800085c <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800117c:	e00a      	b.n	8001194 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800117e:	f7ff fb6d 	bl	800085c <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	f241 3288 	movw	r2, #5000	; 0x1388
 800118c:	4293      	cmp	r3, r2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e0c5      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001194:	4b65      	ldr	r3, [pc, #404]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 8001196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0ee      	beq.n	800117e <HAL_RCC_OscConfig+0x33a>
 80011a0:	e014      	b.n	80011cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a2:	f7ff fb5b 	bl	800085c <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a8:	e00a      	b.n	80011c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f7ff fb57 	bl	800085c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e0af      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c0:	4b5a      	ldr	r3, [pc, #360]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 80011c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1ee      	bne.n	80011aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d105      	bne.n	80011de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d2:	4b56      	ldr	r3, [pc, #344]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a55      	ldr	r2, [pc, #340]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 80011d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 809b 	beq.w	800131e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011e8:	4b50      	ldr	r3, [pc, #320]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d05c      	beq.n	80012ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d141      	bne.n	8001280 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011fc:	4b4c      	ldr	r3, [pc, #304]	; (8001330 <HAL_RCC_OscConfig+0x4ec>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001202:	f7ff fb2b 	bl	800085c <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800120a:	f7ff fb27 	bl	800085c <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e081      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800121c:	4b43      	ldr	r3, [pc, #268]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f0      	bne.n	800120a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69da      	ldr	r2, [r3, #28]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	019b      	lsls	r3, r3, #6
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123e:	085b      	lsrs	r3, r3, #1
 8001240:	3b01      	subs	r3, #1
 8001242:	041b      	lsls	r3, r3, #16
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	061b      	lsls	r3, r3, #24
 800124c:	4937      	ldr	r1, [pc, #220]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001252:	4b37      	ldr	r3, [pc, #220]	; (8001330 <HAL_RCC_OscConfig+0x4ec>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fb00 	bl	800085c <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001260:	f7ff fafc 	bl	800085c <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e056      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001272:	4b2e      	ldr	r3, [pc, #184]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x41c>
 800127e:	e04e      	b.n	800131e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_RCC_OscConfig+0x4ec>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001286:	f7ff fae9 	bl	800085c <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800128e:	f7ff fae5 	bl	800085c <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e03f      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a0:	4b22      	ldr	r3, [pc, #136]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f0      	bne.n	800128e <HAL_RCC_OscConfig+0x44a>
 80012ac:	e037      	b.n	800131e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e032      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_RCC_OscConfig+0x4e8>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d028      	beq.n	800131a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d121      	bne.n	800131a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d11a      	bne.n	800131a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012ea:	4013      	ands	r3, r2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d111      	bne.n	800131a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	085b      	lsrs	r3, r3, #1
 8001302:	3b01      	subs	r3, #1
 8001304:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001306:	429a      	cmp	r2, r3
 8001308:	d107      	bne.n	800131a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001316:	429a      	cmp	r2, r3
 8001318:	d001      	beq.n	800131e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40007000 	.word	0x40007000
 800132c:	40023800 	.word	0x40023800
 8001330:	42470060 	.word	0x42470060

08001334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0cc      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001348:	4b68      	ldr	r3, [pc, #416]	; (80014ec <HAL_RCC_ClockConfig+0x1b8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d90c      	bls.n	8001370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001356:	4b65      	ldr	r3, [pc, #404]	; (80014ec <HAL_RCC_ClockConfig+0x1b8>)
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135e:	4b63      	ldr	r3, [pc, #396]	; (80014ec <HAL_RCC_ClockConfig+0x1b8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d001      	beq.n	8001370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0b8      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d020      	beq.n	80013be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001388:	4b59      	ldr	r3, [pc, #356]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	4a58      	ldr	r2, [pc, #352]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001392:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013a0:	4b53      	ldr	r3, [pc, #332]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	4a52      	ldr	r2, [pc, #328]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ac:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	494d      	ldr	r1, [pc, #308]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d044      	beq.n	8001454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d107      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d2:	4b47      	ldr	r3, [pc, #284]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d119      	bne.n	8001412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e07f      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d003      	beq.n	80013f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d107      	bne.n	8001402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f2:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d109      	bne.n	8001412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e06f      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e067      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001412:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f023 0203 	bic.w	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4934      	ldr	r1, [pc, #208]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001420:	4313      	orrs	r3, r2
 8001422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001424:	f7ff fa1a 	bl	800085c <HAL_GetTick>
 8001428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142a:	e00a      	b.n	8001442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142c:	f7ff fa16 	bl	800085c <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f241 3288 	movw	r2, #5000	; 0x1388
 800143a:	4293      	cmp	r3, r2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e04f      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 020c 	and.w	r2, r3, #12
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	429a      	cmp	r2, r3
 8001452:	d1eb      	bne.n	800142c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001454:	4b25      	ldr	r3, [pc, #148]	; (80014ec <HAL_RCC_ClockConfig+0x1b8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d20c      	bcs.n	800147c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <HAL_RCC_ClockConfig+0x1b8>)
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_RCC_ClockConfig+0x1b8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d001      	beq.n	800147c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e032      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d008      	beq.n	800149a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4916      	ldr	r1, [pc, #88]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	4313      	orrs	r3, r2
 8001498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d009      	beq.n	80014ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	490e      	ldr	r1, [pc, #56]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ba:	f000 f821 	bl	8001500 <HAL_RCC_GetSysClockFreq>
 80014be:	4602      	mov	r2, r0
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	490a      	ldr	r1, [pc, #40]	; (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	5ccb      	ldrb	r3, [r1, r3]
 80014ce:	fa22 f303 	lsr.w	r3, r2, r3
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_RCC_ClockConfig+0x1c8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f97c 	bl	80007d8 <HAL_InitTick>

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023c00 	.word	0x40023c00
 80014f0:	40023800 	.word	0x40023800
 80014f4:	08001c6c 	.word	0x08001c6c
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000004 	.word	0x20000004

08001500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001500:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	2300      	movs	r3, #0
 8001512:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001518:	4b67      	ldr	r3, [pc, #412]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b08      	cmp	r3, #8
 8001522:	d00d      	beq.n	8001540 <HAL_RCC_GetSysClockFreq+0x40>
 8001524:	2b08      	cmp	r3, #8
 8001526:	f200 80bd 	bhi.w	80016a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <HAL_RCC_GetSysClockFreq+0x34>
 800152e:	2b04      	cmp	r3, #4
 8001530:	d003      	beq.n	800153a <HAL_RCC_GetSysClockFreq+0x3a>
 8001532:	e0b7      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001534:	4b61      	ldr	r3, [pc, #388]	; (80016bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001536:	60bb      	str	r3, [r7, #8]
       break;
 8001538:	e0b7      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800153a:	4b61      	ldr	r3, [pc, #388]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800153c:	60bb      	str	r3, [r7, #8]
      break;
 800153e:	e0b4      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001540:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001548:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800154a:	4b5b      	ldr	r3, [pc, #364]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d04d      	beq.n	80015f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001556:	4b58      	ldr	r3, [pc, #352]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	099b      	lsrs	r3, r3, #6
 800155c:	461a      	mov	r2, r3
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001566:	f04f 0100 	mov.w	r1, #0
 800156a:	ea02 0800 	and.w	r8, r2, r0
 800156e:	ea03 0901 	and.w	r9, r3, r1
 8001572:	4640      	mov	r0, r8
 8001574:	4649      	mov	r1, r9
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	014b      	lsls	r3, r1, #5
 8001580:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001584:	0142      	lsls	r2, r0, #5
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	ebb0 0008 	subs.w	r0, r0, r8
 800158e:	eb61 0109 	sbc.w	r1, r1, r9
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	018b      	lsls	r3, r1, #6
 800159c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015a0:	0182      	lsls	r2, r0, #6
 80015a2:	1a12      	subs	r2, r2, r0
 80015a4:	eb63 0301 	sbc.w	r3, r3, r1
 80015a8:	f04f 0000 	mov.w	r0, #0
 80015ac:	f04f 0100 	mov.w	r1, #0
 80015b0:	00d9      	lsls	r1, r3, #3
 80015b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015b6:	00d0      	lsls	r0, r2, #3
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	eb12 0208 	adds.w	r2, r2, r8
 80015c0:	eb43 0309 	adc.w	r3, r3, r9
 80015c4:	f04f 0000 	mov.w	r0, #0
 80015c8:	f04f 0100 	mov.w	r1, #0
 80015cc:	0259      	lsls	r1, r3, #9
 80015ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80015d2:	0250      	lsls	r0, r2, #9
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	461a      	mov	r2, r3
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	f7fe fdf0 	bl	80001c8 <__aeabi_uldivmod>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4613      	mov	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	e04a      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	099b      	lsrs	r3, r3, #6
 80015f8:	461a      	mov	r2, r3
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001602:	f04f 0100 	mov.w	r1, #0
 8001606:	ea02 0400 	and.w	r4, r2, r0
 800160a:	ea03 0501 	and.w	r5, r3, r1
 800160e:	4620      	mov	r0, r4
 8001610:	4629      	mov	r1, r5
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	014b      	lsls	r3, r1, #5
 800161c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001620:	0142      	lsls	r2, r0, #5
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	1b00      	subs	r0, r0, r4
 8001628:	eb61 0105 	sbc.w	r1, r1, r5
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	018b      	lsls	r3, r1, #6
 8001636:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800163a:	0182      	lsls	r2, r0, #6
 800163c:	1a12      	subs	r2, r2, r0
 800163e:	eb63 0301 	sbc.w	r3, r3, r1
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	00d9      	lsls	r1, r3, #3
 800164c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001650:	00d0      	lsls	r0, r2, #3
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	1912      	adds	r2, r2, r4
 8001658:	eb45 0303 	adc.w	r3, r5, r3
 800165c:	f04f 0000 	mov.w	r0, #0
 8001660:	f04f 0100 	mov.w	r1, #0
 8001664:	0299      	lsls	r1, r3, #10
 8001666:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800166a:	0290      	lsls	r0, r2, #10
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	461a      	mov	r2, r3
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	f7fe fda4 	bl	80001c8 <__aeabi_uldivmod>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4613      	mov	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	0c1b      	lsrs	r3, r3, #16
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	3301      	adds	r3, #1
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a0:	60bb      	str	r3, [r7, #8]
      break;
 80016a2:	e002      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80016a6:	60bb      	str	r3, [r7, #8]
      break;
 80016a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016aa:	68bb      	ldr	r3, [r7, #8]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	00f42400 	.word	0x00f42400
 80016c0:	007a1200 	.word	0x007a1200

080016c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c8:	4b02      	ldr	r3, [pc, #8]	; (80016d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000000 	.word	0x20000000

080016d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e041      	b.n	800176e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d106      	bne.n	8001704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7fe fff8 	bl	80006f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2202      	movs	r2, #2
 8001708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3304      	adds	r3, #4
 8001714:	4619      	mov	r1, r3
 8001716:	4610      	mov	r0, r2
 8001718:	f000 f9c8 	bl	8001aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d001      	beq.n	8001790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e04e      	b.n	800182e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a22      	ldr	r2, [pc, #136]	; (8001838 <HAL_TIM_Base_Start_IT+0xc0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d022      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x80>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ba:	d01d      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x80>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1e      	ldr	r2, [pc, #120]	; (800183c <HAL_TIM_Base_Start_IT+0xc4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d018      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x80>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_TIM_Base_Start_IT+0xc8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d013      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x80>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_TIM_Base_Start_IT+0xcc>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00e      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x80>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a1a      	ldr	r2, [pc, #104]	; (8001848 <HAL_TIM_Base_Start_IT+0xd0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d009      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x80>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a18      	ldr	r2, [pc, #96]	; (800184c <HAL_TIM_Base_Start_IT+0xd4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d004      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x80>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_TIM_Base_Start_IT+0xd8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d111      	bne.n	800181c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b06      	cmp	r3, #6
 8001808:	d010      	beq.n	800182c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0201 	orr.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800181a:	e007      	b.n	800182c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	40010000 	.word	0x40010000
 800183c:	40000400 	.word	0x40000400
 8001840:	40000800 	.word	0x40000800
 8001844:	40000c00 	.word	0x40000c00
 8001848:	40010400 	.word	0x40010400
 800184c:	40014000 	.word	0x40014000
 8001850:	40001800 	.word	0x40001800

08001854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b02      	cmp	r3, #2
 8001868:	d122      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b02      	cmp	r3, #2
 8001876:	d11b      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f06f 0202 	mvn.w	r2, #2
 8001880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f8ed 	bl	8001a76 <HAL_TIM_IC_CaptureCallback>
 800189c:	e005      	b.n	80018aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f8e0 	bl	8001a64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f8ef 	bl	8001a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d122      	bne.n	8001904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d11b      	bne.n	8001904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f06f 0204 	mvn.w	r2, #4
 80018d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2202      	movs	r2, #2
 80018da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f8c3 	bl	8001a76 <HAL_TIM_IC_CaptureCallback>
 80018f0:	e005      	b.n	80018fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f8b6 	bl	8001a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f8c5 	bl	8001a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b08      	cmp	r3, #8
 8001910:	d122      	bne.n	8001958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b08      	cmp	r3, #8
 800191e:	d11b      	bne.n	8001958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0208 	mvn.w	r2, #8
 8001928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2204      	movs	r2, #4
 800192e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f899 	bl	8001a76 <HAL_TIM_IC_CaptureCallback>
 8001944:	e005      	b.n	8001952 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f88c 	bl	8001a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f89b 	bl	8001a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b10      	cmp	r3, #16
 8001964:	d122      	bne.n	80019ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	2b10      	cmp	r3, #16
 8001972:	d11b      	bne.n	80019ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f06f 0210 	mvn.w	r2, #16
 800197c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2208      	movs	r2, #8
 8001982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f86f 	bl	8001a76 <HAL_TIM_IC_CaptureCallback>
 8001998:	e005      	b.n	80019a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f862 	bl	8001a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f871 	bl	8001a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d10e      	bne.n	80019d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d107      	bne.n	80019d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0201 	mvn.w	r2, #1
 80019d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7fe fdca 	bl	800056c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e2:	2b80      	cmp	r3, #128	; 0x80
 80019e4:	d10e      	bne.n	8001a04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f0:	2b80      	cmp	r3, #128	; 0x80
 80019f2:	d107      	bne.n	8001a04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f8fb 	bl	8001bfa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0e:	2b40      	cmp	r3, #64	; 0x40
 8001a10:	d10e      	bne.n	8001a30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a1c:	2b40      	cmp	r3, #64	; 0x40
 8001a1e:	d107      	bne.n	8001a30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f835 	bl	8001a9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f003 0320 	and.w	r3, r3, #32
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	d10e      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	d107      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 0220 	mvn.w	r2, #32
 8001a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f8c6 	bl	8001be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a3f      	ldr	r2, [pc, #252]	; (8001bbc <TIM_Base_SetConfig+0x110>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d013      	beq.n	8001aec <TIM_Base_SetConfig+0x40>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aca:	d00f      	beq.n	8001aec <TIM_Base_SetConfig+0x40>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a3c      	ldr	r2, [pc, #240]	; (8001bc0 <TIM_Base_SetConfig+0x114>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00b      	beq.n	8001aec <TIM_Base_SetConfig+0x40>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a3b      	ldr	r2, [pc, #236]	; (8001bc4 <TIM_Base_SetConfig+0x118>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d007      	beq.n	8001aec <TIM_Base_SetConfig+0x40>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a3a      	ldr	r2, [pc, #232]	; (8001bc8 <TIM_Base_SetConfig+0x11c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d003      	beq.n	8001aec <TIM_Base_SetConfig+0x40>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a39      	ldr	r2, [pc, #228]	; (8001bcc <TIM_Base_SetConfig+0x120>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d108      	bne.n	8001afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a2e      	ldr	r2, [pc, #184]	; (8001bbc <TIM_Base_SetConfig+0x110>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d02b      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0c:	d027      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a2b      	ldr	r2, [pc, #172]	; (8001bc0 <TIM_Base_SetConfig+0x114>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d023      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a2a      	ldr	r2, [pc, #168]	; (8001bc4 <TIM_Base_SetConfig+0x118>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d01f      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <TIM_Base_SetConfig+0x11c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d01b      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a28      	ldr	r2, [pc, #160]	; (8001bcc <TIM_Base_SetConfig+0x120>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d017      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <TIM_Base_SetConfig+0x124>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a26      	ldr	r2, [pc, #152]	; (8001bd4 <TIM_Base_SetConfig+0x128>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00f      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a25      	ldr	r2, [pc, #148]	; (8001bd8 <TIM_Base_SetConfig+0x12c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00b      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a24      	ldr	r2, [pc, #144]	; (8001bdc <TIM_Base_SetConfig+0x130>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <TIM_Base_SetConfig+0x134>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d003      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a22      	ldr	r2, [pc, #136]	; (8001be4 <TIM_Base_SetConfig+0x138>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d108      	bne.n	8001b70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <TIM_Base_SetConfig+0x110>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d003      	beq.n	8001ba4 <TIM_Base_SetConfig+0xf8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <TIM_Base_SetConfig+0x120>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d103      	bne.n	8001bac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	615a      	str	r2, [r3, #20]
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40000800 	.word	0x40000800
 8001bc8:	40000c00 	.word	0x40000c00
 8001bcc:	40010400 	.word	0x40010400
 8001bd0:	40014000 	.word	0x40014000
 8001bd4:	40014400 	.word	0x40014400
 8001bd8:	40014800 	.word	0x40014800
 8001bdc:	40001800 	.word	0x40001800
 8001be0:	40001c00 	.word	0x40001c00
 8001be4:	40002000 	.word	0x40002000

08001be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <__libc_init_array>:
 8001c0c:	b570      	push	{r4, r5, r6, lr}
 8001c0e:	4d0d      	ldr	r5, [pc, #52]	; (8001c44 <__libc_init_array+0x38>)
 8001c10:	4c0d      	ldr	r4, [pc, #52]	; (8001c48 <__libc_init_array+0x3c>)
 8001c12:	1b64      	subs	r4, r4, r5
 8001c14:	10a4      	asrs	r4, r4, #2
 8001c16:	2600      	movs	r6, #0
 8001c18:	42a6      	cmp	r6, r4
 8001c1a:	d109      	bne.n	8001c30 <__libc_init_array+0x24>
 8001c1c:	4d0b      	ldr	r5, [pc, #44]	; (8001c4c <__libc_init_array+0x40>)
 8001c1e:	4c0c      	ldr	r4, [pc, #48]	; (8001c50 <__libc_init_array+0x44>)
 8001c20:	f000 f818 	bl	8001c54 <_init>
 8001c24:	1b64      	subs	r4, r4, r5
 8001c26:	10a4      	asrs	r4, r4, #2
 8001c28:	2600      	movs	r6, #0
 8001c2a:	42a6      	cmp	r6, r4
 8001c2c:	d105      	bne.n	8001c3a <__libc_init_array+0x2e>
 8001c2e:	bd70      	pop	{r4, r5, r6, pc}
 8001c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c34:	4798      	blx	r3
 8001c36:	3601      	adds	r6, #1
 8001c38:	e7ee      	b.n	8001c18 <__libc_init_array+0xc>
 8001c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c3e:	4798      	blx	r3
 8001c40:	3601      	adds	r6, #1
 8001c42:	e7f2      	b.n	8001c2a <__libc_init_array+0x1e>
 8001c44:	08001c84 	.word	0x08001c84
 8001c48:	08001c84 	.word	0x08001c84
 8001c4c:	08001c84 	.word	0x08001c84
 8001c50:	08001c88 	.word	0x08001c88

08001c54 <_init>:
 8001c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c56:	bf00      	nop
 8001c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c5a:	bc08      	pop	{r3}
 8001c5c:	469e      	mov	lr, r3
 8001c5e:	4770      	bx	lr

08001c60 <_fini>:
 8001c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c62:	bf00      	nop
 8001c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c66:	bc08      	pop	{r3}
 8001c68:	469e      	mov	lr, r3
 8001c6a:	4770      	bx	lr
