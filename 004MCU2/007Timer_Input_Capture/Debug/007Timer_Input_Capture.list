
007Timer_Input_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08005790  08005790  00015790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b8c  08005b8c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005b8c  08005b8c  00015b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b94  08005b94  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b94  08005b94  00015b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b98  08005b98  00015b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  200001dc  08005d78  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08005d78  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b189  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ab  00000000  00000000  0002b38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002cd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002d720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002171e  00000000  00000000  0002e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a847  00000000  00000000  0004f756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c985b  00000000  00000000  00059f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001237f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038e0  00000000  00000000  0012384c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005774 	.word	0x08005774

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08005774 	.word	0x08005774

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96c 	b.w	8000e98 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	468e      	mov	lr, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	f040 8082 	bne.w	8000cee <__udivmoddi4+0x116>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4617      	mov	r7, r2
 8000bee:	d946      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x32>
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa05 f302 	lsl.w	r3, r5, r2
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	4097      	lsls	r7, r2
 8000c04:	ea41 0e03 	orr.w	lr, r1, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbbe fcf8 	udiv	ip, lr, r8
 8000c14:	b2b9      	uxth	r1, r7
 8000c16:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000c1a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c1e:	fb0c f001 	mul.w	r0, ip, r1
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8000c2c:	f080 8116 	bcs.w	8000e5c <__udivmoddi4+0x284>
 8000c30:	4298      	cmp	r0, r3
 8000c32:	f240 8113 	bls.w	8000e5c <__udivmoddi4+0x284>
 8000c36:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	1a1b      	subs	r3, r3, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f101 	mul.w	r1, r0, r1
 8000c50:	42a1      	cmp	r1, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8101 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c5e:	42a1      	cmp	r1, r4
 8000c60:	f240 80fe 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	1a64      	subs	r4, r4, r1
 8000c6a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40d4      	lsrs	r4, r2
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d14f      	bne.n	8000d2a <__udivmoddi4+0x152>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2101      	movs	r1, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c25      	lsrs	r5, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	42ab      	cmp	r3, r5
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	197d      	adds	r5, r7, r5
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	42ab      	cmp	r3, r5
 8000cb6:	f200 80e7 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1aed      	subs	r5, r5, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000cc4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000cc8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d7 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7c0      	b.n	8000c70 <__udivmoddi4+0x98>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80af 	beq.w	8000e56 <__udivmoddi4+0x27e>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	fab3 f183 	clz	r1, r3
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	d14b      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d302      	bcc.n	8000d16 <__udivmoddi4+0x13e>
 8000d10:	4282      	cmp	r2, r0
 8000d12:	f200 80b7 	bhi.w	8000e84 <__udivmoddi4+0x2ac>
 8000d16:	1a84      	subs	r4, r0, r2
 8000d18:	eb65 0303 	sbc.w	r3, r5, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	469e      	mov	lr, r3
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d0aa      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000d24:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d28:	e7a7      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000d2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000d2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d32:	4097      	lsls	r7, r2
 8000d34:	fa20 f00c 	lsr.w	r0, r0, ip
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000d40:	4318      	orrs	r0, r3
 8000d42:	fbbc f1fe 	udiv	r1, ip, lr
 8000d46:	0c05      	lsrs	r5, r0, #16
 8000d48:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d54:	fb01 f308 	mul.w	r3, r1, r8
 8000d58:	42ab      	cmp	r3, r5
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	197d      	adds	r5, r7, r5
 8000d62:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000d66:	f080 808b 	bcs.w	8000e80 <__udivmoddi4+0x2a8>
 8000d6a:	42ab      	cmp	r3, r5
 8000d6c:	f240 8088 	bls.w	8000e80 <__udivmoddi4+0x2a8>
 8000d70:	3902      	subs	r1, #2
 8000d72:	443d      	add	r5, r7
 8000d74:	1aeb      	subs	r3, r5, r3
 8000d76:	b285      	uxth	r5, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	42ab      	cmp	r3, r5
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	197d      	adds	r5, r7, r5
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d271      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000d94:	42ab      	cmp	r3, r5
 8000d96:	d96f      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aeb      	subs	r3, r5, r3
 8000d9e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c1 0c20 	rsb	ip, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 f70c 	lsr.w	r7, r2, ip
 8000dae:	431f      	orrs	r7, r3
 8000db0:	fa20 f40c 	lsr.w	r4, r0, ip
 8000db4:	fa05 f301 	lsl.w	r3, r5, r1
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	fa25 f50c 	lsr.w	r5, r5, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	0c23      	lsrs	r3, r4, #16
 8000dc4:	fbb5 f9fe 	udiv	r9, r5, lr
 8000dc8:	fa1f f887 	uxth.w	r8, r7
 8000dcc:	fb0e 5519 	mls	r5, lr, r9, r5
 8000dd0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000dd4:	fb09 fa08 	mul.w	sl, r9, r8
 8000dd8:	45aa      	cmp	sl, r5
 8000dda:	fa02 f201 	lsl.w	r2, r2, r1
 8000dde:	fa00 f301 	lsl.w	r3, r0, r1
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x21e>
 8000de4:	197d      	adds	r5, r7, r5
 8000de6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dea:	d247      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000dec:	45aa      	cmp	sl, r5
 8000dee:	d945      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000df0:	f1a9 0902 	sub.w	r9, r9, #2
 8000df4:	443d      	add	r5, r7
 8000df6:	eba5 050a 	sub.w	r5, r5, sl
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e00:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e08:	fb00 f808 	mul.w	r8, r0, r8
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	d907      	bls.n	8000e20 <__udivmoddi4+0x248>
 8000e10:	193c      	adds	r4, r7, r4
 8000e12:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e16:	d22d      	bcs.n	8000e74 <__udivmoddi4+0x29c>
 8000e18:	45a0      	cmp	r8, r4
 8000e1a:	d92b      	bls.n	8000e74 <__udivmoddi4+0x29c>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	443c      	add	r4, r7
 8000e20:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2c:	454c      	cmp	r4, r9
 8000e2e:	46c6      	mov	lr, r8
 8000e30:	464d      	mov	r5, r9
 8000e32:	d319      	bcc.n	8000e68 <__udivmoddi4+0x290>
 8000e34:	d016      	beq.n	8000e64 <__udivmoddi4+0x28c>
 8000e36:	b15e      	cbz	r6, 8000e50 <__udivmoddi4+0x278>
 8000e38:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3c:	eb64 0405 	sbc.w	r4, r4, r5
 8000e40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e44:	40ca      	lsrs	r2, r1
 8000e46:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4a:	40cc      	lsrs	r4, r1
 8000e4c:	e9c6 2400 	strd	r2, r4, [r6]
 8000e50:	2100      	movs	r1, #0
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	4631      	mov	r1, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e70e      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e5c:	46ac      	mov	ip, r5
 8000e5e:	e6ed      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e60:	4618      	mov	r0, r3
 8000e62:	e701      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e64:	4543      	cmp	r3, r8
 8000e66:	d2e6      	bcs.n	8000e36 <__udivmoddi4+0x25e>
 8000e68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e6c:	eb69 0507 	sbc.w	r5, r9, r7
 8000e70:	3801      	subs	r0, #1
 8000e72:	e7e0      	b.n	8000e36 <__udivmoddi4+0x25e>
 8000e74:	4628      	mov	r0, r5
 8000e76:	e7d3      	b.n	8000e20 <__udivmoddi4+0x248>
 8000e78:	4660      	mov	r0, ip
 8000e7a:	e78f      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e7c:	4681      	mov	r9, r0
 8000e7e:	e7ba      	b.n	8000df6 <__udivmoddi4+0x21e>
 8000e80:	4661      	mov	r1, ip
 8000e82:	e777      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e74b      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e8c:	443d      	add	r5, r7
 8000e8e:	e715      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e90:	3802      	subs	r0, #2
 8000e92:	443c      	add	r4, r7
 8000e94:	e726      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <SysTick_Handler>:

#include "stm32f4xx_hal.h"

extern TIM_HandleTypeDef timer2_handle;

void SysTick_Handler(void){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000ea0:	f000 fb00 	bl	80014a4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000ea4:	f000 fc44 	bl	8001730 <HAL_SYSTICK_IRQHandler>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&timer2_handle);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <TIM2_IRQHandler+0x10>)
 8000eb2:	f001 fbb3 	bl	800261c <HAL_TIM_IRQHandler>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000210 	.word	0x20000210

08000ec0 <main>:

/************************************************************************************
 *                             MAIN                                                 *
 ************************************************************************************/

int main(void){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
	double timer2_count_period;
	double input_signal_period;
	double input_signal_frequency;

	// This should be the first function to be called
	HAL_Init();
 8000ec6:	f000 fa9b 	bl	8001400 <HAL_Init>

	// Config. the clock
	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000eca:	2032      	movs	r0, #50	; 0x32
 8000ecc:	f000 f8b0 	bl	8001030 <SystemClock_Config_HSE>



	// Init Timer 2
	TIMER2_Init();
 8000ed0:	f000 f87c 	bl	8000fcc <TIMER2_Init>

	HAL_TIM_IC_Start_IT(&timer2_handle,TIM_CHANNEL_1);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4822      	ldr	r0, [pc, #136]	; (8000f60 <main+0xa0>)
 8000ed8:	f001 fa7e 	bl	80023d8 <HAL_TIM_IC_Start_IT>

	// LSE_Configuration(); // This doesn't work for discovery board because lse crystal is not connected


	// Get timer2 frequency and period
	timer2_count_freq = (HAL_RCC_GetPCLK1Freq() * 2) / (timer2_handle.Init.Prescaler + 1);
 8000edc:	f001 fa18 	bl	8002310 <HAL_RCC_GetPCLK1Freq>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	005a      	lsls	r2, r3, #1
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <main+0xa0>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fb08 	bl	8000504 <__aeabi_ui2d>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	timer2_count_period = 1 / timer2_count_freq;
 8000efc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f00:	f04f 0000 	mov.w	r0, #0
 8000f04:	4917      	ldr	r1, [pc, #92]	; (8000f64 <main+0xa4>)
 8000f06:	f7ff fca1 	bl	800084c <__aeabi_ddiv>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	e9c7 2306 	strd	r2, r3, [r7, #24]



	for(;;){

		if(capture_done == TRUE){
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <main+0xa8>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d1fb      	bne.n	8000f12 <main+0x52>
			capture_done = FALSE;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <main+0xa8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
			input_signal_delta = (capture_buffer[1] - capture_buffer[0]);
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <main+0xac>)
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <main+0xac>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
			input_signal_period = input_signal_delta * timer2_count_period;
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	f7ff fae9 	bl	8000504 <__aeabi_ui2d>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f3a:	f7ff fb5d 	bl	80005f8 <__aeabi_dmul>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	e9c7 2302 	strd	r2, r3, [r7, #8]
			input_signal_frequency = 1 / input_signal_period;
 8000f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f4a:	f04f 0000 	mov.w	r0, #0
 8000f4e:	4905      	ldr	r1, [pc, #20]	; (8000f64 <main+0xa4>)
 8000f50:	f7ff fc7c 	bl	800084c <__aeabi_ddiv>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	e9c7 2300 	strd	r2, r3, [r7]
		if(capture_done == TRUE){
 8000f5c:	e7d9      	b.n	8000f12 <main+0x52>
 8000f5e:	bf00      	nop
 8000f60:	20000210 	.word	0x20000210
 8000f64:	3ff00000 	.word	0x3ff00000
 8000f68:	20000201 	.word	0x20000201
 8000f6c:	200001f8 	.word	0x200001f8

08000f70 <HAL_TIM_IC_CaptureCallback>:

/************************************************************************************
 *                             FUNCTIONS                                            *
 ************************************************************************************/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	capture_buffer[0] = capture_buffer[1];
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000f7e:	6013      	str	r3, [r2, #0]
	capture_buffer[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000f88:	6053      	str	r3, [r2, #4]

	if (capture_buffer_state != CAPTURE_BUFFER_FULL)
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d005      	beq.n	8000f9e <HAL_TIM_IC_CaptureCallback+0x2e>
		capture_buffer_state++;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000f9c:	701a      	strb	r2, [r3, #0]
	if (capture_buffer_state == CAPTURE_BUFFER_FULL)
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d102      	bne.n	8000fac <HAL_TIM_IC_CaptureCallback+0x3c>
		capture_done = TRUE;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]

}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200001f8 	.word	0x200001f8
 8000fbc:	20000200 	.word	0x20000200
 8000fc0:	20000201 	.word	0x20000201

08000fc4 <Error_handler>:


void Error_handler(void){
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
	while(1);
 8000fc8:	e7fe      	b.n	8000fc8 <Error_handler+0x4>
	...

08000fcc <TIMER2_Init>:
}

void TIMER2_Init(void){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

	// 1. Initialize the TIMER Input Capture Time base
	timer2_handle.Instance = TIM2;
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <TIMER2_Init+0x60>)
 8000fd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd8:	601a      	str	r2, [r3, #0]
	timer2_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <TIMER2_Init+0x60>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
	timer2_handle.Init.Period = 0xFFFFFFFF;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <TIMER2_Init+0x60>)
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe6:	60da      	str	r2, [r3, #12]
	timer2_handle.Init.Prescaler = 0;
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <TIMER2_Init+0x60>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]

	if(HAL_TIM_IC_Init(&timer2_handle) != HAL_OK)
 8000fee:	480f      	ldr	r0, [pc, #60]	; (800102c <TIMER2_Init+0x60>)
 8000ff0:	f001 f9a2 	bl	8002338 <HAL_TIM_IC_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <TIMER2_Init+0x32>
		Error_handler();
 8000ffa:	f7ff ffe3 	bl	8000fc4 <Error_handler>

	// 2. Configure Input Channel of the Timer
	TIM_IC_InitTypeDef timer2IC_Config;
	timer2IC_Config.ICFilter = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
	timer2IC_Config.ICPolarity = TIM_ICPOLARITY_RISING;
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
	timer2IC_Config.ICPrescaler = TIM_ICPSC_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
	timer2IC_Config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800100a:	2301      	movs	r3, #1
 800100c:	607b      	str	r3, [r7, #4]

	if(HAL_TIM_IC_ConfigChannel(&timer2_handle, &timer2IC_Config, TIM_CHANNEL_1) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <TIMER2_Init+0x60>)
 8001016:	f001 fc09 	bl	800282c <HAL_TIM_IC_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <TIMER2_Init+0x58>
		Error_handler();
 8001020:	f7ff ffd0 	bl	8000fc4 <Error_handler>

}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000210 	.word	0x20000210

08001030 <SystemClock_Config_HSE>:
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

}

void SystemClock_Config_HSE(uint8_t clock_freq){
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	; 0x50
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint32_t FLatency;

	// 1. Init. the oscillator
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 800103a:	2303      	movs	r3, #3
 800103c:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_ON;
 800103e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001042:	623b      	str	r3, [r7, #32]
	osc_init.HSIState = RCC_HSI_ON;
 8001044:	2301      	movs	r3, #1
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8001048:	2302      	movs	r3, #2
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001050:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLQ = 2;
 8001052:	2302      	movs	r3, #2
 8001054:	64bb      	str	r3, [r7, #72]	; 0x48

	// 2. Init. the clock
	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |\
 8001056:	230f      	movs	r3, #15
 8001058:	60bb      	str	r3, [r7, #8]
			 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105a:	2302      	movs	r3, #2
 800105c:	60fb      	str	r3, [r7, #12]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001066:	617b      	str	r3, [r7, #20]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106c:	61bb      	str	r3, [r7, #24]

	// 3. Configurations that depend on clock_freq
	switch(clock_freq){
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b78      	cmp	r3, #120	; 0x78
 8001072:	d018      	beq.n	80010a6 <SystemClock_Config_HSE+0x76>
 8001074:	2b78      	cmp	r3, #120	; 0x78
 8001076:	dc45      	bgt.n	8001104 <SystemClock_Config_HSE+0xd4>
 8001078:	2b32      	cmp	r3, #50	; 0x32
 800107a:	d002      	beq.n	8001082 <SystemClock_Config_HSE+0x52>
 800107c:	2b54      	cmp	r3, #84	; 0x54
 800107e:	d009      	beq.n	8001094 <SystemClock_Config_HSE+0x64>
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
			FLatency = FLASH_LATENCY_3;
			break;
		default:
			return;
 8001080:	e040      	b.n	8001104 <SystemClock_Config_HSE+0xd4>
			osc_init.PLL.PLLM = 8;
 8001082:	2308      	movs	r3, #8
 8001084:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 100;
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	647b      	str	r3, [r7, #68]	; 0x44
			FLatency = FLASH_LATENCY_1;
 800108e:	2301      	movs	r3, #1
 8001090:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 8001092:	e014      	b.n	80010be <SystemClock_Config_HSE+0x8e>
			osc_init.PLL.PLLM = 8;
 8001094:	2308      	movs	r3, #8
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 168;
 8001098:	23a8      	movs	r3, #168	; 0xa8
 800109a:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 800109c:	2302      	movs	r3, #2
 800109e:	647b      	str	r3, [r7, #68]	; 0x44
			FLatency = FLASH_LATENCY_2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 80010a4:	e00b      	b.n	80010be <SystemClock_Config_HSE+0x8e>
			osc_init.PLL.PLLM = 8;
 80010a6:	2308      	movs	r3, #8
 80010a8:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 240;
 80010aa:	23f0      	movs	r3, #240	; 0xf0
 80010ac:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	647b      	str	r3, [r7, #68]	; 0x44
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80010b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010b6:	617b      	str	r3, [r7, #20]
			FLatency = FLASH_LATENCY_3;
 80010b8:	2303      	movs	r3, #3
 80010ba:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 80010bc:	bf00      	nop
	}

	// 4. Call the APIs
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fcda 	bl	8001a7c <HAL_RCC_OscConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config_HSE+0xa2>
		Error_handler();
 80010ce:	f7ff ff79 	bl	8000fc4 <Error_handler>
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 ff47 	bl	8001f6c <HAL_RCC_ClockConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config_HSE+0xb8>
		Error_handler();
 80010e4:	f7ff ff6e 	bl	8000fc4 <Error_handler>

	// 5. Systick
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80010e8:	f001 f908 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <SystemClock_Config_HSE+0xdc>)
 80010f0:	fba2 2303 	umull	r2, r3, r2, r3
 80010f4:	099b      	lsrs	r3, r3, #6
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 faf1 	bl	80016de <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80010fc:	2004      	movs	r0, #4
 80010fe:	f000 fafb 	bl	80016f8 <HAL_SYSTICK_CLKSourceConfig>
 8001102:	e000      	b.n	8001106 <SystemClock_Config_HSE+0xd6>
			return;
 8001104:	bf00      	nop

}
 8001106:	3750      	adds	r7, #80	; 0x50
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	10624dd3 	.word	0x10624dd3

08001110 <HAL_MspInit>:
 */

#include "stm32f4xx_hal.h"

/* Low Level processor Init. Called by HAL_Init()*/
void HAL_MspInit(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 faad 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x07 << 16;  // En: usg fault, memory fault and bus fault
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <HAL_MspInit+0x40>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <HAL_MspInit+0x40>)
 8001120:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001124:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	f06f 000b 	mvn.w	r0, #11
 800112e:	f000 faac 	bl	800168a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	f06f 000a 	mvn.w	r0, #10
 800113a:	f000 faa6 	bl	800168a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	f06f 0009 	mvn.w	r0, #9
 8001146:	f000 faa0 	bl	800168a <HAL_NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim){
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	// 1. Enable the clock for timer 2 and GPIO TIMER CHANNEL PIN
	__HAL_RCC_TIM2_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_TIM_IC_MspInit+0x78>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	4a19      	ldr	r2, [pc, #100]	; (80011cc <HAL_TIM_IC_MspInit+0x78>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6413      	str	r3, [r2, #64]	; 0x40
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_TIM_IC_MspInit+0x78>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_TIM_IC_MspInit+0x78>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <HAL_TIM_IC_MspInit+0x78>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6313      	str	r3, [r2, #48]	; 0x30
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_TIM_IC_MspInit+0x78>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]

	// 2. Configure a GPIO to behave as timer2 channel 1
	GPIO_InitTypeDef tim2ch1_gpio;
	tim2ch1_gpio.Pin = GPIO_PIN_0;
 8001194:	2301      	movs	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
	tim2ch1_gpio.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
	tim2ch1_gpio.Pull = GPIO_PULLDOWN;
 800119c:	2302      	movs	r3, #2
 800119e:	61fb      	str	r3, [r7, #28]
	tim2ch1_gpio.Speed = GPIO_SPEED_MEDIUM;
 80011a0:	2301      	movs	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]
	tim2ch1_gpio.Alternate = GPIO_AF1_TIM1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &tim2ch1_gpio);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <HAL_TIM_IC_MspInit+0x7c>)
 80011b0:	f000 faca 	bl	8001748 <HAL_GPIO_Init>

	// 3. NVIC settings
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	210f      	movs	r1, #15
 80011b8:	201c      	movs	r0, #28
 80011ba:	f000 fa66 	bl	800168a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011be:	201c      	movs	r0, #28
 80011c0:	f000 fa7f 	bl	80016c2 <HAL_NVIC_EnableIRQ>

}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <ITM_SendChar+0x44>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <ITM_SendChar+0x44>)
 80011e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011e8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <ITM_SendChar+0x48>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <ITM_SendChar+0x48>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80011f6:	bf00      	nop
 80011f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f8      	beq.n	80011f8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001206:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	e000edfc 	.word	0xe000edfc
 800121c:	e0000e00 	.word	0xe0000e00

08001220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
	return 1;
 8001224:	2301      	movs	r3, #1
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <_kill>:

int _kill(int pid, int sig)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001238:	f001 fdaa 	bl	8002d90 <__errno>
 800123c:	4603      	mov	r3, r0
 800123e:	2216      	movs	r2, #22
 8001240:	601a      	str	r2, [r3, #0]
	return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_exit>:

void _exit (int status)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001256:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffe7 	bl	800122e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001260:	e7fe      	b.n	8001260 <_exit+0x12>

08001262 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e00a      	b.n	800128a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001274:	f3af 8000 	nop.w
 8001278:	4601      	mov	r1, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	60ba      	str	r2, [r7, #8]
 8001280:	b2ca      	uxtb	r2, r1
 8001282:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3301      	adds	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	429a      	cmp	r2, r3
 8001290:	dbf0      	blt.n	8001274 <_read+0x12>
	}

return len;
 8001292:	687b      	ldr	r3, [r7, #4]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	e009      	b.n	80012c2 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	60ba      	str	r2, [r7, #8]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff8c 	bl	80011d4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3301      	adds	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dbf1      	blt.n	80012ae <_write+0x12>
	}
	return len;
 80012ca:	687b      	ldr	r3, [r7, #4]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_close>:

int _close(int file)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	return -1;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012fa:	605a      	str	r2, [r3, #4]
	return 0;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <_isatty>:

int _isatty(int file)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	return 1;
 8001310:	2301      	movs	r3, #1
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
	return 0;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <_sbrk+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <_sbrk+0x60>)
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <_sbrk+0x64>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <_sbrk+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d207      	bcs.n	8001374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001364:	f001 fd14 	bl	8002d90 <__errno>
 8001368:	4603      	mov	r3, r0
 800136a:	220c      	movs	r2, #12
 800136c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001372:	e009      	b.n	8001388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <_sbrk+0x64>)
 8001384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20020000 	.word	0x20020000
 8001394:	00000400 	.word	0x00000400
 8001398:	20000204 	.word	0x20000204
 800139c:	20000270 	.word	0x20000270

080013a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013b2:	490e      	ldr	r1, [pc, #56]	; (80013ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c8:	4c0b      	ldr	r4, [pc, #44]	; (80013f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013d6:	f7ff ffe3 	bl	80013a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013da:	f001 fcdf 	bl	8002d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013de:	f7ff fd6f 	bl	8000ec0 <main>
  bx  lr    
 80013e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80013f0:	08005b9c 	.word	0x08005b9c
  ldr r2, =_sbss
 80013f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80013f8:	2000026c 	.word	0x2000026c

080013fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC_IRQHandler>
	...

08001400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <HAL_Init+0x40>)
 800140a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_Init+0x40>)
 8001416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_Init+0x40>)
 8001422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001426:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 f923 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f808 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001434:	f7ff fe6c 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023c00 	.word	0x40023c00

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x54>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x58>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f93b 	bl	80016de <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001480:	f000 f903 	bl	800168a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_InitTick+0x5c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000000 	.word	0x20000000
 800149c:	20000008 	.word	0x20000008
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_IncTick+0x1c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_IncTick+0x20>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <HAL_IncTick+0x20>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20000258 	.word	0x20000258

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <HAL_GetTick+0x10>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000258 	.word	0x20000258

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4906      	ldr	r1, [pc, #24]	; (8001574 <__NVIC_EnableIRQ+0x34>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001640:	d301      	bcc.n	8001646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001642:	2301      	movs	r3, #1
 8001644:	e00f      	b.n	8001666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <SysTick_Config+0x40>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164e:	210f      	movs	r1, #15
 8001650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001654:	f7ff ff90 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <SysTick_Config+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SysTick_Config+0x40>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff2d 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff42 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff90 	bl	80015cc <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5f 	bl	8001578 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff35 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa2 	bl	8001630 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b04      	cmp	r3, #4
 8001704:	d106      	bne.n	8001714 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001712:	e005      	b.n	8001720 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800171a:	f023 0304 	bic.w	r3, r3, #4
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001734:	f000 f802 	bl	800173c <HAL_SYSTICK_Callback>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e16b      	b.n	8001a3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001764:	2201      	movs	r2, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	429a      	cmp	r2, r3
 800177e:	f040 815a 	bne.w	8001a36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d005      	beq.n	800179a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001796:	2b02      	cmp	r3, #2
 8001798:	d130      	bne.n	80017fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 0201 	and.w	r2, r3, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b03      	cmp	r3, #3
 8001806:	d017      	beq.n	8001838 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d123      	bne.n	800188c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	08da      	lsrs	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3208      	adds	r2, #8
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80b4 	beq.w	8001a36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b5f      	ldr	r3, [pc, #380]	; (8001a50 <HAL_GPIO_Init+0x308>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a5e      	ldr	r2, [pc, #376]	; (8001a50 <HAL_GPIO_Init+0x308>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b5c      	ldr	r3, [pc, #368]	; (8001a50 <HAL_GPIO_Init+0x308>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ea:	4a5a      	ldr	r2, [pc, #360]	; (8001a54 <HAL_GPIO_Init+0x30c>)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a51      	ldr	r2, [pc, #324]	; (8001a58 <HAL_GPIO_Init+0x310>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d02b      	beq.n	800196e <HAL_GPIO_Init+0x226>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a50      	ldr	r2, [pc, #320]	; (8001a5c <HAL_GPIO_Init+0x314>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d025      	beq.n	800196a <HAL_GPIO_Init+0x222>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4f      	ldr	r2, [pc, #316]	; (8001a60 <HAL_GPIO_Init+0x318>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d01f      	beq.n	8001966 <HAL_GPIO_Init+0x21e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4e      	ldr	r2, [pc, #312]	; (8001a64 <HAL_GPIO_Init+0x31c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d019      	beq.n	8001962 <HAL_GPIO_Init+0x21a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <HAL_GPIO_Init+0x320>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0x216>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4c      	ldr	r2, [pc, #304]	; (8001a6c <HAL_GPIO_Init+0x324>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00d      	beq.n	800195a <HAL_GPIO_Init+0x212>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4b      	ldr	r2, [pc, #300]	; (8001a70 <HAL_GPIO_Init+0x328>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d007      	beq.n	8001956 <HAL_GPIO_Init+0x20e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4a      	ldr	r2, [pc, #296]	; (8001a74 <HAL_GPIO_Init+0x32c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_GPIO_Init+0x20a>
 800194e:	2307      	movs	r3, #7
 8001950:	e00e      	b.n	8001970 <HAL_GPIO_Init+0x228>
 8001952:	2308      	movs	r3, #8
 8001954:	e00c      	b.n	8001970 <HAL_GPIO_Init+0x228>
 8001956:	2306      	movs	r3, #6
 8001958:	e00a      	b.n	8001970 <HAL_GPIO_Init+0x228>
 800195a:	2305      	movs	r3, #5
 800195c:	e008      	b.n	8001970 <HAL_GPIO_Init+0x228>
 800195e:	2304      	movs	r3, #4
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x228>
 8001962:	2303      	movs	r3, #3
 8001964:	e004      	b.n	8001970 <HAL_GPIO_Init+0x228>
 8001966:	2302      	movs	r3, #2
 8001968:	e002      	b.n	8001970 <HAL_GPIO_Init+0x228>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x228>
 800196e:	2300      	movs	r3, #0
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f002 0203 	and.w	r2, r2, #3
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	4093      	lsls	r3, r2
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001980:	4934      	ldr	r1, [pc, #208]	; (8001a54 <HAL_GPIO_Init+0x30c>)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800198e:	4b3a      	ldr	r3, [pc, #232]	; (8001a78 <HAL_GPIO_Init+0x330>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019b2:	4a31      	ldr	r2, [pc, #196]	; (8001a78 <HAL_GPIO_Init+0x330>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019b8:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <HAL_GPIO_Init+0x330>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019dc:	4a26      	ldr	r2, [pc, #152]	; (8001a78 <HAL_GPIO_Init+0x330>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_GPIO_Init+0x330>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a06:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <HAL_GPIO_Init+0x330>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_GPIO_Init+0x330>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a30:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <HAL_GPIO_Init+0x330>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b0f      	cmp	r3, #15
 8001a40:	f67f ae90 	bls.w	8001764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40013800 	.word	0x40013800
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	40020800 	.word	0x40020800
 8001a64:	40020c00 	.word	0x40020c00
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40021400 	.word	0x40021400
 8001a70:	40021800 	.word	0x40021800
 8001a74:	40021c00 	.word	0x40021c00
 8001a78:	40013c00 	.word	0x40013c00

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e264      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d075      	beq.n	8001b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a9a:	4ba3      	ldr	r3, [pc, #652]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d00c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa6:	4ba0      	ldr	r3, [pc, #640]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d112      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab2:	4b9d      	ldr	r3, [pc, #628]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001abe:	d10b      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	4b99      	ldr	r3, [pc, #612]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d05b      	beq.n	8001b84 <HAL_RCC_OscConfig+0x108>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d157      	bne.n	8001b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e23f      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae0:	d106      	bne.n	8001af0 <HAL_RCC_OscConfig+0x74>
 8001ae2:	4b91      	ldr	r3, [pc, #580]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a90      	ldr	r2, [pc, #576]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e01d      	b.n	8001b2c <HAL_RCC_OscConfig+0xb0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x98>
 8001afa:	4b8b      	ldr	r3, [pc, #556]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a8a      	ldr	r2, [pc, #552]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b88      	ldr	r3, [pc, #544]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a87      	ldr	r2, [pc, #540]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0xb0>
 8001b14:	4b84      	ldr	r3, [pc, #528]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a83      	ldr	r2, [pc, #524]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b81      	ldr	r3, [pc, #516]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a80      	ldr	r2, [pc, #512]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fcc8 	bl	80014c8 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fcc4 	bl	80014c8 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e204      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b76      	ldr	r3, [pc, #472]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0xc0>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fcb4 	bl	80014c8 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff fcb0 	bl	80014c8 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	; 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1f0      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	4b6c      	ldr	r3, [pc, #432]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0xe8>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d063      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b92:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9e:	4b62      	ldr	r3, [pc, #392]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d11c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001baa:	4b5f      	ldr	r3, [pc, #380]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d116      	bne.n	8001be4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	4b5c      	ldr	r3, [pc, #368]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_RCC_OscConfig+0x152>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e1c4      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	4b56      	ldr	r3, [pc, #344]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4952      	ldr	r1, [pc, #328]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	e03a      	b.n	8001c5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bec:	4b4f      	ldr	r3, [pc, #316]	; (8001d2c <HAL_RCC_OscConfig+0x2b0>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fc69 	bl	80014c8 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fc65 	bl	80014c8 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1a5      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4940      	ldr	r1, [pc, #256]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2e:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <HAL_RCC_OscConfig+0x2b0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff fc48 	bl	80014c8 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fc44 	bl	80014c8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e184      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d030      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d016      	beq.n	8001c9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6e:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <HAL_RCC_OscConfig+0x2b4>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c74:	f7ff fc28 	bl	80014c8 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fc24 	bl	80014c8 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e164      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x200>
 8001c9a:	e015      	b.n	8001cc8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9c:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_RCC_OscConfig+0x2b4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca2:	f7ff fc11 	bl	80014c8 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001caa:	f7ff fc0d 	bl	80014c8 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e14d      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a0 	beq.w	8001e16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10f      	bne.n	8001d06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d02:	2301      	movs	r3, #1
 8001d04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_OscConfig+0x2b8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d121      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_RCC_OscConfig+0x2b8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <HAL_RCC_OscConfig+0x2b8>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fbd3 	bl	80014c8 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	e011      	b.n	8001d4a <HAL_RCC_OscConfig+0x2ce>
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	42470000 	.word	0x42470000
 8001d30:	42470e80 	.word	0x42470e80
 8001d34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d38:	f7ff fbc6 	bl	80014c8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e106      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4a:	4b85      	ldr	r3, [pc, #532]	; (8001f60 <HAL_RCC_OscConfig+0x4e4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCC_OscConfig+0x2f0>
 8001d5e:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6a:	e01c      	b.n	8001da6 <HAL_RCC_OscConfig+0x32a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d10c      	bne.n	8001d8e <HAL_RCC_OscConfig+0x312>
 8001d74:	4b7b      	ldr	r3, [pc, #492]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	4a7a      	ldr	r2, [pc, #488]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001d7a:	f043 0304 	orr.w	r3, r3, #4
 8001d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d80:	4b78      	ldr	r3, [pc, #480]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d84:	4a77      	ldr	r2, [pc, #476]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8c:	e00b      	b.n	8001da6 <HAL_RCC_OscConfig+0x32a>
 8001d8e:	4b75      	ldr	r3, [pc, #468]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	4a74      	ldr	r2, [pc, #464]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9a:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9e:	4a71      	ldr	r2, [pc, #452]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001da0:	f023 0304 	bic.w	r3, r3, #4
 8001da4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d015      	beq.n	8001dda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dae:	f7ff fb8b 	bl	80014c8 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db6:	f7ff fb87 	bl	80014c8 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e0c5      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dcc:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0ee      	beq.n	8001db6 <HAL_RCC_OscConfig+0x33a>
 8001dd8:	e014      	b.n	8001e04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fb75 	bl	80014c8 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff fb71 	bl	80014c8 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0af      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df8:	4b5a      	ldr	r3, [pc, #360]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1ee      	bne.n	8001de2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d105      	bne.n	8001e16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0a:	4b56      	ldr	r3, [pc, #344]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a55      	ldr	r2, [pc, #340]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 809b 	beq.w	8001f56 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e20:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d05c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d141      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e34:	4b4c      	ldr	r3, [pc, #304]	; (8001f68 <HAL_RCC_OscConfig+0x4ec>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7ff fb45 	bl	80014c8 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e42:	f7ff fb41 	bl	80014c8 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e081      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e54:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f0      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69da      	ldr	r2, [r3, #28]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	019b      	lsls	r3, r3, #6
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	085b      	lsrs	r3, r3, #1
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	041b      	lsls	r3, r3, #16
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	061b      	lsls	r3, r3, #24
 8001e84:	4937      	ldr	r1, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8a:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <HAL_RCC_OscConfig+0x4ec>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fb1a 	bl	80014c8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff fb16 	bl	80014c8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e056      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x41c>
 8001eb6:	e04e      	b.n	8001f56 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_RCC_OscConfig+0x4ec>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fb03 	bl	80014c8 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7ff faff 	bl	80014c8 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e03f      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x44a>
 8001ee4:	e037      	b.n	8001f56 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e032      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_RCC_OscConfig+0x4e8>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d028      	beq.n	8001f52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d121      	bne.n	8001f52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d11a      	bne.n	8001f52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f22:	4013      	ands	r3, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f28:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d111      	bne.n	8001f52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	085b      	lsrs	r3, r3, #1
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40007000 	.word	0x40007000
 8001f64:	40023800 	.word	0x40023800
 8001f68:	42470060 	.word	0x42470060

08001f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0cc      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b68      	ldr	r3, [pc, #416]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d90c      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b65      	ldr	r3, [pc, #404]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b8      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc0:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b50      	ldr	r3, [pc, #320]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	494d      	ldr	r1, [pc, #308]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d044      	beq.n	800208c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d119      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e07f      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d003      	beq.n	800202a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002026:	2b03      	cmp	r3, #3
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e06f      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203a:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e067      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4934      	ldr	r1, [pc, #208]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800205c:	f7ff fa34 	bl	80014c8 <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	e00a      	b.n	800207a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7ff fa30 	bl	80014c8 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e04f      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 020c 	and.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d1eb      	bne.n	8002064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d20c      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e032      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4916      	ldr	r1, [pc, #88]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	490e      	ldr	r1, [pc, #56]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020f2:	f000 f821 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	490a      	ldr	r1, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1c8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f996 	bl	8001444 <HAL_InitTick>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023c00 	.word	0x40023c00
 8002128:	40023800 	.word	0x40023800
 800212c:	08005790 	.word	0x08005790
 8002130:	20000000 	.word	0x20000000
 8002134:	20000004 	.word	0x20000004

08002138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	2300      	movs	r3, #0
 800214a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002150:	4b67      	ldr	r3, [pc, #412]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b08      	cmp	r3, #8
 800215a:	d00d      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x40>
 800215c:	2b08      	cmp	r3, #8
 800215e:	f200 80bd 	bhi.w	80022dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x34>
 8002166:	2b04      	cmp	r3, #4
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x3a>
 800216a:	e0b7      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800216c:	4b61      	ldr	r3, [pc, #388]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800216e:	60bb      	str	r3, [r7, #8]
       break;
 8002170:	e0b7      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002172:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002174:	60bb      	str	r3, [r7, #8]
      break;
 8002176:	e0b4      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002178:	4b5d      	ldr	r3, [pc, #372]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002180:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002182:	4b5b      	ldr	r3, [pc, #364]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d04d      	beq.n	800222a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218e:	4b58      	ldr	r3, [pc, #352]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	099b      	lsrs	r3, r3, #6
 8002194:	461a      	mov	r2, r3
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800219e:	f04f 0100 	mov.w	r1, #0
 80021a2:	ea02 0800 	and.w	r8, r2, r0
 80021a6:	ea03 0901 	and.w	r9, r3, r1
 80021aa:	4640      	mov	r0, r8
 80021ac:	4649      	mov	r1, r9
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	014b      	lsls	r3, r1, #5
 80021b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021bc:	0142      	lsls	r2, r0, #5
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	ebb0 0008 	subs.w	r0, r0, r8
 80021c6:	eb61 0109 	sbc.w	r1, r1, r9
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	018b      	lsls	r3, r1, #6
 80021d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021d8:	0182      	lsls	r2, r0, #6
 80021da:	1a12      	subs	r2, r2, r0
 80021dc:	eb63 0301 	sbc.w	r3, r3, r1
 80021e0:	f04f 0000 	mov.w	r0, #0
 80021e4:	f04f 0100 	mov.w	r1, #0
 80021e8:	00d9      	lsls	r1, r3, #3
 80021ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021ee:	00d0      	lsls	r0, r2, #3
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	eb12 0208 	adds.w	r2, r2, r8
 80021f8:	eb43 0309 	adc.w	r3, r3, r9
 80021fc:	f04f 0000 	mov.w	r0, #0
 8002200:	f04f 0100 	mov.w	r1, #0
 8002204:	0259      	lsls	r1, r3, #9
 8002206:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800220a:	0250      	lsls	r0, r2, #9
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	461a      	mov	r2, r3
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	f7fe fcc4 	bl	8000ba8 <__aeabi_uldivmod>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4613      	mov	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e04a      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222a:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	099b      	lsrs	r3, r3, #6
 8002230:	461a      	mov	r2, r3
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	f240 10ff 	movw	r0, #511	; 0x1ff
 800223a:	f04f 0100 	mov.w	r1, #0
 800223e:	ea02 0400 	and.w	r4, r2, r0
 8002242:	ea03 0501 	and.w	r5, r3, r1
 8002246:	4620      	mov	r0, r4
 8002248:	4629      	mov	r1, r5
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	014b      	lsls	r3, r1, #5
 8002254:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002258:	0142      	lsls	r2, r0, #5
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	1b00      	subs	r0, r0, r4
 8002260:	eb61 0105 	sbc.w	r1, r1, r5
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	018b      	lsls	r3, r1, #6
 800226e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002272:	0182      	lsls	r2, r0, #6
 8002274:	1a12      	subs	r2, r2, r0
 8002276:	eb63 0301 	sbc.w	r3, r3, r1
 800227a:	f04f 0000 	mov.w	r0, #0
 800227e:	f04f 0100 	mov.w	r1, #0
 8002282:	00d9      	lsls	r1, r3, #3
 8002284:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002288:	00d0      	lsls	r0, r2, #3
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	1912      	adds	r2, r2, r4
 8002290:	eb45 0303 	adc.w	r3, r5, r3
 8002294:	f04f 0000 	mov.w	r0, #0
 8002298:	f04f 0100 	mov.w	r1, #0
 800229c:	0299      	lsls	r1, r3, #10
 800229e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022a2:	0290      	lsls	r0, r2, #10
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	f7fe fc78 	bl	8000ba8 <__aeabi_uldivmod>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4613      	mov	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	3301      	adds	r3, #1
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	60bb      	str	r3, [r7, #8]
      break;
 80022da:	e002      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022de:	60bb      	str	r3, [r7, #8]
      break;
 80022e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e2:	68bb      	ldr	r3, [r7, #8]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	00f42400 	.word	0x00f42400
 80022f8:	007a1200 	.word	0x007a1200

080022fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002300:	4b02      	ldr	r3, [pc, #8]	; (800230c <HAL_RCC_GetHCLKFreq+0x10>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	20000000 	.word	0x20000000

08002310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002314:	f7ff fff2 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	0a9b      	lsrs	r3, r3, #10
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	4903      	ldr	r1, [pc, #12]	; (8002334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	080057a0 	.word	0x080057a0

08002338 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e041      	b.n	80023ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fef8 	bl	8001154 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f000 fb10 	bl	800299c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d104      	bne.n	80023f2 <HAL_TIM_IC_Start_IT+0x1a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	e013      	b.n	800241a <HAL_TIM_IC_Start_IT+0x42>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d104      	bne.n	8002402 <HAL_TIM_IC_Start_IT+0x2a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	e00b      	b.n	800241a <HAL_TIM_IC_Start_IT+0x42>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d104      	bne.n	8002412 <HAL_TIM_IC_Start_IT+0x3a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800240e:	b2db      	uxtb	r3, r3
 8002410:	e003      	b.n	800241a <HAL_TIM_IC_Start_IT+0x42>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002418:	b2db      	uxtb	r3, r3
 800241a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d104      	bne.n	800242c <HAL_TIM_IC_Start_IT+0x54>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002428:	b2db      	uxtb	r3, r3
 800242a:	e013      	b.n	8002454 <HAL_TIM_IC_Start_IT+0x7c>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b04      	cmp	r3, #4
 8002430:	d104      	bne.n	800243c <HAL_TIM_IC_Start_IT+0x64>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002438:	b2db      	uxtb	r3, r3
 800243a:	e00b      	b.n	8002454 <HAL_TIM_IC_Start_IT+0x7c>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b08      	cmp	r3, #8
 8002440:	d104      	bne.n	800244c <HAL_TIM_IC_Start_IT+0x74>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002448:	b2db      	uxtb	r3, r3
 800244a:	e003      	b.n	8002454 <HAL_TIM_IC_Start_IT+0x7c>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002452:	b2db      	uxtb	r3, r3
 8002454:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d102      	bne.n	8002462 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d001      	beq.n	8002466 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0c7      	b.n	80025f6 <HAL_TIM_IC_Start_IT+0x21e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d104      	bne.n	8002476 <HAL_TIM_IC_Start_IT+0x9e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002474:	e013      	b.n	800249e <HAL_TIM_IC_Start_IT+0xc6>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b04      	cmp	r3, #4
 800247a:	d104      	bne.n	8002486 <HAL_TIM_IC_Start_IT+0xae>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002484:	e00b      	b.n	800249e <HAL_TIM_IC_Start_IT+0xc6>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b08      	cmp	r3, #8
 800248a:	d104      	bne.n	8002496 <HAL_TIM_IC_Start_IT+0xbe>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002494:	e003      	b.n	800249e <HAL_TIM_IC_Start_IT+0xc6>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d104      	bne.n	80024ae <HAL_TIM_IC_Start_IT+0xd6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ac:	e013      	b.n	80024d6 <HAL_TIM_IC_Start_IT+0xfe>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d104      	bne.n	80024be <HAL_TIM_IC_Start_IT+0xe6>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024bc:	e00b      	b.n	80024d6 <HAL_TIM_IC_Start_IT+0xfe>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d104      	bne.n	80024ce <HAL_TIM_IC_Start_IT+0xf6>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024cc:	e003      	b.n	80024d6 <HAL_TIM_IC_Start_IT+0xfe>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2202      	movs	r2, #2
 80024d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b0c      	cmp	r3, #12
 80024da:	d841      	bhi.n	8002560 <HAL_TIM_IC_Start_IT+0x188>
 80024dc:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <HAL_TIM_IC_Start_IT+0x10c>)
 80024de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e2:	bf00      	nop
 80024e4:	08002519 	.word	0x08002519
 80024e8:	08002561 	.word	0x08002561
 80024ec:	08002561 	.word	0x08002561
 80024f0:	08002561 	.word	0x08002561
 80024f4:	0800252b 	.word	0x0800252b
 80024f8:	08002561 	.word	0x08002561
 80024fc:	08002561 	.word	0x08002561
 8002500:	08002561 	.word	0x08002561
 8002504:	0800253d 	.word	0x0800253d
 8002508:	08002561 	.word	0x08002561
 800250c:	08002561 	.word	0x08002561
 8002510:	08002561 	.word	0x08002561
 8002514:	0800254f 	.word	0x0800254f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0202 	orr.w	r2, r2, #2
 8002526:	60da      	str	r2, [r3, #12]
      break;
 8002528:	e01b      	b.n	8002562 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0204 	orr.w	r2, r2, #4
 8002538:	60da      	str	r2, [r3, #12]
      break;
 800253a:	e012      	b.n	8002562 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0208 	orr.w	r2, r2, #8
 800254a:	60da      	str	r2, [r3, #12]
      break;
 800254c:	e009      	b.n	8002562 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0210 	orr.w	r2, r2, #16
 800255c:	60da      	str	r2, [r3, #12]
      break;
 800255e:	e000      	b.n	8002562 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8002560:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2201      	movs	r2, #1
 8002568:	6839      	ldr	r1, [r7, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fbd9 	bl	8002d22 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a22      	ldr	r2, [pc, #136]	; (8002600 <HAL_TIM_IC_Start_IT+0x228>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d022      	beq.n	80025c0 <HAL_TIM_IC_Start_IT+0x1e8>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002582:	d01d      	beq.n	80025c0 <HAL_TIM_IC_Start_IT+0x1e8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <HAL_TIM_IC_Start_IT+0x22c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d018      	beq.n	80025c0 <HAL_TIM_IC_Start_IT+0x1e8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <HAL_TIM_IC_Start_IT+0x230>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d013      	beq.n	80025c0 <HAL_TIM_IC_Start_IT+0x1e8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1b      	ldr	r2, [pc, #108]	; (800260c <HAL_TIM_IC_Start_IT+0x234>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00e      	beq.n	80025c0 <HAL_TIM_IC_Start_IT+0x1e8>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1a      	ldr	r2, [pc, #104]	; (8002610 <HAL_TIM_IC_Start_IT+0x238>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d009      	beq.n	80025c0 <HAL_TIM_IC_Start_IT+0x1e8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a18      	ldr	r2, [pc, #96]	; (8002614 <HAL_TIM_IC_Start_IT+0x23c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d004      	beq.n	80025c0 <HAL_TIM_IC_Start_IT+0x1e8>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a17      	ldr	r2, [pc, #92]	; (8002618 <HAL_TIM_IC_Start_IT+0x240>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d111      	bne.n	80025e4 <HAL_TIM_IC_Start_IT+0x20c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d010      	beq.n	80025f4 <HAL_TIM_IC_Start_IT+0x21c>
    {
      __HAL_TIM_ENABLE(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0201 	orr.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e2:	e007      	b.n	80025f4 <HAL_TIM_IC_Start_IT+0x21c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40010000 	.word	0x40010000
 8002604:	40000400 	.word	0x40000400
 8002608:	40000800 	.word	0x40000800
 800260c:	40000c00 	.word	0x40000c00
 8002610:	40010400 	.word	0x40010400
 8002614:	40014000 	.word	0x40014000
 8002618:	40001800 	.word	0x40001800

0800261c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0202 	mvn.w	r2, #2
 8002648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe fc86 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f97d 	bl	8002966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f983 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b04      	cmp	r3, #4
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b04      	cmp	r3, #4
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0204 	mvn.w	r2, #4
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fc5c 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f953 	bl	8002966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f959 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0208 	mvn.w	r2, #8
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2204      	movs	r2, #4
 80026f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe fc32 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f929 	bl	8002966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f92f 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d122      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b10      	cmp	r3, #16
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0210 	mvn.w	r2, #16
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2208      	movs	r2, #8
 800274a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe fc08 	bl	8000f70 <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8ff 	bl	8002966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f905 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10e      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0201 	mvn.w	r2, #1
 8002798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f8da 	bl	8002954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b80      	cmp	r3, #128	; 0x80
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b8:	2b80      	cmp	r3, #128	; 0x80
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fad8 	bl	8002d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f8c9 	bl	800298a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b20      	cmp	r3, #32
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b20      	cmp	r3, #32
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0220 	mvn.w	r2, #32
 800281c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 faa3 	bl	8002d6a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002842:	2302      	movs	r3, #2
 8002844:	e082      	b.n	800294c <HAL_TIM_IC_ConfigChannel+0x120>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d11b      	bne.n	800288c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	6819      	ldr	r1, [r3, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f000 f938 	bl	8002ad8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 020c 	bic.w	r2, r2, #12
 8002876:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6999      	ldr	r1, [r3, #24]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	619a      	str	r2, [r3, #24]
 800288a:	e05a      	b.n	8002942 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b04      	cmp	r3, #4
 8002890:	d11c      	bne.n	80028cc <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	6819      	ldr	r1, [r3, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f000 f98b 	bl	8002bbc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80028b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6999      	ldr	r1, [r3, #24]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	021a      	lsls	r2, r3, #8
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	619a      	str	r2, [r3, #24]
 80028ca:	e03a      	b.n	8002942 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d11b      	bne.n	800290a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f000 f9a7 	bl	8002c34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 020c 	bic.w	r2, r2, #12
 80028f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69d9      	ldr	r1, [r3, #28]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	61da      	str	r2, [r3, #28]
 8002908:	e01b      	b.n	8002942 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	6819      	ldr	r1, [r3, #0]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f000 f9c6 	bl	8002caa <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69da      	ldr	r2, [r3, #28]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800292c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69d9      	ldr	r1, [r3, #28]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	021a      	lsls	r2, r3, #8
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3f      	ldr	r2, [pc, #252]	; (8002aac <TIM_Base_SetConfig+0x110>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d013      	beq.n	80029dc <TIM_Base_SetConfig+0x40>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ba:	d00f      	beq.n	80029dc <TIM_Base_SetConfig+0x40>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3c      	ldr	r2, [pc, #240]	; (8002ab0 <TIM_Base_SetConfig+0x114>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00b      	beq.n	80029dc <TIM_Base_SetConfig+0x40>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a3b      	ldr	r2, [pc, #236]	; (8002ab4 <TIM_Base_SetConfig+0x118>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d007      	beq.n	80029dc <TIM_Base_SetConfig+0x40>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a3a      	ldr	r2, [pc, #232]	; (8002ab8 <TIM_Base_SetConfig+0x11c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d003      	beq.n	80029dc <TIM_Base_SetConfig+0x40>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a39      	ldr	r2, [pc, #228]	; (8002abc <TIM_Base_SetConfig+0x120>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d108      	bne.n	80029ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a2e      	ldr	r2, [pc, #184]	; (8002aac <TIM_Base_SetConfig+0x110>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d02b      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d027      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a2b      	ldr	r2, [pc, #172]	; (8002ab0 <TIM_Base_SetConfig+0x114>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d023      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a2a      	ldr	r2, [pc, #168]	; (8002ab4 <TIM_Base_SetConfig+0x118>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d01f      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <TIM_Base_SetConfig+0x11c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d01b      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a28      	ldr	r2, [pc, #160]	; (8002abc <TIM_Base_SetConfig+0x120>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d017      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <TIM_Base_SetConfig+0x124>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <TIM_Base_SetConfig+0x128>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00f      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a25      	ldr	r2, [pc, #148]	; (8002ac8 <TIM_Base_SetConfig+0x12c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00b      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a24      	ldr	r2, [pc, #144]	; (8002acc <TIM_Base_SetConfig+0x130>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a23      	ldr	r2, [pc, #140]	; (8002ad0 <TIM_Base_SetConfig+0x134>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d003      	beq.n	8002a4e <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <TIM_Base_SetConfig+0x138>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d108      	bne.n	8002a60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <TIM_Base_SetConfig+0x110>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d003      	beq.n	8002a94 <TIM_Base_SetConfig+0xf8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <TIM_Base_SetConfig+0x120>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d103      	bne.n	8002a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	615a      	str	r2, [r3, #20]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	40000400 	.word	0x40000400
 8002ab4:	40000800 	.word	0x40000800
 8002ab8:	40000c00 	.word	0x40000c00
 8002abc:	40010400 	.word	0x40010400
 8002ac0:	40014000 	.word	0x40014000
 8002ac4:	40014400 	.word	0x40014400
 8002ac8:	40014800 	.word	0x40014800
 8002acc:	40001800 	.word	0x40001800
 8002ad0:	40001c00 	.word	0x40001c00
 8002ad4:	40002000 	.word	0x40002000

08002ad8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	f023 0201 	bic.w	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <TIM_TI1_SetConfig+0xc8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01b      	beq.n	8002b3e <TIM_TI1_SetConfig+0x66>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d017      	beq.n	8002b3e <TIM_TI1_SetConfig+0x66>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <TIM_TI1_SetConfig+0xcc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <TIM_TI1_SetConfig+0x66>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <TIM_TI1_SetConfig+0xd0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00f      	beq.n	8002b3e <TIM_TI1_SetConfig+0x66>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a22      	ldr	r2, [pc, #136]	; (8002bac <TIM_TI1_SetConfig+0xd4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00b      	beq.n	8002b3e <TIM_TI1_SetConfig+0x66>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4a21      	ldr	r2, [pc, #132]	; (8002bb0 <TIM_TI1_SetConfig+0xd8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <TIM_TI1_SetConfig+0x66>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <TIM_TI1_SetConfig+0xdc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d003      	beq.n	8002b3e <TIM_TI1_SetConfig+0x66>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a1f      	ldr	r2, [pc, #124]	; (8002bb8 <TIM_TI1_SetConfig+0xe0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <TIM_TI1_SetConfig+0x6a>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <TIM_TI1_SetConfig+0x6c>
 8002b42:	2300      	movs	r3, #0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e003      	b.n	8002b62 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f023 030a 	bic.w	r3, r3, #10
 8002b7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f003 030a 	and.w	r3, r3, #10
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	40010000 	.word	0x40010000
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800
 8002bac:	40000c00 	.word	0x40000c00
 8002bb0:	40010400 	.word	0x40010400
 8002bb4:	40014000 	.word	0x40014000
 8002bb8:	40001800 	.word	0x40001800

08002bbc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f023 0210 	bic.w	r2, r3, #16
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bfa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	031b      	lsls	r3, r3, #12
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	621a      	str	r2, [r3, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f023 0303 	bic.w	r3, r3, #3
 8002c60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002c84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	621a      	str	r2, [r3, #32]
}
 8002ca0:	bf00      	nop
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b087      	sub	sp, #28
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ce8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	031b      	lsls	r3, r3, #12
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002cfc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	031b      	lsls	r3, r3, #12
 8002d02:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	621a      	str	r2, [r3, #32]
}
 8002d18:	bf00      	nop
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	2201      	movs	r2, #1
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1a      	ldr	r2, [r3, #32]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	401a      	ands	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a1a      	ldr	r2, [r3, #32]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	621a      	str	r2, [r3, #32]
}
 8002d60:	bf00      	nop
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
	...

08002d90 <__errno>:
 8002d90:	4b01      	ldr	r3, [pc, #4]	; (8002d98 <__errno+0x8>)
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	2000000c 	.word	0x2000000c

08002d9c <__libc_init_array>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	4d0d      	ldr	r5, [pc, #52]	; (8002dd4 <__libc_init_array+0x38>)
 8002da0:	4c0d      	ldr	r4, [pc, #52]	; (8002dd8 <__libc_init_array+0x3c>)
 8002da2:	1b64      	subs	r4, r4, r5
 8002da4:	10a4      	asrs	r4, r4, #2
 8002da6:	2600      	movs	r6, #0
 8002da8:	42a6      	cmp	r6, r4
 8002daa:	d109      	bne.n	8002dc0 <__libc_init_array+0x24>
 8002dac:	4d0b      	ldr	r5, [pc, #44]	; (8002ddc <__libc_init_array+0x40>)
 8002dae:	4c0c      	ldr	r4, [pc, #48]	; (8002de0 <__libc_init_array+0x44>)
 8002db0:	f002 fce0 	bl	8005774 <_init>
 8002db4:	1b64      	subs	r4, r4, r5
 8002db6:	10a4      	asrs	r4, r4, #2
 8002db8:	2600      	movs	r6, #0
 8002dba:	42a6      	cmp	r6, r4
 8002dbc:	d105      	bne.n	8002dca <__libc_init_array+0x2e>
 8002dbe:	bd70      	pop	{r4, r5, r6, pc}
 8002dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc4:	4798      	blx	r3
 8002dc6:	3601      	adds	r6, #1
 8002dc8:	e7ee      	b.n	8002da8 <__libc_init_array+0xc>
 8002dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dce:	4798      	blx	r3
 8002dd0:	3601      	adds	r6, #1
 8002dd2:	e7f2      	b.n	8002dba <__libc_init_array+0x1e>
 8002dd4:	08005b94 	.word	0x08005b94
 8002dd8:	08005b94 	.word	0x08005b94
 8002ddc:	08005b94 	.word	0x08005b94
 8002de0:	08005b98 	.word	0x08005b98

08002de4 <memset>:
 8002de4:	4402      	add	r2, r0
 8002de6:	4603      	mov	r3, r0
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d100      	bne.n	8002dee <memset+0xa>
 8002dec:	4770      	bx	lr
 8002dee:	f803 1b01 	strb.w	r1, [r3], #1
 8002df2:	e7f9      	b.n	8002de8 <memset+0x4>

08002df4 <__cvt>:
 8002df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002df8:	b088      	sub	sp, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	461f      	mov	r7, r3
 8002dfe:	4614      	mov	r4, r2
 8002e00:	bfb8      	it	lt
 8002e02:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002e06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002e08:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002e0a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002e0e:	bfb6      	itet	lt
 8002e10:	461f      	movlt	r7, r3
 8002e12:	2300      	movge	r3, #0
 8002e14:	232d      	movlt	r3, #45	; 0x2d
 8002e16:	7013      	strb	r3, [r2, #0]
 8002e18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002e1a:	f023 0820 	bic.w	r8, r3, #32
 8002e1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002e22:	d005      	beq.n	8002e30 <__cvt+0x3c>
 8002e24:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002e28:	d100      	bne.n	8002e2c <__cvt+0x38>
 8002e2a:	3501      	adds	r5, #1
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e000      	b.n	8002e32 <__cvt+0x3e>
 8002e30:	2303      	movs	r3, #3
 8002e32:	aa07      	add	r2, sp, #28
 8002e34:	9204      	str	r2, [sp, #16]
 8002e36:	aa06      	add	r2, sp, #24
 8002e38:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002e3c:	e9cd 3500 	strd	r3, r5, [sp]
 8002e40:	4622      	mov	r2, r4
 8002e42:	463b      	mov	r3, r7
 8002e44:	f000 fcc0 	bl	80037c8 <_dtoa_r>
 8002e48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002e4c:	4606      	mov	r6, r0
 8002e4e:	d102      	bne.n	8002e56 <__cvt+0x62>
 8002e50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e52:	07db      	lsls	r3, r3, #31
 8002e54:	d522      	bpl.n	8002e9c <__cvt+0xa8>
 8002e56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002e5a:	eb06 0905 	add.w	r9, r6, r5
 8002e5e:	d110      	bne.n	8002e82 <__cvt+0x8e>
 8002e60:	7833      	ldrb	r3, [r6, #0]
 8002e62:	2b30      	cmp	r3, #48	; 0x30
 8002e64:	d10a      	bne.n	8002e7c <__cvt+0x88>
 8002e66:	2200      	movs	r2, #0
 8002e68:	2300      	movs	r3, #0
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	4639      	mov	r1, r7
 8002e6e:	f7fd fe2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8002e72:	b918      	cbnz	r0, 8002e7c <__cvt+0x88>
 8002e74:	f1c5 0501 	rsb	r5, r5, #1
 8002e78:	f8ca 5000 	str.w	r5, [sl]
 8002e7c:	f8da 3000 	ldr.w	r3, [sl]
 8002e80:	4499      	add	r9, r3
 8002e82:	2200      	movs	r2, #0
 8002e84:	2300      	movs	r3, #0
 8002e86:	4620      	mov	r0, r4
 8002e88:	4639      	mov	r1, r7
 8002e8a:	f7fd fe1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8002e8e:	b108      	cbz	r0, 8002e94 <__cvt+0xa0>
 8002e90:	f8cd 901c 	str.w	r9, [sp, #28]
 8002e94:	2230      	movs	r2, #48	; 0x30
 8002e96:	9b07      	ldr	r3, [sp, #28]
 8002e98:	454b      	cmp	r3, r9
 8002e9a:	d307      	bcc.n	8002eac <__cvt+0xb8>
 8002e9c:	9b07      	ldr	r3, [sp, #28]
 8002e9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002ea0:	1b9b      	subs	r3, r3, r6
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	b008      	add	sp, #32
 8002ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eac:	1c59      	adds	r1, r3, #1
 8002eae:	9107      	str	r1, [sp, #28]
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	e7f0      	b.n	8002e96 <__cvt+0xa2>

08002eb4 <__exponent>:
 8002eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2900      	cmp	r1, #0
 8002eba:	bfb8      	it	lt
 8002ebc:	4249      	neglt	r1, r1
 8002ebe:	f803 2b02 	strb.w	r2, [r3], #2
 8002ec2:	bfb4      	ite	lt
 8002ec4:	222d      	movlt	r2, #45	; 0x2d
 8002ec6:	222b      	movge	r2, #43	; 0x2b
 8002ec8:	2909      	cmp	r1, #9
 8002eca:	7042      	strb	r2, [r0, #1]
 8002ecc:	dd2a      	ble.n	8002f24 <__exponent+0x70>
 8002ece:	f10d 0407 	add.w	r4, sp, #7
 8002ed2:	46a4      	mov	ip, r4
 8002ed4:	270a      	movs	r7, #10
 8002ed6:	46a6      	mov	lr, r4
 8002ed8:	460a      	mov	r2, r1
 8002eda:	fb91 f6f7 	sdiv	r6, r1, r7
 8002ede:	fb07 1516 	mls	r5, r7, r6, r1
 8002ee2:	3530      	adds	r5, #48	; 0x30
 8002ee4:	2a63      	cmp	r2, #99	; 0x63
 8002ee6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002eea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002eee:	4631      	mov	r1, r6
 8002ef0:	dcf1      	bgt.n	8002ed6 <__exponent+0x22>
 8002ef2:	3130      	adds	r1, #48	; 0x30
 8002ef4:	f1ae 0502 	sub.w	r5, lr, #2
 8002ef8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002efc:	1c44      	adds	r4, r0, #1
 8002efe:	4629      	mov	r1, r5
 8002f00:	4561      	cmp	r1, ip
 8002f02:	d30a      	bcc.n	8002f1a <__exponent+0x66>
 8002f04:	f10d 0209 	add.w	r2, sp, #9
 8002f08:	eba2 020e 	sub.w	r2, r2, lr
 8002f0c:	4565      	cmp	r5, ip
 8002f0e:	bf88      	it	hi
 8002f10:	2200      	movhi	r2, #0
 8002f12:	4413      	add	r3, r2
 8002f14:	1a18      	subs	r0, r3, r0
 8002f16:	b003      	add	sp, #12
 8002f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002f22:	e7ed      	b.n	8002f00 <__exponent+0x4c>
 8002f24:	2330      	movs	r3, #48	; 0x30
 8002f26:	3130      	adds	r1, #48	; 0x30
 8002f28:	7083      	strb	r3, [r0, #2]
 8002f2a:	70c1      	strb	r1, [r0, #3]
 8002f2c:	1d03      	adds	r3, r0, #4
 8002f2e:	e7f1      	b.n	8002f14 <__exponent+0x60>

08002f30 <_printf_float>:
 8002f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f34:	b091      	sub	sp, #68	; 0x44
 8002f36:	460c      	mov	r4, r1
 8002f38:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002f3c:	4616      	mov	r6, r2
 8002f3e:	461f      	mov	r7, r3
 8002f40:	4605      	mov	r5, r0
 8002f42:	f001 fa2f 	bl	80043a4 <_localeconv_r>
 8002f46:	6803      	ldr	r3, [r0, #0]
 8002f48:	9309      	str	r3, [sp, #36]	; 0x24
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd f940 	bl	80001d0 <strlen>
 8002f50:	2300      	movs	r3, #0
 8002f52:	930e      	str	r3, [sp, #56]	; 0x38
 8002f54:	f8d8 3000 	ldr.w	r3, [r8]
 8002f58:	900a      	str	r0, [sp, #40]	; 0x28
 8002f5a:	3307      	adds	r3, #7
 8002f5c:	f023 0307 	bic.w	r3, r3, #7
 8002f60:	f103 0208 	add.w	r2, r3, #8
 8002f64:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002f68:	f8d4 b000 	ldr.w	fp, [r4]
 8002f6c:	f8c8 2000 	str.w	r2, [r8]
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002f78:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002f7c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002f80:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f84:	4b9c      	ldr	r3, [pc, #624]	; (80031f8 <_printf_float+0x2c8>)
 8002f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f8a:	4640      	mov	r0, r8
 8002f8c:	f7fd fdce 	bl	8000b2c <__aeabi_dcmpun>
 8002f90:	bb70      	cbnz	r0, 8002ff0 <_printf_float+0xc0>
 8002f92:	4b99      	ldr	r3, [pc, #612]	; (80031f8 <_printf_float+0x2c8>)
 8002f94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f9a:	4640      	mov	r0, r8
 8002f9c:	f7fd fda8 	bl	8000af0 <__aeabi_dcmple>
 8002fa0:	bb30      	cbnz	r0, 8002ff0 <_printf_float+0xc0>
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	4640      	mov	r0, r8
 8002fa8:	4651      	mov	r1, sl
 8002faa:	f7fd fd97 	bl	8000adc <__aeabi_dcmplt>
 8002fae:	b110      	cbz	r0, 8002fb6 <_printf_float+0x86>
 8002fb0:	232d      	movs	r3, #45	; 0x2d
 8002fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fb6:	4b91      	ldr	r3, [pc, #580]	; (80031fc <_printf_float+0x2cc>)
 8002fb8:	4891      	ldr	r0, [pc, #580]	; (8003200 <_printf_float+0x2d0>)
 8002fba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002fbe:	bf94      	ite	ls
 8002fc0:	4698      	movls	r8, r3
 8002fc2:	4680      	movhi	r8, r0
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	6123      	str	r3, [r4, #16]
 8002fc8:	f02b 0304 	bic.w	r3, fp, #4
 8002fcc:	6023      	str	r3, [r4, #0]
 8002fce:	f04f 0a00 	mov.w	sl, #0
 8002fd2:	9700      	str	r7, [sp, #0]
 8002fd4:	4633      	mov	r3, r6
 8002fd6:	aa0f      	add	r2, sp, #60	; 0x3c
 8002fd8:	4621      	mov	r1, r4
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f000 f9d2 	bl	8003384 <_printf_common>
 8002fe0:	3001      	adds	r0, #1
 8002fe2:	f040 808f 	bne.w	8003104 <_printf_float+0x1d4>
 8002fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fea:	b011      	add	sp, #68	; 0x44
 8002fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff0:	4642      	mov	r2, r8
 8002ff2:	4653      	mov	r3, sl
 8002ff4:	4640      	mov	r0, r8
 8002ff6:	4651      	mov	r1, sl
 8002ff8:	f7fd fd98 	bl	8000b2c <__aeabi_dcmpun>
 8002ffc:	b140      	cbz	r0, 8003010 <_printf_float+0xe0>
 8002ffe:	f1ba 0f00 	cmp.w	sl, #0
 8003002:	bfbc      	itt	lt
 8003004:	232d      	movlt	r3, #45	; 0x2d
 8003006:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800300a:	487e      	ldr	r0, [pc, #504]	; (8003204 <_printf_float+0x2d4>)
 800300c:	4b7e      	ldr	r3, [pc, #504]	; (8003208 <_printf_float+0x2d8>)
 800300e:	e7d4      	b.n	8002fba <_printf_float+0x8a>
 8003010:	6863      	ldr	r3, [r4, #4]
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003018:	d142      	bne.n	80030a0 <_printf_float+0x170>
 800301a:	2306      	movs	r3, #6
 800301c:	6063      	str	r3, [r4, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	9206      	str	r2, [sp, #24]
 8003022:	aa0e      	add	r2, sp, #56	; 0x38
 8003024:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003028:	aa0d      	add	r2, sp, #52	; 0x34
 800302a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800302e:	9203      	str	r2, [sp, #12]
 8003030:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003034:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	6863      	ldr	r3, [r4, #4]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	4642      	mov	r2, r8
 8003040:	4653      	mov	r3, sl
 8003042:	4628      	mov	r0, r5
 8003044:	910b      	str	r1, [sp, #44]	; 0x2c
 8003046:	f7ff fed5 	bl	8002df4 <__cvt>
 800304a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800304c:	2947      	cmp	r1, #71	; 0x47
 800304e:	4680      	mov	r8, r0
 8003050:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003052:	d108      	bne.n	8003066 <_printf_float+0x136>
 8003054:	1cc8      	adds	r0, r1, #3
 8003056:	db02      	blt.n	800305e <_printf_float+0x12e>
 8003058:	6863      	ldr	r3, [r4, #4]
 800305a:	4299      	cmp	r1, r3
 800305c:	dd40      	ble.n	80030e0 <_printf_float+0x1b0>
 800305e:	f1a9 0902 	sub.w	r9, r9, #2
 8003062:	fa5f f989 	uxtb.w	r9, r9
 8003066:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800306a:	d81f      	bhi.n	80030ac <_printf_float+0x17c>
 800306c:	3901      	subs	r1, #1
 800306e:	464a      	mov	r2, r9
 8003070:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003074:	910d      	str	r1, [sp, #52]	; 0x34
 8003076:	f7ff ff1d 	bl	8002eb4 <__exponent>
 800307a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800307c:	1813      	adds	r3, r2, r0
 800307e:	2a01      	cmp	r2, #1
 8003080:	4682      	mov	sl, r0
 8003082:	6123      	str	r3, [r4, #16]
 8003084:	dc02      	bgt.n	800308c <_printf_float+0x15c>
 8003086:	6822      	ldr	r2, [r4, #0]
 8003088:	07d2      	lsls	r2, r2, #31
 800308a:	d501      	bpl.n	8003090 <_printf_float+0x160>
 800308c:	3301      	adds	r3, #1
 800308e:	6123      	str	r3, [r4, #16]
 8003090:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003094:	2b00      	cmp	r3, #0
 8003096:	d09c      	beq.n	8002fd2 <_printf_float+0xa2>
 8003098:	232d      	movs	r3, #45	; 0x2d
 800309a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800309e:	e798      	b.n	8002fd2 <_printf_float+0xa2>
 80030a0:	2947      	cmp	r1, #71	; 0x47
 80030a2:	d1bc      	bne.n	800301e <_printf_float+0xee>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ba      	bne.n	800301e <_printf_float+0xee>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e7b7      	b.n	800301c <_printf_float+0xec>
 80030ac:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80030b0:	d118      	bne.n	80030e4 <_printf_float+0x1b4>
 80030b2:	2900      	cmp	r1, #0
 80030b4:	6863      	ldr	r3, [r4, #4]
 80030b6:	dd0b      	ble.n	80030d0 <_printf_float+0x1a0>
 80030b8:	6121      	str	r1, [r4, #16]
 80030ba:	b913      	cbnz	r3, 80030c2 <_printf_float+0x192>
 80030bc:	6822      	ldr	r2, [r4, #0]
 80030be:	07d0      	lsls	r0, r2, #31
 80030c0:	d502      	bpl.n	80030c8 <_printf_float+0x198>
 80030c2:	3301      	adds	r3, #1
 80030c4:	440b      	add	r3, r1
 80030c6:	6123      	str	r3, [r4, #16]
 80030c8:	65a1      	str	r1, [r4, #88]	; 0x58
 80030ca:	f04f 0a00 	mov.w	sl, #0
 80030ce:	e7df      	b.n	8003090 <_printf_float+0x160>
 80030d0:	b913      	cbnz	r3, 80030d8 <_printf_float+0x1a8>
 80030d2:	6822      	ldr	r2, [r4, #0]
 80030d4:	07d2      	lsls	r2, r2, #31
 80030d6:	d501      	bpl.n	80030dc <_printf_float+0x1ac>
 80030d8:	3302      	adds	r3, #2
 80030da:	e7f4      	b.n	80030c6 <_printf_float+0x196>
 80030dc:	2301      	movs	r3, #1
 80030de:	e7f2      	b.n	80030c6 <_printf_float+0x196>
 80030e0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80030e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030e6:	4299      	cmp	r1, r3
 80030e8:	db05      	blt.n	80030f6 <_printf_float+0x1c6>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	6121      	str	r1, [r4, #16]
 80030ee:	07d8      	lsls	r0, r3, #31
 80030f0:	d5ea      	bpl.n	80030c8 <_printf_float+0x198>
 80030f2:	1c4b      	adds	r3, r1, #1
 80030f4:	e7e7      	b.n	80030c6 <_printf_float+0x196>
 80030f6:	2900      	cmp	r1, #0
 80030f8:	bfd4      	ite	le
 80030fa:	f1c1 0202 	rsble	r2, r1, #2
 80030fe:	2201      	movgt	r2, #1
 8003100:	4413      	add	r3, r2
 8003102:	e7e0      	b.n	80030c6 <_printf_float+0x196>
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	055a      	lsls	r2, r3, #21
 8003108:	d407      	bmi.n	800311a <_printf_float+0x1ea>
 800310a:	6923      	ldr	r3, [r4, #16]
 800310c:	4642      	mov	r2, r8
 800310e:	4631      	mov	r1, r6
 8003110:	4628      	mov	r0, r5
 8003112:	47b8      	blx	r7
 8003114:	3001      	adds	r0, #1
 8003116:	d12b      	bne.n	8003170 <_printf_float+0x240>
 8003118:	e765      	b.n	8002fe6 <_printf_float+0xb6>
 800311a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800311e:	f240 80dc 	bls.w	80032da <_printf_float+0x3aa>
 8003122:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003126:	2200      	movs	r2, #0
 8003128:	2300      	movs	r3, #0
 800312a:	f7fd fccd 	bl	8000ac8 <__aeabi_dcmpeq>
 800312e:	2800      	cmp	r0, #0
 8003130:	d033      	beq.n	800319a <_printf_float+0x26a>
 8003132:	4a36      	ldr	r2, [pc, #216]	; (800320c <_printf_float+0x2dc>)
 8003134:	2301      	movs	r3, #1
 8003136:	4631      	mov	r1, r6
 8003138:	4628      	mov	r0, r5
 800313a:	47b8      	blx	r7
 800313c:	3001      	adds	r0, #1
 800313e:	f43f af52 	beq.w	8002fe6 <_printf_float+0xb6>
 8003142:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003146:	429a      	cmp	r2, r3
 8003148:	db02      	blt.n	8003150 <_printf_float+0x220>
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	07d8      	lsls	r0, r3, #31
 800314e:	d50f      	bpl.n	8003170 <_printf_float+0x240>
 8003150:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003154:	4631      	mov	r1, r6
 8003156:	4628      	mov	r0, r5
 8003158:	47b8      	blx	r7
 800315a:	3001      	adds	r0, #1
 800315c:	f43f af43 	beq.w	8002fe6 <_printf_float+0xb6>
 8003160:	f04f 0800 	mov.w	r8, #0
 8003164:	f104 091a 	add.w	r9, r4, #26
 8003168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800316a:	3b01      	subs	r3, #1
 800316c:	4543      	cmp	r3, r8
 800316e:	dc09      	bgt.n	8003184 <_printf_float+0x254>
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	079b      	lsls	r3, r3, #30
 8003174:	f100 8101 	bmi.w	800337a <_printf_float+0x44a>
 8003178:	68e0      	ldr	r0, [r4, #12]
 800317a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800317c:	4298      	cmp	r0, r3
 800317e:	bfb8      	it	lt
 8003180:	4618      	movlt	r0, r3
 8003182:	e732      	b.n	8002fea <_printf_float+0xba>
 8003184:	2301      	movs	r3, #1
 8003186:	464a      	mov	r2, r9
 8003188:	4631      	mov	r1, r6
 800318a:	4628      	mov	r0, r5
 800318c:	47b8      	blx	r7
 800318e:	3001      	adds	r0, #1
 8003190:	f43f af29 	beq.w	8002fe6 <_printf_float+0xb6>
 8003194:	f108 0801 	add.w	r8, r8, #1
 8003198:	e7e6      	b.n	8003168 <_printf_float+0x238>
 800319a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800319c:	2b00      	cmp	r3, #0
 800319e:	dc37      	bgt.n	8003210 <_printf_float+0x2e0>
 80031a0:	4a1a      	ldr	r2, [pc, #104]	; (800320c <_printf_float+0x2dc>)
 80031a2:	2301      	movs	r3, #1
 80031a4:	4631      	mov	r1, r6
 80031a6:	4628      	mov	r0, r5
 80031a8:	47b8      	blx	r7
 80031aa:	3001      	adds	r0, #1
 80031ac:	f43f af1b 	beq.w	8002fe6 <_printf_float+0xb6>
 80031b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80031b4:	4313      	orrs	r3, r2
 80031b6:	d102      	bne.n	80031be <_printf_float+0x28e>
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	07d9      	lsls	r1, r3, #31
 80031bc:	d5d8      	bpl.n	8003170 <_printf_float+0x240>
 80031be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031c2:	4631      	mov	r1, r6
 80031c4:	4628      	mov	r0, r5
 80031c6:	47b8      	blx	r7
 80031c8:	3001      	adds	r0, #1
 80031ca:	f43f af0c 	beq.w	8002fe6 <_printf_float+0xb6>
 80031ce:	f04f 0900 	mov.w	r9, #0
 80031d2:	f104 0a1a 	add.w	sl, r4, #26
 80031d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031d8:	425b      	negs	r3, r3
 80031da:	454b      	cmp	r3, r9
 80031dc:	dc01      	bgt.n	80031e2 <_printf_float+0x2b2>
 80031de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031e0:	e794      	b.n	800310c <_printf_float+0x1dc>
 80031e2:	2301      	movs	r3, #1
 80031e4:	4652      	mov	r2, sl
 80031e6:	4631      	mov	r1, r6
 80031e8:	4628      	mov	r0, r5
 80031ea:	47b8      	blx	r7
 80031ec:	3001      	adds	r0, #1
 80031ee:	f43f aefa 	beq.w	8002fe6 <_printf_float+0xb6>
 80031f2:	f109 0901 	add.w	r9, r9, #1
 80031f6:	e7ee      	b.n	80031d6 <_printf_float+0x2a6>
 80031f8:	7fefffff 	.word	0x7fefffff
 80031fc:	080057ac 	.word	0x080057ac
 8003200:	080057b0 	.word	0x080057b0
 8003204:	080057b8 	.word	0x080057b8
 8003208:	080057b4 	.word	0x080057b4
 800320c:	080057bc 	.word	0x080057bc
 8003210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003214:	429a      	cmp	r2, r3
 8003216:	bfa8      	it	ge
 8003218:	461a      	movge	r2, r3
 800321a:	2a00      	cmp	r2, #0
 800321c:	4691      	mov	r9, r2
 800321e:	dc37      	bgt.n	8003290 <_printf_float+0x360>
 8003220:	f04f 0b00 	mov.w	fp, #0
 8003224:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003228:	f104 021a 	add.w	r2, r4, #26
 800322c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003230:	ebaa 0309 	sub.w	r3, sl, r9
 8003234:	455b      	cmp	r3, fp
 8003236:	dc33      	bgt.n	80032a0 <_printf_float+0x370>
 8003238:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800323c:	429a      	cmp	r2, r3
 800323e:	db3b      	blt.n	80032b8 <_printf_float+0x388>
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	07da      	lsls	r2, r3, #31
 8003244:	d438      	bmi.n	80032b8 <_printf_float+0x388>
 8003246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003248:	990d      	ldr	r1, [sp, #52]	; 0x34
 800324a:	eba2 030a 	sub.w	r3, r2, sl
 800324e:	eba2 0901 	sub.w	r9, r2, r1
 8003252:	4599      	cmp	r9, r3
 8003254:	bfa8      	it	ge
 8003256:	4699      	movge	r9, r3
 8003258:	f1b9 0f00 	cmp.w	r9, #0
 800325c:	dc34      	bgt.n	80032c8 <_printf_float+0x398>
 800325e:	f04f 0800 	mov.w	r8, #0
 8003262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003266:	f104 0a1a 	add.w	sl, r4, #26
 800326a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	eba3 0309 	sub.w	r3, r3, r9
 8003274:	4543      	cmp	r3, r8
 8003276:	f77f af7b 	ble.w	8003170 <_printf_float+0x240>
 800327a:	2301      	movs	r3, #1
 800327c:	4652      	mov	r2, sl
 800327e:	4631      	mov	r1, r6
 8003280:	4628      	mov	r0, r5
 8003282:	47b8      	blx	r7
 8003284:	3001      	adds	r0, #1
 8003286:	f43f aeae 	beq.w	8002fe6 <_printf_float+0xb6>
 800328a:	f108 0801 	add.w	r8, r8, #1
 800328e:	e7ec      	b.n	800326a <_printf_float+0x33a>
 8003290:	4613      	mov	r3, r2
 8003292:	4631      	mov	r1, r6
 8003294:	4642      	mov	r2, r8
 8003296:	4628      	mov	r0, r5
 8003298:	47b8      	blx	r7
 800329a:	3001      	adds	r0, #1
 800329c:	d1c0      	bne.n	8003220 <_printf_float+0x2f0>
 800329e:	e6a2      	b.n	8002fe6 <_printf_float+0xb6>
 80032a0:	2301      	movs	r3, #1
 80032a2:	4631      	mov	r1, r6
 80032a4:	4628      	mov	r0, r5
 80032a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80032a8:	47b8      	blx	r7
 80032aa:	3001      	adds	r0, #1
 80032ac:	f43f ae9b 	beq.w	8002fe6 <_printf_float+0xb6>
 80032b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80032b2:	f10b 0b01 	add.w	fp, fp, #1
 80032b6:	e7b9      	b.n	800322c <_printf_float+0x2fc>
 80032b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032bc:	4631      	mov	r1, r6
 80032be:	4628      	mov	r0, r5
 80032c0:	47b8      	blx	r7
 80032c2:	3001      	adds	r0, #1
 80032c4:	d1bf      	bne.n	8003246 <_printf_float+0x316>
 80032c6:	e68e      	b.n	8002fe6 <_printf_float+0xb6>
 80032c8:	464b      	mov	r3, r9
 80032ca:	eb08 020a 	add.w	r2, r8, sl
 80032ce:	4631      	mov	r1, r6
 80032d0:	4628      	mov	r0, r5
 80032d2:	47b8      	blx	r7
 80032d4:	3001      	adds	r0, #1
 80032d6:	d1c2      	bne.n	800325e <_printf_float+0x32e>
 80032d8:	e685      	b.n	8002fe6 <_printf_float+0xb6>
 80032da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032dc:	2a01      	cmp	r2, #1
 80032de:	dc01      	bgt.n	80032e4 <_printf_float+0x3b4>
 80032e0:	07db      	lsls	r3, r3, #31
 80032e2:	d537      	bpl.n	8003354 <_printf_float+0x424>
 80032e4:	2301      	movs	r3, #1
 80032e6:	4642      	mov	r2, r8
 80032e8:	4631      	mov	r1, r6
 80032ea:	4628      	mov	r0, r5
 80032ec:	47b8      	blx	r7
 80032ee:	3001      	adds	r0, #1
 80032f0:	f43f ae79 	beq.w	8002fe6 <_printf_float+0xb6>
 80032f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032f8:	4631      	mov	r1, r6
 80032fa:	4628      	mov	r0, r5
 80032fc:	47b8      	blx	r7
 80032fe:	3001      	adds	r0, #1
 8003300:	f43f ae71 	beq.w	8002fe6 <_printf_float+0xb6>
 8003304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003308:	2200      	movs	r2, #0
 800330a:	2300      	movs	r3, #0
 800330c:	f7fd fbdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8003310:	b9d8      	cbnz	r0, 800334a <_printf_float+0x41a>
 8003312:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003314:	f108 0201 	add.w	r2, r8, #1
 8003318:	3b01      	subs	r3, #1
 800331a:	4631      	mov	r1, r6
 800331c:	4628      	mov	r0, r5
 800331e:	47b8      	blx	r7
 8003320:	3001      	adds	r0, #1
 8003322:	d10e      	bne.n	8003342 <_printf_float+0x412>
 8003324:	e65f      	b.n	8002fe6 <_printf_float+0xb6>
 8003326:	2301      	movs	r3, #1
 8003328:	464a      	mov	r2, r9
 800332a:	4631      	mov	r1, r6
 800332c:	4628      	mov	r0, r5
 800332e:	47b8      	blx	r7
 8003330:	3001      	adds	r0, #1
 8003332:	f43f ae58 	beq.w	8002fe6 <_printf_float+0xb6>
 8003336:	f108 0801 	add.w	r8, r8, #1
 800333a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800333c:	3b01      	subs	r3, #1
 800333e:	4543      	cmp	r3, r8
 8003340:	dcf1      	bgt.n	8003326 <_printf_float+0x3f6>
 8003342:	4653      	mov	r3, sl
 8003344:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003348:	e6e1      	b.n	800310e <_printf_float+0x1de>
 800334a:	f04f 0800 	mov.w	r8, #0
 800334e:	f104 091a 	add.w	r9, r4, #26
 8003352:	e7f2      	b.n	800333a <_printf_float+0x40a>
 8003354:	2301      	movs	r3, #1
 8003356:	4642      	mov	r2, r8
 8003358:	e7df      	b.n	800331a <_printf_float+0x3ea>
 800335a:	2301      	movs	r3, #1
 800335c:	464a      	mov	r2, r9
 800335e:	4631      	mov	r1, r6
 8003360:	4628      	mov	r0, r5
 8003362:	47b8      	blx	r7
 8003364:	3001      	adds	r0, #1
 8003366:	f43f ae3e 	beq.w	8002fe6 <_printf_float+0xb6>
 800336a:	f108 0801 	add.w	r8, r8, #1
 800336e:	68e3      	ldr	r3, [r4, #12]
 8003370:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003372:	1a5b      	subs	r3, r3, r1
 8003374:	4543      	cmp	r3, r8
 8003376:	dcf0      	bgt.n	800335a <_printf_float+0x42a>
 8003378:	e6fe      	b.n	8003178 <_printf_float+0x248>
 800337a:	f04f 0800 	mov.w	r8, #0
 800337e:	f104 0919 	add.w	r9, r4, #25
 8003382:	e7f4      	b.n	800336e <_printf_float+0x43e>

08003384 <_printf_common>:
 8003384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003388:	4616      	mov	r6, r2
 800338a:	4699      	mov	r9, r3
 800338c:	688a      	ldr	r2, [r1, #8]
 800338e:	690b      	ldr	r3, [r1, #16]
 8003390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003394:	4293      	cmp	r3, r2
 8003396:	bfb8      	it	lt
 8003398:	4613      	movlt	r3, r2
 800339a:	6033      	str	r3, [r6, #0]
 800339c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033a0:	4607      	mov	r7, r0
 80033a2:	460c      	mov	r4, r1
 80033a4:	b10a      	cbz	r2, 80033aa <_printf_common+0x26>
 80033a6:	3301      	adds	r3, #1
 80033a8:	6033      	str	r3, [r6, #0]
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	0699      	lsls	r1, r3, #26
 80033ae:	bf42      	ittt	mi
 80033b0:	6833      	ldrmi	r3, [r6, #0]
 80033b2:	3302      	addmi	r3, #2
 80033b4:	6033      	strmi	r3, [r6, #0]
 80033b6:	6825      	ldr	r5, [r4, #0]
 80033b8:	f015 0506 	ands.w	r5, r5, #6
 80033bc:	d106      	bne.n	80033cc <_printf_common+0x48>
 80033be:	f104 0a19 	add.w	sl, r4, #25
 80033c2:	68e3      	ldr	r3, [r4, #12]
 80033c4:	6832      	ldr	r2, [r6, #0]
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	42ab      	cmp	r3, r5
 80033ca:	dc26      	bgt.n	800341a <_printf_common+0x96>
 80033cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033d0:	1e13      	subs	r3, r2, #0
 80033d2:	6822      	ldr	r2, [r4, #0]
 80033d4:	bf18      	it	ne
 80033d6:	2301      	movne	r3, #1
 80033d8:	0692      	lsls	r2, r2, #26
 80033da:	d42b      	bmi.n	8003434 <_printf_common+0xb0>
 80033dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033e0:	4649      	mov	r1, r9
 80033e2:	4638      	mov	r0, r7
 80033e4:	47c0      	blx	r8
 80033e6:	3001      	adds	r0, #1
 80033e8:	d01e      	beq.n	8003428 <_printf_common+0xa4>
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	68e5      	ldr	r5, [r4, #12]
 80033ee:	6832      	ldr	r2, [r6, #0]
 80033f0:	f003 0306 	and.w	r3, r3, #6
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	bf08      	it	eq
 80033f8:	1aad      	subeq	r5, r5, r2
 80033fa:	68a3      	ldr	r3, [r4, #8]
 80033fc:	6922      	ldr	r2, [r4, #16]
 80033fe:	bf0c      	ite	eq
 8003400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003404:	2500      	movne	r5, #0
 8003406:	4293      	cmp	r3, r2
 8003408:	bfc4      	itt	gt
 800340a:	1a9b      	subgt	r3, r3, r2
 800340c:	18ed      	addgt	r5, r5, r3
 800340e:	2600      	movs	r6, #0
 8003410:	341a      	adds	r4, #26
 8003412:	42b5      	cmp	r5, r6
 8003414:	d11a      	bne.n	800344c <_printf_common+0xc8>
 8003416:	2000      	movs	r0, #0
 8003418:	e008      	b.n	800342c <_printf_common+0xa8>
 800341a:	2301      	movs	r3, #1
 800341c:	4652      	mov	r2, sl
 800341e:	4649      	mov	r1, r9
 8003420:	4638      	mov	r0, r7
 8003422:	47c0      	blx	r8
 8003424:	3001      	adds	r0, #1
 8003426:	d103      	bne.n	8003430 <_printf_common+0xac>
 8003428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800342c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003430:	3501      	adds	r5, #1
 8003432:	e7c6      	b.n	80033c2 <_printf_common+0x3e>
 8003434:	18e1      	adds	r1, r4, r3
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	2030      	movs	r0, #48	; 0x30
 800343a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800343e:	4422      	add	r2, r4
 8003440:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003444:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003448:	3302      	adds	r3, #2
 800344a:	e7c7      	b.n	80033dc <_printf_common+0x58>
 800344c:	2301      	movs	r3, #1
 800344e:	4622      	mov	r2, r4
 8003450:	4649      	mov	r1, r9
 8003452:	4638      	mov	r0, r7
 8003454:	47c0      	blx	r8
 8003456:	3001      	adds	r0, #1
 8003458:	d0e6      	beq.n	8003428 <_printf_common+0xa4>
 800345a:	3601      	adds	r6, #1
 800345c:	e7d9      	b.n	8003412 <_printf_common+0x8e>
	...

08003460 <_printf_i>:
 8003460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003464:	460c      	mov	r4, r1
 8003466:	4691      	mov	r9, r2
 8003468:	7e27      	ldrb	r7, [r4, #24]
 800346a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800346c:	2f78      	cmp	r7, #120	; 0x78
 800346e:	4680      	mov	r8, r0
 8003470:	469a      	mov	sl, r3
 8003472:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003476:	d807      	bhi.n	8003488 <_printf_i+0x28>
 8003478:	2f62      	cmp	r7, #98	; 0x62
 800347a:	d80a      	bhi.n	8003492 <_printf_i+0x32>
 800347c:	2f00      	cmp	r7, #0
 800347e:	f000 80d8 	beq.w	8003632 <_printf_i+0x1d2>
 8003482:	2f58      	cmp	r7, #88	; 0x58
 8003484:	f000 80a3 	beq.w	80035ce <_printf_i+0x16e>
 8003488:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800348c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003490:	e03a      	b.n	8003508 <_printf_i+0xa8>
 8003492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003496:	2b15      	cmp	r3, #21
 8003498:	d8f6      	bhi.n	8003488 <_printf_i+0x28>
 800349a:	a001      	add	r0, pc, #4	; (adr r0, 80034a0 <_printf_i+0x40>)
 800349c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80034a0:	080034f9 	.word	0x080034f9
 80034a4:	0800350d 	.word	0x0800350d
 80034a8:	08003489 	.word	0x08003489
 80034ac:	08003489 	.word	0x08003489
 80034b0:	08003489 	.word	0x08003489
 80034b4:	08003489 	.word	0x08003489
 80034b8:	0800350d 	.word	0x0800350d
 80034bc:	08003489 	.word	0x08003489
 80034c0:	08003489 	.word	0x08003489
 80034c4:	08003489 	.word	0x08003489
 80034c8:	08003489 	.word	0x08003489
 80034cc:	08003619 	.word	0x08003619
 80034d0:	0800353d 	.word	0x0800353d
 80034d4:	080035fb 	.word	0x080035fb
 80034d8:	08003489 	.word	0x08003489
 80034dc:	08003489 	.word	0x08003489
 80034e0:	0800363b 	.word	0x0800363b
 80034e4:	08003489 	.word	0x08003489
 80034e8:	0800353d 	.word	0x0800353d
 80034ec:	08003489 	.word	0x08003489
 80034f0:	08003489 	.word	0x08003489
 80034f4:	08003603 	.word	0x08003603
 80034f8:	680b      	ldr	r3, [r1, #0]
 80034fa:	1d1a      	adds	r2, r3, #4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	600a      	str	r2, [r1, #0]
 8003500:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003508:	2301      	movs	r3, #1
 800350a:	e0a3      	b.n	8003654 <_printf_i+0x1f4>
 800350c:	6825      	ldr	r5, [r4, #0]
 800350e:	6808      	ldr	r0, [r1, #0]
 8003510:	062e      	lsls	r6, r5, #24
 8003512:	f100 0304 	add.w	r3, r0, #4
 8003516:	d50a      	bpl.n	800352e <_printf_i+0xce>
 8003518:	6805      	ldr	r5, [r0, #0]
 800351a:	600b      	str	r3, [r1, #0]
 800351c:	2d00      	cmp	r5, #0
 800351e:	da03      	bge.n	8003528 <_printf_i+0xc8>
 8003520:	232d      	movs	r3, #45	; 0x2d
 8003522:	426d      	negs	r5, r5
 8003524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003528:	485e      	ldr	r0, [pc, #376]	; (80036a4 <_printf_i+0x244>)
 800352a:	230a      	movs	r3, #10
 800352c:	e019      	b.n	8003562 <_printf_i+0x102>
 800352e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003532:	6805      	ldr	r5, [r0, #0]
 8003534:	600b      	str	r3, [r1, #0]
 8003536:	bf18      	it	ne
 8003538:	b22d      	sxthne	r5, r5
 800353a:	e7ef      	b.n	800351c <_printf_i+0xbc>
 800353c:	680b      	ldr	r3, [r1, #0]
 800353e:	6825      	ldr	r5, [r4, #0]
 8003540:	1d18      	adds	r0, r3, #4
 8003542:	6008      	str	r0, [r1, #0]
 8003544:	0628      	lsls	r0, r5, #24
 8003546:	d501      	bpl.n	800354c <_printf_i+0xec>
 8003548:	681d      	ldr	r5, [r3, #0]
 800354a:	e002      	b.n	8003552 <_printf_i+0xf2>
 800354c:	0669      	lsls	r1, r5, #25
 800354e:	d5fb      	bpl.n	8003548 <_printf_i+0xe8>
 8003550:	881d      	ldrh	r5, [r3, #0]
 8003552:	4854      	ldr	r0, [pc, #336]	; (80036a4 <_printf_i+0x244>)
 8003554:	2f6f      	cmp	r7, #111	; 0x6f
 8003556:	bf0c      	ite	eq
 8003558:	2308      	moveq	r3, #8
 800355a:	230a      	movne	r3, #10
 800355c:	2100      	movs	r1, #0
 800355e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003562:	6866      	ldr	r6, [r4, #4]
 8003564:	60a6      	str	r6, [r4, #8]
 8003566:	2e00      	cmp	r6, #0
 8003568:	bfa2      	ittt	ge
 800356a:	6821      	ldrge	r1, [r4, #0]
 800356c:	f021 0104 	bicge.w	r1, r1, #4
 8003570:	6021      	strge	r1, [r4, #0]
 8003572:	b90d      	cbnz	r5, 8003578 <_printf_i+0x118>
 8003574:	2e00      	cmp	r6, #0
 8003576:	d04d      	beq.n	8003614 <_printf_i+0x1b4>
 8003578:	4616      	mov	r6, r2
 800357a:	fbb5 f1f3 	udiv	r1, r5, r3
 800357e:	fb03 5711 	mls	r7, r3, r1, r5
 8003582:	5dc7      	ldrb	r7, [r0, r7]
 8003584:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003588:	462f      	mov	r7, r5
 800358a:	42bb      	cmp	r3, r7
 800358c:	460d      	mov	r5, r1
 800358e:	d9f4      	bls.n	800357a <_printf_i+0x11a>
 8003590:	2b08      	cmp	r3, #8
 8003592:	d10b      	bne.n	80035ac <_printf_i+0x14c>
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	07df      	lsls	r7, r3, #31
 8003598:	d508      	bpl.n	80035ac <_printf_i+0x14c>
 800359a:	6923      	ldr	r3, [r4, #16]
 800359c:	6861      	ldr	r1, [r4, #4]
 800359e:	4299      	cmp	r1, r3
 80035a0:	bfde      	ittt	le
 80035a2:	2330      	movle	r3, #48	; 0x30
 80035a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035a8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80035ac:	1b92      	subs	r2, r2, r6
 80035ae:	6122      	str	r2, [r4, #16]
 80035b0:	f8cd a000 	str.w	sl, [sp]
 80035b4:	464b      	mov	r3, r9
 80035b6:	aa03      	add	r2, sp, #12
 80035b8:	4621      	mov	r1, r4
 80035ba:	4640      	mov	r0, r8
 80035bc:	f7ff fee2 	bl	8003384 <_printf_common>
 80035c0:	3001      	adds	r0, #1
 80035c2:	d14c      	bne.n	800365e <_printf_i+0x1fe>
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035c8:	b004      	add	sp, #16
 80035ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ce:	4835      	ldr	r0, [pc, #212]	; (80036a4 <_printf_i+0x244>)
 80035d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	680e      	ldr	r6, [r1, #0]
 80035d8:	061f      	lsls	r7, r3, #24
 80035da:	f856 5b04 	ldr.w	r5, [r6], #4
 80035de:	600e      	str	r6, [r1, #0]
 80035e0:	d514      	bpl.n	800360c <_printf_i+0x1ac>
 80035e2:	07d9      	lsls	r1, r3, #31
 80035e4:	bf44      	itt	mi
 80035e6:	f043 0320 	orrmi.w	r3, r3, #32
 80035ea:	6023      	strmi	r3, [r4, #0]
 80035ec:	b91d      	cbnz	r5, 80035f6 <_printf_i+0x196>
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	f023 0320 	bic.w	r3, r3, #32
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	2310      	movs	r3, #16
 80035f8:	e7b0      	b.n	800355c <_printf_i+0xfc>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	f043 0320 	orr.w	r3, r3, #32
 8003600:	6023      	str	r3, [r4, #0]
 8003602:	2378      	movs	r3, #120	; 0x78
 8003604:	4828      	ldr	r0, [pc, #160]	; (80036a8 <_printf_i+0x248>)
 8003606:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800360a:	e7e3      	b.n	80035d4 <_printf_i+0x174>
 800360c:	065e      	lsls	r6, r3, #25
 800360e:	bf48      	it	mi
 8003610:	b2ad      	uxthmi	r5, r5
 8003612:	e7e6      	b.n	80035e2 <_printf_i+0x182>
 8003614:	4616      	mov	r6, r2
 8003616:	e7bb      	b.n	8003590 <_printf_i+0x130>
 8003618:	680b      	ldr	r3, [r1, #0]
 800361a:	6826      	ldr	r6, [r4, #0]
 800361c:	6960      	ldr	r0, [r4, #20]
 800361e:	1d1d      	adds	r5, r3, #4
 8003620:	600d      	str	r5, [r1, #0]
 8003622:	0635      	lsls	r5, r6, #24
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	d501      	bpl.n	800362c <_printf_i+0x1cc>
 8003628:	6018      	str	r0, [r3, #0]
 800362a:	e002      	b.n	8003632 <_printf_i+0x1d2>
 800362c:	0671      	lsls	r1, r6, #25
 800362e:	d5fb      	bpl.n	8003628 <_printf_i+0x1c8>
 8003630:	8018      	strh	r0, [r3, #0]
 8003632:	2300      	movs	r3, #0
 8003634:	6123      	str	r3, [r4, #16]
 8003636:	4616      	mov	r6, r2
 8003638:	e7ba      	b.n	80035b0 <_printf_i+0x150>
 800363a:	680b      	ldr	r3, [r1, #0]
 800363c:	1d1a      	adds	r2, r3, #4
 800363e:	600a      	str	r2, [r1, #0]
 8003640:	681e      	ldr	r6, [r3, #0]
 8003642:	6862      	ldr	r2, [r4, #4]
 8003644:	2100      	movs	r1, #0
 8003646:	4630      	mov	r0, r6
 8003648:	f7fc fdca 	bl	80001e0 <memchr>
 800364c:	b108      	cbz	r0, 8003652 <_printf_i+0x1f2>
 800364e:	1b80      	subs	r0, r0, r6
 8003650:	6060      	str	r0, [r4, #4]
 8003652:	6863      	ldr	r3, [r4, #4]
 8003654:	6123      	str	r3, [r4, #16]
 8003656:	2300      	movs	r3, #0
 8003658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800365c:	e7a8      	b.n	80035b0 <_printf_i+0x150>
 800365e:	6923      	ldr	r3, [r4, #16]
 8003660:	4632      	mov	r2, r6
 8003662:	4649      	mov	r1, r9
 8003664:	4640      	mov	r0, r8
 8003666:	47d0      	blx	sl
 8003668:	3001      	adds	r0, #1
 800366a:	d0ab      	beq.n	80035c4 <_printf_i+0x164>
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	079b      	lsls	r3, r3, #30
 8003670:	d413      	bmi.n	800369a <_printf_i+0x23a>
 8003672:	68e0      	ldr	r0, [r4, #12]
 8003674:	9b03      	ldr	r3, [sp, #12]
 8003676:	4298      	cmp	r0, r3
 8003678:	bfb8      	it	lt
 800367a:	4618      	movlt	r0, r3
 800367c:	e7a4      	b.n	80035c8 <_printf_i+0x168>
 800367e:	2301      	movs	r3, #1
 8003680:	4632      	mov	r2, r6
 8003682:	4649      	mov	r1, r9
 8003684:	4640      	mov	r0, r8
 8003686:	47d0      	blx	sl
 8003688:	3001      	adds	r0, #1
 800368a:	d09b      	beq.n	80035c4 <_printf_i+0x164>
 800368c:	3501      	adds	r5, #1
 800368e:	68e3      	ldr	r3, [r4, #12]
 8003690:	9903      	ldr	r1, [sp, #12]
 8003692:	1a5b      	subs	r3, r3, r1
 8003694:	42ab      	cmp	r3, r5
 8003696:	dcf2      	bgt.n	800367e <_printf_i+0x21e>
 8003698:	e7eb      	b.n	8003672 <_printf_i+0x212>
 800369a:	2500      	movs	r5, #0
 800369c:	f104 0619 	add.w	r6, r4, #25
 80036a0:	e7f5      	b.n	800368e <_printf_i+0x22e>
 80036a2:	bf00      	nop
 80036a4:	080057be 	.word	0x080057be
 80036a8:	080057cf 	.word	0x080057cf

080036ac <quorem>:
 80036ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b0:	6903      	ldr	r3, [r0, #16]
 80036b2:	690c      	ldr	r4, [r1, #16]
 80036b4:	42a3      	cmp	r3, r4
 80036b6:	4607      	mov	r7, r0
 80036b8:	f2c0 8081 	blt.w	80037be <quorem+0x112>
 80036bc:	3c01      	subs	r4, #1
 80036be:	f101 0814 	add.w	r8, r1, #20
 80036c2:	f100 0514 	add.w	r5, r0, #20
 80036c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80036d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80036d4:	3301      	adds	r3, #1
 80036d6:	429a      	cmp	r2, r3
 80036d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80036dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80036e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80036e4:	d331      	bcc.n	800374a <quorem+0x9e>
 80036e6:	f04f 0e00 	mov.w	lr, #0
 80036ea:	4640      	mov	r0, r8
 80036ec:	46ac      	mov	ip, r5
 80036ee:	46f2      	mov	sl, lr
 80036f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80036f4:	b293      	uxth	r3, r2
 80036f6:	fb06 e303 	mla	r3, r6, r3, lr
 80036fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80036fe:	b29b      	uxth	r3, r3
 8003700:	ebaa 0303 	sub.w	r3, sl, r3
 8003704:	0c12      	lsrs	r2, r2, #16
 8003706:	f8dc a000 	ldr.w	sl, [ip]
 800370a:	fb06 e202 	mla	r2, r6, r2, lr
 800370e:	fa13 f38a 	uxtah	r3, r3, sl
 8003712:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003716:	fa1f fa82 	uxth.w	sl, r2
 800371a:	f8dc 2000 	ldr.w	r2, [ip]
 800371e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003722:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003726:	b29b      	uxth	r3, r3
 8003728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800372c:	4581      	cmp	r9, r0
 800372e:	f84c 3b04 	str.w	r3, [ip], #4
 8003732:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003736:	d2db      	bcs.n	80036f0 <quorem+0x44>
 8003738:	f855 300b 	ldr.w	r3, [r5, fp]
 800373c:	b92b      	cbnz	r3, 800374a <quorem+0x9e>
 800373e:	9b01      	ldr	r3, [sp, #4]
 8003740:	3b04      	subs	r3, #4
 8003742:	429d      	cmp	r5, r3
 8003744:	461a      	mov	r2, r3
 8003746:	d32e      	bcc.n	80037a6 <quorem+0xfa>
 8003748:	613c      	str	r4, [r7, #16]
 800374a:	4638      	mov	r0, r7
 800374c:	f001 f8c0 	bl	80048d0 <__mcmp>
 8003750:	2800      	cmp	r0, #0
 8003752:	db24      	blt.n	800379e <quorem+0xf2>
 8003754:	3601      	adds	r6, #1
 8003756:	4628      	mov	r0, r5
 8003758:	f04f 0c00 	mov.w	ip, #0
 800375c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003760:	f8d0 e000 	ldr.w	lr, [r0]
 8003764:	b293      	uxth	r3, r2
 8003766:	ebac 0303 	sub.w	r3, ip, r3
 800376a:	0c12      	lsrs	r2, r2, #16
 800376c:	fa13 f38e 	uxtah	r3, r3, lr
 8003770:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003774:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003778:	b29b      	uxth	r3, r3
 800377a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800377e:	45c1      	cmp	r9, r8
 8003780:	f840 3b04 	str.w	r3, [r0], #4
 8003784:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003788:	d2e8      	bcs.n	800375c <quorem+0xb0>
 800378a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800378e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003792:	b922      	cbnz	r2, 800379e <quorem+0xf2>
 8003794:	3b04      	subs	r3, #4
 8003796:	429d      	cmp	r5, r3
 8003798:	461a      	mov	r2, r3
 800379a:	d30a      	bcc.n	80037b2 <quorem+0x106>
 800379c:	613c      	str	r4, [r7, #16]
 800379e:	4630      	mov	r0, r6
 80037a0:	b003      	add	sp, #12
 80037a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	3b04      	subs	r3, #4
 80037aa:	2a00      	cmp	r2, #0
 80037ac:	d1cc      	bne.n	8003748 <quorem+0x9c>
 80037ae:	3c01      	subs	r4, #1
 80037b0:	e7c7      	b.n	8003742 <quorem+0x96>
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	3b04      	subs	r3, #4
 80037b6:	2a00      	cmp	r2, #0
 80037b8:	d1f0      	bne.n	800379c <quorem+0xf0>
 80037ba:	3c01      	subs	r4, #1
 80037bc:	e7eb      	b.n	8003796 <quorem+0xea>
 80037be:	2000      	movs	r0, #0
 80037c0:	e7ee      	b.n	80037a0 <quorem+0xf4>
 80037c2:	0000      	movs	r0, r0
 80037c4:	0000      	movs	r0, r0
	...

080037c8 <_dtoa_r>:
 80037c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80037ce:	b099      	sub	sp, #100	; 0x64
 80037d0:	4616      	mov	r6, r2
 80037d2:	461f      	mov	r7, r3
 80037d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80037d8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80037dc:	4605      	mov	r5, r0
 80037de:	b974      	cbnz	r4, 80037fe <_dtoa_r+0x36>
 80037e0:	2010      	movs	r0, #16
 80037e2:	f000 fde3 	bl	80043ac <malloc>
 80037e6:	4602      	mov	r2, r0
 80037e8:	6268      	str	r0, [r5, #36]	; 0x24
 80037ea:	b920      	cbnz	r0, 80037f6 <_dtoa_r+0x2e>
 80037ec:	4ba8      	ldr	r3, [pc, #672]	; (8003a90 <_dtoa_r+0x2c8>)
 80037ee:	21ea      	movs	r1, #234	; 0xea
 80037f0:	48a8      	ldr	r0, [pc, #672]	; (8003a94 <_dtoa_r+0x2cc>)
 80037f2:	f001 fa35 	bl	8004c60 <__assert_func>
 80037f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80037fa:	6004      	str	r4, [r0, #0]
 80037fc:	60c4      	str	r4, [r0, #12]
 80037fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003800:	6819      	ldr	r1, [r3, #0]
 8003802:	b151      	cbz	r1, 800381a <_dtoa_r+0x52>
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	604a      	str	r2, [r1, #4]
 8003808:	2301      	movs	r3, #1
 800380a:	4093      	lsls	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
 800380e:	4628      	mov	r0, r5
 8003810:	f000 fe22 	bl	8004458 <_Bfree>
 8003814:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	1e3b      	subs	r3, r7, #0
 800381c:	bfb9      	ittee	lt
 800381e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003822:	9305      	strlt	r3, [sp, #20]
 8003824:	2300      	movge	r3, #0
 8003826:	f8c8 3000 	strge.w	r3, [r8]
 800382a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800382e:	4b9a      	ldr	r3, [pc, #616]	; (8003a98 <_dtoa_r+0x2d0>)
 8003830:	bfbc      	itt	lt
 8003832:	2201      	movlt	r2, #1
 8003834:	f8c8 2000 	strlt.w	r2, [r8]
 8003838:	ea33 0309 	bics.w	r3, r3, r9
 800383c:	d119      	bne.n	8003872 <_dtoa_r+0xaa>
 800383e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003840:	f242 730f 	movw	r3, #9999	; 0x270f
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800384a:	4333      	orrs	r3, r6
 800384c:	f000 8581 	beq.w	8004352 <_dtoa_r+0xb8a>
 8003850:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003852:	b953      	cbnz	r3, 800386a <_dtoa_r+0xa2>
 8003854:	4b91      	ldr	r3, [pc, #580]	; (8003a9c <_dtoa_r+0x2d4>)
 8003856:	e022      	b.n	800389e <_dtoa_r+0xd6>
 8003858:	4b91      	ldr	r3, [pc, #580]	; (8003aa0 <_dtoa_r+0x2d8>)
 800385a:	9308      	str	r3, [sp, #32]
 800385c:	3308      	adds	r3, #8
 800385e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	9808      	ldr	r0, [sp, #32]
 8003864:	b019      	add	sp, #100	; 0x64
 8003866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800386a:	4b8c      	ldr	r3, [pc, #560]	; (8003a9c <_dtoa_r+0x2d4>)
 800386c:	9308      	str	r3, [sp, #32]
 800386e:	3303      	adds	r3, #3
 8003870:	e7f5      	b.n	800385e <_dtoa_r+0x96>
 8003872:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003876:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800387a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800387e:	2200      	movs	r2, #0
 8003880:	2300      	movs	r3, #0
 8003882:	f7fd f921 	bl	8000ac8 <__aeabi_dcmpeq>
 8003886:	4680      	mov	r8, r0
 8003888:	b158      	cbz	r0, 80038a2 <_dtoa_r+0xda>
 800388a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800388c:	2301      	movs	r3, #1
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 855a 	beq.w	800434c <_dtoa_r+0xb84>
 8003898:	4882      	ldr	r0, [pc, #520]	; (8003aa4 <_dtoa_r+0x2dc>)
 800389a:	6018      	str	r0, [r3, #0]
 800389c:	1e43      	subs	r3, r0, #1
 800389e:	9308      	str	r3, [sp, #32]
 80038a0:	e7df      	b.n	8003862 <_dtoa_r+0x9a>
 80038a2:	ab16      	add	r3, sp, #88	; 0x58
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	ab17      	add	r3, sp, #92	; 0x5c
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	4628      	mov	r0, r5
 80038ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80038b0:	f001 f8b4 	bl	8004a1c <__d2b>
 80038b4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80038b8:	4682      	mov	sl, r0
 80038ba:	2c00      	cmp	r4, #0
 80038bc:	d07e      	beq.n	80039bc <_dtoa_r+0x1f4>
 80038be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038c0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80038c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80038cc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80038d0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80038d4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80038d8:	4b73      	ldr	r3, [pc, #460]	; (8003aa8 <_dtoa_r+0x2e0>)
 80038da:	2200      	movs	r2, #0
 80038dc:	f7fc fcd4 	bl	8000288 <__aeabi_dsub>
 80038e0:	a365      	add	r3, pc, #404	; (adr r3, 8003a78 <_dtoa_r+0x2b0>)
 80038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e6:	f7fc fe87 	bl	80005f8 <__aeabi_dmul>
 80038ea:	a365      	add	r3, pc, #404	; (adr r3, 8003a80 <_dtoa_r+0x2b8>)
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f7fc fccc 	bl	800028c <__adddf3>
 80038f4:	4606      	mov	r6, r0
 80038f6:	4620      	mov	r0, r4
 80038f8:	460f      	mov	r7, r1
 80038fa:	f7fc fe13 	bl	8000524 <__aeabi_i2d>
 80038fe:	a362      	add	r3, pc, #392	; (adr r3, 8003a88 <_dtoa_r+0x2c0>)
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f7fc fe78 	bl	80005f8 <__aeabi_dmul>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4630      	mov	r0, r6
 800390e:	4639      	mov	r1, r7
 8003910:	f7fc fcbc 	bl	800028c <__adddf3>
 8003914:	4606      	mov	r6, r0
 8003916:	460f      	mov	r7, r1
 8003918:	f7fd f91e 	bl	8000b58 <__aeabi_d2iz>
 800391c:	2200      	movs	r2, #0
 800391e:	4681      	mov	r9, r0
 8003920:	2300      	movs	r3, #0
 8003922:	4630      	mov	r0, r6
 8003924:	4639      	mov	r1, r7
 8003926:	f7fd f8d9 	bl	8000adc <__aeabi_dcmplt>
 800392a:	b148      	cbz	r0, 8003940 <_dtoa_r+0x178>
 800392c:	4648      	mov	r0, r9
 800392e:	f7fc fdf9 	bl	8000524 <__aeabi_i2d>
 8003932:	4632      	mov	r2, r6
 8003934:	463b      	mov	r3, r7
 8003936:	f7fd f8c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800393a:	b908      	cbnz	r0, 8003940 <_dtoa_r+0x178>
 800393c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003940:	f1b9 0f16 	cmp.w	r9, #22
 8003944:	d857      	bhi.n	80039f6 <_dtoa_r+0x22e>
 8003946:	4b59      	ldr	r3, [pc, #356]	; (8003aac <_dtoa_r+0x2e4>)
 8003948:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003954:	f7fd f8c2 	bl	8000adc <__aeabi_dcmplt>
 8003958:	2800      	cmp	r0, #0
 800395a:	d04e      	beq.n	80039fa <_dtoa_r+0x232>
 800395c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003960:	2300      	movs	r3, #0
 8003962:	930f      	str	r3, [sp, #60]	; 0x3c
 8003964:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003966:	1b1c      	subs	r4, r3, r4
 8003968:	1e63      	subs	r3, r4, #1
 800396a:	9309      	str	r3, [sp, #36]	; 0x24
 800396c:	bf45      	ittet	mi
 800396e:	f1c4 0301 	rsbmi	r3, r4, #1
 8003972:	9306      	strmi	r3, [sp, #24]
 8003974:	2300      	movpl	r3, #0
 8003976:	2300      	movmi	r3, #0
 8003978:	bf4c      	ite	mi
 800397a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800397c:	9306      	strpl	r3, [sp, #24]
 800397e:	f1b9 0f00 	cmp.w	r9, #0
 8003982:	db3c      	blt.n	80039fe <_dtoa_r+0x236>
 8003984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003986:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800398a:	444b      	add	r3, r9
 800398c:	9309      	str	r3, [sp, #36]	; 0x24
 800398e:	2300      	movs	r3, #0
 8003990:	930a      	str	r3, [sp, #40]	; 0x28
 8003992:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003994:	2b09      	cmp	r3, #9
 8003996:	f200 808d 	bhi.w	8003ab4 <_dtoa_r+0x2ec>
 800399a:	2b05      	cmp	r3, #5
 800399c:	bfc4      	itt	gt
 800399e:	3b04      	subgt	r3, #4
 80039a0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80039a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80039a4:	f1a3 0302 	sub.w	r3, r3, #2
 80039a8:	bfcc      	ite	gt
 80039aa:	2400      	movgt	r4, #0
 80039ac:	2401      	movle	r4, #1
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	f200 808c 	bhi.w	8003acc <_dtoa_r+0x304>
 80039b4:	e8df f003 	tbb	[pc, r3]
 80039b8:	5b4d4f2d 	.word	0x5b4d4f2d
 80039bc:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80039c0:	441c      	add	r4, r3
 80039c2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	bfc3      	ittte	gt
 80039ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80039ce:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80039d2:	fa09 f303 	lslgt.w	r3, r9, r3
 80039d6:	f1c3 0320 	rsble	r3, r3, #32
 80039da:	bfc6      	itte	gt
 80039dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80039e0:	4318      	orrgt	r0, r3
 80039e2:	fa06 f003 	lslle.w	r0, r6, r3
 80039e6:	f7fc fd8d 	bl	8000504 <__aeabi_ui2d>
 80039ea:	2301      	movs	r3, #1
 80039ec:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80039f0:	3c01      	subs	r4, #1
 80039f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80039f4:	e770      	b.n	80038d8 <_dtoa_r+0x110>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e7b3      	b.n	8003962 <_dtoa_r+0x19a>
 80039fa:	900f      	str	r0, [sp, #60]	; 0x3c
 80039fc:	e7b2      	b.n	8003964 <_dtoa_r+0x19c>
 80039fe:	9b06      	ldr	r3, [sp, #24]
 8003a00:	eba3 0309 	sub.w	r3, r3, r9
 8003a04:	9306      	str	r3, [sp, #24]
 8003a06:	f1c9 0300 	rsb	r3, r9, #0
 8003a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	930e      	str	r3, [sp, #56]	; 0x38
 8003a10:	e7bf      	b.n	8003992 <_dtoa_r+0x1ca>
 8003a12:	2300      	movs	r3, #0
 8003a14:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	dc5a      	bgt.n	8003ad2 <_dtoa_r+0x30a>
 8003a1c:	f04f 0b01 	mov.w	fp, #1
 8003a20:	f8cd b008 	str.w	fp, [sp, #8]
 8003a24:	465b      	mov	r3, fp
 8003a26:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003a2a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	6042      	str	r2, [r0, #4]
 8003a30:	2204      	movs	r2, #4
 8003a32:	f102 0614 	add.w	r6, r2, #20
 8003a36:	429e      	cmp	r6, r3
 8003a38:	6841      	ldr	r1, [r0, #4]
 8003a3a:	d950      	bls.n	8003ade <_dtoa_r+0x316>
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f000 fccb 	bl	80043d8 <_Balloc>
 8003a42:	9008      	str	r0, [sp, #32]
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d14e      	bne.n	8003ae6 <_dtoa_r+0x31e>
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <_dtoa_r+0x2e8>)
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003a50:	e6ce      	b.n	80037f0 <_dtoa_r+0x28>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e7de      	b.n	8003a14 <_dtoa_r+0x24c>
 8003a56:	2300      	movs	r3, #0
 8003a58:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003a5c:	eb09 0b03 	add.w	fp, r9, r3
 8003a60:	f10b 0301 	add.w	r3, fp, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	9302      	str	r3, [sp, #8]
 8003a68:	bfb8      	it	lt
 8003a6a:	2301      	movlt	r3, #1
 8003a6c:	e7dd      	b.n	8003a2a <_dtoa_r+0x262>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e7f2      	b.n	8003a58 <_dtoa_r+0x290>
 8003a72:	bf00      	nop
 8003a74:	f3af 8000 	nop.w
 8003a78:	636f4361 	.word	0x636f4361
 8003a7c:	3fd287a7 	.word	0x3fd287a7
 8003a80:	8b60c8b3 	.word	0x8b60c8b3
 8003a84:	3fc68a28 	.word	0x3fc68a28
 8003a88:	509f79fb 	.word	0x509f79fb
 8003a8c:	3fd34413 	.word	0x3fd34413
 8003a90:	080057ed 	.word	0x080057ed
 8003a94:	08005804 	.word	0x08005804
 8003a98:	7ff00000 	.word	0x7ff00000
 8003a9c:	080057e9 	.word	0x080057e9
 8003aa0:	080057e0 	.word	0x080057e0
 8003aa4:	080057bd 	.word	0x080057bd
 8003aa8:	3ff80000 	.word	0x3ff80000
 8003aac:	08005900 	.word	0x08005900
 8003ab0:	08005863 	.word	0x08005863
 8003ab4:	2401      	movs	r4, #1
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	9322      	str	r3, [sp, #136]	; 0x88
 8003aba:	940b      	str	r4, [sp, #44]	; 0x2c
 8003abc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8cd b008 	str.w	fp, [sp, #8]
 8003ac6:	2312      	movs	r3, #18
 8003ac8:	9223      	str	r2, [sp, #140]	; 0x8c
 8003aca:	e7ae      	b.n	8003a2a <_dtoa_r+0x262>
 8003acc:	2301      	movs	r3, #1
 8003ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ad0:	e7f4      	b.n	8003abc <_dtoa_r+0x2f4>
 8003ad2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003ad6:	f8cd b008 	str.w	fp, [sp, #8]
 8003ada:	465b      	mov	r3, fp
 8003adc:	e7a5      	b.n	8003a2a <_dtoa_r+0x262>
 8003ade:	3101      	adds	r1, #1
 8003ae0:	6041      	str	r1, [r0, #4]
 8003ae2:	0052      	lsls	r2, r2, #1
 8003ae4:	e7a5      	b.n	8003a32 <_dtoa_r+0x26a>
 8003ae6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ae8:	9a08      	ldr	r2, [sp, #32]
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	9b02      	ldr	r3, [sp, #8]
 8003aee:	2b0e      	cmp	r3, #14
 8003af0:	f200 80a8 	bhi.w	8003c44 <_dtoa_r+0x47c>
 8003af4:	2c00      	cmp	r4, #0
 8003af6:	f000 80a5 	beq.w	8003c44 <_dtoa_r+0x47c>
 8003afa:	f1b9 0f00 	cmp.w	r9, #0
 8003afe:	dd34      	ble.n	8003b6a <_dtoa_r+0x3a2>
 8003b00:	4a9a      	ldr	r2, [pc, #616]	; (8003d6c <_dtoa_r+0x5a4>)
 8003b02:	f009 030f 	and.w	r3, r9, #15
 8003b06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003b0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b0e:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003b12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003b16:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003b1a:	d016      	beq.n	8003b4a <_dtoa_r+0x382>
 8003b1c:	4b94      	ldr	r3, [pc, #592]	; (8003d70 <_dtoa_r+0x5a8>)
 8003b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b26:	f7fc fe91 	bl	800084c <__aeabi_ddiv>
 8003b2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b2e:	f004 040f 	and.w	r4, r4, #15
 8003b32:	2703      	movs	r7, #3
 8003b34:	4e8e      	ldr	r6, [pc, #568]	; (8003d70 <_dtoa_r+0x5a8>)
 8003b36:	b954      	cbnz	r4, 8003b4e <_dtoa_r+0x386>
 8003b38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b40:	f7fc fe84 	bl	800084c <__aeabi_ddiv>
 8003b44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b48:	e029      	b.n	8003b9e <_dtoa_r+0x3d6>
 8003b4a:	2702      	movs	r7, #2
 8003b4c:	e7f2      	b.n	8003b34 <_dtoa_r+0x36c>
 8003b4e:	07e1      	lsls	r1, r4, #31
 8003b50:	d508      	bpl.n	8003b64 <_dtoa_r+0x39c>
 8003b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003b56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003b5a:	f7fc fd4d 	bl	80005f8 <__aeabi_dmul>
 8003b5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003b62:	3701      	adds	r7, #1
 8003b64:	1064      	asrs	r4, r4, #1
 8003b66:	3608      	adds	r6, #8
 8003b68:	e7e5      	b.n	8003b36 <_dtoa_r+0x36e>
 8003b6a:	f000 80a5 	beq.w	8003cb8 <_dtoa_r+0x4f0>
 8003b6e:	f1c9 0400 	rsb	r4, r9, #0
 8003b72:	4b7e      	ldr	r3, [pc, #504]	; (8003d6c <_dtoa_r+0x5a4>)
 8003b74:	4e7e      	ldr	r6, [pc, #504]	; (8003d70 <_dtoa_r+0x5a8>)
 8003b76:	f004 020f 	and.w	r2, r4, #15
 8003b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b86:	f7fc fd37 	bl	80005f8 <__aeabi_dmul>
 8003b8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b8e:	1124      	asrs	r4, r4, #4
 8003b90:	2300      	movs	r3, #0
 8003b92:	2702      	movs	r7, #2
 8003b94:	2c00      	cmp	r4, #0
 8003b96:	f040 8084 	bne.w	8003ca2 <_dtoa_r+0x4da>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1d2      	bne.n	8003b44 <_dtoa_r+0x37c>
 8003b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 808b 	beq.w	8003cbc <_dtoa_r+0x4f4>
 8003ba6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003baa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003bae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003bb2:	4b70      	ldr	r3, [pc, #448]	; (8003d74 <_dtoa_r+0x5ac>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f7fc ff91 	bl	8000adc <__aeabi_dcmplt>
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d07e      	beq.n	8003cbc <_dtoa_r+0x4f4>
 8003bbe:	9b02      	ldr	r3, [sp, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d07b      	beq.n	8003cbc <_dtoa_r+0x4f4>
 8003bc4:	f1bb 0f00 	cmp.w	fp, #0
 8003bc8:	dd38      	ble.n	8003c3c <_dtoa_r+0x474>
 8003bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003bce:	4b6a      	ldr	r3, [pc, #424]	; (8003d78 <_dtoa_r+0x5b0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f7fc fd11 	bl	80005f8 <__aeabi_dmul>
 8003bd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003bda:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8003bde:	3701      	adds	r7, #1
 8003be0:	465c      	mov	r4, fp
 8003be2:	4638      	mov	r0, r7
 8003be4:	f7fc fc9e 	bl	8000524 <__aeabi_i2d>
 8003be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bec:	f7fc fd04 	bl	80005f8 <__aeabi_dmul>
 8003bf0:	4b62      	ldr	r3, [pc, #392]	; (8003d7c <_dtoa_r+0x5b4>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f7fc fb4a 	bl	800028c <__adddf3>
 8003bf8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003bfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003c00:	9611      	str	r6, [sp, #68]	; 0x44
 8003c02:	2c00      	cmp	r4, #0
 8003c04:	d15d      	bne.n	8003cc2 <_dtoa_r+0x4fa>
 8003c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c0a:	4b5d      	ldr	r3, [pc, #372]	; (8003d80 <_dtoa_r+0x5b8>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f7fc fb3b 	bl	8000288 <__aeabi_dsub>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003c1c:	4633      	mov	r3, r6
 8003c1e:	f7fc ff7b 	bl	8000b18 <__aeabi_dcmpgt>
 8003c22:	2800      	cmp	r0, #0
 8003c24:	f040 829e 	bne.w	8004164 <_dtoa_r+0x99c>
 8003c28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003c2e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003c32:	f7fc ff53 	bl	8000adc <__aeabi_dcmplt>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	f040 8292 	bne.w	8004160 <_dtoa_r+0x998>
 8003c3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003c40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003c44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f2c0 8153 	blt.w	8003ef2 <_dtoa_r+0x72a>
 8003c4c:	f1b9 0f0e 	cmp.w	r9, #14
 8003c50:	f300 814f 	bgt.w	8003ef2 <_dtoa_r+0x72a>
 8003c54:	4b45      	ldr	r3, [pc, #276]	; (8003d6c <_dtoa_r+0x5a4>)
 8003c56:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003c5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003c62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f280 80db 	bge.w	8003e20 <_dtoa_r+0x658>
 8003c6a:	9b02      	ldr	r3, [sp, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f300 80d7 	bgt.w	8003e20 <_dtoa_r+0x658>
 8003c72:	f040 8274 	bne.w	800415e <_dtoa_r+0x996>
 8003c76:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <_dtoa_r+0x5b8>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c7e:	f7fc fcbb 	bl	80005f8 <__aeabi_dmul>
 8003c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c86:	f7fc ff3d 	bl	8000b04 <__aeabi_dcmpge>
 8003c8a:	9c02      	ldr	r4, [sp, #8]
 8003c8c:	4626      	mov	r6, r4
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	f040 824a 	bne.w	8004128 <_dtoa_r+0x960>
 8003c94:	9f08      	ldr	r7, [sp, #32]
 8003c96:	2331      	movs	r3, #49	; 0x31
 8003c98:	f807 3b01 	strb.w	r3, [r7], #1
 8003c9c:	f109 0901 	add.w	r9, r9, #1
 8003ca0:	e246      	b.n	8004130 <_dtoa_r+0x968>
 8003ca2:	07e2      	lsls	r2, r4, #31
 8003ca4:	d505      	bpl.n	8003cb2 <_dtoa_r+0x4ea>
 8003ca6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003caa:	f7fc fca5 	bl	80005f8 <__aeabi_dmul>
 8003cae:	3701      	adds	r7, #1
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	1064      	asrs	r4, r4, #1
 8003cb4:	3608      	adds	r6, #8
 8003cb6:	e76d      	b.n	8003b94 <_dtoa_r+0x3cc>
 8003cb8:	2702      	movs	r7, #2
 8003cba:	e770      	b.n	8003b9e <_dtoa_r+0x3d6>
 8003cbc:	9c02      	ldr	r4, [sp, #8]
 8003cbe:	46c8      	mov	r8, r9
 8003cc0:	e78f      	b.n	8003be2 <_dtoa_r+0x41a>
 8003cc2:	9908      	ldr	r1, [sp, #32]
 8003cc4:	4b29      	ldr	r3, [pc, #164]	; (8003d6c <_dtoa_r+0x5a4>)
 8003cc6:	4421      	add	r1, r4
 8003cc8:	9112      	str	r1, [sp, #72]	; 0x48
 8003cca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ccc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003cd0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003cd4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003cd8:	2900      	cmp	r1, #0
 8003cda:	d055      	beq.n	8003d88 <_dtoa_r+0x5c0>
 8003cdc:	4929      	ldr	r1, [pc, #164]	; (8003d84 <_dtoa_r+0x5bc>)
 8003cde:	2000      	movs	r0, #0
 8003ce0:	f7fc fdb4 	bl	800084c <__aeabi_ddiv>
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	4632      	mov	r2, r6
 8003ce8:	f7fc face 	bl	8000288 <__aeabi_dsub>
 8003cec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003cf0:	9f08      	ldr	r7, [sp, #32]
 8003cf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003cf6:	f7fc ff2f 	bl	8000b58 <__aeabi_d2iz>
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	f7fc fc12 	bl	8000524 <__aeabi_i2d>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d08:	f7fc fabe 	bl	8000288 <__aeabi_dsub>
 8003d0c:	3430      	adds	r4, #48	; 0x30
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003d16:	f807 4b01 	strb.w	r4, [r7], #1
 8003d1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003d1e:	f7fc fedd 	bl	8000adc <__aeabi_dcmplt>
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d174      	bne.n	8003e10 <_dtoa_r+0x648>
 8003d26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d2a:	4912      	ldr	r1, [pc, #72]	; (8003d74 <_dtoa_r+0x5ac>)
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	f7fc faab 	bl	8000288 <__aeabi_dsub>
 8003d32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003d36:	f7fc fed1 	bl	8000adc <__aeabi_dcmplt>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	f040 80b6 	bne.w	8003eac <_dtoa_r+0x6e4>
 8003d40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d42:	429f      	cmp	r7, r3
 8003d44:	f43f af7a 	beq.w	8003c3c <_dtoa_r+0x474>
 8003d48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <_dtoa_r+0x5b0>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f7fc fc52 	bl	80005f8 <__aeabi_dmul>
 8003d54:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <_dtoa_r+0x5b0>)
 8003d56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d60:	f7fc fc4a 	bl	80005f8 <__aeabi_dmul>
 8003d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d68:	e7c3      	b.n	8003cf2 <_dtoa_r+0x52a>
 8003d6a:	bf00      	nop
 8003d6c:	08005900 	.word	0x08005900
 8003d70:	080058d8 	.word	0x080058d8
 8003d74:	3ff00000 	.word	0x3ff00000
 8003d78:	40240000 	.word	0x40240000
 8003d7c:	401c0000 	.word	0x401c0000
 8003d80:	40140000 	.word	0x40140000
 8003d84:	3fe00000 	.word	0x3fe00000
 8003d88:	4630      	mov	r0, r6
 8003d8a:	4639      	mov	r1, r7
 8003d8c:	f7fc fc34 	bl	80005f8 <__aeabi_dmul>
 8003d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d96:	9c08      	ldr	r4, [sp, #32]
 8003d98:	9314      	str	r3, [sp, #80]	; 0x50
 8003d9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d9e:	f7fc fedb 	bl	8000b58 <__aeabi_d2iz>
 8003da2:	9015      	str	r0, [sp, #84]	; 0x54
 8003da4:	f7fc fbbe 	bl	8000524 <__aeabi_i2d>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003db0:	f7fc fa6a 	bl	8000288 <__aeabi_dsub>
 8003db4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003db6:	3330      	adds	r3, #48	; 0x30
 8003db8:	f804 3b01 	strb.w	r3, [r4], #1
 8003dbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003dbe:	429c      	cmp	r4, r3
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	460f      	mov	r7, r1
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	d124      	bne.n	8003e14 <_dtoa_r+0x64c>
 8003dca:	4bb2      	ldr	r3, [pc, #712]	; (8004094 <_dtoa_r+0x8cc>)
 8003dcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003dd0:	f7fc fa5c 	bl	800028c <__adddf3>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4630      	mov	r0, r6
 8003dda:	4639      	mov	r1, r7
 8003ddc:	f7fc fe9c 	bl	8000b18 <__aeabi_dcmpgt>
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d162      	bne.n	8003eaa <_dtoa_r+0x6e2>
 8003de4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003de8:	49aa      	ldr	r1, [pc, #680]	; (8004094 <_dtoa_r+0x8cc>)
 8003dea:	2000      	movs	r0, #0
 8003dec:	f7fc fa4c 	bl	8000288 <__aeabi_dsub>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4630      	mov	r0, r6
 8003df6:	4639      	mov	r1, r7
 8003df8:	f7fc fe70 	bl	8000adc <__aeabi_dcmplt>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	f43f af1d 	beq.w	8003c3c <_dtoa_r+0x474>
 8003e02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003e04:	1e7b      	subs	r3, r7, #1
 8003e06:	9314      	str	r3, [sp, #80]	; 0x50
 8003e08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003e0c:	2b30      	cmp	r3, #48	; 0x30
 8003e0e:	d0f8      	beq.n	8003e02 <_dtoa_r+0x63a>
 8003e10:	46c1      	mov	r9, r8
 8003e12:	e03a      	b.n	8003e8a <_dtoa_r+0x6c2>
 8003e14:	4ba0      	ldr	r3, [pc, #640]	; (8004098 <_dtoa_r+0x8d0>)
 8003e16:	f7fc fbef 	bl	80005f8 <__aeabi_dmul>
 8003e1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e1e:	e7bc      	b.n	8003d9a <_dtoa_r+0x5d2>
 8003e20:	9f08      	ldr	r7, [sp, #32]
 8003e22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e2a:	f7fc fd0f 	bl	800084c <__aeabi_ddiv>
 8003e2e:	f7fc fe93 	bl	8000b58 <__aeabi_d2iz>
 8003e32:	4604      	mov	r4, r0
 8003e34:	f7fc fb76 	bl	8000524 <__aeabi_i2d>
 8003e38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e3c:	f7fc fbdc 	bl	80005f8 <__aeabi_dmul>
 8003e40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003e44:	460b      	mov	r3, r1
 8003e46:	4602      	mov	r2, r0
 8003e48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e4c:	f7fc fa1c 	bl	8000288 <__aeabi_dsub>
 8003e50:	f807 6b01 	strb.w	r6, [r7], #1
 8003e54:	9e08      	ldr	r6, [sp, #32]
 8003e56:	9b02      	ldr	r3, [sp, #8]
 8003e58:	1bbe      	subs	r6, r7, r6
 8003e5a:	42b3      	cmp	r3, r6
 8003e5c:	d13a      	bne.n	8003ed4 <_dtoa_r+0x70c>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	f7fc fa13 	bl	800028c <__adddf3>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e72:	f7fc fe51 	bl	8000b18 <__aeabi_dcmpgt>
 8003e76:	bb58      	cbnz	r0, 8003ed0 <_dtoa_r+0x708>
 8003e78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e80:	f7fc fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e84:	b108      	cbz	r0, 8003e8a <_dtoa_r+0x6c2>
 8003e86:	07e1      	lsls	r1, r4, #31
 8003e88:	d422      	bmi.n	8003ed0 <_dtoa_r+0x708>
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	4651      	mov	r1, sl
 8003e8e:	f000 fae3 	bl	8004458 <_Bfree>
 8003e92:	2300      	movs	r3, #0
 8003e94:	703b      	strb	r3, [r7, #0]
 8003e96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003e98:	f109 0001 	add.w	r0, r9, #1
 8003e9c:	6018      	str	r0, [r3, #0]
 8003e9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f43f acde 	beq.w	8003862 <_dtoa_r+0x9a>
 8003ea6:	601f      	str	r7, [r3, #0]
 8003ea8:	e4db      	b.n	8003862 <_dtoa_r+0x9a>
 8003eaa:	4627      	mov	r7, r4
 8003eac:	463b      	mov	r3, r7
 8003eae:	461f      	mov	r7, r3
 8003eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003eb4:	2a39      	cmp	r2, #57	; 0x39
 8003eb6:	d107      	bne.n	8003ec8 <_dtoa_r+0x700>
 8003eb8:	9a08      	ldr	r2, [sp, #32]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d1f7      	bne.n	8003eae <_dtoa_r+0x6e6>
 8003ebe:	9908      	ldr	r1, [sp, #32]
 8003ec0:	2230      	movs	r2, #48	; 0x30
 8003ec2:	f108 0801 	add.w	r8, r8, #1
 8003ec6:	700a      	strb	r2, [r1, #0]
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	3201      	adds	r2, #1
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e79f      	b.n	8003e10 <_dtoa_r+0x648>
 8003ed0:	46c8      	mov	r8, r9
 8003ed2:	e7eb      	b.n	8003eac <_dtoa_r+0x6e4>
 8003ed4:	4b70      	ldr	r3, [pc, #448]	; (8004098 <_dtoa_r+0x8d0>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f7fc fb8e 	bl	80005f8 <__aeabi_dmul>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f7fc fdee 	bl	8000ac8 <__aeabi_dcmpeq>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d098      	beq.n	8003e22 <_dtoa_r+0x65a>
 8003ef0:	e7cb      	b.n	8003e8a <_dtoa_r+0x6c2>
 8003ef2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ef4:	2a00      	cmp	r2, #0
 8003ef6:	f000 80d1 	beq.w	800409c <_dtoa_r+0x8d4>
 8003efa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003efc:	2a01      	cmp	r2, #1
 8003efe:	f300 80af 	bgt.w	8004060 <_dtoa_r+0x898>
 8003f02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003f04:	2a00      	cmp	r2, #0
 8003f06:	f000 80a7 	beq.w	8004058 <_dtoa_r+0x890>
 8003f0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003f0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003f10:	9f06      	ldr	r7, [sp, #24]
 8003f12:	9a06      	ldr	r2, [sp, #24]
 8003f14:	441a      	add	r2, r3
 8003f16:	9206      	str	r2, [sp, #24]
 8003f18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	441a      	add	r2, r3
 8003f1e:	4628      	mov	r0, r5
 8003f20:	9209      	str	r2, [sp, #36]	; 0x24
 8003f22:	f000 fb53 	bl	80045cc <__i2b>
 8003f26:	4606      	mov	r6, r0
 8003f28:	2f00      	cmp	r7, #0
 8003f2a:	dd0c      	ble.n	8003f46 <_dtoa_r+0x77e>
 8003f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	dd09      	ble.n	8003f46 <_dtoa_r+0x77e>
 8003f32:	42bb      	cmp	r3, r7
 8003f34:	9a06      	ldr	r2, [sp, #24]
 8003f36:	bfa8      	it	ge
 8003f38:	463b      	movge	r3, r7
 8003f3a:	1ad2      	subs	r2, r2, r3
 8003f3c:	9206      	str	r2, [sp, #24]
 8003f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f40:	1aff      	subs	r7, r7, r3
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	9309      	str	r3, [sp, #36]	; 0x24
 8003f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f48:	b1f3      	cbz	r3, 8003f88 <_dtoa_r+0x7c0>
 8003f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80a9 	beq.w	80040a4 <_dtoa_r+0x8dc>
 8003f52:	2c00      	cmp	r4, #0
 8003f54:	dd10      	ble.n	8003f78 <_dtoa_r+0x7b0>
 8003f56:	4631      	mov	r1, r6
 8003f58:	4622      	mov	r2, r4
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f000 fbf2 	bl	8004744 <__pow5mult>
 8003f60:	4652      	mov	r2, sl
 8003f62:	4601      	mov	r1, r0
 8003f64:	4606      	mov	r6, r0
 8003f66:	4628      	mov	r0, r5
 8003f68:	f000 fb46 	bl	80045f8 <__multiply>
 8003f6c:	4651      	mov	r1, sl
 8003f6e:	4680      	mov	r8, r0
 8003f70:	4628      	mov	r0, r5
 8003f72:	f000 fa71 	bl	8004458 <_Bfree>
 8003f76:	46c2      	mov	sl, r8
 8003f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f7a:	1b1a      	subs	r2, r3, r4
 8003f7c:	d004      	beq.n	8003f88 <_dtoa_r+0x7c0>
 8003f7e:	4651      	mov	r1, sl
 8003f80:	4628      	mov	r0, r5
 8003f82:	f000 fbdf 	bl	8004744 <__pow5mult>
 8003f86:	4682      	mov	sl, r0
 8003f88:	2101      	movs	r1, #1
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f000 fb1e 	bl	80045cc <__i2b>
 8003f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	4604      	mov	r4, r0
 8003f96:	f340 8087 	ble.w	80040a8 <_dtoa_r+0x8e0>
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4601      	mov	r1, r0
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f000 fbd0 	bl	8004744 <__pow5mult>
 8003fa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	4604      	mov	r4, r0
 8003faa:	f340 8080 	ble.w	80040ae <_dtoa_r+0x8e6>
 8003fae:	f04f 0800 	mov.w	r8, #0
 8003fb2:	6923      	ldr	r3, [r4, #16]
 8003fb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003fb8:	6918      	ldr	r0, [r3, #16]
 8003fba:	f000 fab9 	bl	8004530 <__hi0bits>
 8003fbe:	f1c0 0020 	rsb	r0, r0, #32
 8003fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc4:	4418      	add	r0, r3
 8003fc6:	f010 001f 	ands.w	r0, r0, #31
 8003fca:	f000 8092 	beq.w	80040f2 <_dtoa_r+0x92a>
 8003fce:	f1c0 0320 	rsb	r3, r0, #32
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	f340 808a 	ble.w	80040ec <_dtoa_r+0x924>
 8003fd8:	f1c0 001c 	rsb	r0, r0, #28
 8003fdc:	9b06      	ldr	r3, [sp, #24]
 8003fde:	4403      	add	r3, r0
 8003fe0:	9306      	str	r3, [sp, #24]
 8003fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe4:	4403      	add	r3, r0
 8003fe6:	4407      	add	r7, r0
 8003fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fea:	9b06      	ldr	r3, [sp, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	dd05      	ble.n	8003ffc <_dtoa_r+0x834>
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	f000 fbff 	bl	80047f8 <__lshift>
 8003ffa:	4682      	mov	sl, r0
 8003ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	dd05      	ble.n	800400e <_dtoa_r+0x846>
 8004002:	4621      	mov	r1, r4
 8004004:	461a      	mov	r2, r3
 8004006:	4628      	mov	r0, r5
 8004008:	f000 fbf6 	bl	80047f8 <__lshift>
 800400c:	4604      	mov	r4, r0
 800400e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d070      	beq.n	80040f6 <_dtoa_r+0x92e>
 8004014:	4621      	mov	r1, r4
 8004016:	4650      	mov	r0, sl
 8004018:	f000 fc5a 	bl	80048d0 <__mcmp>
 800401c:	2800      	cmp	r0, #0
 800401e:	da6a      	bge.n	80040f6 <_dtoa_r+0x92e>
 8004020:	2300      	movs	r3, #0
 8004022:	4651      	mov	r1, sl
 8004024:	220a      	movs	r2, #10
 8004026:	4628      	mov	r0, r5
 8004028:	f000 fa38 	bl	800449c <__multadd>
 800402c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800402e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004032:	4682      	mov	sl, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8193 	beq.w	8004360 <_dtoa_r+0xb98>
 800403a:	4631      	mov	r1, r6
 800403c:	2300      	movs	r3, #0
 800403e:	220a      	movs	r2, #10
 8004040:	4628      	mov	r0, r5
 8004042:	f000 fa2b 	bl	800449c <__multadd>
 8004046:	f1bb 0f00 	cmp.w	fp, #0
 800404a:	4606      	mov	r6, r0
 800404c:	f300 8093 	bgt.w	8004176 <_dtoa_r+0x9ae>
 8004050:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004052:	2b02      	cmp	r3, #2
 8004054:	dc57      	bgt.n	8004106 <_dtoa_r+0x93e>
 8004056:	e08e      	b.n	8004176 <_dtoa_r+0x9ae>
 8004058:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800405a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800405e:	e756      	b.n	8003f0e <_dtoa_r+0x746>
 8004060:	9b02      	ldr	r3, [sp, #8]
 8004062:	1e5c      	subs	r4, r3, #1
 8004064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004066:	42a3      	cmp	r3, r4
 8004068:	bfbf      	itttt	lt
 800406a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800406c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800406e:	1ae2      	sublt	r2, r4, r3
 8004070:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004072:	bfb6      	itet	lt
 8004074:	189b      	addlt	r3, r3, r2
 8004076:	1b1c      	subge	r4, r3, r4
 8004078:	930e      	strlt	r3, [sp, #56]	; 0x38
 800407a:	9b02      	ldr	r3, [sp, #8]
 800407c:	bfb8      	it	lt
 800407e:	2400      	movlt	r4, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	bfb9      	ittee	lt
 8004084:	9b06      	ldrlt	r3, [sp, #24]
 8004086:	9a02      	ldrlt	r2, [sp, #8]
 8004088:	9f06      	ldrge	r7, [sp, #24]
 800408a:	9b02      	ldrge	r3, [sp, #8]
 800408c:	bfbc      	itt	lt
 800408e:	1a9f      	sublt	r7, r3, r2
 8004090:	2300      	movlt	r3, #0
 8004092:	e73e      	b.n	8003f12 <_dtoa_r+0x74a>
 8004094:	3fe00000 	.word	0x3fe00000
 8004098:	40240000 	.word	0x40240000
 800409c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800409e:	9f06      	ldr	r7, [sp, #24]
 80040a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80040a2:	e741      	b.n	8003f28 <_dtoa_r+0x760>
 80040a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040a6:	e76a      	b.n	8003f7e <_dtoa_r+0x7b6>
 80040a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	dc19      	bgt.n	80040e2 <_dtoa_r+0x91a>
 80040ae:	9b04      	ldr	r3, [sp, #16]
 80040b0:	b9bb      	cbnz	r3, 80040e2 <_dtoa_r+0x91a>
 80040b2:	9b05      	ldr	r3, [sp, #20]
 80040b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b8:	b99b      	cbnz	r3, 80040e2 <_dtoa_r+0x91a>
 80040ba:	9b05      	ldr	r3, [sp, #20]
 80040bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040c0:	0d1b      	lsrs	r3, r3, #20
 80040c2:	051b      	lsls	r3, r3, #20
 80040c4:	b183      	cbz	r3, 80040e8 <_dtoa_r+0x920>
 80040c6:	9b06      	ldr	r3, [sp, #24]
 80040c8:	3301      	adds	r3, #1
 80040ca:	9306      	str	r3, [sp, #24]
 80040cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ce:	3301      	adds	r3, #1
 80040d0:	9309      	str	r3, [sp, #36]	; 0x24
 80040d2:	f04f 0801 	mov.w	r8, #1
 80040d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f47f af6a 	bne.w	8003fb2 <_dtoa_r+0x7ea>
 80040de:	2001      	movs	r0, #1
 80040e0:	e76f      	b.n	8003fc2 <_dtoa_r+0x7fa>
 80040e2:	f04f 0800 	mov.w	r8, #0
 80040e6:	e7f6      	b.n	80040d6 <_dtoa_r+0x90e>
 80040e8:	4698      	mov	r8, r3
 80040ea:	e7f4      	b.n	80040d6 <_dtoa_r+0x90e>
 80040ec:	f43f af7d 	beq.w	8003fea <_dtoa_r+0x822>
 80040f0:	4618      	mov	r0, r3
 80040f2:	301c      	adds	r0, #28
 80040f4:	e772      	b.n	8003fdc <_dtoa_r+0x814>
 80040f6:	9b02      	ldr	r3, [sp, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dc36      	bgt.n	800416a <_dtoa_r+0x9a2>
 80040fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040fe:	2b02      	cmp	r3, #2
 8004100:	dd33      	ble.n	800416a <_dtoa_r+0x9a2>
 8004102:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004106:	f1bb 0f00 	cmp.w	fp, #0
 800410a:	d10d      	bne.n	8004128 <_dtoa_r+0x960>
 800410c:	4621      	mov	r1, r4
 800410e:	465b      	mov	r3, fp
 8004110:	2205      	movs	r2, #5
 8004112:	4628      	mov	r0, r5
 8004114:	f000 f9c2 	bl	800449c <__multadd>
 8004118:	4601      	mov	r1, r0
 800411a:	4604      	mov	r4, r0
 800411c:	4650      	mov	r0, sl
 800411e:	f000 fbd7 	bl	80048d0 <__mcmp>
 8004122:	2800      	cmp	r0, #0
 8004124:	f73f adb6 	bgt.w	8003c94 <_dtoa_r+0x4cc>
 8004128:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800412a:	9f08      	ldr	r7, [sp, #32]
 800412c:	ea6f 0903 	mvn.w	r9, r3
 8004130:	f04f 0800 	mov.w	r8, #0
 8004134:	4621      	mov	r1, r4
 8004136:	4628      	mov	r0, r5
 8004138:	f000 f98e 	bl	8004458 <_Bfree>
 800413c:	2e00      	cmp	r6, #0
 800413e:	f43f aea4 	beq.w	8003e8a <_dtoa_r+0x6c2>
 8004142:	f1b8 0f00 	cmp.w	r8, #0
 8004146:	d005      	beq.n	8004154 <_dtoa_r+0x98c>
 8004148:	45b0      	cmp	r8, r6
 800414a:	d003      	beq.n	8004154 <_dtoa_r+0x98c>
 800414c:	4641      	mov	r1, r8
 800414e:	4628      	mov	r0, r5
 8004150:	f000 f982 	bl	8004458 <_Bfree>
 8004154:	4631      	mov	r1, r6
 8004156:	4628      	mov	r0, r5
 8004158:	f000 f97e 	bl	8004458 <_Bfree>
 800415c:	e695      	b.n	8003e8a <_dtoa_r+0x6c2>
 800415e:	2400      	movs	r4, #0
 8004160:	4626      	mov	r6, r4
 8004162:	e7e1      	b.n	8004128 <_dtoa_r+0x960>
 8004164:	46c1      	mov	r9, r8
 8004166:	4626      	mov	r6, r4
 8004168:	e594      	b.n	8003c94 <_dtoa_r+0x4cc>
 800416a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800416c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80fc 	beq.w	800436e <_dtoa_r+0xba6>
 8004176:	2f00      	cmp	r7, #0
 8004178:	dd05      	ble.n	8004186 <_dtoa_r+0x9be>
 800417a:	4631      	mov	r1, r6
 800417c:	463a      	mov	r2, r7
 800417e:	4628      	mov	r0, r5
 8004180:	f000 fb3a 	bl	80047f8 <__lshift>
 8004184:	4606      	mov	r6, r0
 8004186:	f1b8 0f00 	cmp.w	r8, #0
 800418a:	d05c      	beq.n	8004246 <_dtoa_r+0xa7e>
 800418c:	6871      	ldr	r1, [r6, #4]
 800418e:	4628      	mov	r0, r5
 8004190:	f000 f922 	bl	80043d8 <_Balloc>
 8004194:	4607      	mov	r7, r0
 8004196:	b928      	cbnz	r0, 80041a4 <_dtoa_r+0x9dc>
 8004198:	4b7f      	ldr	r3, [pc, #508]	; (8004398 <_dtoa_r+0xbd0>)
 800419a:	4602      	mov	r2, r0
 800419c:	f240 21ea 	movw	r1, #746	; 0x2ea
 80041a0:	f7ff bb26 	b.w	80037f0 <_dtoa_r+0x28>
 80041a4:	6932      	ldr	r2, [r6, #16]
 80041a6:	3202      	adds	r2, #2
 80041a8:	0092      	lsls	r2, r2, #2
 80041aa:	f106 010c 	add.w	r1, r6, #12
 80041ae:	300c      	adds	r0, #12
 80041b0:	f000 f904 	bl	80043bc <memcpy>
 80041b4:	2201      	movs	r2, #1
 80041b6:	4639      	mov	r1, r7
 80041b8:	4628      	mov	r0, r5
 80041ba:	f000 fb1d 	bl	80047f8 <__lshift>
 80041be:	9b08      	ldr	r3, [sp, #32]
 80041c0:	3301      	adds	r3, #1
 80041c2:	9302      	str	r3, [sp, #8]
 80041c4:	9b08      	ldr	r3, [sp, #32]
 80041c6:	445b      	add	r3, fp
 80041c8:	930a      	str	r3, [sp, #40]	; 0x28
 80041ca:	9b04      	ldr	r3, [sp, #16]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	46b0      	mov	r8, r6
 80041d2:	9309      	str	r3, [sp, #36]	; 0x24
 80041d4:	4606      	mov	r6, r0
 80041d6:	9b02      	ldr	r3, [sp, #8]
 80041d8:	4621      	mov	r1, r4
 80041da:	4650      	mov	r0, sl
 80041dc:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80041e0:	f7ff fa64 	bl	80036ac <quorem>
 80041e4:	4603      	mov	r3, r0
 80041e6:	3330      	adds	r3, #48	; 0x30
 80041e8:	9004      	str	r0, [sp, #16]
 80041ea:	4641      	mov	r1, r8
 80041ec:	4650      	mov	r0, sl
 80041ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80041f0:	f000 fb6e 	bl	80048d0 <__mcmp>
 80041f4:	4632      	mov	r2, r6
 80041f6:	9006      	str	r0, [sp, #24]
 80041f8:	4621      	mov	r1, r4
 80041fa:	4628      	mov	r0, r5
 80041fc:	f000 fb84 	bl	8004908 <__mdiff>
 8004200:	68c2      	ldr	r2, [r0, #12]
 8004202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004204:	4607      	mov	r7, r0
 8004206:	bb02      	cbnz	r2, 800424a <_dtoa_r+0xa82>
 8004208:	4601      	mov	r1, r0
 800420a:	4650      	mov	r0, sl
 800420c:	f000 fb60 	bl	80048d0 <__mcmp>
 8004210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004212:	4602      	mov	r2, r0
 8004214:	4639      	mov	r1, r7
 8004216:	4628      	mov	r0, r5
 8004218:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800421c:	f000 f91c 	bl	8004458 <_Bfree>
 8004220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004224:	9f02      	ldr	r7, [sp, #8]
 8004226:	ea43 0102 	orr.w	r1, r3, r2
 800422a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800422c:	430b      	orrs	r3, r1
 800422e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004230:	d10d      	bne.n	800424e <_dtoa_r+0xa86>
 8004232:	2b39      	cmp	r3, #57	; 0x39
 8004234:	d027      	beq.n	8004286 <_dtoa_r+0xabe>
 8004236:	9a06      	ldr	r2, [sp, #24]
 8004238:	2a00      	cmp	r2, #0
 800423a:	dd01      	ble.n	8004240 <_dtoa_r+0xa78>
 800423c:	9b04      	ldr	r3, [sp, #16]
 800423e:	3331      	adds	r3, #49	; 0x31
 8004240:	f88b 3000 	strb.w	r3, [fp]
 8004244:	e776      	b.n	8004134 <_dtoa_r+0x96c>
 8004246:	4630      	mov	r0, r6
 8004248:	e7b9      	b.n	80041be <_dtoa_r+0x9f6>
 800424a:	2201      	movs	r2, #1
 800424c:	e7e2      	b.n	8004214 <_dtoa_r+0xa4c>
 800424e:	9906      	ldr	r1, [sp, #24]
 8004250:	2900      	cmp	r1, #0
 8004252:	db04      	blt.n	800425e <_dtoa_r+0xa96>
 8004254:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004256:	4301      	orrs	r1, r0
 8004258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800425a:	4301      	orrs	r1, r0
 800425c:	d120      	bne.n	80042a0 <_dtoa_r+0xad8>
 800425e:	2a00      	cmp	r2, #0
 8004260:	ddee      	ble.n	8004240 <_dtoa_r+0xa78>
 8004262:	4651      	mov	r1, sl
 8004264:	2201      	movs	r2, #1
 8004266:	4628      	mov	r0, r5
 8004268:	9302      	str	r3, [sp, #8]
 800426a:	f000 fac5 	bl	80047f8 <__lshift>
 800426e:	4621      	mov	r1, r4
 8004270:	4682      	mov	sl, r0
 8004272:	f000 fb2d 	bl	80048d0 <__mcmp>
 8004276:	2800      	cmp	r0, #0
 8004278:	9b02      	ldr	r3, [sp, #8]
 800427a:	dc02      	bgt.n	8004282 <_dtoa_r+0xaba>
 800427c:	d1e0      	bne.n	8004240 <_dtoa_r+0xa78>
 800427e:	07da      	lsls	r2, r3, #31
 8004280:	d5de      	bpl.n	8004240 <_dtoa_r+0xa78>
 8004282:	2b39      	cmp	r3, #57	; 0x39
 8004284:	d1da      	bne.n	800423c <_dtoa_r+0xa74>
 8004286:	2339      	movs	r3, #57	; 0x39
 8004288:	f88b 3000 	strb.w	r3, [fp]
 800428c:	463b      	mov	r3, r7
 800428e:	461f      	mov	r7, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004296:	2a39      	cmp	r2, #57	; 0x39
 8004298:	d050      	beq.n	800433c <_dtoa_r+0xb74>
 800429a:	3201      	adds	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e749      	b.n	8004134 <_dtoa_r+0x96c>
 80042a0:	2a00      	cmp	r2, #0
 80042a2:	dd03      	ble.n	80042ac <_dtoa_r+0xae4>
 80042a4:	2b39      	cmp	r3, #57	; 0x39
 80042a6:	d0ee      	beq.n	8004286 <_dtoa_r+0xabe>
 80042a8:	3301      	adds	r3, #1
 80042aa:	e7c9      	b.n	8004240 <_dtoa_r+0xa78>
 80042ac:	9a02      	ldr	r2, [sp, #8]
 80042ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80042b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80042b4:	428a      	cmp	r2, r1
 80042b6:	d02a      	beq.n	800430e <_dtoa_r+0xb46>
 80042b8:	4651      	mov	r1, sl
 80042ba:	2300      	movs	r3, #0
 80042bc:	220a      	movs	r2, #10
 80042be:	4628      	mov	r0, r5
 80042c0:	f000 f8ec 	bl	800449c <__multadd>
 80042c4:	45b0      	cmp	r8, r6
 80042c6:	4682      	mov	sl, r0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	f04f 020a 	mov.w	r2, #10
 80042d0:	4641      	mov	r1, r8
 80042d2:	4628      	mov	r0, r5
 80042d4:	d107      	bne.n	80042e6 <_dtoa_r+0xb1e>
 80042d6:	f000 f8e1 	bl	800449c <__multadd>
 80042da:	4680      	mov	r8, r0
 80042dc:	4606      	mov	r6, r0
 80042de:	9b02      	ldr	r3, [sp, #8]
 80042e0:	3301      	adds	r3, #1
 80042e2:	9302      	str	r3, [sp, #8]
 80042e4:	e777      	b.n	80041d6 <_dtoa_r+0xa0e>
 80042e6:	f000 f8d9 	bl	800449c <__multadd>
 80042ea:	4631      	mov	r1, r6
 80042ec:	4680      	mov	r8, r0
 80042ee:	2300      	movs	r3, #0
 80042f0:	220a      	movs	r2, #10
 80042f2:	4628      	mov	r0, r5
 80042f4:	f000 f8d2 	bl	800449c <__multadd>
 80042f8:	4606      	mov	r6, r0
 80042fa:	e7f0      	b.n	80042de <_dtoa_r+0xb16>
 80042fc:	f1bb 0f00 	cmp.w	fp, #0
 8004300:	9a08      	ldr	r2, [sp, #32]
 8004302:	bfcc      	ite	gt
 8004304:	465f      	movgt	r7, fp
 8004306:	2701      	movle	r7, #1
 8004308:	4417      	add	r7, r2
 800430a:	f04f 0800 	mov.w	r8, #0
 800430e:	4651      	mov	r1, sl
 8004310:	2201      	movs	r2, #1
 8004312:	4628      	mov	r0, r5
 8004314:	9302      	str	r3, [sp, #8]
 8004316:	f000 fa6f 	bl	80047f8 <__lshift>
 800431a:	4621      	mov	r1, r4
 800431c:	4682      	mov	sl, r0
 800431e:	f000 fad7 	bl	80048d0 <__mcmp>
 8004322:	2800      	cmp	r0, #0
 8004324:	dcb2      	bgt.n	800428c <_dtoa_r+0xac4>
 8004326:	d102      	bne.n	800432e <_dtoa_r+0xb66>
 8004328:	9b02      	ldr	r3, [sp, #8]
 800432a:	07db      	lsls	r3, r3, #31
 800432c:	d4ae      	bmi.n	800428c <_dtoa_r+0xac4>
 800432e:	463b      	mov	r3, r7
 8004330:	461f      	mov	r7, r3
 8004332:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004336:	2a30      	cmp	r2, #48	; 0x30
 8004338:	d0fa      	beq.n	8004330 <_dtoa_r+0xb68>
 800433a:	e6fb      	b.n	8004134 <_dtoa_r+0x96c>
 800433c:	9a08      	ldr	r2, [sp, #32]
 800433e:	429a      	cmp	r2, r3
 8004340:	d1a5      	bne.n	800428e <_dtoa_r+0xac6>
 8004342:	2331      	movs	r3, #49	; 0x31
 8004344:	f109 0901 	add.w	r9, r9, #1
 8004348:	7013      	strb	r3, [r2, #0]
 800434a:	e6f3      	b.n	8004134 <_dtoa_r+0x96c>
 800434c:	4b13      	ldr	r3, [pc, #76]	; (800439c <_dtoa_r+0xbd4>)
 800434e:	f7ff baa6 	b.w	800389e <_dtoa_r+0xd6>
 8004352:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004354:	2b00      	cmp	r3, #0
 8004356:	f47f aa7f 	bne.w	8003858 <_dtoa_r+0x90>
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <_dtoa_r+0xbd8>)
 800435c:	f7ff ba9f 	b.w	800389e <_dtoa_r+0xd6>
 8004360:	f1bb 0f00 	cmp.w	fp, #0
 8004364:	dc03      	bgt.n	800436e <_dtoa_r+0xba6>
 8004366:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004368:	2b02      	cmp	r3, #2
 800436a:	f73f aecc 	bgt.w	8004106 <_dtoa_r+0x93e>
 800436e:	9f08      	ldr	r7, [sp, #32]
 8004370:	4621      	mov	r1, r4
 8004372:	4650      	mov	r0, sl
 8004374:	f7ff f99a 	bl	80036ac <quorem>
 8004378:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800437c:	f807 3b01 	strb.w	r3, [r7], #1
 8004380:	9a08      	ldr	r2, [sp, #32]
 8004382:	1aba      	subs	r2, r7, r2
 8004384:	4593      	cmp	fp, r2
 8004386:	ddb9      	ble.n	80042fc <_dtoa_r+0xb34>
 8004388:	4651      	mov	r1, sl
 800438a:	2300      	movs	r3, #0
 800438c:	220a      	movs	r2, #10
 800438e:	4628      	mov	r0, r5
 8004390:	f000 f884 	bl	800449c <__multadd>
 8004394:	4682      	mov	sl, r0
 8004396:	e7eb      	b.n	8004370 <_dtoa_r+0xba8>
 8004398:	08005863 	.word	0x08005863
 800439c:	080057bc 	.word	0x080057bc
 80043a0:	080057e0 	.word	0x080057e0

080043a4 <_localeconv_r>:
 80043a4:	4800      	ldr	r0, [pc, #0]	; (80043a8 <_localeconv_r+0x4>)
 80043a6:	4770      	bx	lr
 80043a8:	20000160 	.word	0x20000160

080043ac <malloc>:
 80043ac:	4b02      	ldr	r3, [pc, #8]	; (80043b8 <malloc+0xc>)
 80043ae:	4601      	mov	r1, r0
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	f000 bbeb 	b.w	8004b8c <_malloc_r>
 80043b6:	bf00      	nop
 80043b8:	2000000c 	.word	0x2000000c

080043bc <memcpy>:
 80043bc:	440a      	add	r2, r1
 80043be:	4291      	cmp	r1, r2
 80043c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80043c4:	d100      	bne.n	80043c8 <memcpy+0xc>
 80043c6:	4770      	bx	lr
 80043c8:	b510      	push	{r4, lr}
 80043ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043d2:	4291      	cmp	r1, r2
 80043d4:	d1f9      	bne.n	80043ca <memcpy+0xe>
 80043d6:	bd10      	pop	{r4, pc}

080043d8 <_Balloc>:
 80043d8:	b570      	push	{r4, r5, r6, lr}
 80043da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80043dc:	4604      	mov	r4, r0
 80043de:	460d      	mov	r5, r1
 80043e0:	b976      	cbnz	r6, 8004400 <_Balloc+0x28>
 80043e2:	2010      	movs	r0, #16
 80043e4:	f7ff ffe2 	bl	80043ac <malloc>
 80043e8:	4602      	mov	r2, r0
 80043ea:	6260      	str	r0, [r4, #36]	; 0x24
 80043ec:	b920      	cbnz	r0, 80043f8 <_Balloc+0x20>
 80043ee:	4b18      	ldr	r3, [pc, #96]	; (8004450 <_Balloc+0x78>)
 80043f0:	4818      	ldr	r0, [pc, #96]	; (8004454 <_Balloc+0x7c>)
 80043f2:	2166      	movs	r1, #102	; 0x66
 80043f4:	f000 fc34 	bl	8004c60 <__assert_func>
 80043f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80043fc:	6006      	str	r6, [r0, #0]
 80043fe:	60c6      	str	r6, [r0, #12]
 8004400:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004402:	68f3      	ldr	r3, [r6, #12]
 8004404:	b183      	cbz	r3, 8004428 <_Balloc+0x50>
 8004406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800440e:	b9b8      	cbnz	r0, 8004440 <_Balloc+0x68>
 8004410:	2101      	movs	r1, #1
 8004412:	fa01 f605 	lsl.w	r6, r1, r5
 8004416:	1d72      	adds	r2, r6, #5
 8004418:	0092      	lsls	r2, r2, #2
 800441a:	4620      	mov	r0, r4
 800441c:	f000 fb5a 	bl	8004ad4 <_calloc_r>
 8004420:	b160      	cbz	r0, 800443c <_Balloc+0x64>
 8004422:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004426:	e00e      	b.n	8004446 <_Balloc+0x6e>
 8004428:	2221      	movs	r2, #33	; 0x21
 800442a:	2104      	movs	r1, #4
 800442c:	4620      	mov	r0, r4
 800442e:	f000 fb51 	bl	8004ad4 <_calloc_r>
 8004432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004434:	60f0      	str	r0, [r6, #12]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e4      	bne.n	8004406 <_Balloc+0x2e>
 800443c:	2000      	movs	r0, #0
 800443e:	bd70      	pop	{r4, r5, r6, pc}
 8004440:	6802      	ldr	r2, [r0, #0]
 8004442:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004446:	2300      	movs	r3, #0
 8004448:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800444c:	e7f7      	b.n	800443e <_Balloc+0x66>
 800444e:	bf00      	nop
 8004450:	080057ed 	.word	0x080057ed
 8004454:	08005874 	.word	0x08005874

08004458 <_Bfree>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800445c:	4605      	mov	r5, r0
 800445e:	460c      	mov	r4, r1
 8004460:	b976      	cbnz	r6, 8004480 <_Bfree+0x28>
 8004462:	2010      	movs	r0, #16
 8004464:	f7ff ffa2 	bl	80043ac <malloc>
 8004468:	4602      	mov	r2, r0
 800446a:	6268      	str	r0, [r5, #36]	; 0x24
 800446c:	b920      	cbnz	r0, 8004478 <_Bfree+0x20>
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <_Bfree+0x3c>)
 8004470:	4809      	ldr	r0, [pc, #36]	; (8004498 <_Bfree+0x40>)
 8004472:	218a      	movs	r1, #138	; 0x8a
 8004474:	f000 fbf4 	bl	8004c60 <__assert_func>
 8004478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800447c:	6006      	str	r6, [r0, #0]
 800447e:	60c6      	str	r6, [r0, #12]
 8004480:	b13c      	cbz	r4, 8004492 <_Bfree+0x3a>
 8004482:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004484:	6862      	ldr	r2, [r4, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800448c:	6021      	str	r1, [r4, #0]
 800448e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004492:	bd70      	pop	{r4, r5, r6, pc}
 8004494:	080057ed 	.word	0x080057ed
 8004498:	08005874 	.word	0x08005874

0800449c <__multadd>:
 800449c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a0:	690e      	ldr	r6, [r1, #16]
 80044a2:	4607      	mov	r7, r0
 80044a4:	4698      	mov	r8, r3
 80044a6:	460c      	mov	r4, r1
 80044a8:	f101 0014 	add.w	r0, r1, #20
 80044ac:	2300      	movs	r3, #0
 80044ae:	6805      	ldr	r5, [r0, #0]
 80044b0:	b2a9      	uxth	r1, r5
 80044b2:	fb02 8101 	mla	r1, r2, r1, r8
 80044b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80044ba:	0c2d      	lsrs	r5, r5, #16
 80044bc:	fb02 c505 	mla	r5, r2, r5, ip
 80044c0:	b289      	uxth	r1, r1
 80044c2:	3301      	adds	r3, #1
 80044c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80044c8:	429e      	cmp	r6, r3
 80044ca:	f840 1b04 	str.w	r1, [r0], #4
 80044ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80044d2:	dcec      	bgt.n	80044ae <__multadd+0x12>
 80044d4:	f1b8 0f00 	cmp.w	r8, #0
 80044d8:	d022      	beq.n	8004520 <__multadd+0x84>
 80044da:	68a3      	ldr	r3, [r4, #8]
 80044dc:	42b3      	cmp	r3, r6
 80044de:	dc19      	bgt.n	8004514 <__multadd+0x78>
 80044e0:	6861      	ldr	r1, [r4, #4]
 80044e2:	4638      	mov	r0, r7
 80044e4:	3101      	adds	r1, #1
 80044e6:	f7ff ff77 	bl	80043d8 <_Balloc>
 80044ea:	4605      	mov	r5, r0
 80044ec:	b928      	cbnz	r0, 80044fa <__multadd+0x5e>
 80044ee:	4602      	mov	r2, r0
 80044f0:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <__multadd+0x8c>)
 80044f2:	480e      	ldr	r0, [pc, #56]	; (800452c <__multadd+0x90>)
 80044f4:	21b5      	movs	r1, #181	; 0xb5
 80044f6:	f000 fbb3 	bl	8004c60 <__assert_func>
 80044fa:	6922      	ldr	r2, [r4, #16]
 80044fc:	3202      	adds	r2, #2
 80044fe:	f104 010c 	add.w	r1, r4, #12
 8004502:	0092      	lsls	r2, r2, #2
 8004504:	300c      	adds	r0, #12
 8004506:	f7ff ff59 	bl	80043bc <memcpy>
 800450a:	4621      	mov	r1, r4
 800450c:	4638      	mov	r0, r7
 800450e:	f7ff ffa3 	bl	8004458 <_Bfree>
 8004512:	462c      	mov	r4, r5
 8004514:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004518:	3601      	adds	r6, #1
 800451a:	f8c3 8014 	str.w	r8, [r3, #20]
 800451e:	6126      	str	r6, [r4, #16]
 8004520:	4620      	mov	r0, r4
 8004522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004526:	bf00      	nop
 8004528:	08005863 	.word	0x08005863
 800452c:	08005874 	.word	0x08005874

08004530 <__hi0bits>:
 8004530:	0c02      	lsrs	r2, r0, #16
 8004532:	0412      	lsls	r2, r2, #16
 8004534:	4603      	mov	r3, r0
 8004536:	b9ca      	cbnz	r2, 800456c <__hi0bits+0x3c>
 8004538:	0403      	lsls	r3, r0, #16
 800453a:	2010      	movs	r0, #16
 800453c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004540:	bf04      	itt	eq
 8004542:	021b      	lsleq	r3, r3, #8
 8004544:	3008      	addeq	r0, #8
 8004546:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800454a:	bf04      	itt	eq
 800454c:	011b      	lsleq	r3, r3, #4
 800454e:	3004      	addeq	r0, #4
 8004550:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004554:	bf04      	itt	eq
 8004556:	009b      	lsleq	r3, r3, #2
 8004558:	3002      	addeq	r0, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	db05      	blt.n	800456a <__hi0bits+0x3a>
 800455e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004562:	f100 0001 	add.w	r0, r0, #1
 8004566:	bf08      	it	eq
 8004568:	2020      	moveq	r0, #32
 800456a:	4770      	bx	lr
 800456c:	2000      	movs	r0, #0
 800456e:	e7e5      	b.n	800453c <__hi0bits+0xc>

08004570 <__lo0bits>:
 8004570:	6803      	ldr	r3, [r0, #0]
 8004572:	4602      	mov	r2, r0
 8004574:	f013 0007 	ands.w	r0, r3, #7
 8004578:	d00b      	beq.n	8004592 <__lo0bits+0x22>
 800457a:	07d9      	lsls	r1, r3, #31
 800457c:	d422      	bmi.n	80045c4 <__lo0bits+0x54>
 800457e:	0798      	lsls	r0, r3, #30
 8004580:	bf49      	itett	mi
 8004582:	085b      	lsrmi	r3, r3, #1
 8004584:	089b      	lsrpl	r3, r3, #2
 8004586:	2001      	movmi	r0, #1
 8004588:	6013      	strmi	r3, [r2, #0]
 800458a:	bf5c      	itt	pl
 800458c:	6013      	strpl	r3, [r2, #0]
 800458e:	2002      	movpl	r0, #2
 8004590:	4770      	bx	lr
 8004592:	b299      	uxth	r1, r3
 8004594:	b909      	cbnz	r1, 800459a <__lo0bits+0x2a>
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	2010      	movs	r0, #16
 800459a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800459e:	bf04      	itt	eq
 80045a0:	0a1b      	lsreq	r3, r3, #8
 80045a2:	3008      	addeq	r0, #8
 80045a4:	0719      	lsls	r1, r3, #28
 80045a6:	bf04      	itt	eq
 80045a8:	091b      	lsreq	r3, r3, #4
 80045aa:	3004      	addeq	r0, #4
 80045ac:	0799      	lsls	r1, r3, #30
 80045ae:	bf04      	itt	eq
 80045b0:	089b      	lsreq	r3, r3, #2
 80045b2:	3002      	addeq	r0, #2
 80045b4:	07d9      	lsls	r1, r3, #31
 80045b6:	d403      	bmi.n	80045c0 <__lo0bits+0x50>
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	f100 0001 	add.w	r0, r0, #1
 80045be:	d003      	beq.n	80045c8 <__lo0bits+0x58>
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	4770      	bx	lr
 80045c4:	2000      	movs	r0, #0
 80045c6:	4770      	bx	lr
 80045c8:	2020      	movs	r0, #32
 80045ca:	4770      	bx	lr

080045cc <__i2b>:
 80045cc:	b510      	push	{r4, lr}
 80045ce:	460c      	mov	r4, r1
 80045d0:	2101      	movs	r1, #1
 80045d2:	f7ff ff01 	bl	80043d8 <_Balloc>
 80045d6:	4602      	mov	r2, r0
 80045d8:	b928      	cbnz	r0, 80045e6 <__i2b+0x1a>
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <__i2b+0x24>)
 80045dc:	4805      	ldr	r0, [pc, #20]	; (80045f4 <__i2b+0x28>)
 80045de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80045e2:	f000 fb3d 	bl	8004c60 <__assert_func>
 80045e6:	2301      	movs	r3, #1
 80045e8:	6144      	str	r4, [r0, #20]
 80045ea:	6103      	str	r3, [r0, #16]
 80045ec:	bd10      	pop	{r4, pc}
 80045ee:	bf00      	nop
 80045f0:	08005863 	.word	0x08005863
 80045f4:	08005874 	.word	0x08005874

080045f8 <__multiply>:
 80045f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fc:	4614      	mov	r4, r2
 80045fe:	690a      	ldr	r2, [r1, #16]
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	429a      	cmp	r2, r3
 8004604:	bfb8      	it	lt
 8004606:	460b      	movlt	r3, r1
 8004608:	460d      	mov	r5, r1
 800460a:	bfbc      	itt	lt
 800460c:	4625      	movlt	r5, r4
 800460e:	461c      	movlt	r4, r3
 8004610:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004614:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004618:	68ab      	ldr	r3, [r5, #8]
 800461a:	6869      	ldr	r1, [r5, #4]
 800461c:	eb0a 0709 	add.w	r7, sl, r9
 8004620:	42bb      	cmp	r3, r7
 8004622:	b085      	sub	sp, #20
 8004624:	bfb8      	it	lt
 8004626:	3101      	addlt	r1, #1
 8004628:	f7ff fed6 	bl	80043d8 <_Balloc>
 800462c:	b930      	cbnz	r0, 800463c <__multiply+0x44>
 800462e:	4602      	mov	r2, r0
 8004630:	4b42      	ldr	r3, [pc, #264]	; (800473c <__multiply+0x144>)
 8004632:	4843      	ldr	r0, [pc, #268]	; (8004740 <__multiply+0x148>)
 8004634:	f240 115d 	movw	r1, #349	; 0x15d
 8004638:	f000 fb12 	bl	8004c60 <__assert_func>
 800463c:	f100 0614 	add.w	r6, r0, #20
 8004640:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004644:	4633      	mov	r3, r6
 8004646:	2200      	movs	r2, #0
 8004648:	4543      	cmp	r3, r8
 800464a:	d31e      	bcc.n	800468a <__multiply+0x92>
 800464c:	f105 0c14 	add.w	ip, r5, #20
 8004650:	f104 0314 	add.w	r3, r4, #20
 8004654:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004658:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800465c:	9202      	str	r2, [sp, #8]
 800465e:	ebac 0205 	sub.w	r2, ip, r5
 8004662:	3a15      	subs	r2, #21
 8004664:	f022 0203 	bic.w	r2, r2, #3
 8004668:	3204      	adds	r2, #4
 800466a:	f105 0115 	add.w	r1, r5, #21
 800466e:	458c      	cmp	ip, r1
 8004670:	bf38      	it	cc
 8004672:	2204      	movcc	r2, #4
 8004674:	9201      	str	r2, [sp, #4]
 8004676:	9a02      	ldr	r2, [sp, #8]
 8004678:	9303      	str	r3, [sp, #12]
 800467a:	429a      	cmp	r2, r3
 800467c:	d808      	bhi.n	8004690 <__multiply+0x98>
 800467e:	2f00      	cmp	r7, #0
 8004680:	dc55      	bgt.n	800472e <__multiply+0x136>
 8004682:	6107      	str	r7, [r0, #16]
 8004684:	b005      	add	sp, #20
 8004686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800468a:	f843 2b04 	str.w	r2, [r3], #4
 800468e:	e7db      	b.n	8004648 <__multiply+0x50>
 8004690:	f8b3 a000 	ldrh.w	sl, [r3]
 8004694:	f1ba 0f00 	cmp.w	sl, #0
 8004698:	d020      	beq.n	80046dc <__multiply+0xe4>
 800469a:	f105 0e14 	add.w	lr, r5, #20
 800469e:	46b1      	mov	r9, r6
 80046a0:	2200      	movs	r2, #0
 80046a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80046a6:	f8d9 b000 	ldr.w	fp, [r9]
 80046aa:	b2a1      	uxth	r1, r4
 80046ac:	fa1f fb8b 	uxth.w	fp, fp
 80046b0:	fb0a b101 	mla	r1, sl, r1, fp
 80046b4:	4411      	add	r1, r2
 80046b6:	f8d9 2000 	ldr.w	r2, [r9]
 80046ba:	0c24      	lsrs	r4, r4, #16
 80046bc:	0c12      	lsrs	r2, r2, #16
 80046be:	fb0a 2404 	mla	r4, sl, r4, r2
 80046c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80046c6:	b289      	uxth	r1, r1
 80046c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80046cc:	45f4      	cmp	ip, lr
 80046ce:	f849 1b04 	str.w	r1, [r9], #4
 80046d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80046d6:	d8e4      	bhi.n	80046a2 <__multiply+0xaa>
 80046d8:	9901      	ldr	r1, [sp, #4]
 80046da:	5072      	str	r2, [r6, r1]
 80046dc:	9a03      	ldr	r2, [sp, #12]
 80046de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80046e2:	3304      	adds	r3, #4
 80046e4:	f1b9 0f00 	cmp.w	r9, #0
 80046e8:	d01f      	beq.n	800472a <__multiply+0x132>
 80046ea:	6834      	ldr	r4, [r6, #0]
 80046ec:	f105 0114 	add.w	r1, r5, #20
 80046f0:	46b6      	mov	lr, r6
 80046f2:	f04f 0a00 	mov.w	sl, #0
 80046f6:	880a      	ldrh	r2, [r1, #0]
 80046f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80046fc:	fb09 b202 	mla	r2, r9, r2, fp
 8004700:	4492      	add	sl, r2
 8004702:	b2a4      	uxth	r4, r4
 8004704:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004708:	f84e 4b04 	str.w	r4, [lr], #4
 800470c:	f851 4b04 	ldr.w	r4, [r1], #4
 8004710:	f8be 2000 	ldrh.w	r2, [lr]
 8004714:	0c24      	lsrs	r4, r4, #16
 8004716:	fb09 2404 	mla	r4, r9, r4, r2
 800471a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800471e:	458c      	cmp	ip, r1
 8004720:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004724:	d8e7      	bhi.n	80046f6 <__multiply+0xfe>
 8004726:	9a01      	ldr	r2, [sp, #4]
 8004728:	50b4      	str	r4, [r6, r2]
 800472a:	3604      	adds	r6, #4
 800472c:	e7a3      	b.n	8004676 <__multiply+0x7e>
 800472e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1a5      	bne.n	8004682 <__multiply+0x8a>
 8004736:	3f01      	subs	r7, #1
 8004738:	e7a1      	b.n	800467e <__multiply+0x86>
 800473a:	bf00      	nop
 800473c:	08005863 	.word	0x08005863
 8004740:	08005874 	.word	0x08005874

08004744 <__pow5mult>:
 8004744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004748:	4615      	mov	r5, r2
 800474a:	f012 0203 	ands.w	r2, r2, #3
 800474e:	4606      	mov	r6, r0
 8004750:	460f      	mov	r7, r1
 8004752:	d007      	beq.n	8004764 <__pow5mult+0x20>
 8004754:	4c25      	ldr	r4, [pc, #148]	; (80047ec <__pow5mult+0xa8>)
 8004756:	3a01      	subs	r2, #1
 8004758:	2300      	movs	r3, #0
 800475a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800475e:	f7ff fe9d 	bl	800449c <__multadd>
 8004762:	4607      	mov	r7, r0
 8004764:	10ad      	asrs	r5, r5, #2
 8004766:	d03d      	beq.n	80047e4 <__pow5mult+0xa0>
 8004768:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800476a:	b97c      	cbnz	r4, 800478c <__pow5mult+0x48>
 800476c:	2010      	movs	r0, #16
 800476e:	f7ff fe1d 	bl	80043ac <malloc>
 8004772:	4602      	mov	r2, r0
 8004774:	6270      	str	r0, [r6, #36]	; 0x24
 8004776:	b928      	cbnz	r0, 8004784 <__pow5mult+0x40>
 8004778:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <__pow5mult+0xac>)
 800477a:	481e      	ldr	r0, [pc, #120]	; (80047f4 <__pow5mult+0xb0>)
 800477c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004780:	f000 fa6e 	bl	8004c60 <__assert_func>
 8004784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004788:	6004      	str	r4, [r0, #0]
 800478a:	60c4      	str	r4, [r0, #12]
 800478c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004794:	b94c      	cbnz	r4, 80047aa <__pow5mult+0x66>
 8004796:	f240 2171 	movw	r1, #625	; 0x271
 800479a:	4630      	mov	r0, r6
 800479c:	f7ff ff16 	bl	80045cc <__i2b>
 80047a0:	2300      	movs	r3, #0
 80047a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80047a6:	4604      	mov	r4, r0
 80047a8:	6003      	str	r3, [r0, #0]
 80047aa:	f04f 0900 	mov.w	r9, #0
 80047ae:	07eb      	lsls	r3, r5, #31
 80047b0:	d50a      	bpl.n	80047c8 <__pow5mult+0x84>
 80047b2:	4639      	mov	r1, r7
 80047b4:	4622      	mov	r2, r4
 80047b6:	4630      	mov	r0, r6
 80047b8:	f7ff ff1e 	bl	80045f8 <__multiply>
 80047bc:	4639      	mov	r1, r7
 80047be:	4680      	mov	r8, r0
 80047c0:	4630      	mov	r0, r6
 80047c2:	f7ff fe49 	bl	8004458 <_Bfree>
 80047c6:	4647      	mov	r7, r8
 80047c8:	106d      	asrs	r5, r5, #1
 80047ca:	d00b      	beq.n	80047e4 <__pow5mult+0xa0>
 80047cc:	6820      	ldr	r0, [r4, #0]
 80047ce:	b938      	cbnz	r0, 80047e0 <__pow5mult+0x9c>
 80047d0:	4622      	mov	r2, r4
 80047d2:	4621      	mov	r1, r4
 80047d4:	4630      	mov	r0, r6
 80047d6:	f7ff ff0f 	bl	80045f8 <__multiply>
 80047da:	6020      	str	r0, [r4, #0]
 80047dc:	f8c0 9000 	str.w	r9, [r0]
 80047e0:	4604      	mov	r4, r0
 80047e2:	e7e4      	b.n	80047ae <__pow5mult+0x6a>
 80047e4:	4638      	mov	r0, r7
 80047e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ea:	bf00      	nop
 80047ec:	080059c8 	.word	0x080059c8
 80047f0:	080057ed 	.word	0x080057ed
 80047f4:	08005874 	.word	0x08005874

080047f8 <__lshift>:
 80047f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047fc:	460c      	mov	r4, r1
 80047fe:	6849      	ldr	r1, [r1, #4]
 8004800:	6923      	ldr	r3, [r4, #16]
 8004802:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004806:	68a3      	ldr	r3, [r4, #8]
 8004808:	4607      	mov	r7, r0
 800480a:	4691      	mov	r9, r2
 800480c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004810:	f108 0601 	add.w	r6, r8, #1
 8004814:	42b3      	cmp	r3, r6
 8004816:	db0b      	blt.n	8004830 <__lshift+0x38>
 8004818:	4638      	mov	r0, r7
 800481a:	f7ff fddd 	bl	80043d8 <_Balloc>
 800481e:	4605      	mov	r5, r0
 8004820:	b948      	cbnz	r0, 8004836 <__lshift+0x3e>
 8004822:	4602      	mov	r2, r0
 8004824:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <__lshift+0xd0>)
 8004826:	4829      	ldr	r0, [pc, #164]	; (80048cc <__lshift+0xd4>)
 8004828:	f240 11d9 	movw	r1, #473	; 0x1d9
 800482c:	f000 fa18 	bl	8004c60 <__assert_func>
 8004830:	3101      	adds	r1, #1
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	e7ee      	b.n	8004814 <__lshift+0x1c>
 8004836:	2300      	movs	r3, #0
 8004838:	f100 0114 	add.w	r1, r0, #20
 800483c:	f100 0210 	add.w	r2, r0, #16
 8004840:	4618      	mov	r0, r3
 8004842:	4553      	cmp	r3, sl
 8004844:	db33      	blt.n	80048ae <__lshift+0xb6>
 8004846:	6920      	ldr	r0, [r4, #16]
 8004848:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800484c:	f104 0314 	add.w	r3, r4, #20
 8004850:	f019 091f 	ands.w	r9, r9, #31
 8004854:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004858:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800485c:	d02b      	beq.n	80048b6 <__lshift+0xbe>
 800485e:	f1c9 0e20 	rsb	lr, r9, #32
 8004862:	468a      	mov	sl, r1
 8004864:	2200      	movs	r2, #0
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	fa00 f009 	lsl.w	r0, r0, r9
 800486c:	4302      	orrs	r2, r0
 800486e:	f84a 2b04 	str.w	r2, [sl], #4
 8004872:	f853 2b04 	ldr.w	r2, [r3], #4
 8004876:	459c      	cmp	ip, r3
 8004878:	fa22 f20e 	lsr.w	r2, r2, lr
 800487c:	d8f3      	bhi.n	8004866 <__lshift+0x6e>
 800487e:	ebac 0304 	sub.w	r3, ip, r4
 8004882:	3b15      	subs	r3, #21
 8004884:	f023 0303 	bic.w	r3, r3, #3
 8004888:	3304      	adds	r3, #4
 800488a:	f104 0015 	add.w	r0, r4, #21
 800488e:	4584      	cmp	ip, r0
 8004890:	bf38      	it	cc
 8004892:	2304      	movcc	r3, #4
 8004894:	50ca      	str	r2, [r1, r3]
 8004896:	b10a      	cbz	r2, 800489c <__lshift+0xa4>
 8004898:	f108 0602 	add.w	r6, r8, #2
 800489c:	3e01      	subs	r6, #1
 800489e:	4638      	mov	r0, r7
 80048a0:	612e      	str	r6, [r5, #16]
 80048a2:	4621      	mov	r1, r4
 80048a4:	f7ff fdd8 	bl	8004458 <_Bfree>
 80048a8:	4628      	mov	r0, r5
 80048aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80048b2:	3301      	adds	r3, #1
 80048b4:	e7c5      	b.n	8004842 <__lshift+0x4a>
 80048b6:	3904      	subs	r1, #4
 80048b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80048bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80048c0:	459c      	cmp	ip, r3
 80048c2:	d8f9      	bhi.n	80048b8 <__lshift+0xc0>
 80048c4:	e7ea      	b.n	800489c <__lshift+0xa4>
 80048c6:	bf00      	nop
 80048c8:	08005863 	.word	0x08005863
 80048cc:	08005874 	.word	0x08005874

080048d0 <__mcmp>:
 80048d0:	690a      	ldr	r2, [r1, #16]
 80048d2:	4603      	mov	r3, r0
 80048d4:	6900      	ldr	r0, [r0, #16]
 80048d6:	1a80      	subs	r0, r0, r2
 80048d8:	b530      	push	{r4, r5, lr}
 80048da:	d10d      	bne.n	80048f8 <__mcmp+0x28>
 80048dc:	3314      	adds	r3, #20
 80048de:	3114      	adds	r1, #20
 80048e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80048e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80048e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80048ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80048f0:	4295      	cmp	r5, r2
 80048f2:	d002      	beq.n	80048fa <__mcmp+0x2a>
 80048f4:	d304      	bcc.n	8004900 <__mcmp+0x30>
 80048f6:	2001      	movs	r0, #1
 80048f8:	bd30      	pop	{r4, r5, pc}
 80048fa:	42a3      	cmp	r3, r4
 80048fc:	d3f4      	bcc.n	80048e8 <__mcmp+0x18>
 80048fe:	e7fb      	b.n	80048f8 <__mcmp+0x28>
 8004900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004904:	e7f8      	b.n	80048f8 <__mcmp+0x28>
	...

08004908 <__mdiff>:
 8004908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490c:	460c      	mov	r4, r1
 800490e:	4606      	mov	r6, r0
 8004910:	4611      	mov	r1, r2
 8004912:	4620      	mov	r0, r4
 8004914:	4617      	mov	r7, r2
 8004916:	f7ff ffdb 	bl	80048d0 <__mcmp>
 800491a:	1e05      	subs	r5, r0, #0
 800491c:	d111      	bne.n	8004942 <__mdiff+0x3a>
 800491e:	4629      	mov	r1, r5
 8004920:	4630      	mov	r0, r6
 8004922:	f7ff fd59 	bl	80043d8 <_Balloc>
 8004926:	4602      	mov	r2, r0
 8004928:	b928      	cbnz	r0, 8004936 <__mdiff+0x2e>
 800492a:	4b3a      	ldr	r3, [pc, #232]	; (8004a14 <__mdiff+0x10c>)
 800492c:	f240 2132 	movw	r1, #562	; 0x232
 8004930:	4839      	ldr	r0, [pc, #228]	; (8004a18 <__mdiff+0x110>)
 8004932:	f000 f995 	bl	8004c60 <__assert_func>
 8004936:	2301      	movs	r3, #1
 8004938:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800493c:	4610      	mov	r0, r2
 800493e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004942:	bfa4      	itt	ge
 8004944:	463b      	movge	r3, r7
 8004946:	4627      	movge	r7, r4
 8004948:	4630      	mov	r0, r6
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	bfa6      	itte	ge
 800494e:	461c      	movge	r4, r3
 8004950:	2500      	movge	r5, #0
 8004952:	2501      	movlt	r5, #1
 8004954:	f7ff fd40 	bl	80043d8 <_Balloc>
 8004958:	4602      	mov	r2, r0
 800495a:	b918      	cbnz	r0, 8004964 <__mdiff+0x5c>
 800495c:	4b2d      	ldr	r3, [pc, #180]	; (8004a14 <__mdiff+0x10c>)
 800495e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004962:	e7e5      	b.n	8004930 <__mdiff+0x28>
 8004964:	693e      	ldr	r6, [r7, #16]
 8004966:	60c5      	str	r5, [r0, #12]
 8004968:	6925      	ldr	r5, [r4, #16]
 800496a:	f107 0114 	add.w	r1, r7, #20
 800496e:	f100 0e14 	add.w	lr, r0, #20
 8004972:	f104 0914 	add.w	r9, r4, #20
 8004976:	f107 0010 	add.w	r0, r7, #16
 800497a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800497e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004982:	46f2      	mov	sl, lr
 8004984:	2700      	movs	r7, #0
 8004986:	f859 3b04 	ldr.w	r3, [r9], #4
 800498a:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800498e:	fa1f f883 	uxth.w	r8, r3
 8004992:	fa17 f78b 	uxtah	r7, r7, fp
 8004996:	0c1b      	lsrs	r3, r3, #16
 8004998:	eba7 0808 	sub.w	r8, r7, r8
 800499c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80049a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80049a4:	fa1f f888 	uxth.w	r8, r8
 80049a8:	141f      	asrs	r7, r3, #16
 80049aa:	454d      	cmp	r5, r9
 80049ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80049b0:	f84a 3b04 	str.w	r3, [sl], #4
 80049b4:	d8e7      	bhi.n	8004986 <__mdiff+0x7e>
 80049b6:	1b2b      	subs	r3, r5, r4
 80049b8:	3b15      	subs	r3, #21
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	3304      	adds	r3, #4
 80049c0:	3415      	adds	r4, #21
 80049c2:	42a5      	cmp	r5, r4
 80049c4:	bf38      	it	cc
 80049c6:	2304      	movcc	r3, #4
 80049c8:	4419      	add	r1, r3
 80049ca:	4473      	add	r3, lr
 80049cc:	469e      	mov	lr, r3
 80049ce:	460d      	mov	r5, r1
 80049d0:	4565      	cmp	r5, ip
 80049d2:	d30e      	bcc.n	80049f2 <__mdiff+0xea>
 80049d4:	f10c 0003 	add.w	r0, ip, #3
 80049d8:	1a40      	subs	r0, r0, r1
 80049da:	f020 0003 	bic.w	r0, r0, #3
 80049de:	3903      	subs	r1, #3
 80049e0:	458c      	cmp	ip, r1
 80049e2:	bf38      	it	cc
 80049e4:	2000      	movcc	r0, #0
 80049e6:	4418      	add	r0, r3
 80049e8:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80049ec:	b17b      	cbz	r3, 8004a0e <__mdiff+0x106>
 80049ee:	6116      	str	r6, [r2, #16]
 80049f0:	e7a4      	b.n	800493c <__mdiff+0x34>
 80049f2:	f855 8b04 	ldr.w	r8, [r5], #4
 80049f6:	fa17 f488 	uxtah	r4, r7, r8
 80049fa:	1420      	asrs	r0, r4, #16
 80049fc:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004a00:	b2a4      	uxth	r4, r4
 8004a02:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8004a06:	f84e 4b04 	str.w	r4, [lr], #4
 8004a0a:	1407      	asrs	r7, r0, #16
 8004a0c:	e7e0      	b.n	80049d0 <__mdiff+0xc8>
 8004a0e:	3e01      	subs	r6, #1
 8004a10:	e7ea      	b.n	80049e8 <__mdiff+0xe0>
 8004a12:	bf00      	nop
 8004a14:	08005863 	.word	0x08005863
 8004a18:	08005874 	.word	0x08005874

08004a1c <__d2b>:
 8004a1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004a20:	2101      	movs	r1, #1
 8004a22:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004a26:	4690      	mov	r8, r2
 8004a28:	461d      	mov	r5, r3
 8004a2a:	f7ff fcd5 	bl	80043d8 <_Balloc>
 8004a2e:	4604      	mov	r4, r0
 8004a30:	b930      	cbnz	r0, 8004a40 <__d2b+0x24>
 8004a32:	4602      	mov	r2, r0
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <__d2b+0xb0>)
 8004a36:	4826      	ldr	r0, [pc, #152]	; (8004ad0 <__d2b+0xb4>)
 8004a38:	f240 310a 	movw	r1, #778	; 0x30a
 8004a3c:	f000 f910 	bl	8004c60 <__assert_func>
 8004a40:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004a44:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004a48:	bb2d      	cbnz	r5, 8004a96 <__d2b+0x7a>
 8004a4a:	9301      	str	r3, [sp, #4]
 8004a4c:	f1b8 0300 	subs.w	r3, r8, #0
 8004a50:	d026      	beq.n	8004aa0 <__d2b+0x84>
 8004a52:	4668      	mov	r0, sp
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	f7ff fd8b 	bl	8004570 <__lo0bits>
 8004a5a:	9900      	ldr	r1, [sp, #0]
 8004a5c:	b1f0      	cbz	r0, 8004a9c <__d2b+0x80>
 8004a5e:	9a01      	ldr	r2, [sp, #4]
 8004a60:	f1c0 0320 	rsb	r3, r0, #32
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	40c2      	lsrs	r2, r0
 8004a6c:	6163      	str	r3, [r4, #20]
 8004a6e:	9201      	str	r2, [sp, #4]
 8004a70:	9b01      	ldr	r3, [sp, #4]
 8004a72:	61a3      	str	r3, [r4, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bf14      	ite	ne
 8004a78:	2102      	movne	r1, #2
 8004a7a:	2101      	moveq	r1, #1
 8004a7c:	6121      	str	r1, [r4, #16]
 8004a7e:	b1c5      	cbz	r5, 8004ab2 <__d2b+0x96>
 8004a80:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004a84:	4405      	add	r5, r0
 8004a86:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004a8a:	603d      	str	r5, [r7, #0]
 8004a8c:	6030      	str	r0, [r6, #0]
 8004a8e:	4620      	mov	r0, r4
 8004a90:	b002      	add	sp, #8
 8004a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a9a:	e7d6      	b.n	8004a4a <__d2b+0x2e>
 8004a9c:	6161      	str	r1, [r4, #20]
 8004a9e:	e7e7      	b.n	8004a70 <__d2b+0x54>
 8004aa0:	a801      	add	r0, sp, #4
 8004aa2:	f7ff fd65 	bl	8004570 <__lo0bits>
 8004aa6:	9b01      	ldr	r3, [sp, #4]
 8004aa8:	6163      	str	r3, [r4, #20]
 8004aaa:	2101      	movs	r1, #1
 8004aac:	6121      	str	r1, [r4, #16]
 8004aae:	3020      	adds	r0, #32
 8004ab0:	e7e5      	b.n	8004a7e <__d2b+0x62>
 8004ab2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004ab6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004aba:	6038      	str	r0, [r7, #0]
 8004abc:	6918      	ldr	r0, [r3, #16]
 8004abe:	f7ff fd37 	bl	8004530 <__hi0bits>
 8004ac2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004ac6:	6031      	str	r1, [r6, #0]
 8004ac8:	e7e1      	b.n	8004a8e <__d2b+0x72>
 8004aca:	bf00      	nop
 8004acc:	08005863 	.word	0x08005863
 8004ad0:	08005874 	.word	0x08005874

08004ad4 <_calloc_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	fb02 f501 	mul.w	r5, r2, r1
 8004ada:	4629      	mov	r1, r5
 8004adc:	f000 f856 	bl	8004b8c <_malloc_r>
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	b118      	cbz	r0, 8004aec <_calloc_r+0x18>
 8004ae4:	462a      	mov	r2, r5
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	f7fe f97c 	bl	8002de4 <memset>
 8004aec:	4620      	mov	r0, r4
 8004aee:	bd38      	pop	{r3, r4, r5, pc}

08004af0 <_free_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4605      	mov	r5, r0
 8004af4:	2900      	cmp	r1, #0
 8004af6:	d045      	beq.n	8004b84 <_free_r+0x94>
 8004af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004afc:	1f0c      	subs	r4, r1, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bfb8      	it	lt
 8004b02:	18e4      	addlt	r4, r4, r3
 8004b04:	f000 f8ee 	bl	8004ce4 <__malloc_lock>
 8004b08:	4a1f      	ldr	r2, [pc, #124]	; (8004b88 <_free_r+0x98>)
 8004b0a:	6813      	ldr	r3, [r2, #0]
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	b933      	cbnz	r3, 8004b1e <_free_r+0x2e>
 8004b10:	6063      	str	r3, [r4, #4]
 8004b12:	6014      	str	r4, [r2, #0]
 8004b14:	4628      	mov	r0, r5
 8004b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b1a:	f000 b8e9 	b.w	8004cf0 <__malloc_unlock>
 8004b1e:	42a3      	cmp	r3, r4
 8004b20:	d90b      	bls.n	8004b3a <_free_r+0x4a>
 8004b22:	6821      	ldr	r1, [r4, #0]
 8004b24:	1862      	adds	r2, r4, r1
 8004b26:	4293      	cmp	r3, r2
 8004b28:	bf04      	itt	eq
 8004b2a:	681a      	ldreq	r2, [r3, #0]
 8004b2c:	685b      	ldreq	r3, [r3, #4]
 8004b2e:	6063      	str	r3, [r4, #4]
 8004b30:	bf04      	itt	eq
 8004b32:	1852      	addeq	r2, r2, r1
 8004b34:	6022      	streq	r2, [r4, #0]
 8004b36:	6004      	str	r4, [r0, #0]
 8004b38:	e7ec      	b.n	8004b14 <_free_r+0x24>
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	b10b      	cbz	r3, 8004b44 <_free_r+0x54>
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	d9fa      	bls.n	8004b3a <_free_r+0x4a>
 8004b44:	6811      	ldr	r1, [r2, #0]
 8004b46:	1850      	adds	r0, r2, r1
 8004b48:	42a0      	cmp	r0, r4
 8004b4a:	d10b      	bne.n	8004b64 <_free_r+0x74>
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	4401      	add	r1, r0
 8004b50:	1850      	adds	r0, r2, r1
 8004b52:	4283      	cmp	r3, r0
 8004b54:	6011      	str	r1, [r2, #0]
 8004b56:	d1dd      	bne.n	8004b14 <_free_r+0x24>
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	6053      	str	r3, [r2, #4]
 8004b5e:	4401      	add	r1, r0
 8004b60:	6011      	str	r1, [r2, #0]
 8004b62:	e7d7      	b.n	8004b14 <_free_r+0x24>
 8004b64:	d902      	bls.n	8004b6c <_free_r+0x7c>
 8004b66:	230c      	movs	r3, #12
 8004b68:	602b      	str	r3, [r5, #0]
 8004b6a:	e7d3      	b.n	8004b14 <_free_r+0x24>
 8004b6c:	6820      	ldr	r0, [r4, #0]
 8004b6e:	1821      	adds	r1, r4, r0
 8004b70:	428b      	cmp	r3, r1
 8004b72:	bf04      	itt	eq
 8004b74:	6819      	ldreq	r1, [r3, #0]
 8004b76:	685b      	ldreq	r3, [r3, #4]
 8004b78:	6063      	str	r3, [r4, #4]
 8004b7a:	bf04      	itt	eq
 8004b7c:	1809      	addeq	r1, r1, r0
 8004b7e:	6021      	streq	r1, [r4, #0]
 8004b80:	6054      	str	r4, [r2, #4]
 8004b82:	e7c7      	b.n	8004b14 <_free_r+0x24>
 8004b84:	bd38      	pop	{r3, r4, r5, pc}
 8004b86:	bf00      	nop
 8004b88:	20000208 	.word	0x20000208

08004b8c <_malloc_r>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	1ccd      	adds	r5, r1, #3
 8004b90:	f025 0503 	bic.w	r5, r5, #3
 8004b94:	3508      	adds	r5, #8
 8004b96:	2d0c      	cmp	r5, #12
 8004b98:	bf38      	it	cc
 8004b9a:	250c      	movcc	r5, #12
 8004b9c:	2d00      	cmp	r5, #0
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	db01      	blt.n	8004ba6 <_malloc_r+0x1a>
 8004ba2:	42a9      	cmp	r1, r5
 8004ba4:	d903      	bls.n	8004bae <_malloc_r+0x22>
 8004ba6:	230c      	movs	r3, #12
 8004ba8:	6033      	str	r3, [r6, #0]
 8004baa:	2000      	movs	r0, #0
 8004bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bae:	f000 f899 	bl	8004ce4 <__malloc_lock>
 8004bb2:	4921      	ldr	r1, [pc, #132]	; (8004c38 <_malloc_r+0xac>)
 8004bb4:	680a      	ldr	r2, [r1, #0]
 8004bb6:	4614      	mov	r4, r2
 8004bb8:	b99c      	cbnz	r4, 8004be2 <_malloc_r+0x56>
 8004bba:	4f20      	ldr	r7, [pc, #128]	; (8004c3c <_malloc_r+0xb0>)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	b923      	cbnz	r3, 8004bca <_malloc_r+0x3e>
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f000 f83c 	bl	8004c40 <_sbrk_r>
 8004bc8:	6038      	str	r0, [r7, #0]
 8004bca:	4629      	mov	r1, r5
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f000 f837 	bl	8004c40 <_sbrk_r>
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	d123      	bne.n	8004c1e <_malloc_r+0x92>
 8004bd6:	230c      	movs	r3, #12
 8004bd8:	6033      	str	r3, [r6, #0]
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f000 f888 	bl	8004cf0 <__malloc_unlock>
 8004be0:	e7e3      	b.n	8004baa <_malloc_r+0x1e>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	1b5b      	subs	r3, r3, r5
 8004be6:	d417      	bmi.n	8004c18 <_malloc_r+0x8c>
 8004be8:	2b0b      	cmp	r3, #11
 8004bea:	d903      	bls.n	8004bf4 <_malloc_r+0x68>
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	441c      	add	r4, r3
 8004bf0:	6025      	str	r5, [r4, #0]
 8004bf2:	e004      	b.n	8004bfe <_malloc_r+0x72>
 8004bf4:	6863      	ldr	r3, [r4, #4]
 8004bf6:	42a2      	cmp	r2, r4
 8004bf8:	bf0c      	ite	eq
 8004bfa:	600b      	streq	r3, [r1, #0]
 8004bfc:	6053      	strne	r3, [r2, #4]
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f000 f876 	bl	8004cf0 <__malloc_unlock>
 8004c04:	f104 000b 	add.w	r0, r4, #11
 8004c08:	1d23      	adds	r3, r4, #4
 8004c0a:	f020 0007 	bic.w	r0, r0, #7
 8004c0e:	1ac2      	subs	r2, r0, r3
 8004c10:	d0cc      	beq.n	8004bac <_malloc_r+0x20>
 8004c12:	1a1b      	subs	r3, r3, r0
 8004c14:	50a3      	str	r3, [r4, r2]
 8004c16:	e7c9      	b.n	8004bac <_malloc_r+0x20>
 8004c18:	4622      	mov	r2, r4
 8004c1a:	6864      	ldr	r4, [r4, #4]
 8004c1c:	e7cc      	b.n	8004bb8 <_malloc_r+0x2c>
 8004c1e:	1cc4      	adds	r4, r0, #3
 8004c20:	f024 0403 	bic.w	r4, r4, #3
 8004c24:	42a0      	cmp	r0, r4
 8004c26:	d0e3      	beq.n	8004bf0 <_malloc_r+0x64>
 8004c28:	1a21      	subs	r1, r4, r0
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f000 f808 	bl	8004c40 <_sbrk_r>
 8004c30:	3001      	adds	r0, #1
 8004c32:	d1dd      	bne.n	8004bf0 <_malloc_r+0x64>
 8004c34:	e7cf      	b.n	8004bd6 <_malloc_r+0x4a>
 8004c36:	bf00      	nop
 8004c38:	20000208 	.word	0x20000208
 8004c3c:	2000020c 	.word	0x2000020c

08004c40 <_sbrk_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	4d06      	ldr	r5, [pc, #24]	; (8004c5c <_sbrk_r+0x1c>)
 8004c44:	2300      	movs	r3, #0
 8004c46:	4604      	mov	r4, r0
 8004c48:	4608      	mov	r0, r1
 8004c4a:	602b      	str	r3, [r5, #0]
 8004c4c:	f7fc fb72 	bl	8001334 <_sbrk>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d102      	bne.n	8004c5a <_sbrk_r+0x1a>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	b103      	cbz	r3, 8004c5a <_sbrk_r+0x1a>
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	2000025c 	.word	0x2000025c

08004c60 <__assert_func>:
 8004c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c62:	4614      	mov	r4, r2
 8004c64:	461a      	mov	r2, r3
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <__assert_func+0x2c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	68d8      	ldr	r0, [r3, #12]
 8004c6e:	b14c      	cbz	r4, 8004c84 <__assert_func+0x24>
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <__assert_func+0x30>)
 8004c72:	9100      	str	r1, [sp, #0]
 8004c74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004c78:	4906      	ldr	r1, [pc, #24]	; (8004c94 <__assert_func+0x34>)
 8004c7a:	462b      	mov	r3, r5
 8004c7c:	f000 f80e 	bl	8004c9c <fiprintf>
 8004c80:	f000 fa62 	bl	8005148 <abort>
 8004c84:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <__assert_func+0x38>)
 8004c86:	461c      	mov	r4, r3
 8004c88:	e7f3      	b.n	8004c72 <__assert_func+0x12>
 8004c8a:	bf00      	nop
 8004c8c:	2000000c 	.word	0x2000000c
 8004c90:	080059d4 	.word	0x080059d4
 8004c94:	080059e1 	.word	0x080059e1
 8004c98:	08005a0f 	.word	0x08005a0f

08004c9c <fiprintf>:
 8004c9c:	b40e      	push	{r1, r2, r3}
 8004c9e:	b503      	push	{r0, r1, lr}
 8004ca0:	4601      	mov	r1, r0
 8004ca2:	ab03      	add	r3, sp, #12
 8004ca4:	4805      	ldr	r0, [pc, #20]	; (8004cbc <fiprintf+0x20>)
 8004ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004caa:	6800      	ldr	r0, [r0, #0]
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	f000 f84d 	bl	8004d4c <_vfiprintf_r>
 8004cb2:	b002      	add	sp, #8
 8004cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cb8:	b003      	add	sp, #12
 8004cba:	4770      	bx	lr
 8004cbc:	2000000c 	.word	0x2000000c

08004cc0 <__ascii_mbtowc>:
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	b901      	cbnz	r1, 8004cc6 <__ascii_mbtowc+0x6>
 8004cc4:	a901      	add	r1, sp, #4
 8004cc6:	b142      	cbz	r2, 8004cda <__ascii_mbtowc+0x1a>
 8004cc8:	b14b      	cbz	r3, 8004cde <__ascii_mbtowc+0x1e>
 8004cca:	7813      	ldrb	r3, [r2, #0]
 8004ccc:	600b      	str	r3, [r1, #0]
 8004cce:	7812      	ldrb	r2, [r2, #0]
 8004cd0:	1e10      	subs	r0, r2, #0
 8004cd2:	bf18      	it	ne
 8004cd4:	2001      	movne	r0, #1
 8004cd6:	b002      	add	sp, #8
 8004cd8:	4770      	bx	lr
 8004cda:	4610      	mov	r0, r2
 8004cdc:	e7fb      	b.n	8004cd6 <__ascii_mbtowc+0x16>
 8004cde:	f06f 0001 	mvn.w	r0, #1
 8004ce2:	e7f8      	b.n	8004cd6 <__ascii_mbtowc+0x16>

08004ce4 <__malloc_lock>:
 8004ce4:	4801      	ldr	r0, [pc, #4]	; (8004cec <__malloc_lock+0x8>)
 8004ce6:	f000 bbef 	b.w	80054c8 <__retarget_lock_acquire_recursive>
 8004cea:	bf00      	nop
 8004cec:	20000264 	.word	0x20000264

08004cf0 <__malloc_unlock>:
 8004cf0:	4801      	ldr	r0, [pc, #4]	; (8004cf8 <__malloc_unlock+0x8>)
 8004cf2:	f000 bbea 	b.w	80054ca <__retarget_lock_release_recursive>
 8004cf6:	bf00      	nop
 8004cf8:	20000264 	.word	0x20000264

08004cfc <__sfputc_r>:
 8004cfc:	6893      	ldr	r3, [r2, #8]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	b410      	push	{r4}
 8004d04:	6093      	str	r3, [r2, #8]
 8004d06:	da07      	bge.n	8004d18 <__sfputc_r+0x1c>
 8004d08:	6994      	ldr	r4, [r2, #24]
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	db01      	blt.n	8004d12 <__sfputc_r+0x16>
 8004d0e:	290a      	cmp	r1, #10
 8004d10:	d102      	bne.n	8004d18 <__sfputc_r+0x1c>
 8004d12:	bc10      	pop	{r4}
 8004d14:	f000 b94a 	b.w	8004fac <__swbuf_r>
 8004d18:	6813      	ldr	r3, [r2, #0]
 8004d1a:	1c58      	adds	r0, r3, #1
 8004d1c:	6010      	str	r0, [r2, #0]
 8004d1e:	7019      	strb	r1, [r3, #0]
 8004d20:	4608      	mov	r0, r1
 8004d22:	bc10      	pop	{r4}
 8004d24:	4770      	bx	lr

08004d26 <__sfputs_r>:
 8004d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d28:	4606      	mov	r6, r0
 8004d2a:	460f      	mov	r7, r1
 8004d2c:	4614      	mov	r4, r2
 8004d2e:	18d5      	adds	r5, r2, r3
 8004d30:	42ac      	cmp	r4, r5
 8004d32:	d101      	bne.n	8004d38 <__sfputs_r+0x12>
 8004d34:	2000      	movs	r0, #0
 8004d36:	e007      	b.n	8004d48 <__sfputs_r+0x22>
 8004d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d3c:	463a      	mov	r2, r7
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f7ff ffdc 	bl	8004cfc <__sfputc_r>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d1f3      	bne.n	8004d30 <__sfputs_r+0xa>
 8004d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d4c <_vfiprintf_r>:
 8004d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d50:	460d      	mov	r5, r1
 8004d52:	b09d      	sub	sp, #116	; 0x74
 8004d54:	4614      	mov	r4, r2
 8004d56:	4698      	mov	r8, r3
 8004d58:	4606      	mov	r6, r0
 8004d5a:	b118      	cbz	r0, 8004d64 <_vfiprintf_r+0x18>
 8004d5c:	6983      	ldr	r3, [r0, #24]
 8004d5e:	b90b      	cbnz	r3, 8004d64 <_vfiprintf_r+0x18>
 8004d60:	f000 fb14 	bl	800538c <__sinit>
 8004d64:	4b89      	ldr	r3, [pc, #548]	; (8004f8c <_vfiprintf_r+0x240>)
 8004d66:	429d      	cmp	r5, r3
 8004d68:	d11b      	bne.n	8004da2 <_vfiprintf_r+0x56>
 8004d6a:	6875      	ldr	r5, [r6, #4]
 8004d6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d6e:	07d9      	lsls	r1, r3, #31
 8004d70:	d405      	bmi.n	8004d7e <_vfiprintf_r+0x32>
 8004d72:	89ab      	ldrh	r3, [r5, #12]
 8004d74:	059a      	lsls	r2, r3, #22
 8004d76:	d402      	bmi.n	8004d7e <_vfiprintf_r+0x32>
 8004d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d7a:	f000 fba5 	bl	80054c8 <__retarget_lock_acquire_recursive>
 8004d7e:	89ab      	ldrh	r3, [r5, #12]
 8004d80:	071b      	lsls	r3, r3, #28
 8004d82:	d501      	bpl.n	8004d88 <_vfiprintf_r+0x3c>
 8004d84:	692b      	ldr	r3, [r5, #16]
 8004d86:	b9eb      	cbnz	r3, 8004dc4 <_vfiprintf_r+0x78>
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f000 f96e 	bl	800506c <__swsetup_r>
 8004d90:	b1c0      	cbz	r0, 8004dc4 <_vfiprintf_r+0x78>
 8004d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d94:	07dc      	lsls	r4, r3, #31
 8004d96:	d50e      	bpl.n	8004db6 <_vfiprintf_r+0x6a>
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d9c:	b01d      	add	sp, #116	; 0x74
 8004d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da2:	4b7b      	ldr	r3, [pc, #492]	; (8004f90 <_vfiprintf_r+0x244>)
 8004da4:	429d      	cmp	r5, r3
 8004da6:	d101      	bne.n	8004dac <_vfiprintf_r+0x60>
 8004da8:	68b5      	ldr	r5, [r6, #8]
 8004daa:	e7df      	b.n	8004d6c <_vfiprintf_r+0x20>
 8004dac:	4b79      	ldr	r3, [pc, #484]	; (8004f94 <_vfiprintf_r+0x248>)
 8004dae:	429d      	cmp	r5, r3
 8004db0:	bf08      	it	eq
 8004db2:	68f5      	ldreq	r5, [r6, #12]
 8004db4:	e7da      	b.n	8004d6c <_vfiprintf_r+0x20>
 8004db6:	89ab      	ldrh	r3, [r5, #12]
 8004db8:	0598      	lsls	r0, r3, #22
 8004dba:	d4ed      	bmi.n	8004d98 <_vfiprintf_r+0x4c>
 8004dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dbe:	f000 fb84 	bl	80054ca <__retarget_lock_release_recursive>
 8004dc2:	e7e9      	b.n	8004d98 <_vfiprintf_r+0x4c>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc8:	2320      	movs	r3, #32
 8004dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dd2:	2330      	movs	r3, #48	; 0x30
 8004dd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f98 <_vfiprintf_r+0x24c>
 8004dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ddc:	f04f 0901 	mov.w	r9, #1
 8004de0:	4623      	mov	r3, r4
 8004de2:	469a      	mov	sl, r3
 8004de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004de8:	b10a      	cbz	r2, 8004dee <_vfiprintf_r+0xa2>
 8004dea:	2a25      	cmp	r2, #37	; 0x25
 8004dec:	d1f9      	bne.n	8004de2 <_vfiprintf_r+0x96>
 8004dee:	ebba 0b04 	subs.w	fp, sl, r4
 8004df2:	d00b      	beq.n	8004e0c <_vfiprintf_r+0xc0>
 8004df4:	465b      	mov	r3, fp
 8004df6:	4622      	mov	r2, r4
 8004df8:	4629      	mov	r1, r5
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	f7ff ff93 	bl	8004d26 <__sfputs_r>
 8004e00:	3001      	adds	r0, #1
 8004e02:	f000 80aa 	beq.w	8004f5a <_vfiprintf_r+0x20e>
 8004e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e08:	445a      	add	r2, fp
 8004e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 80a2 	beq.w	8004f5a <_vfiprintf_r+0x20e>
 8004e16:	2300      	movs	r3, #0
 8004e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e20:	f10a 0a01 	add.w	sl, sl, #1
 8004e24:	9304      	str	r3, [sp, #16]
 8004e26:	9307      	str	r3, [sp, #28]
 8004e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8004e2e:	4654      	mov	r4, sl
 8004e30:	2205      	movs	r2, #5
 8004e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e36:	4858      	ldr	r0, [pc, #352]	; (8004f98 <_vfiprintf_r+0x24c>)
 8004e38:	f7fb f9d2 	bl	80001e0 <memchr>
 8004e3c:	9a04      	ldr	r2, [sp, #16]
 8004e3e:	b9d8      	cbnz	r0, 8004e78 <_vfiprintf_r+0x12c>
 8004e40:	06d1      	lsls	r1, r2, #27
 8004e42:	bf44      	itt	mi
 8004e44:	2320      	movmi	r3, #32
 8004e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e4a:	0713      	lsls	r3, r2, #28
 8004e4c:	bf44      	itt	mi
 8004e4e:	232b      	movmi	r3, #43	; 0x2b
 8004e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e54:	f89a 3000 	ldrb.w	r3, [sl]
 8004e58:	2b2a      	cmp	r3, #42	; 0x2a
 8004e5a:	d015      	beq.n	8004e88 <_vfiprintf_r+0x13c>
 8004e5c:	9a07      	ldr	r2, [sp, #28]
 8004e5e:	4654      	mov	r4, sl
 8004e60:	2000      	movs	r0, #0
 8004e62:	f04f 0c0a 	mov.w	ip, #10
 8004e66:	4621      	mov	r1, r4
 8004e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e6c:	3b30      	subs	r3, #48	; 0x30
 8004e6e:	2b09      	cmp	r3, #9
 8004e70:	d94e      	bls.n	8004f10 <_vfiprintf_r+0x1c4>
 8004e72:	b1b0      	cbz	r0, 8004ea2 <_vfiprintf_r+0x156>
 8004e74:	9207      	str	r2, [sp, #28]
 8004e76:	e014      	b.n	8004ea2 <_vfiprintf_r+0x156>
 8004e78:	eba0 0308 	sub.w	r3, r0, r8
 8004e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004e80:	4313      	orrs	r3, r2
 8004e82:	9304      	str	r3, [sp, #16]
 8004e84:	46a2      	mov	sl, r4
 8004e86:	e7d2      	b.n	8004e2e <_vfiprintf_r+0xe2>
 8004e88:	9b03      	ldr	r3, [sp, #12]
 8004e8a:	1d19      	adds	r1, r3, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	9103      	str	r1, [sp, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bfbb      	ittet	lt
 8004e94:	425b      	neglt	r3, r3
 8004e96:	f042 0202 	orrlt.w	r2, r2, #2
 8004e9a:	9307      	strge	r3, [sp, #28]
 8004e9c:	9307      	strlt	r3, [sp, #28]
 8004e9e:	bfb8      	it	lt
 8004ea0:	9204      	strlt	r2, [sp, #16]
 8004ea2:	7823      	ldrb	r3, [r4, #0]
 8004ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ea6:	d10c      	bne.n	8004ec2 <_vfiprintf_r+0x176>
 8004ea8:	7863      	ldrb	r3, [r4, #1]
 8004eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8004eac:	d135      	bne.n	8004f1a <_vfiprintf_r+0x1ce>
 8004eae:	9b03      	ldr	r3, [sp, #12]
 8004eb0:	1d1a      	adds	r2, r3, #4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	9203      	str	r2, [sp, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bfb8      	it	lt
 8004eba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004ebe:	3402      	adds	r4, #2
 8004ec0:	9305      	str	r3, [sp, #20]
 8004ec2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004fa8 <_vfiprintf_r+0x25c>
 8004ec6:	7821      	ldrb	r1, [r4, #0]
 8004ec8:	2203      	movs	r2, #3
 8004eca:	4650      	mov	r0, sl
 8004ecc:	f7fb f988 	bl	80001e0 <memchr>
 8004ed0:	b140      	cbz	r0, 8004ee4 <_vfiprintf_r+0x198>
 8004ed2:	2340      	movs	r3, #64	; 0x40
 8004ed4:	eba0 000a 	sub.w	r0, r0, sl
 8004ed8:	fa03 f000 	lsl.w	r0, r3, r0
 8004edc:	9b04      	ldr	r3, [sp, #16]
 8004ede:	4303      	orrs	r3, r0
 8004ee0:	3401      	adds	r4, #1
 8004ee2:	9304      	str	r3, [sp, #16]
 8004ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee8:	482c      	ldr	r0, [pc, #176]	; (8004f9c <_vfiprintf_r+0x250>)
 8004eea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004eee:	2206      	movs	r2, #6
 8004ef0:	f7fb f976 	bl	80001e0 <memchr>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d03f      	beq.n	8004f78 <_vfiprintf_r+0x22c>
 8004ef8:	4b29      	ldr	r3, [pc, #164]	; (8004fa0 <_vfiprintf_r+0x254>)
 8004efa:	bb1b      	cbnz	r3, 8004f44 <_vfiprintf_r+0x1f8>
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	3307      	adds	r3, #7
 8004f00:	f023 0307 	bic.w	r3, r3, #7
 8004f04:	3308      	adds	r3, #8
 8004f06:	9303      	str	r3, [sp, #12]
 8004f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0a:	443b      	add	r3, r7
 8004f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0e:	e767      	b.n	8004de0 <_vfiprintf_r+0x94>
 8004f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f14:	460c      	mov	r4, r1
 8004f16:	2001      	movs	r0, #1
 8004f18:	e7a5      	b.n	8004e66 <_vfiprintf_r+0x11a>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	3401      	adds	r4, #1
 8004f1e:	9305      	str	r3, [sp, #20]
 8004f20:	4619      	mov	r1, r3
 8004f22:	f04f 0c0a 	mov.w	ip, #10
 8004f26:	4620      	mov	r0, r4
 8004f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f2c:	3a30      	subs	r2, #48	; 0x30
 8004f2e:	2a09      	cmp	r2, #9
 8004f30:	d903      	bls.n	8004f3a <_vfiprintf_r+0x1ee>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0c5      	beq.n	8004ec2 <_vfiprintf_r+0x176>
 8004f36:	9105      	str	r1, [sp, #20]
 8004f38:	e7c3      	b.n	8004ec2 <_vfiprintf_r+0x176>
 8004f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f3e:	4604      	mov	r4, r0
 8004f40:	2301      	movs	r3, #1
 8004f42:	e7f0      	b.n	8004f26 <_vfiprintf_r+0x1da>
 8004f44:	ab03      	add	r3, sp, #12
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	462a      	mov	r2, r5
 8004f4a:	4b16      	ldr	r3, [pc, #88]	; (8004fa4 <_vfiprintf_r+0x258>)
 8004f4c:	a904      	add	r1, sp, #16
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7fd ffee 	bl	8002f30 <_printf_float>
 8004f54:	4607      	mov	r7, r0
 8004f56:	1c78      	adds	r0, r7, #1
 8004f58:	d1d6      	bne.n	8004f08 <_vfiprintf_r+0x1bc>
 8004f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f5c:	07d9      	lsls	r1, r3, #31
 8004f5e:	d405      	bmi.n	8004f6c <_vfiprintf_r+0x220>
 8004f60:	89ab      	ldrh	r3, [r5, #12]
 8004f62:	059a      	lsls	r2, r3, #22
 8004f64:	d402      	bmi.n	8004f6c <_vfiprintf_r+0x220>
 8004f66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f68:	f000 faaf 	bl	80054ca <__retarget_lock_release_recursive>
 8004f6c:	89ab      	ldrh	r3, [r5, #12]
 8004f6e:	065b      	lsls	r3, r3, #25
 8004f70:	f53f af12 	bmi.w	8004d98 <_vfiprintf_r+0x4c>
 8004f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f76:	e711      	b.n	8004d9c <_vfiprintf_r+0x50>
 8004f78:	ab03      	add	r3, sp, #12
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	462a      	mov	r2, r5
 8004f7e:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <_vfiprintf_r+0x258>)
 8004f80:	a904      	add	r1, sp, #16
 8004f82:	4630      	mov	r0, r6
 8004f84:	f7fe fa6c 	bl	8003460 <_printf_i>
 8004f88:	e7e4      	b.n	8004f54 <_vfiprintf_r+0x208>
 8004f8a:	bf00      	nop
 8004f8c:	08005b4c 	.word	0x08005b4c
 8004f90:	08005b6c 	.word	0x08005b6c
 8004f94:	08005b2c 	.word	0x08005b2c
 8004f98:	08005a1a 	.word	0x08005a1a
 8004f9c:	08005a24 	.word	0x08005a24
 8004fa0:	08002f31 	.word	0x08002f31
 8004fa4:	08004d27 	.word	0x08004d27
 8004fa8:	08005a20 	.word	0x08005a20

08004fac <__swbuf_r>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	460e      	mov	r6, r1
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	b118      	cbz	r0, 8004fbe <__swbuf_r+0x12>
 8004fb6:	6983      	ldr	r3, [r0, #24]
 8004fb8:	b90b      	cbnz	r3, 8004fbe <__swbuf_r+0x12>
 8004fba:	f000 f9e7 	bl	800538c <__sinit>
 8004fbe:	4b21      	ldr	r3, [pc, #132]	; (8005044 <__swbuf_r+0x98>)
 8004fc0:	429c      	cmp	r4, r3
 8004fc2:	d12b      	bne.n	800501c <__swbuf_r+0x70>
 8004fc4:	686c      	ldr	r4, [r5, #4]
 8004fc6:	69a3      	ldr	r3, [r4, #24]
 8004fc8:	60a3      	str	r3, [r4, #8]
 8004fca:	89a3      	ldrh	r3, [r4, #12]
 8004fcc:	071a      	lsls	r2, r3, #28
 8004fce:	d52f      	bpl.n	8005030 <__swbuf_r+0x84>
 8004fd0:	6923      	ldr	r3, [r4, #16]
 8004fd2:	b36b      	cbz	r3, 8005030 <__swbuf_r+0x84>
 8004fd4:	6923      	ldr	r3, [r4, #16]
 8004fd6:	6820      	ldr	r0, [r4, #0]
 8004fd8:	1ac0      	subs	r0, r0, r3
 8004fda:	6963      	ldr	r3, [r4, #20]
 8004fdc:	b2f6      	uxtb	r6, r6
 8004fde:	4283      	cmp	r3, r0
 8004fe0:	4637      	mov	r7, r6
 8004fe2:	dc04      	bgt.n	8004fee <__swbuf_r+0x42>
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f000 f93c 	bl	8005264 <_fflush_r>
 8004fec:	bb30      	cbnz	r0, 800503c <__swbuf_r+0x90>
 8004fee:	68a3      	ldr	r3, [r4, #8]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	60a3      	str	r3, [r4, #8]
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	6022      	str	r2, [r4, #0]
 8004ffa:	701e      	strb	r6, [r3, #0]
 8004ffc:	6963      	ldr	r3, [r4, #20]
 8004ffe:	3001      	adds	r0, #1
 8005000:	4283      	cmp	r3, r0
 8005002:	d004      	beq.n	800500e <__swbuf_r+0x62>
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	07db      	lsls	r3, r3, #31
 8005008:	d506      	bpl.n	8005018 <__swbuf_r+0x6c>
 800500a:	2e0a      	cmp	r6, #10
 800500c:	d104      	bne.n	8005018 <__swbuf_r+0x6c>
 800500e:	4621      	mov	r1, r4
 8005010:	4628      	mov	r0, r5
 8005012:	f000 f927 	bl	8005264 <_fflush_r>
 8005016:	b988      	cbnz	r0, 800503c <__swbuf_r+0x90>
 8005018:	4638      	mov	r0, r7
 800501a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <__swbuf_r+0x9c>)
 800501e:	429c      	cmp	r4, r3
 8005020:	d101      	bne.n	8005026 <__swbuf_r+0x7a>
 8005022:	68ac      	ldr	r4, [r5, #8]
 8005024:	e7cf      	b.n	8004fc6 <__swbuf_r+0x1a>
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <__swbuf_r+0xa0>)
 8005028:	429c      	cmp	r4, r3
 800502a:	bf08      	it	eq
 800502c:	68ec      	ldreq	r4, [r5, #12]
 800502e:	e7ca      	b.n	8004fc6 <__swbuf_r+0x1a>
 8005030:	4621      	mov	r1, r4
 8005032:	4628      	mov	r0, r5
 8005034:	f000 f81a 	bl	800506c <__swsetup_r>
 8005038:	2800      	cmp	r0, #0
 800503a:	d0cb      	beq.n	8004fd4 <__swbuf_r+0x28>
 800503c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005040:	e7ea      	b.n	8005018 <__swbuf_r+0x6c>
 8005042:	bf00      	nop
 8005044:	08005b4c 	.word	0x08005b4c
 8005048:	08005b6c 	.word	0x08005b6c
 800504c:	08005b2c 	.word	0x08005b2c

08005050 <__ascii_wctomb>:
 8005050:	4603      	mov	r3, r0
 8005052:	4608      	mov	r0, r1
 8005054:	b141      	cbz	r1, 8005068 <__ascii_wctomb+0x18>
 8005056:	2aff      	cmp	r2, #255	; 0xff
 8005058:	d904      	bls.n	8005064 <__ascii_wctomb+0x14>
 800505a:	228a      	movs	r2, #138	; 0x8a
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005062:	4770      	bx	lr
 8005064:	700a      	strb	r2, [r1, #0]
 8005066:	2001      	movs	r0, #1
 8005068:	4770      	bx	lr
	...

0800506c <__swsetup_r>:
 800506c:	4b32      	ldr	r3, [pc, #200]	; (8005138 <__swsetup_r+0xcc>)
 800506e:	b570      	push	{r4, r5, r6, lr}
 8005070:	681d      	ldr	r5, [r3, #0]
 8005072:	4606      	mov	r6, r0
 8005074:	460c      	mov	r4, r1
 8005076:	b125      	cbz	r5, 8005082 <__swsetup_r+0x16>
 8005078:	69ab      	ldr	r3, [r5, #24]
 800507a:	b913      	cbnz	r3, 8005082 <__swsetup_r+0x16>
 800507c:	4628      	mov	r0, r5
 800507e:	f000 f985 	bl	800538c <__sinit>
 8005082:	4b2e      	ldr	r3, [pc, #184]	; (800513c <__swsetup_r+0xd0>)
 8005084:	429c      	cmp	r4, r3
 8005086:	d10f      	bne.n	80050a8 <__swsetup_r+0x3c>
 8005088:	686c      	ldr	r4, [r5, #4]
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005090:	0719      	lsls	r1, r3, #28
 8005092:	d42c      	bmi.n	80050ee <__swsetup_r+0x82>
 8005094:	06dd      	lsls	r5, r3, #27
 8005096:	d411      	bmi.n	80050bc <__swsetup_r+0x50>
 8005098:	2309      	movs	r3, #9
 800509a:	6033      	str	r3, [r6, #0]
 800509c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050a0:	81a3      	strh	r3, [r4, #12]
 80050a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050a6:	e03e      	b.n	8005126 <__swsetup_r+0xba>
 80050a8:	4b25      	ldr	r3, [pc, #148]	; (8005140 <__swsetup_r+0xd4>)
 80050aa:	429c      	cmp	r4, r3
 80050ac:	d101      	bne.n	80050b2 <__swsetup_r+0x46>
 80050ae:	68ac      	ldr	r4, [r5, #8]
 80050b0:	e7eb      	b.n	800508a <__swsetup_r+0x1e>
 80050b2:	4b24      	ldr	r3, [pc, #144]	; (8005144 <__swsetup_r+0xd8>)
 80050b4:	429c      	cmp	r4, r3
 80050b6:	bf08      	it	eq
 80050b8:	68ec      	ldreq	r4, [r5, #12]
 80050ba:	e7e6      	b.n	800508a <__swsetup_r+0x1e>
 80050bc:	0758      	lsls	r0, r3, #29
 80050be:	d512      	bpl.n	80050e6 <__swsetup_r+0x7a>
 80050c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050c2:	b141      	cbz	r1, 80050d6 <__swsetup_r+0x6a>
 80050c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050c8:	4299      	cmp	r1, r3
 80050ca:	d002      	beq.n	80050d2 <__swsetup_r+0x66>
 80050cc:	4630      	mov	r0, r6
 80050ce:	f7ff fd0f 	bl	8004af0 <_free_r>
 80050d2:	2300      	movs	r3, #0
 80050d4:	6363      	str	r3, [r4, #52]	; 0x34
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050dc:	81a3      	strh	r3, [r4, #12]
 80050de:	2300      	movs	r3, #0
 80050e0:	6063      	str	r3, [r4, #4]
 80050e2:	6923      	ldr	r3, [r4, #16]
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	f043 0308 	orr.w	r3, r3, #8
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	6923      	ldr	r3, [r4, #16]
 80050f0:	b94b      	cbnz	r3, 8005106 <__swsetup_r+0x9a>
 80050f2:	89a3      	ldrh	r3, [r4, #12]
 80050f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050fc:	d003      	beq.n	8005106 <__swsetup_r+0x9a>
 80050fe:	4621      	mov	r1, r4
 8005100:	4630      	mov	r0, r6
 8005102:	f000 fa07 	bl	8005514 <__smakebuf_r>
 8005106:	89a0      	ldrh	r0, [r4, #12]
 8005108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800510c:	f010 0301 	ands.w	r3, r0, #1
 8005110:	d00a      	beq.n	8005128 <__swsetup_r+0xbc>
 8005112:	2300      	movs	r3, #0
 8005114:	60a3      	str	r3, [r4, #8]
 8005116:	6963      	ldr	r3, [r4, #20]
 8005118:	425b      	negs	r3, r3
 800511a:	61a3      	str	r3, [r4, #24]
 800511c:	6923      	ldr	r3, [r4, #16]
 800511e:	b943      	cbnz	r3, 8005132 <__swsetup_r+0xc6>
 8005120:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005124:	d1ba      	bne.n	800509c <__swsetup_r+0x30>
 8005126:	bd70      	pop	{r4, r5, r6, pc}
 8005128:	0781      	lsls	r1, r0, #30
 800512a:	bf58      	it	pl
 800512c:	6963      	ldrpl	r3, [r4, #20]
 800512e:	60a3      	str	r3, [r4, #8]
 8005130:	e7f4      	b.n	800511c <__swsetup_r+0xb0>
 8005132:	2000      	movs	r0, #0
 8005134:	e7f7      	b.n	8005126 <__swsetup_r+0xba>
 8005136:	bf00      	nop
 8005138:	2000000c 	.word	0x2000000c
 800513c:	08005b4c 	.word	0x08005b4c
 8005140:	08005b6c 	.word	0x08005b6c
 8005144:	08005b2c 	.word	0x08005b2c

08005148 <abort>:
 8005148:	b508      	push	{r3, lr}
 800514a:	2006      	movs	r0, #6
 800514c:	f000 fa4a 	bl	80055e4 <raise>
 8005150:	2001      	movs	r0, #1
 8005152:	f7fc f87c 	bl	800124e <_exit>
	...

08005158 <__sflush_r>:
 8005158:	898a      	ldrh	r2, [r1, #12]
 800515a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800515e:	4605      	mov	r5, r0
 8005160:	0710      	lsls	r0, r2, #28
 8005162:	460c      	mov	r4, r1
 8005164:	d458      	bmi.n	8005218 <__sflush_r+0xc0>
 8005166:	684b      	ldr	r3, [r1, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	dc05      	bgt.n	8005178 <__sflush_r+0x20>
 800516c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	dc02      	bgt.n	8005178 <__sflush_r+0x20>
 8005172:	2000      	movs	r0, #0
 8005174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800517a:	2e00      	cmp	r6, #0
 800517c:	d0f9      	beq.n	8005172 <__sflush_r+0x1a>
 800517e:	2300      	movs	r3, #0
 8005180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005184:	682f      	ldr	r7, [r5, #0]
 8005186:	602b      	str	r3, [r5, #0]
 8005188:	d032      	beq.n	80051f0 <__sflush_r+0x98>
 800518a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	075a      	lsls	r2, r3, #29
 8005190:	d505      	bpl.n	800519e <__sflush_r+0x46>
 8005192:	6863      	ldr	r3, [r4, #4]
 8005194:	1ac0      	subs	r0, r0, r3
 8005196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005198:	b10b      	cbz	r3, 800519e <__sflush_r+0x46>
 800519a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800519c:	1ac0      	subs	r0, r0, r3
 800519e:	2300      	movs	r3, #0
 80051a0:	4602      	mov	r2, r0
 80051a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051a4:	6a21      	ldr	r1, [r4, #32]
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b0      	blx	r6
 80051aa:	1c43      	adds	r3, r0, #1
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	d106      	bne.n	80051be <__sflush_r+0x66>
 80051b0:	6829      	ldr	r1, [r5, #0]
 80051b2:	291d      	cmp	r1, #29
 80051b4:	d82c      	bhi.n	8005210 <__sflush_r+0xb8>
 80051b6:	4a2a      	ldr	r2, [pc, #168]	; (8005260 <__sflush_r+0x108>)
 80051b8:	40ca      	lsrs	r2, r1
 80051ba:	07d6      	lsls	r6, r2, #31
 80051bc:	d528      	bpl.n	8005210 <__sflush_r+0xb8>
 80051be:	2200      	movs	r2, #0
 80051c0:	6062      	str	r2, [r4, #4]
 80051c2:	04d9      	lsls	r1, r3, #19
 80051c4:	6922      	ldr	r2, [r4, #16]
 80051c6:	6022      	str	r2, [r4, #0]
 80051c8:	d504      	bpl.n	80051d4 <__sflush_r+0x7c>
 80051ca:	1c42      	adds	r2, r0, #1
 80051cc:	d101      	bne.n	80051d2 <__sflush_r+0x7a>
 80051ce:	682b      	ldr	r3, [r5, #0]
 80051d0:	b903      	cbnz	r3, 80051d4 <__sflush_r+0x7c>
 80051d2:	6560      	str	r0, [r4, #84]	; 0x54
 80051d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051d6:	602f      	str	r7, [r5, #0]
 80051d8:	2900      	cmp	r1, #0
 80051da:	d0ca      	beq.n	8005172 <__sflush_r+0x1a>
 80051dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051e0:	4299      	cmp	r1, r3
 80051e2:	d002      	beq.n	80051ea <__sflush_r+0x92>
 80051e4:	4628      	mov	r0, r5
 80051e6:	f7ff fc83 	bl	8004af0 <_free_r>
 80051ea:	2000      	movs	r0, #0
 80051ec:	6360      	str	r0, [r4, #52]	; 0x34
 80051ee:	e7c1      	b.n	8005174 <__sflush_r+0x1c>
 80051f0:	6a21      	ldr	r1, [r4, #32]
 80051f2:	2301      	movs	r3, #1
 80051f4:	4628      	mov	r0, r5
 80051f6:	47b0      	blx	r6
 80051f8:	1c41      	adds	r1, r0, #1
 80051fa:	d1c7      	bne.n	800518c <__sflush_r+0x34>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0c4      	beq.n	800518c <__sflush_r+0x34>
 8005202:	2b1d      	cmp	r3, #29
 8005204:	d001      	beq.n	800520a <__sflush_r+0xb2>
 8005206:	2b16      	cmp	r3, #22
 8005208:	d101      	bne.n	800520e <__sflush_r+0xb6>
 800520a:	602f      	str	r7, [r5, #0]
 800520c:	e7b1      	b.n	8005172 <__sflush_r+0x1a>
 800520e:	89a3      	ldrh	r3, [r4, #12]
 8005210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005214:	81a3      	strh	r3, [r4, #12]
 8005216:	e7ad      	b.n	8005174 <__sflush_r+0x1c>
 8005218:	690f      	ldr	r7, [r1, #16]
 800521a:	2f00      	cmp	r7, #0
 800521c:	d0a9      	beq.n	8005172 <__sflush_r+0x1a>
 800521e:	0793      	lsls	r3, r2, #30
 8005220:	680e      	ldr	r6, [r1, #0]
 8005222:	bf08      	it	eq
 8005224:	694b      	ldreq	r3, [r1, #20]
 8005226:	600f      	str	r7, [r1, #0]
 8005228:	bf18      	it	ne
 800522a:	2300      	movne	r3, #0
 800522c:	eba6 0807 	sub.w	r8, r6, r7
 8005230:	608b      	str	r3, [r1, #8]
 8005232:	f1b8 0f00 	cmp.w	r8, #0
 8005236:	dd9c      	ble.n	8005172 <__sflush_r+0x1a>
 8005238:	6a21      	ldr	r1, [r4, #32]
 800523a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800523c:	4643      	mov	r3, r8
 800523e:	463a      	mov	r2, r7
 8005240:	4628      	mov	r0, r5
 8005242:	47b0      	blx	r6
 8005244:	2800      	cmp	r0, #0
 8005246:	dc06      	bgt.n	8005256 <__sflush_r+0xfe>
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800524e:	81a3      	strh	r3, [r4, #12]
 8005250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005254:	e78e      	b.n	8005174 <__sflush_r+0x1c>
 8005256:	4407      	add	r7, r0
 8005258:	eba8 0800 	sub.w	r8, r8, r0
 800525c:	e7e9      	b.n	8005232 <__sflush_r+0xda>
 800525e:	bf00      	nop
 8005260:	20400001 	.word	0x20400001

08005264 <_fflush_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	690b      	ldr	r3, [r1, #16]
 8005268:	4605      	mov	r5, r0
 800526a:	460c      	mov	r4, r1
 800526c:	b913      	cbnz	r3, 8005274 <_fflush_r+0x10>
 800526e:	2500      	movs	r5, #0
 8005270:	4628      	mov	r0, r5
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	b118      	cbz	r0, 800527e <_fflush_r+0x1a>
 8005276:	6983      	ldr	r3, [r0, #24]
 8005278:	b90b      	cbnz	r3, 800527e <_fflush_r+0x1a>
 800527a:	f000 f887 	bl	800538c <__sinit>
 800527e:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <_fflush_r+0x6c>)
 8005280:	429c      	cmp	r4, r3
 8005282:	d11b      	bne.n	80052bc <_fflush_r+0x58>
 8005284:	686c      	ldr	r4, [r5, #4]
 8005286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0ef      	beq.n	800526e <_fflush_r+0xa>
 800528e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005290:	07d0      	lsls	r0, r2, #31
 8005292:	d404      	bmi.n	800529e <_fflush_r+0x3a>
 8005294:	0599      	lsls	r1, r3, #22
 8005296:	d402      	bmi.n	800529e <_fflush_r+0x3a>
 8005298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800529a:	f000 f915 	bl	80054c8 <__retarget_lock_acquire_recursive>
 800529e:	4628      	mov	r0, r5
 80052a0:	4621      	mov	r1, r4
 80052a2:	f7ff ff59 	bl	8005158 <__sflush_r>
 80052a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052a8:	07da      	lsls	r2, r3, #31
 80052aa:	4605      	mov	r5, r0
 80052ac:	d4e0      	bmi.n	8005270 <_fflush_r+0xc>
 80052ae:	89a3      	ldrh	r3, [r4, #12]
 80052b0:	059b      	lsls	r3, r3, #22
 80052b2:	d4dd      	bmi.n	8005270 <_fflush_r+0xc>
 80052b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052b6:	f000 f908 	bl	80054ca <__retarget_lock_release_recursive>
 80052ba:	e7d9      	b.n	8005270 <_fflush_r+0xc>
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <_fflush_r+0x70>)
 80052be:	429c      	cmp	r4, r3
 80052c0:	d101      	bne.n	80052c6 <_fflush_r+0x62>
 80052c2:	68ac      	ldr	r4, [r5, #8]
 80052c4:	e7df      	b.n	8005286 <_fflush_r+0x22>
 80052c6:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <_fflush_r+0x74>)
 80052c8:	429c      	cmp	r4, r3
 80052ca:	bf08      	it	eq
 80052cc:	68ec      	ldreq	r4, [r5, #12]
 80052ce:	e7da      	b.n	8005286 <_fflush_r+0x22>
 80052d0:	08005b4c 	.word	0x08005b4c
 80052d4:	08005b6c 	.word	0x08005b6c
 80052d8:	08005b2c 	.word	0x08005b2c

080052dc <std>:
 80052dc:	2300      	movs	r3, #0
 80052de:	b510      	push	{r4, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	e9c0 3300 	strd	r3, r3, [r0]
 80052e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ea:	6083      	str	r3, [r0, #8]
 80052ec:	8181      	strh	r1, [r0, #12]
 80052ee:	6643      	str	r3, [r0, #100]	; 0x64
 80052f0:	81c2      	strh	r2, [r0, #14]
 80052f2:	6183      	str	r3, [r0, #24]
 80052f4:	4619      	mov	r1, r3
 80052f6:	2208      	movs	r2, #8
 80052f8:	305c      	adds	r0, #92	; 0x5c
 80052fa:	f7fd fd73 	bl	8002de4 <memset>
 80052fe:	4b05      	ldr	r3, [pc, #20]	; (8005314 <std+0x38>)
 8005300:	6263      	str	r3, [r4, #36]	; 0x24
 8005302:	4b05      	ldr	r3, [pc, #20]	; (8005318 <std+0x3c>)
 8005304:	62a3      	str	r3, [r4, #40]	; 0x28
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <std+0x40>)
 8005308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800530a:	4b05      	ldr	r3, [pc, #20]	; (8005320 <std+0x44>)
 800530c:	6224      	str	r4, [r4, #32]
 800530e:	6323      	str	r3, [r4, #48]	; 0x30
 8005310:	bd10      	pop	{r4, pc}
 8005312:	bf00      	nop
 8005314:	0800561d 	.word	0x0800561d
 8005318:	0800563f 	.word	0x0800563f
 800531c:	08005677 	.word	0x08005677
 8005320:	0800569b 	.word	0x0800569b

08005324 <_cleanup_r>:
 8005324:	4901      	ldr	r1, [pc, #4]	; (800532c <_cleanup_r+0x8>)
 8005326:	f000 b8af 	b.w	8005488 <_fwalk_reent>
 800532a:	bf00      	nop
 800532c:	08005265 	.word	0x08005265

08005330 <__sfmoreglue>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	1e4a      	subs	r2, r1, #1
 8005334:	2568      	movs	r5, #104	; 0x68
 8005336:	4355      	muls	r5, r2
 8005338:	460e      	mov	r6, r1
 800533a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800533e:	f7ff fc25 	bl	8004b8c <_malloc_r>
 8005342:	4604      	mov	r4, r0
 8005344:	b140      	cbz	r0, 8005358 <__sfmoreglue+0x28>
 8005346:	2100      	movs	r1, #0
 8005348:	e9c0 1600 	strd	r1, r6, [r0]
 800534c:	300c      	adds	r0, #12
 800534e:	60a0      	str	r0, [r4, #8]
 8005350:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005354:	f7fd fd46 	bl	8002de4 <memset>
 8005358:	4620      	mov	r0, r4
 800535a:	bd70      	pop	{r4, r5, r6, pc}

0800535c <__sfp_lock_acquire>:
 800535c:	4801      	ldr	r0, [pc, #4]	; (8005364 <__sfp_lock_acquire+0x8>)
 800535e:	f000 b8b3 	b.w	80054c8 <__retarget_lock_acquire_recursive>
 8005362:	bf00      	nop
 8005364:	20000268 	.word	0x20000268

08005368 <__sfp_lock_release>:
 8005368:	4801      	ldr	r0, [pc, #4]	; (8005370 <__sfp_lock_release+0x8>)
 800536a:	f000 b8ae 	b.w	80054ca <__retarget_lock_release_recursive>
 800536e:	bf00      	nop
 8005370:	20000268 	.word	0x20000268

08005374 <__sinit_lock_acquire>:
 8005374:	4801      	ldr	r0, [pc, #4]	; (800537c <__sinit_lock_acquire+0x8>)
 8005376:	f000 b8a7 	b.w	80054c8 <__retarget_lock_acquire_recursive>
 800537a:	bf00      	nop
 800537c:	20000263 	.word	0x20000263

08005380 <__sinit_lock_release>:
 8005380:	4801      	ldr	r0, [pc, #4]	; (8005388 <__sinit_lock_release+0x8>)
 8005382:	f000 b8a2 	b.w	80054ca <__retarget_lock_release_recursive>
 8005386:	bf00      	nop
 8005388:	20000263 	.word	0x20000263

0800538c <__sinit>:
 800538c:	b510      	push	{r4, lr}
 800538e:	4604      	mov	r4, r0
 8005390:	f7ff fff0 	bl	8005374 <__sinit_lock_acquire>
 8005394:	69a3      	ldr	r3, [r4, #24]
 8005396:	b11b      	cbz	r3, 80053a0 <__sinit+0x14>
 8005398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800539c:	f7ff bff0 	b.w	8005380 <__sinit_lock_release>
 80053a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80053a4:	6523      	str	r3, [r4, #80]	; 0x50
 80053a6:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <__sinit+0x68>)
 80053a8:	4a13      	ldr	r2, [pc, #76]	; (80053f8 <__sinit+0x6c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80053ae:	42a3      	cmp	r3, r4
 80053b0:	bf04      	itt	eq
 80053b2:	2301      	moveq	r3, #1
 80053b4:	61a3      	streq	r3, [r4, #24]
 80053b6:	4620      	mov	r0, r4
 80053b8:	f000 f820 	bl	80053fc <__sfp>
 80053bc:	6060      	str	r0, [r4, #4]
 80053be:	4620      	mov	r0, r4
 80053c0:	f000 f81c 	bl	80053fc <__sfp>
 80053c4:	60a0      	str	r0, [r4, #8]
 80053c6:	4620      	mov	r0, r4
 80053c8:	f000 f818 	bl	80053fc <__sfp>
 80053cc:	2200      	movs	r2, #0
 80053ce:	60e0      	str	r0, [r4, #12]
 80053d0:	2104      	movs	r1, #4
 80053d2:	6860      	ldr	r0, [r4, #4]
 80053d4:	f7ff ff82 	bl	80052dc <std>
 80053d8:	68a0      	ldr	r0, [r4, #8]
 80053da:	2201      	movs	r2, #1
 80053dc:	2109      	movs	r1, #9
 80053de:	f7ff ff7d 	bl	80052dc <std>
 80053e2:	68e0      	ldr	r0, [r4, #12]
 80053e4:	2202      	movs	r2, #2
 80053e6:	2112      	movs	r1, #18
 80053e8:	f7ff ff78 	bl	80052dc <std>
 80053ec:	2301      	movs	r3, #1
 80053ee:	61a3      	str	r3, [r4, #24]
 80053f0:	e7d2      	b.n	8005398 <__sinit+0xc>
 80053f2:	bf00      	nop
 80053f4:	080057a8 	.word	0x080057a8
 80053f8:	08005325 	.word	0x08005325

080053fc <__sfp>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	4607      	mov	r7, r0
 8005400:	f7ff ffac 	bl	800535c <__sfp_lock_acquire>
 8005404:	4b1e      	ldr	r3, [pc, #120]	; (8005480 <__sfp+0x84>)
 8005406:	681e      	ldr	r6, [r3, #0]
 8005408:	69b3      	ldr	r3, [r6, #24]
 800540a:	b913      	cbnz	r3, 8005412 <__sfp+0x16>
 800540c:	4630      	mov	r0, r6
 800540e:	f7ff ffbd 	bl	800538c <__sinit>
 8005412:	3648      	adds	r6, #72	; 0x48
 8005414:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005418:	3b01      	subs	r3, #1
 800541a:	d503      	bpl.n	8005424 <__sfp+0x28>
 800541c:	6833      	ldr	r3, [r6, #0]
 800541e:	b30b      	cbz	r3, 8005464 <__sfp+0x68>
 8005420:	6836      	ldr	r6, [r6, #0]
 8005422:	e7f7      	b.n	8005414 <__sfp+0x18>
 8005424:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005428:	b9d5      	cbnz	r5, 8005460 <__sfp+0x64>
 800542a:	4b16      	ldr	r3, [pc, #88]	; (8005484 <__sfp+0x88>)
 800542c:	60e3      	str	r3, [r4, #12]
 800542e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005432:	6665      	str	r5, [r4, #100]	; 0x64
 8005434:	f000 f847 	bl	80054c6 <__retarget_lock_init_recursive>
 8005438:	f7ff ff96 	bl	8005368 <__sfp_lock_release>
 800543c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005440:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005444:	6025      	str	r5, [r4, #0]
 8005446:	61a5      	str	r5, [r4, #24]
 8005448:	2208      	movs	r2, #8
 800544a:	4629      	mov	r1, r5
 800544c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005450:	f7fd fcc8 	bl	8002de4 <memset>
 8005454:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005458:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800545c:	4620      	mov	r0, r4
 800545e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005460:	3468      	adds	r4, #104	; 0x68
 8005462:	e7d9      	b.n	8005418 <__sfp+0x1c>
 8005464:	2104      	movs	r1, #4
 8005466:	4638      	mov	r0, r7
 8005468:	f7ff ff62 	bl	8005330 <__sfmoreglue>
 800546c:	4604      	mov	r4, r0
 800546e:	6030      	str	r0, [r6, #0]
 8005470:	2800      	cmp	r0, #0
 8005472:	d1d5      	bne.n	8005420 <__sfp+0x24>
 8005474:	f7ff ff78 	bl	8005368 <__sfp_lock_release>
 8005478:	230c      	movs	r3, #12
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	e7ee      	b.n	800545c <__sfp+0x60>
 800547e:	bf00      	nop
 8005480:	080057a8 	.word	0x080057a8
 8005484:	ffff0001 	.word	0xffff0001

08005488 <_fwalk_reent>:
 8005488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800548c:	4606      	mov	r6, r0
 800548e:	4688      	mov	r8, r1
 8005490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005494:	2700      	movs	r7, #0
 8005496:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800549a:	f1b9 0901 	subs.w	r9, r9, #1
 800549e:	d505      	bpl.n	80054ac <_fwalk_reent+0x24>
 80054a0:	6824      	ldr	r4, [r4, #0]
 80054a2:	2c00      	cmp	r4, #0
 80054a4:	d1f7      	bne.n	8005496 <_fwalk_reent+0xe>
 80054a6:	4638      	mov	r0, r7
 80054a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ac:	89ab      	ldrh	r3, [r5, #12]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d907      	bls.n	80054c2 <_fwalk_reent+0x3a>
 80054b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054b6:	3301      	adds	r3, #1
 80054b8:	d003      	beq.n	80054c2 <_fwalk_reent+0x3a>
 80054ba:	4629      	mov	r1, r5
 80054bc:	4630      	mov	r0, r6
 80054be:	47c0      	blx	r8
 80054c0:	4307      	orrs	r7, r0
 80054c2:	3568      	adds	r5, #104	; 0x68
 80054c4:	e7e9      	b.n	800549a <_fwalk_reent+0x12>

080054c6 <__retarget_lock_init_recursive>:
 80054c6:	4770      	bx	lr

080054c8 <__retarget_lock_acquire_recursive>:
 80054c8:	4770      	bx	lr

080054ca <__retarget_lock_release_recursive>:
 80054ca:	4770      	bx	lr

080054cc <__swhatbuf_r>:
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	460e      	mov	r6, r1
 80054d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d4:	2900      	cmp	r1, #0
 80054d6:	b096      	sub	sp, #88	; 0x58
 80054d8:	4614      	mov	r4, r2
 80054da:	461d      	mov	r5, r3
 80054dc:	da07      	bge.n	80054ee <__swhatbuf_r+0x22>
 80054de:	2300      	movs	r3, #0
 80054e0:	602b      	str	r3, [r5, #0]
 80054e2:	89b3      	ldrh	r3, [r6, #12]
 80054e4:	061a      	lsls	r2, r3, #24
 80054e6:	d410      	bmi.n	800550a <__swhatbuf_r+0x3e>
 80054e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054ec:	e00e      	b.n	800550c <__swhatbuf_r+0x40>
 80054ee:	466a      	mov	r2, sp
 80054f0:	f000 f8fa 	bl	80056e8 <_fstat_r>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	dbf2      	blt.n	80054de <__swhatbuf_r+0x12>
 80054f8:	9a01      	ldr	r2, [sp, #4]
 80054fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80054fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005502:	425a      	negs	r2, r3
 8005504:	415a      	adcs	r2, r3
 8005506:	602a      	str	r2, [r5, #0]
 8005508:	e7ee      	b.n	80054e8 <__swhatbuf_r+0x1c>
 800550a:	2340      	movs	r3, #64	; 0x40
 800550c:	2000      	movs	r0, #0
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	b016      	add	sp, #88	; 0x58
 8005512:	bd70      	pop	{r4, r5, r6, pc}

08005514 <__smakebuf_r>:
 8005514:	898b      	ldrh	r3, [r1, #12]
 8005516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005518:	079d      	lsls	r5, r3, #30
 800551a:	4606      	mov	r6, r0
 800551c:	460c      	mov	r4, r1
 800551e:	d507      	bpl.n	8005530 <__smakebuf_r+0x1c>
 8005520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	6123      	str	r3, [r4, #16]
 8005528:	2301      	movs	r3, #1
 800552a:	6163      	str	r3, [r4, #20]
 800552c:	b002      	add	sp, #8
 800552e:	bd70      	pop	{r4, r5, r6, pc}
 8005530:	ab01      	add	r3, sp, #4
 8005532:	466a      	mov	r2, sp
 8005534:	f7ff ffca 	bl	80054cc <__swhatbuf_r>
 8005538:	9900      	ldr	r1, [sp, #0]
 800553a:	4605      	mov	r5, r0
 800553c:	4630      	mov	r0, r6
 800553e:	f7ff fb25 	bl	8004b8c <_malloc_r>
 8005542:	b948      	cbnz	r0, 8005558 <__smakebuf_r+0x44>
 8005544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005548:	059a      	lsls	r2, r3, #22
 800554a:	d4ef      	bmi.n	800552c <__smakebuf_r+0x18>
 800554c:	f023 0303 	bic.w	r3, r3, #3
 8005550:	f043 0302 	orr.w	r3, r3, #2
 8005554:	81a3      	strh	r3, [r4, #12]
 8005556:	e7e3      	b.n	8005520 <__smakebuf_r+0xc>
 8005558:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <__smakebuf_r+0x7c>)
 800555a:	62b3      	str	r3, [r6, #40]	; 0x28
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	6020      	str	r0, [r4, #0]
 8005560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005564:	81a3      	strh	r3, [r4, #12]
 8005566:	9b00      	ldr	r3, [sp, #0]
 8005568:	6163      	str	r3, [r4, #20]
 800556a:	9b01      	ldr	r3, [sp, #4]
 800556c:	6120      	str	r0, [r4, #16]
 800556e:	b15b      	cbz	r3, 8005588 <__smakebuf_r+0x74>
 8005570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005574:	4630      	mov	r0, r6
 8005576:	f000 f8c9 	bl	800570c <_isatty_r>
 800557a:	b128      	cbz	r0, 8005588 <__smakebuf_r+0x74>
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	f023 0303 	bic.w	r3, r3, #3
 8005582:	f043 0301 	orr.w	r3, r3, #1
 8005586:	81a3      	strh	r3, [r4, #12]
 8005588:	89a0      	ldrh	r0, [r4, #12]
 800558a:	4305      	orrs	r5, r0
 800558c:	81a5      	strh	r5, [r4, #12]
 800558e:	e7cd      	b.n	800552c <__smakebuf_r+0x18>
 8005590:	08005325 	.word	0x08005325

08005594 <_raise_r>:
 8005594:	291f      	cmp	r1, #31
 8005596:	b538      	push	{r3, r4, r5, lr}
 8005598:	4604      	mov	r4, r0
 800559a:	460d      	mov	r5, r1
 800559c:	d904      	bls.n	80055a8 <_raise_r+0x14>
 800559e:	2316      	movs	r3, #22
 80055a0:	6003      	str	r3, [r0, #0]
 80055a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80055aa:	b112      	cbz	r2, 80055b2 <_raise_r+0x1e>
 80055ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80055b0:	b94b      	cbnz	r3, 80055c6 <_raise_r+0x32>
 80055b2:	4620      	mov	r0, r4
 80055b4:	f000 f830 	bl	8005618 <_getpid_r>
 80055b8:	462a      	mov	r2, r5
 80055ba:	4601      	mov	r1, r0
 80055bc:	4620      	mov	r0, r4
 80055be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055c2:	f000 b817 	b.w	80055f4 <_kill_r>
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d00a      	beq.n	80055e0 <_raise_r+0x4c>
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	d103      	bne.n	80055d6 <_raise_r+0x42>
 80055ce:	2316      	movs	r3, #22
 80055d0:	6003      	str	r3, [r0, #0]
 80055d2:	2001      	movs	r0, #1
 80055d4:	e7e7      	b.n	80055a6 <_raise_r+0x12>
 80055d6:	2400      	movs	r4, #0
 80055d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80055dc:	4628      	mov	r0, r5
 80055de:	4798      	blx	r3
 80055e0:	2000      	movs	r0, #0
 80055e2:	e7e0      	b.n	80055a6 <_raise_r+0x12>

080055e4 <raise>:
 80055e4:	4b02      	ldr	r3, [pc, #8]	; (80055f0 <raise+0xc>)
 80055e6:	4601      	mov	r1, r0
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	f7ff bfd3 	b.w	8005594 <_raise_r>
 80055ee:	bf00      	nop
 80055f0:	2000000c 	.word	0x2000000c

080055f4 <_kill_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d07      	ldr	r5, [pc, #28]	; (8005614 <_kill_r+0x20>)
 80055f8:	2300      	movs	r3, #0
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	4611      	mov	r1, r2
 8005600:	602b      	str	r3, [r5, #0]
 8005602:	f7fb fe14 	bl	800122e <_kill>
 8005606:	1c43      	adds	r3, r0, #1
 8005608:	d102      	bne.n	8005610 <_kill_r+0x1c>
 800560a:	682b      	ldr	r3, [r5, #0]
 800560c:	b103      	cbz	r3, 8005610 <_kill_r+0x1c>
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	bd38      	pop	{r3, r4, r5, pc}
 8005612:	bf00      	nop
 8005614:	2000025c 	.word	0x2000025c

08005618 <_getpid_r>:
 8005618:	f7fb be02 	b.w	8001220 <_getpid>

0800561c <__sread>:
 800561c:	b510      	push	{r4, lr}
 800561e:	460c      	mov	r4, r1
 8005620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005624:	f000 f894 	bl	8005750 <_read_r>
 8005628:	2800      	cmp	r0, #0
 800562a:	bfab      	itete	ge
 800562c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800562e:	89a3      	ldrhlt	r3, [r4, #12]
 8005630:	181b      	addge	r3, r3, r0
 8005632:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005636:	bfac      	ite	ge
 8005638:	6563      	strge	r3, [r4, #84]	; 0x54
 800563a:	81a3      	strhlt	r3, [r4, #12]
 800563c:	bd10      	pop	{r4, pc}

0800563e <__swrite>:
 800563e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005642:	461f      	mov	r7, r3
 8005644:	898b      	ldrh	r3, [r1, #12]
 8005646:	05db      	lsls	r3, r3, #23
 8005648:	4605      	mov	r5, r0
 800564a:	460c      	mov	r4, r1
 800564c:	4616      	mov	r6, r2
 800564e:	d505      	bpl.n	800565c <__swrite+0x1e>
 8005650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005654:	2302      	movs	r3, #2
 8005656:	2200      	movs	r2, #0
 8005658:	f000 f868 	bl	800572c <_lseek_r>
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005662:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	4632      	mov	r2, r6
 800566a:	463b      	mov	r3, r7
 800566c:	4628      	mov	r0, r5
 800566e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005672:	f000 b817 	b.w	80056a4 <_write_r>

08005676 <__sseek>:
 8005676:	b510      	push	{r4, lr}
 8005678:	460c      	mov	r4, r1
 800567a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800567e:	f000 f855 	bl	800572c <_lseek_r>
 8005682:	1c43      	adds	r3, r0, #1
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	bf15      	itete	ne
 8005688:	6560      	strne	r0, [r4, #84]	; 0x54
 800568a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800568e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005692:	81a3      	strheq	r3, [r4, #12]
 8005694:	bf18      	it	ne
 8005696:	81a3      	strhne	r3, [r4, #12]
 8005698:	bd10      	pop	{r4, pc}

0800569a <__sclose>:
 800569a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800569e:	f000 b813 	b.w	80056c8 <_close_r>
	...

080056a4 <_write_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4d07      	ldr	r5, [pc, #28]	; (80056c4 <_write_r+0x20>)
 80056a8:	4604      	mov	r4, r0
 80056aa:	4608      	mov	r0, r1
 80056ac:	4611      	mov	r1, r2
 80056ae:	2200      	movs	r2, #0
 80056b0:	602a      	str	r2, [r5, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f7fb fdf2 	bl	800129c <_write>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	d102      	bne.n	80056c2 <_write_r+0x1e>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	b103      	cbz	r3, 80056c2 <_write_r+0x1e>
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	bd38      	pop	{r3, r4, r5, pc}
 80056c4:	2000025c 	.word	0x2000025c

080056c8 <_close_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4d06      	ldr	r5, [pc, #24]	; (80056e4 <_close_r+0x1c>)
 80056cc:	2300      	movs	r3, #0
 80056ce:	4604      	mov	r4, r0
 80056d0:	4608      	mov	r0, r1
 80056d2:	602b      	str	r3, [r5, #0]
 80056d4:	f7fb fdfe 	bl	80012d4 <_close>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d102      	bne.n	80056e2 <_close_r+0x1a>
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	b103      	cbz	r3, 80056e2 <_close_r+0x1a>
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	2000025c 	.word	0x2000025c

080056e8 <_fstat_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4d07      	ldr	r5, [pc, #28]	; (8005708 <_fstat_r+0x20>)
 80056ec:	2300      	movs	r3, #0
 80056ee:	4604      	mov	r4, r0
 80056f0:	4608      	mov	r0, r1
 80056f2:	4611      	mov	r1, r2
 80056f4:	602b      	str	r3, [r5, #0]
 80056f6:	f7fb fdf8 	bl	80012ea <_fstat>
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	d102      	bne.n	8005704 <_fstat_r+0x1c>
 80056fe:	682b      	ldr	r3, [r5, #0]
 8005700:	b103      	cbz	r3, 8005704 <_fstat_r+0x1c>
 8005702:	6023      	str	r3, [r4, #0]
 8005704:	bd38      	pop	{r3, r4, r5, pc}
 8005706:	bf00      	nop
 8005708:	2000025c 	.word	0x2000025c

0800570c <_isatty_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4d06      	ldr	r5, [pc, #24]	; (8005728 <_isatty_r+0x1c>)
 8005710:	2300      	movs	r3, #0
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	602b      	str	r3, [r5, #0]
 8005718:	f7fb fdf6 	bl	8001308 <_isatty>
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	d102      	bne.n	8005726 <_isatty_r+0x1a>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	b103      	cbz	r3, 8005726 <_isatty_r+0x1a>
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	bd38      	pop	{r3, r4, r5, pc}
 8005728:	2000025c 	.word	0x2000025c

0800572c <_lseek_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4d07      	ldr	r5, [pc, #28]	; (800574c <_lseek_r+0x20>)
 8005730:	4604      	mov	r4, r0
 8005732:	4608      	mov	r0, r1
 8005734:	4611      	mov	r1, r2
 8005736:	2200      	movs	r2, #0
 8005738:	602a      	str	r2, [r5, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	f7fb fdee 	bl	800131c <_lseek>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_lseek_r+0x1e>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	b103      	cbz	r3, 800574a <_lseek_r+0x1e>
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	2000025c 	.word	0x2000025c

08005750 <_read_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	4d07      	ldr	r5, [pc, #28]	; (8005770 <_read_r+0x20>)
 8005754:	4604      	mov	r4, r0
 8005756:	4608      	mov	r0, r1
 8005758:	4611      	mov	r1, r2
 800575a:	2200      	movs	r2, #0
 800575c:	602a      	str	r2, [r5, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	f7fb fd7f 	bl	8001262 <_read>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d102      	bne.n	800576e <_read_r+0x1e>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	b103      	cbz	r3, 800576e <_read_r+0x1e>
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	2000025c 	.word	0x2000025c

08005774 <_init>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	bf00      	nop
 8005778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577a:	bc08      	pop	{r3}
 800577c:	469e      	mov	lr, r3
 800577e:	4770      	bx	lr

08005780 <_fini>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	bf00      	nop
 8005784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005786:	bc08      	pop	{r3}
 8005788:	469e      	mov	lr, r3
 800578a:	4770      	bx	lr
