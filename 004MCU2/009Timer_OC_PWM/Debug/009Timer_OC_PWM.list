
009Timer_OC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002174  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080022fc  080022fc  000122fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800230c  0800230c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800230c  0800230c  0001230c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002314  08002314  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002314  08002314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002318  08002318  00012318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800231c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002328  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002328  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009878  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001528  00000000  00000000  000298b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0002ade0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000850  00000000  00000000  0002b6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020656  00000000  00000000  0002bf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ac5  00000000  00000000  0004c57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7f71  00000000  00000000  00056043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011dfb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002568  00000000  00000000  0011e008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022e4 	.word	0x080022e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080022e4 	.word	0x080022e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:

/************************************************************************************
 *                             MAIN                                                 *
 ************************************************************************************/

int main(void){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

	// Local variables


	// This should be the first function to be called
	HAL_Init();
 80004c6:	f000 f98d 	bl	80007e4 <HAL_Init>

	// Config. the clock
	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 80004ca:	2032      	movs	r0, #50	; 0x32
 80004cc:	f000 f86c 	bl	80005a8 <SystemClock_Config_HSE>

	// Init Timer 2
	TIMER2_Init();
 80004d0:	f000 f834 	bl	800053c <TIMER2_Init>

	// Start the timer
	if(HAL_TIM_PWM_Start(&timer2_handle, TIM_CHANNEL_1 ) != HAL_OK){
 80004d4:	2100      	movs	r1, #0
 80004d6:	4816      	ldr	r0, [pc, #88]	; (8000530 <main+0x70>)
 80004d8:	f001 f98e 	bl	80017f8 <HAL_TIM_PWM_Start>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <main+0x26>
		Error_handler();
 80004e2:	f000 f827 	bl	8000534 <Error_handler>
	}

	for(;;){

		// brightness increasing
		for(uint16_t brightness=0; brightness<=timer2_handle.Init.Period; brightness += 10){
 80004e6:	2300      	movs	r3, #0
 80004e8:	80fb      	strh	r3, [r7, #6]
 80004ea:	e009      	b.n	8000500 <main+0x40>
			__HAL_TIM_SET_COMPARE(&timer2_handle, TIM_CHANNEL_1, brightness);
 80004ec:	4b10      	ldr	r3, [pc, #64]	; (8000530 <main+0x70>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	88fa      	ldrh	r2, [r7, #6]
 80004f2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f000 f9e7 	bl	80008c8 <HAL_Delay>
		for(uint16_t brightness=0; brightness<=timer2_handle.Init.Period; brightness += 10){
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	330a      	adds	r3, #10
 80004fe:	80fb      	strh	r3, [r7, #6]
 8000500:	88fa      	ldrh	r2, [r7, #6]
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <main+0x70>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	429a      	cmp	r2, r3
 8000508:	d9f0      	bls.n	80004ec <main+0x2c>
		}

		// brightness decreasing
		for(uint16_t brightness=timer2_handle.Init.Period; brightness>10; brightness -= 10){
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <main+0x70>)
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	80bb      	strh	r3, [r7, #4]
 8000510:	e009      	b.n	8000526 <main+0x66>
			__HAL_TIM_SET_COMPARE(&timer2_handle, TIM_CHANNEL_1, brightness);
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <main+0x70>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	88ba      	ldrh	r2, [r7, #4]
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1);
 800051a:	2001      	movs	r0, #1
 800051c:	f000 f9d4 	bl	80008c8 <HAL_Delay>
		for(uint16_t brightness=timer2_handle.Init.Period; brightness>10; brightness -= 10){
 8000520:	88bb      	ldrh	r3, [r7, #4]
 8000522:	3b0a      	subs	r3, #10
 8000524:	80bb      	strh	r3, [r7, #4]
 8000526:	88bb      	ldrh	r3, [r7, #4]
 8000528:	2b0a      	cmp	r3, #10
 800052a:	d8f2      	bhi.n	8000512 <main+0x52>
		for(uint16_t brightness=0; brightness<=timer2_handle.Init.Period; brightness += 10){
 800052c:	e7db      	b.n	80004e6 <main+0x26>
 800052e:	bf00      	nop
 8000530:	20000028 	.word	0x20000028

08000534 <Error_handler>:
/************************************************************************************
 *                             FUNCTIONS                                            *
 ************************************************************************************/


void Error_handler(void){
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	while(1);
 8000538:	e7fe      	b.n	8000538 <Error_handler+0x4>
	...

0800053c <TIMER2_Init>:
}

void TIMER2_Init(void){
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0

	// 1. Initialize the TIMER PWM Time base
	timer2_handle.Instance = TIM2;
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <TIMER2_Init+0x68>)
 8000544:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000548:	601a      	str	r2, [r3, #0]
	timer2_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <TIMER2_Init+0x68>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
	timer2_handle.Init.Period = 10000 - 1;    // 1000 Hz
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <TIMER2_Init+0x68>)
 8000552:	f242 720f 	movw	r2, #9999	; 0x270f
 8000556:	60da      	str	r2, [r3, #12]
	timer2_handle.Init.Prescaler = 4;
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <TIMER2_Init+0x68>)
 800055a:	2204      	movs	r2, #4
 800055c:	605a      	str	r2, [r3, #4]

	if(HAL_TIM_PWM_Init(&timer2_handle) != HAL_OK)
 800055e:	4811      	ldr	r0, [pc, #68]	; (80005a4 <TIMER2_Init+0x68>)
 8000560:	f001 f8fa 	bl	8001758 <HAL_TIM_PWM_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <TIMER2_Init+0x32>
		Error_handler();
 800056a:	f7ff ffe3 	bl	8000534 <Error_handler>

	// 2. Configure Output Channels of the Timer
	TIM_OC_InitTypeDef timer2PWM_Config;
	memset(&timer2PWM_Config, 0, sizeof(timer2PWM_Config));
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	221c      	movs	r2, #28
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fead 	bl	80022d4 <memset>

	timer2PWM_Config.OCMode = TIM_OCMODE_PWM1;
 800057a:	2360      	movs	r3, #96	; 0x60
 800057c:	607b      	str	r3, [r7, #4]
	timer2PWM_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]

	// 0% PWM - channel 1
	timer2PWM_Config.Pulse =  0 * timer2_handle.Init.Period / 100;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_PWM_ConfigChannel(&timer2_handle, &timer2PWM_Config, TIM_CHANNEL_1) != HAL_OK)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	4619      	mov	r1, r3
 800058c:	4805      	ldr	r0, [pc, #20]	; (80005a4 <TIMER2_Init+0x68>)
 800058e:	f001 fb03 	bl	8001b98 <HAL_TIM_PWM_ConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <TIMER2_Init+0x60>
		Error_handler();
 8000598:	f7ff ffcc 	bl	8000534 <Error_handler>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000028 	.word	0x20000028

080005a8 <SystemClock_Config_HSE>:


void SystemClock_Config_HSE(uint8_t clock_freq){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint32_t FLatency;

	// 1. Init. the oscillator
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_ON;
 80005b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ba:	623b      	str	r3, [r7, #32]
	osc_init.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLQ = 2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48

	// 2. Init. the clock
	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |\
 80005ca:	230f      	movs	r3, #15
 80005cc:	60bb      	str	r3, [r7, #8]
			 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	60fb      	str	r3, [r7, #12]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005da:	617b      	str	r3, [r7, #20]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	61bb      	str	r3, [r7, #24]

	// 3. Configurations that depend on clock_freq
	switch(clock_freq){
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2b78      	cmp	r3, #120	; 0x78
 80005e6:	d018      	beq.n	800061a <SystemClock_Config_HSE+0x72>
 80005e8:	2b78      	cmp	r3, #120	; 0x78
 80005ea:	dc45      	bgt.n	8000678 <SystemClock_Config_HSE+0xd0>
 80005ec:	2b32      	cmp	r3, #50	; 0x32
 80005ee:	d002      	beq.n	80005f6 <SystemClock_Config_HSE+0x4e>
 80005f0:	2b54      	cmp	r3, #84	; 0x54
 80005f2:	d009      	beq.n	8000608 <SystemClock_Config_HSE+0x60>
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
			FLatency = FLASH_LATENCY_3;
			break;
		default:
			return;
 80005f4:	e040      	b.n	8000678 <SystemClock_Config_HSE+0xd0>
			osc_init.PLL.PLLM = 8;
 80005f6:	2308      	movs	r3, #8
 80005f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 100;
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	647b      	str	r3, [r7, #68]	; 0x44
			FLatency = FLASH_LATENCY_1;
 8000602:	2301      	movs	r3, #1
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 8000606:	e014      	b.n	8000632 <SystemClock_Config_HSE+0x8a>
			osc_init.PLL.PLLM = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 168;
 800060c:	23a8      	movs	r3, #168	; 0xa8
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
			FLatency = FLASH_LATENCY_2;
 8000614:	2302      	movs	r3, #2
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 8000618:	e00b      	b.n	8000632 <SystemClock_Config_HSE+0x8a>
			osc_init.PLL.PLLM = 8;
 800061a:	2308      	movs	r3, #8
 800061c:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 240;
 800061e:	23f0      	movs	r3, #240	; 0xf0
 8000620:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000626:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062a:	617b      	str	r3, [r7, #20]
			FLatency = FLASH_LATENCY_3;
 800062c:	2303      	movs	r3, #3
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 8000630:	bf00      	nop
	}

	// 4. Call the APIs
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fc42 	bl	8000ec0 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config_HSE+0x9e>
		Error_handler();
 8000642:	f7ff ff77 	bl	8000534 <Error_handler>
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800064c:	4618      	mov	r0, r3
 800064e:	f000 feaf 	bl	80013b0 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config_HSE+0xb4>
		Error_handler();
 8000658:	f7ff ff6c 	bl	8000534 <Error_handler>

	// 5. Systick
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800065c:	f001 f870 	bl	8001740 <HAL_RCC_GetHCLKFreq>
 8000660:	4603      	mov	r3, r0
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <SystemClock_Config_HSE+0xd8>)
 8000664:	fba2 2303 	umull	r2, r3, r2, r3
 8000668:	099b      	lsrs	r3, r3, #6
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fa55 	bl	8000b1a <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000670:	2004      	movs	r0, #4
 8000672:	f000 fa5f 	bl	8000b34 <HAL_SYSTICK_CLKSourceConfig>
 8000676:	e000      	b.n	800067a <SystemClock_Config_HSE+0xd2>
			return;
 8000678:	bf00      	nop

}
 800067a:	3750      	adds	r7, #80	; 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	10624dd3 	.word	0x10624dd3

08000684 <SysTick_Handler>:

#include "stm32f4xx_hal.h"

extern TIM_HandleTypeDef timer2_handle;

void SysTick_Handler(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000688:	f000 f8fe 	bl	8000888 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800068c:	f000 fa6e 	bl	8000b6c <HAL_SYSTICK_IRQHandler>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}

08000694 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&timer2_handle);
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <TIM2_IRQHandler+0x10>)
 800069a:	f001 f975 	bl	8001988 <HAL_TIM_IRQHandler>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000028 	.word	0x20000028

080006a8 <HAL_MspInit>:
 */

#include "stm32f4xx_hal.h"

/* Low Level processor Init. Called by HAL_Init()*/
void HAL_MspInit(void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f9ff 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x07 << 16;  // En: usg fault, memory fault and bus fault
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <HAL_MspInit+0x40>)
 80006b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b6:	4a0c      	ldr	r2, [pc, #48]	; (80006e8 <HAL_MspInit+0x40>)
 80006b8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80006bc:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	f06f 000b 	mvn.w	r0, #11
 80006c6:	f000 f9fe 	bl	8000ac6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	f06f 000a 	mvn.w	r0, #10
 80006d2:	f000 f9f8 	bl	8000ac6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	f06f 0009 	mvn.w	r0, #9
 80006de:	f000 f9f2 	bl	8000ac6 <HAL_NVIC_SetPriority>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2OC_ch_gpios;

	// 1. Enable the peripheral clock for the timer 2 peripheral
	__HAL_RCC_TIM2_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <HAL_TIM_PWM_MspInit+0x78>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a19      	ldr	r2, [pc, #100]	; (8000764 <HAL_TIM_PWM_MspInit+0x78>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <HAL_TIM_PWM_MspInit+0x78>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <HAL_TIM_PWM_MspInit+0x78>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <HAL_TIM_PWM_MspInit+0x78>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	6313      	str	r3, [r2, #48]	; 0x30
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <HAL_TIM_PWM_MspInit+0x78>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
	 *  PA1 --> TIM2_CH2
	 *  PA2 --> TIM2_CH3
	 *  PA3 --> TIM2_CH4
	 */

	tim2OC_ch_gpios.Pin = GPIO_PIN_0; //| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 800072c:	2301      	movs	r3, #1
 800072e:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpios.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
	tim2OC_ch_gpios.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
	tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 800073c:	2301      	movs	r3, #1
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &tim2OC_ch_gpios);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4808      	ldr	r0, [pc, #32]	; (8000768 <HAL_TIM_PWM_MspInit+0x7c>)
 8000748:	f000 fa1e 	bl	8000b88 <HAL_GPIO_Init>

	// 3. NVIC settings
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	210f      	movs	r1, #15
 8000750:	201c      	movs	r0, #28
 8000752:	f000 f9b8 	bl	8000ac6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000756:	201c      	movs	r0, #28
 8000758:	f000 f9d1 	bl	8000afe <HAL_NVIC_EnableIRQ>

}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000

0800076c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <SystemInit+0x20>)
 8000772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <SystemInit+0x20>)
 8000778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800077c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000796:	490e      	ldr	r1, [pc, #56]	; (80007d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000798:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800079c:	e002      	b.n	80007a4 <LoopCopyDataInit>

0800079e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a2:	3304      	adds	r3, #4

080007a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a8:	d3f9      	bcc.n	800079e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007ac:	4c0b      	ldr	r4, [pc, #44]	; (80007dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b0:	e001      	b.n	80007b6 <LoopFillZerobss>

080007b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b4:	3204      	adds	r2, #4

080007b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b8:	d3fb      	bcc.n	80007b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007ba:	f7ff ffd7 	bl	800076c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007be:	f001 fd65 	bl	800228c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007c2:	f7ff fe7d 	bl	80004c0 <main>
  bx  lr    
 80007c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007d4:	0800231c 	.word	0x0800231c
  ldr r2, =_sbss
 80007d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007dc:	20000074 	.word	0x20000074

080007e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007e0:	e7fe      	b.n	80007e0 <ADC_IRQHandler>
	...

080007e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <HAL_Init+0x40>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <HAL_Init+0x40>)
 80007ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <HAL_Init+0x40>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <HAL_Init+0x40>)
 80007fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_Init+0x40>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <HAL_Init+0x40>)
 8000806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800080a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f94f 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000812:	2000      	movs	r0, #0
 8000814:	f000 f808 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff ff46 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023c00 	.word	0x40023c00

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_InitTick+0x54>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x58>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f967 	bl	8000b1a <HAL_SYSTICK_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e00e      	b.n	8000874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d80a      	bhi.n	8000872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000864:	f000 f92f 	bl	8000ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_InitTick+0x5c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000000 	.word	0x20000000
 8000880:	20000008 	.word	0x20000008
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_IncTick+0x20>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x24>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_IncTick+0x24>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000070 	.word	0x20000070

080008b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <HAL_GetTick+0x14>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000070 	.word	0x20000070

080008c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d0:	f7ff ffee 	bl	80008b0 <HAL_GetTick>
 80008d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008e0:	d005      	beq.n	80008ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_Delay+0x44>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4413      	add	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008ee:	bf00      	nop
 80008f0:	f7ff ffde 	bl	80008b0 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d8f7      	bhi.n	80008f0 <HAL_Delay+0x28>
  {
  }
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000008 	.word	0x20000008

08000910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	db0b      	blt.n	800099e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	f003 021f 	and.w	r2, r3, #31
 800098c:	4907      	ldr	r1, [pc, #28]	; (80009ac <__NVIC_EnableIRQ+0x38>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	095b      	lsrs	r3, r3, #5
 8000994:	2001      	movs	r0, #1
 8000996:	fa00 f202 	lsl.w	r2, r0, r2
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000e100 	.word	0xe000e100

080009b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db0a      	blt.n	80009da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <__NVIC_SetPriority+0x4c>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	0112      	lsls	r2, r2, #4
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	440b      	add	r3, r1
 80009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d8:	e00a      	b.n	80009f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <__NVIC_SetPriority+0x50>)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	3b04      	subs	r3, #4
 80009e8:	0112      	lsls	r2, r2, #4
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	761a      	strb	r2, [r3, #24]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f1c3 0307 	rsb	r3, r3, #7
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	bf28      	it	cs
 8000a22:	2304      	movcs	r3, #4
 8000a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d902      	bls.n	8000a34 <NVIC_EncodePriority+0x30>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b03      	subs	r3, #3
 8000a32:	e000      	b.n	8000a36 <NVIC_EncodePriority+0x32>
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43da      	mvns	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43d9      	mvns	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	4313      	orrs	r3, r2
         );
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a90:	f7ff ff8e 	bl	80009b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff29 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad8:	f7ff ff3e 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f7ff ff8e 	bl	8000a04 <NVIC_EncodePriority>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff5d 	bl	80009b0 <__NVIC_SetPriority>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff31 	bl	8000974 <__NVIC_EnableIRQ>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ffa2 	bl	8000a6c <SysTick_Config>
 8000b28:	4603      	mov	r3, r0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d106      	bne.n	8000b50 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000b4e:	e005      	b.n	8000b5c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000b56:	f023 0304 	bic.w	r3, r3, #4
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b70:	f000 f802 	bl	8000b78 <HAL_SYSTICK_Callback>
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
 8000ba2:	e16b      	b.n	8000e7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f040 815a 	bne.w	8000e76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d005      	beq.n	8000bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d130      	bne.n	8000c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68da      	ldr	r2, [r3, #12]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	f003 0201 	and.w	r2, r3, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d017      	beq.n	8000c78 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d123      	bne.n	8000ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	08da      	lsrs	r2, r3, #3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3208      	adds	r2, #8
 8000c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	f003 0307 	and.w	r3, r3, #7
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	69b9      	ldr	r1, [r7, #24]
 8000cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0203 	and.w	r2, r3, #3
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 80b4 	beq.w	8000e76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b60      	ldr	r3, [pc, #384]	; (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a5f      	ldr	r2, [pc, #380]	; (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	; (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d2a:	4a5b      	ldr	r2, [pc, #364]	; (8000e98 <HAL_GPIO_Init+0x310>)
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a52      	ldr	r2, [pc, #328]	; (8000e9c <HAL_GPIO_Init+0x314>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d02b      	beq.n	8000dae <HAL_GPIO_Init+0x226>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a51      	ldr	r2, [pc, #324]	; (8000ea0 <HAL_GPIO_Init+0x318>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d025      	beq.n	8000daa <HAL_GPIO_Init+0x222>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a50      	ldr	r2, [pc, #320]	; (8000ea4 <HAL_GPIO_Init+0x31c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d01f      	beq.n	8000da6 <HAL_GPIO_Init+0x21e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4f      	ldr	r2, [pc, #316]	; (8000ea8 <HAL_GPIO_Init+0x320>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d019      	beq.n	8000da2 <HAL_GPIO_Init+0x21a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4e      	ldr	r2, [pc, #312]	; (8000eac <HAL_GPIO_Init+0x324>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d013      	beq.n	8000d9e <HAL_GPIO_Init+0x216>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4d      	ldr	r2, [pc, #308]	; (8000eb0 <HAL_GPIO_Init+0x328>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00d      	beq.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4c      	ldr	r2, [pc, #304]	; (8000eb4 <HAL_GPIO_Init+0x32c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x20e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4b      	ldr	r2, [pc, #300]	; (8000eb8 <HAL_GPIO_Init+0x330>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_GPIO_Init+0x20a>
 8000d8e:	2307      	movs	r3, #7
 8000d90:	e00e      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d92:	2308      	movs	r3, #8
 8000d94:	e00c      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d96:	2306      	movs	r3, #6
 8000d98:	e00a      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e008      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d9e:	2304      	movs	r3, #4
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000da2:	2303      	movs	r3, #3
 8000da4:	e004      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000dae:	2300      	movs	r3, #0
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	f002 0203 	and.w	r2, r2, #3
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	4093      	lsls	r3, r2
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc0:	4935      	ldr	r1, [pc, #212]	; (8000e98 <HAL_GPIO_Init+0x310>)
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dce:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <HAL_GPIO_Init+0x334>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000df2:	4a32      	ldr	r2, [pc, #200]	; (8000ebc <HAL_GPIO_Init+0x334>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000df8:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <HAL_GPIO_Init+0x334>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e1c:	4a27      	ldr	r2, [pc, #156]	; (8000ebc <HAL_GPIO_Init+0x334>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <HAL_GPIO_Init+0x334>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e46:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_GPIO_Init+0x334>)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <HAL_GPIO_Init+0x334>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e70:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_GPIO_Init+0x334>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	2b0f      	cmp	r3, #15
 8000e80:	f67f ae90 	bls.w	8000ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	40020c00 	.word	0x40020c00
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40021400 	.word	0x40021400
 8000eb4:	40021800 	.word	0x40021800
 8000eb8:	40021c00 	.word	0x40021c00
 8000ebc:	40013c00 	.word	0x40013c00

08000ec0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e264      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d075      	beq.n	8000fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ede:	4ba3      	ldr	r3, [pc, #652]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f003 030c 	and.w	r3, r3, #12
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d00c      	beq.n	8000f04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eea:	4ba0      	ldr	r3, [pc, #640]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ef2:	2b08      	cmp	r3, #8
 8000ef4:	d112      	bne.n	8000f1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ef6:	4b9d      	ldr	r3, [pc, #628]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f02:	d10b      	bne.n	8000f1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f04:	4b99      	ldr	r3, [pc, #612]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d05b      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x108>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d157      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e23f      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f24:	d106      	bne.n	8000f34 <HAL_RCC_OscConfig+0x74>
 8000f26:	4b91      	ldr	r3, [pc, #580]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a90      	ldr	r2, [pc, #576]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e01d      	b.n	8000f70 <HAL_RCC_OscConfig+0xb0>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f3c:	d10c      	bne.n	8000f58 <HAL_RCC_OscConfig+0x98>
 8000f3e:	4b8b      	ldr	r3, [pc, #556]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a8a      	ldr	r2, [pc, #552]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	4b88      	ldr	r3, [pc, #544]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a87      	ldr	r2, [pc, #540]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e00b      	b.n	8000f70 <HAL_RCC_OscConfig+0xb0>
 8000f58:	4b84      	ldr	r3, [pc, #528]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a83      	ldr	r2, [pc, #524]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b81      	ldr	r3, [pc, #516]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a80      	ldr	r2, [pc, #512]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d013      	beq.n	8000fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fc9a 	bl	80008b0 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f80:	f7ff fc96 	bl	80008b0 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b64      	cmp	r3, #100	; 0x64
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e204      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f92:	4b76      	ldr	r3, [pc, #472]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f0      	beq.n	8000f80 <HAL_RCC_OscConfig+0xc0>
 8000f9e:	e014      	b.n	8000fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fc86 	bl	80008b0 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fc82 	bl	80008b0 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e1f0      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fba:	4b6c      	ldr	r3, [pc, #432]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f0      	bne.n	8000fa8 <HAL_RCC_OscConfig+0xe8>
 8000fc6:	e000      	b.n	8000fca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d063      	beq.n	800109e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fd6:	4b65      	ldr	r3, [pc, #404]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe2:	4b62      	ldr	r3, [pc, #392]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d11c      	bne.n	8001028 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fee:	4b5f      	ldr	r3, [pc, #380]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d116      	bne.n	8001028 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffa:	4b5c      	ldr	r3, [pc, #368]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <HAL_RCC_OscConfig+0x152>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d001      	beq.n	8001012 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e1c4      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001012:	4b56      	ldr	r3, [pc, #344]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	4952      	ldr	r1, [pc, #328]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001022:	4313      	orrs	r3, r2
 8001024:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001026:	e03a      	b.n	800109e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d020      	beq.n	8001072 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001030:	4b4f      	ldr	r3, [pc, #316]	; (8001170 <HAL_RCC_OscConfig+0x2b0>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001036:	f7ff fc3b 	bl	80008b0 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800103e:	f7ff fc37 	bl	80008b0 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e1a5      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001050:	4b46      	ldr	r3, [pc, #280]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f0      	beq.n	800103e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4b43      	ldr	r3, [pc, #268]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4940      	ldr	r1, [pc, #256]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
 8001070:	e015      	b.n	800109e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001072:	4b3f      	ldr	r3, [pc, #252]	; (8001170 <HAL_RCC_OscConfig+0x2b0>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001078:	f7ff fc1a 	bl	80008b0 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001080:	f7ff fc16 	bl	80008b0 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e184      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001092:	4b36      	ldr	r3, [pc, #216]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d030      	beq.n	800110c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d016      	beq.n	80010e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <HAL_RCC_OscConfig+0x2b4>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b8:	f7ff fbfa 	bl	80008b0 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c0:	f7ff fbf6 	bl	80008b0 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e164      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f0      	beq.n	80010c0 <HAL_RCC_OscConfig+0x200>
 80010de:	e015      	b.n	800110c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <HAL_RCC_OscConfig+0x2b4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fbe3 	bl	80008b0 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ee:	f7ff fbdf 	bl	80008b0 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e14d      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f0      	bne.n	80010ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80a0 	beq.w	800125a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10f      	bne.n	800114a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_RCC_OscConfig+0x2ac>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001146:	2301      	movs	r3, #1
 8001148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_RCC_OscConfig+0x2b8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d121      	bne.n	800119a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_RCC_OscConfig+0x2b8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_RCC_OscConfig+0x2b8>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001162:	f7ff fba5 	bl	80008b0 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	e011      	b.n	800118e <HAL_RCC_OscConfig+0x2ce>
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	42470000 	.word	0x42470000
 8001174:	42470e80 	.word	0x42470e80
 8001178:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800117c:	f7ff fb98 	bl	80008b0 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e106      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118e:	4b85      	ldr	r3, [pc, #532]	; (80013a4 <HAL_RCC_OscConfig+0x4e4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d106      	bne.n	80011b0 <HAL_RCC_OscConfig+0x2f0>
 80011a2:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 80011a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a6:	4a80      	ldr	r2, [pc, #512]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6713      	str	r3, [r2, #112]	; 0x70
 80011ae:	e01c      	b.n	80011ea <HAL_RCC_OscConfig+0x32a>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	d10c      	bne.n	80011d2 <HAL_RCC_OscConfig+0x312>
 80011b8:	4b7b      	ldr	r3, [pc, #492]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 80011ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011bc:	4a7a      	ldr	r2, [pc, #488]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6713      	str	r3, [r2, #112]	; 0x70
 80011c4:	4b78      	ldr	r3, [pc, #480]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 80011c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c8:	4a77      	ldr	r2, [pc, #476]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6713      	str	r3, [r2, #112]	; 0x70
 80011d0:	e00b      	b.n	80011ea <HAL_RCC_OscConfig+0x32a>
 80011d2:	4b75      	ldr	r3, [pc, #468]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 80011d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d6:	4a74      	ldr	r2, [pc, #464]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	6713      	str	r3, [r2, #112]	; 0x70
 80011de:	4b72      	ldr	r3, [pc, #456]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 80011e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e2:	4a71      	ldr	r2, [pc, #452]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 80011e4:	f023 0304 	bic.w	r3, r3, #4
 80011e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d015      	beq.n	800121e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f2:	f7ff fb5d 	bl	80008b0 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff fb59 	bl	80008b0 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f241 3288 	movw	r2, #5000	; 0x1388
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e0c5      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001210:	4b65      	ldr	r3, [pc, #404]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0ee      	beq.n	80011fa <HAL_RCC_OscConfig+0x33a>
 800121c:	e014      	b.n	8001248 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fb47 	bl	80008b0 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff fb43 	bl	80008b0 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	; 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e0af      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123c:	4b5a      	ldr	r3, [pc, #360]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 800123e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1ee      	bne.n	8001226 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d105      	bne.n	800125a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124e:	4b56      	ldr	r3, [pc, #344]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a55      	ldr	r2, [pc, #340]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 8001254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 809b 	beq.w	800139a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001264:	4b50      	ldr	r3, [pc, #320]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 030c 	and.w	r3, r3, #12
 800126c:	2b08      	cmp	r3, #8
 800126e:	d05c      	beq.n	800132a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d141      	bne.n	80012fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001278:	4b4c      	ldr	r3, [pc, #304]	; (80013ac <HAL_RCC_OscConfig+0x4ec>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fb17 	bl	80008b0 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001286:	f7ff fb13 	bl	80008b0 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e081      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001298:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f0      	bne.n	8001286 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69da      	ldr	r2, [r3, #28]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	019b      	lsls	r3, r3, #6
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	3b01      	subs	r3, #1
 80012be:	041b      	lsls	r3, r3, #16
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	061b      	lsls	r3, r3, #24
 80012c8:	4937      	ldr	r1, [pc, #220]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ce:	4b37      	ldr	r3, [pc, #220]	; (80013ac <HAL_RCC_OscConfig+0x4ec>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff faec 	bl	80008b0 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012dc:	f7ff fae8 	bl	80008b0 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e056      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x41c>
 80012fa:	e04e      	b.n	800139a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fc:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <HAL_RCC_OscConfig+0x4ec>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fad5 	bl	80008b0 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff fad1 	bl	80008b0 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e03f      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f0      	bne.n	800130a <HAL_RCC_OscConfig+0x44a>
 8001328:	e037      	b.n	800139a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e032      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d028      	beq.n	8001396 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800134e:	429a      	cmp	r2, r3
 8001350:	d121      	bne.n	8001396 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135c:	429a      	cmp	r2, r3
 800135e:	d11a      	bne.n	8001396 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001366:	4013      	ands	r3, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800136c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800136e:	4293      	cmp	r3, r2
 8001370:	d111      	bne.n	8001396 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	085b      	lsrs	r3, r3, #1
 800137e:	3b01      	subs	r3, #1
 8001380:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001382:	429a      	cmp	r2, r3
 8001384:	d107      	bne.n	8001396 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001392:	429a      	cmp	r2, r3
 8001394:	d001      	beq.n	800139a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40007000 	.word	0x40007000
 80013a8:	40023800 	.word	0x40023800
 80013ac:	42470060 	.word	0x42470060

080013b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0cc      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c4:	4b68      	ldr	r3, [pc, #416]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d90c      	bls.n	80013ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d2:	4b65      	ldr	r3, [pc, #404]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013da:	4b63      	ldr	r3, [pc, #396]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0b8      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001404:	4b59      	ldr	r3, [pc, #356]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	4a58      	ldr	r2, [pc, #352]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800140e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800141c:	4b53      	ldr	r3, [pc, #332]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a52      	ldr	r2, [pc, #328]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001428:	4b50      	ldr	r3, [pc, #320]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	494d      	ldr	r1, [pc, #308]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	4313      	orrs	r3, r2
 8001438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d044      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d119      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e07f      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d003      	beq.n	800146e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800146a:	2b03      	cmp	r3, #3
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e06f      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e067      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800148e:	4b37      	ldr	r3, [pc, #220]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f023 0203 	bic.w	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4934      	ldr	r1, [pc, #208]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	4313      	orrs	r3, r2
 800149e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a0:	f7ff fa06 	bl	80008b0 <HAL_GetTick>
 80014a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a6:	e00a      	b.n	80014be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a8:	f7ff fa02 	bl	80008b0 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e04f      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 020c 	and.w	r2, r3, #12
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d1eb      	bne.n	80014a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d20c      	bcs.n	80014f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_RCC_ClockConfig+0x1b8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e032      	b.n	800155e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4916      	ldr	r1, [pc, #88]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	4313      	orrs	r3, r2
 8001514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	490e      	ldr	r1, [pc, #56]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001536:	f000 f821 	bl	800157c <HAL_RCC_GetSysClockFreq>
 800153a:	4602      	mov	r2, r0
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	490a      	ldr	r1, [pc, #40]	; (8001570 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	5ccb      	ldrb	r3, [r1, r3]
 800154a:	fa22 f303 	lsr.w	r3, r2, r3
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_ClockConfig+0x1c8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f966 	bl	8000828 <HAL_InitTick>

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00
 800156c:	40023800 	.word	0x40023800
 8001570:	080022fc 	.word	0x080022fc
 8001574:	20000000 	.word	0x20000000
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800157c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001594:	4b67      	ldr	r3, [pc, #412]	; (8001734 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b08      	cmp	r3, #8
 800159e:	d00d      	beq.n	80015bc <HAL_RCC_GetSysClockFreq+0x40>
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	f200 80bd 	bhi.w	8001720 <HAL_RCC_GetSysClockFreq+0x1a4>
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <HAL_RCC_GetSysClockFreq+0x34>
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d003      	beq.n	80015b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80015ae:	e0b7      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015b0:	4b61      	ldr	r3, [pc, #388]	; (8001738 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80015b2:	60bb      	str	r3, [r7, #8]
       break;
 80015b4:	e0b7      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015b6:	4b61      	ldr	r3, [pc, #388]	; (800173c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80015b8:	60bb      	str	r3, [r7, #8]
      break;
 80015ba:	e0b4      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015bc:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c6:	4b5b      	ldr	r3, [pc, #364]	; (8001734 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d04d      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d2:	4b58      	ldr	r3, [pc, #352]	; (8001734 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	099b      	lsrs	r3, r3, #6
 80015d8:	461a      	mov	r2, r3
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015e2:	f04f 0100 	mov.w	r1, #0
 80015e6:	ea02 0800 	and.w	r8, r2, r0
 80015ea:	ea03 0901 	and.w	r9, r3, r1
 80015ee:	4640      	mov	r0, r8
 80015f0:	4649      	mov	r1, r9
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	014b      	lsls	r3, r1, #5
 80015fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001600:	0142      	lsls	r2, r0, #5
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	ebb0 0008 	subs.w	r0, r0, r8
 800160a:	eb61 0109 	sbc.w	r1, r1, r9
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	018b      	lsls	r3, r1, #6
 8001618:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800161c:	0182      	lsls	r2, r0, #6
 800161e:	1a12      	subs	r2, r2, r0
 8001620:	eb63 0301 	sbc.w	r3, r3, r1
 8001624:	f04f 0000 	mov.w	r0, #0
 8001628:	f04f 0100 	mov.w	r1, #0
 800162c:	00d9      	lsls	r1, r3, #3
 800162e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001632:	00d0      	lsls	r0, r2, #3
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	eb12 0208 	adds.w	r2, r2, r8
 800163c:	eb43 0309 	adc.w	r3, r3, r9
 8001640:	f04f 0000 	mov.w	r0, #0
 8001644:	f04f 0100 	mov.w	r1, #0
 8001648:	0259      	lsls	r1, r3, #9
 800164a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800164e:	0250      	lsls	r0, r2, #9
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	461a      	mov	r2, r3
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	f7fe fdb2 	bl	80001c8 <__aeabi_uldivmod>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4613      	mov	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e04a      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166e:	4b31      	ldr	r3, [pc, #196]	; (8001734 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	099b      	lsrs	r3, r3, #6
 8001674:	461a      	mov	r2, r3
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	ea02 0400 	and.w	r4, r2, r0
 8001686:	ea03 0501 	and.w	r5, r3, r1
 800168a:	4620      	mov	r0, r4
 800168c:	4629      	mov	r1, r5
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	014b      	lsls	r3, r1, #5
 8001698:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800169c:	0142      	lsls	r2, r0, #5
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	1b00      	subs	r0, r0, r4
 80016a4:	eb61 0105 	sbc.w	r1, r1, r5
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	018b      	lsls	r3, r1, #6
 80016b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016b6:	0182      	lsls	r2, r0, #6
 80016b8:	1a12      	subs	r2, r2, r0
 80016ba:	eb63 0301 	sbc.w	r3, r3, r1
 80016be:	f04f 0000 	mov.w	r0, #0
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	00d9      	lsls	r1, r3, #3
 80016c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016cc:	00d0      	lsls	r0, r2, #3
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	1912      	adds	r2, r2, r4
 80016d4:	eb45 0303 	adc.w	r3, r5, r3
 80016d8:	f04f 0000 	mov.w	r0, #0
 80016dc:	f04f 0100 	mov.w	r1, #0
 80016e0:	0299      	lsls	r1, r3, #10
 80016e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80016e6:	0290      	lsls	r0, r2, #10
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	461a      	mov	r2, r3
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	f7fe fd66 	bl	80001c8 <__aeabi_uldivmod>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4613      	mov	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	0c1b      	lsrs	r3, r3, #16
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	3301      	adds	r3, #1
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	fbb2 f3f3 	udiv	r3, r2, r3
 800171c:	60bb      	str	r3, [r7, #8]
      break;
 800171e:	e002      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001722:	60bb      	str	r3, [r7, #8]
      break;
 8001724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001726:	68bb      	ldr	r3, [r7, #8]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	00f42400 	.word	0x00f42400
 800173c:	007a1200 	.word	0x007a1200

08001740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_RCC_GetHCLKFreq+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000000 	.word	0x20000000

08001758 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e041      	b.n	80017ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d106      	bne.n	8001784 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7fe ffb4 	bl	80006ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3304      	adds	r3, #4
 8001794:	4619      	mov	r1, r3
 8001796:	4610      	mov	r0, r2
 8001798:	f000 faee 	bl	8001d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d109      	bne.n	800181c <HAL_TIM_PWM_Start+0x24>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b01      	cmp	r3, #1
 8001812:	bf14      	ite	ne
 8001814:	2301      	movne	r3, #1
 8001816:	2300      	moveq	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	e022      	b.n	8001862 <HAL_TIM_PWM_Start+0x6a>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2b04      	cmp	r3, #4
 8001820:	d109      	bne.n	8001836 <HAL_TIM_PWM_Start+0x3e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b01      	cmp	r3, #1
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	e015      	b.n	8001862 <HAL_TIM_PWM_Start+0x6a>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b08      	cmp	r3, #8
 800183a:	d109      	bne.n	8001850 <HAL_TIM_PWM_Start+0x58>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b01      	cmp	r3, #1
 8001846:	bf14      	ite	ne
 8001848:	2301      	movne	r3, #1
 800184a:	2300      	moveq	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	e008      	b.n	8001862 <HAL_TIM_PWM_Start+0x6a>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b01      	cmp	r3, #1
 800185a:	bf14      	ite	ne
 800185c:	2301      	movne	r3, #1
 800185e:	2300      	moveq	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e07c      	b.n	8001964 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d104      	bne.n	800187a <HAL_TIM_PWM_Start+0x82>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2202      	movs	r2, #2
 8001874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001878:	e013      	b.n	80018a2 <HAL_TIM_PWM_Start+0xaa>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b04      	cmp	r3, #4
 800187e:	d104      	bne.n	800188a <HAL_TIM_PWM_Start+0x92>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001888:	e00b      	b.n	80018a2 <HAL_TIM_PWM_Start+0xaa>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2b08      	cmp	r3, #8
 800188e:	d104      	bne.n	800189a <HAL_TIM_PWM_Start+0xa2>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001898:	e003      	b.n	80018a2 <HAL_TIM_PWM_Start+0xaa>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2202      	movs	r2, #2
 800189e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2201      	movs	r2, #1
 80018a8:	6839      	ldr	r1, [r7, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fcb4 	bl	8002218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2d      	ldr	r2, [pc, #180]	; (800196c <HAL_TIM_PWM_Start+0x174>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d004      	beq.n	80018c4 <HAL_TIM_PWM_Start+0xcc>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a2c      	ldr	r2, [pc, #176]	; (8001970 <HAL_TIM_PWM_Start+0x178>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_TIM_PWM_Start+0xd0>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <HAL_TIM_PWM_Start+0xd2>
 80018c8:	2300      	movs	r3, #0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a22      	ldr	r2, [pc, #136]	; (800196c <HAL_TIM_PWM_Start+0x174>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d022      	beq.n	800192e <HAL_TIM_PWM_Start+0x136>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f0:	d01d      	beq.n	800192e <HAL_TIM_PWM_Start+0x136>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1f      	ldr	r2, [pc, #124]	; (8001974 <HAL_TIM_PWM_Start+0x17c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d018      	beq.n	800192e <HAL_TIM_PWM_Start+0x136>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_TIM_PWM_Start+0x180>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_TIM_PWM_Start+0x136>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1c      	ldr	r2, [pc, #112]	; (800197c <HAL_TIM_PWM_Start+0x184>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d00e      	beq.n	800192e <HAL_TIM_PWM_Start+0x136>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a16      	ldr	r2, [pc, #88]	; (8001970 <HAL_TIM_PWM_Start+0x178>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d009      	beq.n	800192e <HAL_TIM_PWM_Start+0x136>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a18      	ldr	r2, [pc, #96]	; (8001980 <HAL_TIM_PWM_Start+0x188>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d004      	beq.n	800192e <HAL_TIM_PWM_Start+0x136>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a16      	ldr	r2, [pc, #88]	; (8001984 <HAL_TIM_PWM_Start+0x18c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d111      	bne.n	8001952 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b06      	cmp	r3, #6
 800193e:	d010      	beq.n	8001962 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001950:	e007      	b.n	8001962 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40010000 	.word	0x40010000
 8001970:	40010400 	.word	0x40010400
 8001974:	40000400 	.word	0x40000400
 8001978:	40000800 	.word	0x40000800
 800197c:	40000c00 	.word	0x40000c00
 8001980:	40014000 	.word	0x40014000
 8001984:	40001800 	.word	0x40001800

08001988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b02      	cmp	r3, #2
 800199c:	d122      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d11b      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f06f 0202 	mvn.w	r2, #2
 80019b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f9b6 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 80019d0:	e005      	b.n	80019de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f9a8 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f9b9 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d122      	bne.n	8001a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d11b      	bne.n	8001a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f06f 0204 	mvn.w	r2, #4
 8001a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f98c 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001a24:	e005      	b.n	8001a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f97e 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f98f 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d122      	bne.n	8001a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d11b      	bne.n	8001a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0208 	mvn.w	r2, #8
 8001a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2204      	movs	r2, #4
 8001a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f962 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001a78:	e005      	b.n	8001a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f954 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f965 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b10      	cmp	r3, #16
 8001a98:	d122      	bne.n	8001ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	2b10      	cmp	r3, #16
 8001aa6:	d11b      	bne.n	8001ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f06f 0210 	mvn.w	r2, #16
 8001ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f938 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001acc:	e005      	b.n	8001ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f92a 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f93b 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d10e      	bne.n	8001b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d107      	bne.n	8001b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f06f 0201 	mvn.w	r2, #1
 8001b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f904 	bl	8001d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b16:	2b80      	cmp	r3, #128	; 0x80
 8001b18:	d10e      	bne.n	8001b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b24:	2b80      	cmp	r3, #128	; 0x80
 8001b26:	d107      	bne.n	8001b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fb9f 	bl	8002276 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b42:	2b40      	cmp	r3, #64	; 0x40
 8001b44:	d10e      	bne.n	8001b64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b50:	2b40      	cmp	r3, #64	; 0x40
 8001b52:	d107      	bne.n	8001b64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f900 	bl	8001d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	d10e      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b20      	cmp	r3, #32
 8001b7e:	d107      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f06f 0220 	mvn.w	r2, #32
 8001b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fb69 	bl	8002262 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e0ac      	b.n	8001d0c <HAL_TIM_PWM_ConfigChannel+0x174>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	f200 809f 	bhi.w	8001d00 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001bc2:	a201      	add	r2, pc, #4	; (adr r2, 8001bc8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc8:	08001bfd 	.word	0x08001bfd
 8001bcc:	08001d01 	.word	0x08001d01
 8001bd0:	08001d01 	.word	0x08001d01
 8001bd4:	08001d01 	.word	0x08001d01
 8001bd8:	08001c3d 	.word	0x08001c3d
 8001bdc:	08001d01 	.word	0x08001d01
 8001be0:	08001d01 	.word	0x08001d01
 8001be4:	08001d01 	.word	0x08001d01
 8001be8:	08001c7f 	.word	0x08001c7f
 8001bec:	08001d01 	.word	0x08001d01
 8001bf0:	08001d01 	.word	0x08001d01
 8001bf4:	08001d01 	.word	0x08001d01
 8001bf8:	08001cbf 	.word	0x08001cbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f958 	bl	8001eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0208 	orr.w	r2, r2, #8
 8001c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0204 	bic.w	r2, r2, #4
 8001c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6999      	ldr	r1, [r3, #24]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	619a      	str	r2, [r3, #24]
      break;
 8001c3a:	e062      	b.n	8001d02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f9a8 	bl	8001f98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6999      	ldr	r1, [r3, #24]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	021a      	lsls	r2, r3, #8
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	619a      	str	r2, [r3, #24]
      break;
 8001c7c:	e041      	b.n	8001d02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68b9      	ldr	r1, [r7, #8]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f9fd 	bl	8002084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	69da      	ldr	r2, [r3, #28]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0208 	orr.w	r2, r2, #8
 8001c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	69da      	ldr	r2, [r3, #28]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0204 	bic.w	r2, r2, #4
 8001ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	69d9      	ldr	r1, [r3, #28]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	61da      	str	r2, [r3, #28]
      break;
 8001cbc:	e021      	b.n	8001d02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fa51 	bl	800216c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	69da      	ldr	r2, [r3, #28]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	69d9      	ldr	r1, [r3, #28]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	021a      	lsls	r2, r3, #8
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	61da      	str	r2, [r3, #28]
      break;
 8001cfe:	e000      	b.n	8001d02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001d00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a40      	ldr	r2, [pc, #256]	; (8001e8c <TIM_Base_SetConfig+0x114>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d013      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d96:	d00f      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a3d      	ldr	r2, [pc, #244]	; (8001e90 <TIM_Base_SetConfig+0x118>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00b      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3c      	ldr	r2, [pc, #240]	; (8001e94 <TIM_Base_SetConfig+0x11c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d007      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3b      	ldr	r2, [pc, #236]	; (8001e98 <TIM_Base_SetConfig+0x120>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d003      	beq.n	8001db8 <TIM_Base_SetConfig+0x40>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3a      	ldr	r2, [pc, #232]	; (8001e9c <TIM_Base_SetConfig+0x124>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d108      	bne.n	8001dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a2f      	ldr	r2, [pc, #188]	; (8001e8c <TIM_Base_SetConfig+0x114>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d02b      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd8:	d027      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a2c      	ldr	r2, [pc, #176]	; (8001e90 <TIM_Base_SetConfig+0x118>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d023      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a2b      	ldr	r2, [pc, #172]	; (8001e94 <TIM_Base_SetConfig+0x11c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a2a      	ldr	r2, [pc, #168]	; (8001e98 <TIM_Base_SetConfig+0x120>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01b      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a29      	ldr	r2, [pc, #164]	; (8001e9c <TIM_Base_SetConfig+0x124>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d017      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a28      	ldr	r2, [pc, #160]	; (8001ea0 <TIM_Base_SetConfig+0x128>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <TIM_Base_SetConfig+0x12c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00f      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <TIM_Base_SetConfig+0x130>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00b      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a25      	ldr	r2, [pc, #148]	; (8001eac <TIM_Base_SetConfig+0x134>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <TIM_Base_SetConfig+0x138>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d003      	beq.n	8001e2a <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <TIM_Base_SetConfig+0x13c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d108      	bne.n	8001e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <TIM_Base_SetConfig+0x114>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d003      	beq.n	8001e70 <TIM_Base_SetConfig+0xf8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <TIM_Base_SetConfig+0x124>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d103      	bne.n	8001e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	615a      	str	r2, [r3, #20]
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800
 8001e98:	40000c00 	.word	0x40000c00
 8001e9c:	40010400 	.word	0x40010400
 8001ea0:	40014000 	.word	0x40014000
 8001ea4:	40014400 	.word	0x40014400
 8001ea8:	40014800 	.word	0x40014800
 8001eac:	40001800 	.word	0x40001800
 8001eb0:	40001c00 	.word	0x40001c00
 8001eb4:	40002000 	.word	0x40002000

08001eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	f023 0201 	bic.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f023 0303 	bic.w	r3, r3, #3
 8001eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f023 0302 	bic.w	r3, r3, #2
 8001f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <TIM_OC1_SetConfig+0xd8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d003      	beq.n	8001f1c <TIM_OC1_SetConfig+0x64>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <TIM_OC1_SetConfig+0xdc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d10c      	bne.n	8001f36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f023 0308 	bic.w	r3, r3, #8
 8001f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a15      	ldr	r2, [pc, #84]	; (8001f90 <TIM_OC1_SetConfig+0xd8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d003      	beq.n	8001f46 <TIM_OC1_SetConfig+0x8e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <TIM_OC1_SetConfig+0xdc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d111      	bne.n	8001f6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	621a      	str	r2, [r3, #32]
}
 8001f84:	bf00      	nop
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	40010000 	.word	0x40010000
 8001f94:	40010400 	.word	0x40010400

08001f98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	f023 0210 	bic.w	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f023 0320 	bic.w	r3, r3, #32
 8001fe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a22      	ldr	r2, [pc, #136]	; (800207c <TIM_OC2_SetConfig+0xe4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d003      	beq.n	8002000 <TIM_OC2_SetConfig+0x68>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a21      	ldr	r2, [pc, #132]	; (8002080 <TIM_OC2_SetConfig+0xe8>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d10d      	bne.n	800201c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800201a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a17      	ldr	r2, [pc, #92]	; (800207c <TIM_OC2_SetConfig+0xe4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d003      	beq.n	800202c <TIM_OC2_SetConfig+0x94>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a16      	ldr	r2, [pc, #88]	; (8002080 <TIM_OC2_SetConfig+0xe8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d113      	bne.n	8002054 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800203a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	621a      	str	r2, [r3, #32]
}
 800206e:	bf00      	nop
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40010000 	.word	0x40010000
 8002080:	40010400 	.word	0x40010400

08002084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a21      	ldr	r2, [pc, #132]	; (8002164 <TIM_OC3_SetConfig+0xe0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d003      	beq.n	80020ea <TIM_OC3_SetConfig+0x66>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a20      	ldr	r2, [pc, #128]	; (8002168 <TIM_OC3_SetConfig+0xe4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10d      	bne.n	8002106 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a16      	ldr	r2, [pc, #88]	; (8002164 <TIM_OC3_SetConfig+0xe0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d003      	beq.n	8002116 <TIM_OC3_SetConfig+0x92>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a15      	ldr	r2, [pc, #84]	; (8002168 <TIM_OC3_SetConfig+0xe4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d113      	bne.n	800213e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800211c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	621a      	str	r2, [r3, #32]
}
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40010000 	.word	0x40010000
 8002168:	40010400 	.word	0x40010400

0800216c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800219a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	031b      	lsls	r3, r3, #12
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <TIM_OC4_SetConfig+0xa4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d003      	beq.n	80021d4 <TIM_OC4_SetConfig+0x68>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a11      	ldr	r2, [pc, #68]	; (8002214 <TIM_OC4_SetConfig+0xa8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d109      	bne.n	80021e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	019b      	lsls	r3, r3, #6
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	621a      	str	r2, [r3, #32]
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40010000 	.word	0x40010000
 8002214:	40010400 	.word	0x40010400

08002218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	2201      	movs	r2, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a1a      	ldr	r2, [r3, #32]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	43db      	mvns	r3, r3
 800223a:	401a      	ands	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a1a      	ldr	r2, [r3, #32]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	431a      	orrs	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	621a      	str	r2, [r3, #32]
}
 8002256:	bf00      	nop
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <__libc_init_array>:
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	4d0d      	ldr	r5, [pc, #52]	; (80022c4 <__libc_init_array+0x38>)
 8002290:	4c0d      	ldr	r4, [pc, #52]	; (80022c8 <__libc_init_array+0x3c>)
 8002292:	1b64      	subs	r4, r4, r5
 8002294:	10a4      	asrs	r4, r4, #2
 8002296:	2600      	movs	r6, #0
 8002298:	42a6      	cmp	r6, r4
 800229a:	d109      	bne.n	80022b0 <__libc_init_array+0x24>
 800229c:	4d0b      	ldr	r5, [pc, #44]	; (80022cc <__libc_init_array+0x40>)
 800229e:	4c0c      	ldr	r4, [pc, #48]	; (80022d0 <__libc_init_array+0x44>)
 80022a0:	f000 f820 	bl	80022e4 <_init>
 80022a4:	1b64      	subs	r4, r4, r5
 80022a6:	10a4      	asrs	r4, r4, #2
 80022a8:	2600      	movs	r6, #0
 80022aa:	42a6      	cmp	r6, r4
 80022ac:	d105      	bne.n	80022ba <__libc_init_array+0x2e>
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b4:	4798      	blx	r3
 80022b6:	3601      	adds	r6, #1
 80022b8:	e7ee      	b.n	8002298 <__libc_init_array+0xc>
 80022ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80022be:	4798      	blx	r3
 80022c0:	3601      	adds	r6, #1
 80022c2:	e7f2      	b.n	80022aa <__libc_init_array+0x1e>
 80022c4:	08002314 	.word	0x08002314
 80022c8:	08002314 	.word	0x08002314
 80022cc:	08002314 	.word	0x08002314
 80022d0:	08002318 	.word	0x08002318

080022d4 <memset>:
 80022d4:	4402      	add	r2, r0
 80022d6:	4603      	mov	r3, r0
 80022d8:	4293      	cmp	r3, r2
 80022da:	d100      	bne.n	80022de <memset+0xa>
 80022dc:	4770      	bx	lr
 80022de:	f803 1b01 	strb.w	r1, [r3], #1
 80022e2:	e7f9      	b.n	80022d8 <memset+0x4>

080022e4 <_init>:
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e6:	bf00      	nop
 80022e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ea:	bc08      	pop	{r3}
 80022ec:	469e      	mov	lr, r3
 80022ee:	4770      	bx	lr

080022f0 <_fini>:
 80022f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f2:	bf00      	nop
 80022f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f6:	bc08      	pop	{r3}
 80022f8:	469e      	mov	lr, r3
 80022fa:	4770      	bx	lr
