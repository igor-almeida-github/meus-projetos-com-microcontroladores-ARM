
011CAN_N1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002518  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002624  08002624  00012624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002644  08002644  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002644  08002644  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002644  08002644  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002644  08002644  00012644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002648  08002648  00012648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800264c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08002658  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002658  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a109  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017bf  00000000  00000000  0002a13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002b900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002c380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016baf  00000000  00000000  0002cd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a331  00000000  00000000  000438f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086806  00000000  00000000  0004dc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d442e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bdc  00000000  00000000  000d4484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800260c 	.word	0x0800260c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800260c 	.word	0x0800260c

0800014c <SysTick_Handler>:
#include "stm32f1xx.h"

extern TIM_HandleTypeDef timer2_handle;
extern CAN_HandleTypeDef hcan1;

void SysTick_Handler(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000150:	f000 fb16 	bl	8000780 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000154:	f001 fa72 	bl	800163c <HAL_SYSTICK_IRQHandler>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&timer2_handle);
 8000160:	4802      	ldr	r0, [pc, #8]	; (800016c <TIM2_IRQHandler+0x10>)
 8000162:	f002 f88f 	bl	8002284 <HAL_TIM_IRQHandler>
}
 8000166:	bf00      	nop
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	2000002c 	.word	0x2000002c

08000170 <USB_HP_CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000174:	4802      	ldr	r0, [pc, #8]	; (8000180 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000176:	f000 ff37 	bl	8000fe8 <HAL_CAN_IRQHandler>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	20000074 	.word	0x20000074

08000184 <USB_LP_CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void){
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000188:	4802      	ldr	r0, [pc, #8]	; (8000194 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800018a:	f000 ff2d 	bl	8000fe8 <HAL_CAN_IRQHandler>
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	20000074 	.word	0x20000074

08000198 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void){
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800019c:	4802      	ldr	r0, [pc, #8]	; (80001a8 <CAN1_RX1_IRQHandler+0x10>)
 800019e:	f000 ff23 	bl	8000fe8 <HAL_CAN_IRQHandler>
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000074 	.word	0x20000074

080001ac <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80001b0:	4802      	ldr	r0, [pc, #8]	; (80001bc <CAN1_SCE_IRQHandler+0x10>)
 80001b2:	f000 ff19 	bl	8000fe8 <HAL_CAN_IRQHandler>
}
 80001b6:	bf00      	nop
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	20000074 	.word	0x20000074

080001c0 <main>:
CAN_HandleTypeDef hcan1;

/************************************************************************************
 *                             MAIN                                                 *
 ************************************************************************************/
int main(void){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0

	// Local variables

	// This should be the first function to be called
	HAL_Init();
 80001c4:	f000 fa96 	bl	80006f4 <HAL_Init>

	// Config. the clock
	SystemClock_Config_HSE(SYS_CLOCK_FREQ_72_MHZ);
 80001c8:	2048      	movs	r0, #72	; 0x48
 80001ca:	f000 f927 	bl	800041c <SystemClock_Config_HSE>

	// Init. CAN1 peripheral
	CAN1_Init();
 80001ce:	f000 f823 	bl	8000218 <CAN1_Init>

	// Filter config.
	CAN_Filter_Config();
 80001d2:	f000 f857 	bl	8000284 <CAN_Filter_Config>

	// Enable interrupt from the CAN peripheral side
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF);
 80001d6:	f240 4102 	movw	r1, #1026	; 0x402
 80001da:	4808      	ldr	r0, [pc, #32]	; (80001fc <main+0x3c>)
 80001dc:	f000 fedf 	bl	8000f9e <HAL_CAN_ActivateNotification>

	// Move CAN from init. mode to normal mode
	if(HAL_CAN_Start(&hcan1) != HAL_OK){
 80001e0:	4806      	ldr	r0, [pc, #24]	; (80001fc <main+0x3c>)
 80001e2:	f000 fcad 	bl	8000b40 <HAL_CAN_Start>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <main+0x30>
		Error_handler();
 80001ec:	f000 f98e 	bl	800050c <Error_handler>
	}

	// Init Timer 2
	TIMER2_Init();
 80001f0:	f000 f8f6 	bl	80003e0 <TIMER2_Init>

	// Start timer
	HAL_TIM_Base_Start_IT(&timer2_handle);
 80001f4:	4802      	ldr	r0, [pc, #8]	; (8000200 <main+0x40>)
 80001f6:	f001 fff3 	bl	80021e0 <HAL_TIM_Base_Start_IT>

	for(;;);
 80001fa:	e7fe      	b.n	80001fa <main+0x3a>
 80001fc:	20000074 	.word	0x20000074
 8000200:	2000002c 	.word	0x2000002c

08000204 <HAL_TIM_PeriodElapsedCallback>:

/************************************************************************************
 *                             FUNCTIONS                                            *
 ************************************************************************************/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	CAN1_Tx();
 800020c:	f000 f860 	bl	80002d0 <CAN1_Tx>
}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <CAN1_Init>:

void CAN1_Init(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 800021c:	4b17      	ldr	r3, [pc, #92]	; (800027c <CAN1_Init+0x64>)
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <CAN1_Init+0x68>)
 8000220:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000222:	4b16      	ldr	r3, [pc, #88]	; (800027c <CAN1_Init+0x64>)
 8000224:	2200      	movs	r2, #0
 8000226:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = DISABLE;
 8000228:	4b14      	ldr	r3, [pc, #80]	; (800027c <CAN1_Init+0x64>)
 800022a:	2200      	movs	r2, #0
 800022c:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 800022e:	4b13      	ldr	r3, [pc, #76]	; (800027c <CAN1_Init+0x64>)
 8000230:	2201      	movs	r2, #1
 8000232:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000234:	4b11      	ldr	r3, [pc, #68]	; (800027c <CAN1_Init+0x64>)
 8000236:	2200      	movs	r2, #0
 8000238:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800023a:	4b10      	ldr	r3, [pc, #64]	; (800027c <CAN1_Init+0x64>)
 800023c:	2200      	movs	r2, #0
 800023e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000240:	4b0e      	ldr	r3, [pc, #56]	; (800027c <CAN1_Init+0x64>)
 8000242:	2200      	movs	r2, #0
 8000244:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;  // Priority driven by the identifier of the message
 8000246:	4b0d      	ldr	r3, [pc, #52]	; (800027c <CAN1_Init+0x64>)
 8000248:	2200      	movs	r2, #0
 800024a:	775a      	strb	r2, [r3, #29]

	// CAN timings settings (1 Mbps)
	hcan1.Init.Prescaler = 2;
 800024c:	4b0b      	ldr	r3, [pc, #44]	; (800027c <CAN1_Init+0x64>)
 800024e:	2202      	movs	r2, #2
 8000250:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000252:	4b0a      	ldr	r3, [pc, #40]	; (800027c <CAN1_Init+0x64>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000258:	4b08      	ldr	r3, [pc, #32]	; (800027c <CAN1_Init+0x64>)
 800025a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800025e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <CAN1_Init+0x64>)
 8000262:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000266:	615a      	str	r2, [r3, #20]

	// Do the Init. in the initialization mode
	if(HAL_CAN_Init(&hcan1) != HAL_OK)
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <CAN1_Init+0x64>)
 800026a:	f000 faa5 	bl	80007b8 <HAL_CAN_Init>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <CAN1_Init+0x60>
		Error_handler();
 8000274:	f000 f94a 	bl	800050c <Error_handler>
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000074 	.word	0x20000074
 8000280:	40006400 	.word	0x40006400

08000284 <CAN_Filter_Config>:

void CAN_Filter_Config(void){
 8000284:	b580      	push	{r7, lr}
 8000286:	b08a      	sub	sp, #40	; 0x28
 8000288:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	// The filter tells which messages will pass (if they match the filter ID at the bit positions where mask = 1
	// Configure filter receive 0x651 messages and discard 0x65D so that it won't receive It's own transmitted messages
	can1_filter_init.FilterActivation = ENABLE;
 800028a:	2301      	movs	r3, #1
 800028c:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000292:	2300      	movs	r3, #0
 8000294:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 8000296:	2300      	movs	r3, #0
 8000298:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 800029a:	2300      	movs	r3, #0
 800029c:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x01C0;
 800029e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80002a2:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80002a8:	2300      	movs	r3, #0
 80002aa:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80002ac:	2301      	movs	r3, #1
 80002ae:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK)
 80002b0:	463b      	mov	r3, r7
 80002b2:	4619      	mov	r1, r3
 80002b4:	4805      	ldr	r0, [pc, #20]	; (80002cc <CAN_Filter_Config+0x48>)
 80002b6:	f000 fb7a 	bl	80009ae <HAL_CAN_ConfigFilter>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <CAN_Filter_Config+0x40>
		Error_handler();
 80002c0:	f000 f924 	bl	800050c <Error_handler>
}
 80002c4:	bf00      	nop
 80002c6:	3728      	adds	r7, #40	; 0x28
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000074 	.word	0x20000074

080002d0 <CAN1_Tx>:

void CAN1_Tx(void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	static uint8_t led_no = 0;

	TxHeader.DLC = 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	61bb      	str	r3, [r7, #24]
	TxHeader.StdId = 0x65D;
 80002da:	f240 635d 	movw	r3, #1629	; 0x65d
 80002de:	60bb      	str	r3, [r7, #8]
	TxHeader.IDE = CAN_ID_STD;
 80002e0:	2300      	movs	r3, #0
 80002e2:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80002e4:	2300      	movs	r3, #0
 80002e6:	617b      	str	r3, [r7, #20]

	led_no++;
 80002e8:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <CAN1_Tx+0x84>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <CAN1_Tx+0x84>)
 80002f2:	701a      	strb	r2, [r3, #0]
	led_no %= 4;
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <CAN1_Tx+0x84>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	f003 0303 	and.w	r3, r3, #3
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4b15      	ldr	r3, [pc, #84]	; (8000354 <CAN1_Tx+0x84>)
 8000300:	701a      	strb	r2, [r3, #0]

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &led_no, &TxMailbox) != HAL_OK){
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	f107 0108 	add.w	r1, r7, #8
 8000308:	4a12      	ldr	r2, [pc, #72]	; (8000354 <CAN1_Tx+0x84>)
 800030a:	4813      	ldr	r0, [pc, #76]	; (8000358 <CAN1_Tx+0x88>)
 800030c:	f000 fc5c 	bl	8000bc8 <HAL_CAN_AddTxMessage>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <CAN1_Tx+0x4a>
		Error_handler();
 8000316:	f000 f8f9 	bl	800050c <Error_handler>
	}

	if (led_no == 3){
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <CAN1_Tx+0x84>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b03      	cmp	r3, #3
 8000320:	d114      	bne.n	800034c <CAN1_Tx+0x7c>
		// Send remote frame every 4s

		TxHeader.DLC = 2;                // N1 demanding 2 bytes of reply
 8000322:	2302      	movs	r3, #2
 8000324:	61bb      	str	r3, [r7, #24]
		TxHeader.StdId = 0x651;
 8000326:	f240 6351 	movw	r3, #1617	; 0x651
 800032a:	60bb      	str	r3, [r7, #8]
		TxHeader.IDE = CAN_ID_STD;
 800032c:	2300      	movs	r3, #0
 800032e:	613b      	str	r3, [r7, #16]
		TxHeader.RTR = CAN_RTR_REMOTE;
 8000330:	2302      	movs	r3, #2
 8000332:	617b      	str	r3, [r7, #20]

		// led_no doesn't matter because in remote frame, no message is sent
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &led_no, &TxMailbox) != HAL_OK){
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	f107 0108 	add.w	r1, r7, #8
 800033a:	4a06      	ldr	r2, [pc, #24]	; (8000354 <CAN1_Tx+0x84>)
 800033c:	4806      	ldr	r0, [pc, #24]	; (8000358 <CAN1_Tx+0x88>)
 800033e:	f000 fc43 	bl	8000bc8 <HAL_CAN_AddTxMessage>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <CAN1_Tx+0x7c>
			Error_handler();
 8000348:	f000 f8e0 	bl	800050c <Error_handler>
		}

	}

}
 800034c:	bf00      	nop
 800034e:	3720      	adds	r7, #32
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000028 	.word	0x20000028
 8000358:	20000074 	.word	0x20000074

0800035c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]

}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr

0800036e <HAL_CAN_TxMailbox1CompleteCallback>:


void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]

}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <HAL_CAN_TxMailbox2CompleteCallback>:


void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]

}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
	...

08000394 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000394:	b580      	push	{r7, lr}
 8000396:	b08c      	sub	sp, #48	; 0x30
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t message[5];

	// Read the FIFO to receive the message
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, message) != HAL_OK)
 800039c:	f107 030c 	add.w	r3, r7, #12
 80003a0:	f107 0214 	add.w	r2, r7, #20
 80003a4:	2100      	movs	r1, #0
 80003a6:	4808      	ldr	r0, [pc, #32]	; (80003c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80003a8:	f000 fce8 	bl	8000d7c <HAL_CAN_GetRxMessage>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		Error_handler();
 80003b2:	f000 f8ab 	bl	800050c <Error_handler>

	if (RxHeader.StdId == 0x651 && RxHeader.RTR == CAN_RTR_DATA){
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	f240 6251 	movw	r2, #1617	; 0x651
 80003bc:	4293      	cmp	r3, r2
		// Data frame N2 reply to N1

	}
}
 80003be:	bf00      	nop
 80003c0:	3730      	adds	r7, #48	; 0x30
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000074 	.word	0x20000074

080003cc <HAL_CAN_ErrorCallback>:


void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]

}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
	...

080003e0 <TIMER2_Init>:

void TIMER2_Init(void){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0

	// 1. Initialize the TIMER2 time base (1s)
	timer2_handle.Instance = TIM2;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <TIMER2_Init+0x38>)
 80003e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ea:	601a      	str	r2, [r3, #0]
	timer2_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <TIMER2_Init+0x38>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
	timer2_handle.Init.Period = 10000 - 1;
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <TIMER2_Init+0x38>)
 80003f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80003f8:	60da      	str	r2, [r3, #12]
	timer2_handle.Init.Prescaler = 7200 - 1;
 80003fa:	4b07      	ldr	r3, [pc, #28]	; (8000418 <TIMER2_Init+0x38>)
 80003fc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000400:	605a      	str	r2, [r3, #4]

	if(HAL_TIM_Base_Init(&timer2_handle) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <TIMER2_Init+0x38>)
 8000404:	f001 fe9c 	bl	8002140 <HAL_TIM_Base_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <TIMER2_Init+0x32>
		Error_handler();
 800040e:	f000 f87d 	bl	800050c <Error_handler>

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	2000002c 	.word	0x2000002c

0800041c <SystemClock_Config_HSE>:

void SystemClock_Config_HSE(uint8_t clock_freq){
 800041c:	b580      	push	{r7, lr}
 800041e:	b092      	sub	sp, #72	; 0x48
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint32_t FLatency;

	// 1. Init. the oscillator
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000426:	2301      	movs	r3, #1
 8000428:	61fb      	str	r3, [r7, #28]
	osc_init.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	627b      	str	r3, [r7, #36]	; 0x24
	osc_init.HSEState = RCC_HSE_ON;
 800042e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000432:	623b      	str	r3, [r7, #32]
	osc_init.HSIState = RCC_HSI_ON;
 8000434:	2301      	movs	r3, #1
 8000436:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.LSEState = RCC_LSE_OFF;
 8000438:	2300      	movs	r3, #0
 800043a:	62bb      	str	r3, [r7, #40]	; 0x28
	osc_init.LSIState = RCC_LSI_OFF;
 800043c:	2300      	movs	r3, #0
 800043e:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000440:	2310      	movs	r3, #16
 8000442:	633b      	str	r3, [r7, #48]	; 0x30
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8000444:	2302      	movs	r3, #2
 8000446:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000448:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044c:	63fb      	str	r3, [r7, #60]	; 0x3c

	// 2. Init. the clock
	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |\
 800044e:	230f      	movs	r3, #15
 8000450:	60bb      	str	r3, [r7, #8]
			 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000452:	2302      	movs	r3, #2
 8000454:	60fb      	str	r3, [r7, #12]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	61bb      	str	r3, [r7, #24]

	// 3. Configurations that depend on clock_freq
	switch(clock_freq){
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	2b48      	cmp	r3, #72	; 0x48
 8000466:	d01e      	beq.n	80004a6 <SystemClock_Config_HSE+0x8a>
 8000468:	2b48      	cmp	r3, #72	; 0x48
 800046a:	dc48      	bgt.n	80004fe <SystemClock_Config_HSE+0xe2>
 800046c:	2b40      	cmp	r3, #64	; 0x40
 800046e:	d011      	beq.n	8000494 <SystemClock_Config_HSE+0x78>
 8000470:	2b40      	cmp	r3, #64	; 0x40
 8000472:	dc44      	bgt.n	80004fe <SystemClock_Config_HSE+0xe2>
 8000474:	2b10      	cmp	r3, #16
 8000476:	d002      	beq.n	800047e <SystemClock_Config_HSE+0x62>
 8000478:	2b20      	cmp	r3, #32
 800047a:	d005      	beq.n	8000488 <SystemClock_Config_HSE+0x6c>
			osc_init.PLL.PLLMUL = RCC_PLL_MUL9;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
			FLatency = FLASH_LATENCY_2;
			break;
		default:
			return;
 800047c:	e03f      	b.n	80004fe <SystemClock_Config_HSE+0xe2>
			osc_init.PLL.PLLMUL = RCC_PLL_MUL2;
 800047e:	2300      	movs	r3, #0
 8000480:	643b      	str	r3, [r7, #64]	; 0x40
			FLatency = FLASH_LATENCY_0;
 8000482:	2300      	movs	r3, #0
 8000484:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000486:	e017      	b.n	80004b8 <SystemClock_Config_HSE+0x9c>
			osc_init.PLL.PLLMUL = RCC_PLL_MUL4;
 8000488:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800048c:	643b      	str	r3, [r7, #64]	; 0x40
			FLatency = FLASH_LATENCY_1;
 800048e:	2301      	movs	r3, #1
 8000490:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000492:	e011      	b.n	80004b8 <SystemClock_Config_HSE+0x9c>
			osc_init.PLL.PLLMUL = RCC_PLL_MUL8;
 8000494:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000498:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800049a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049e:	617b      	str	r3, [r7, #20]
			FLatency = FLASH_LATENCY_2;
 80004a0:	2302      	movs	r3, #2
 80004a2:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 80004a4:	e008      	b.n	80004b8 <SystemClock_Config_HSE+0x9c>
			osc_init.PLL.PLLMUL = RCC_PLL_MUL9;
 80004a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004aa:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b0:	617b      	str	r3, [r7, #20]
			FLatency = FLASH_LATENCY_2;
 80004b2:	2302      	movs	r3, #2
 80004b4:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 80004b6:	bf00      	nop
	}

	// 4. Call the APIs
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80004b8:	f107 031c 	add.w	r3, r7, #28
 80004bc:	4618      	mov	r0, r3
 80004be:	f001 fa4d 	bl	800195c <HAL_RCC_OscConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config_HSE+0xb0>
		Error_handler();
 80004c8:	f000 f820 	bl	800050c <Error_handler>
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 80004cc:	f107 0308 	add.w	r3, r7, #8
 80004d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fcc2 	bl	8001e5c <HAL_RCC_ClockConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config_HSE+0xc6>
		Error_handler();
 80004de:	f000 f815 	bl	800050c <Error_handler>

	// 5. Systick
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80004e2:	f001 fe05 	bl	80020f0 <HAL_RCC_GetHCLKFreq>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <SystemClock_Config_HSE+0xec>)
 80004ea:	fba2 2303 	umull	r2, r3, r2, r3
 80004ee:	099b      	lsrs	r3, r3, #6
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 f87a 	bl	80015ea <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80004f6:	2004      	movs	r0, #4
 80004f8:	f001 f884 	bl	8001604 <HAL_SYSTICK_CLKSourceConfig>
 80004fc:	e000      	b.n	8000500 <SystemClock_Config_HSE+0xe4>
			return;
 80004fe:	bf00      	nop

}
 8000500:	3748      	adds	r7, #72	; 0x48
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	10624dd3 	.word	0x10624dd3

0800050c <Error_handler>:

void Error_handler(void){
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	while(1);
 8000510:	e7fe      	b.n	8000510 <Error_handler+0x4>
	...

08000514 <HAL_MspInit>:
 */

#include "stm32f1xx.h"

/* Low Level processor Init. Called by HAL_Init()*/
void HAL_MspInit(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051a:	2003      	movs	r0, #3
 800051c:	f001 f830 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x07 << 16;  // En: usg fault, memory fault and bus fault
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <HAL_MspInit+0x5c>)
 8000522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000524:	4a12      	ldr	r2, [pc, #72]	; (8000570 <HAL_MspInit+0x5c>)
 8000526:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800052a:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	f06f 000b 	mvn.w	r0, #11
 8000534:	f001 f82f 	bl	8001596 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000538:	2200      	movs	r2, #0
 800053a:	2100      	movs	r1, #0
 800053c:	f06f 000a 	mvn.w	r0, #10
 8000540:	f001 f829 	bl	8001596 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2100      	movs	r1, #0
 8000548:	f06f 0009 	mvn.w	r0, #9
 800054c:	f001 f823 	bl	8001596 <HAL_NVIC_SetPriority>

	__HAL_RCC_AFIO_CLK_ENABLE();
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <HAL_MspInit+0x60>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a07      	ldr	r2, [pc, #28]	; (8000574 <HAL_MspInit+0x60>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_MspInit+0x60>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0301 	and.w	r3, r3, #1
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	e000ed00 	.word	0xe000ed00
 8000574:	40021000 	.word	0x40021000

08000578 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

	// 1. Enable the clock for the TIM2 peripheral
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_TIM_Base_MspInit+0x38>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_TIM_Base_MspInit+0x38>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	61d3      	str	r3, [r2, #28]
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_TIM_Base_MspInit+0x38>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]

	// 2. Enable IRQ of timer 6
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000598:	201c      	movs	r0, #28
 800059a:	f001 f818 	bl	80015ce <HAL_NVIC_EnableIRQ>

	// 3. Set up the priority
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	210f      	movs	r1, #15
 80005a2:	201c      	movs	r0, #28
 80005a4:	f000 fff7 	bl	8001596 <HAL_NVIC_SetPriority>

}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000

080005b4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_CAN1_CLK_ENABLE();
 80005bc:	4b34      	ldr	r3, [pc, #208]	; (8000690 <HAL_CAN_MspInit+0xdc>)
 80005be:	69db      	ldr	r3, [r3, #28]
 80005c0:	4a33      	ldr	r2, [pc, #204]	; (8000690 <HAL_CAN_MspInit+0xdc>)
 80005c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005c6:	61d3      	str	r3, [r2, #28]
 80005c8:	4b31      	ldr	r3, [pc, #196]	; (8000690 <HAL_CAN_MspInit+0xdc>)
 80005ca:	69db      	ldr	r3, [r3, #28]
 80005cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005d4:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <HAL_CAN_MspInit+0xdc>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a2d      	ldr	r2, [pc, #180]	; (8000690 <HAL_CAN_MspInit+0xdc>)
 80005da:	f043 0308 	orr.w	r3, r3, #8
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <HAL_CAN_MspInit+0xdc>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0308 	and.w	r3, r3, #8
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]

	__HAL_AFIO_REMAP_CAN1_2();  // CAN_RX mapped to PB8,  CAN_TX mapped to PB9
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <HAL_CAN_MspInit+0xe0>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
 80005f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
 80005fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
 800060a:	4a22      	ldr	r2, [pc, #136]	; (8000694 <HAL_CAN_MspInit+0xe0>)
 800060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060e:	6053      	str	r3, [r2, #4]
	/* CAN1 GPIO Config.
	 * PB8 -----> CAN1_RX
	 * PB9 -----> CAN1_TX
	 */

	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000614:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  // Não funciona sem essa linha
 800061e:	2303      	movs	r3, #3
 8000620:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	481b      	ldr	r0, [pc, #108]	; (8000698 <HAL_CAN_MspInit+0xe4>)
 800062a:	f001 f813 	bl	8001654 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800062e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000632:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	4815      	ldr	r0, [pc, #84]	; (8000698 <HAL_CAN_MspInit+0xe4>)
 8000644:	f001 f806 	bl	8001654 <HAL_GPIO_Init>

	// CAN IRQ config.
	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	210f      	movs	r1, #15
 800064c:	2013      	movs	r0, #19
 800064e:	f000 ffa2 	bl	8001596 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	210f      	movs	r1, #15
 8000656:	2014      	movs	r0, #20
 8000658:	f000 ff9d 	bl	8001596 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	210f      	movs	r1, #15
 8000660:	2015      	movs	r0, #21
 8000662:	f000 ff98 	bl	8001596 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	210f      	movs	r1, #15
 800066a:	2016      	movs	r0, #22
 800066c:	f000 ff93 	bl	8001596 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000670:	2013      	movs	r0, #19
 8000672:	f000 ffac 	bl	80015ce <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000676:	2014      	movs	r0, #20
 8000678:	f000 ffa9 	bl	80015ce <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800067c:	2015      	movs	r0, #21
 800067e:	f000 ffa6 	bl	80015ce <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000682:	2016      	movs	r0, #22
 8000684:	f000 ffa3 	bl	80015ce <HAL_NVIC_EnableIRQ>
}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	; 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	40010000 	.word	0x40010000
 8000698:	40010c00 	.word	0x40010c00

0800069c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	; (80006e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	; (80006ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ce:	f7ff ffe5 	bl	800069c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006d2:	f001 ff77 	bl	80025c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fd73 	bl	80001c0 <main>
  bx lr
 80006da:	4770      	bx	lr
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e4:	0800264c 	.word	0x0800264c
  ldr r2, =_sbss
 80006e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006ec:	200000a0 	.word	0x200000a0

080006f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_2_IRQHandler>
	...

080006f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <HAL_Init+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a07      	ldr	r2, [pc, #28]	; (800071c <HAL_Init+0x28>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000704:	2003      	movs	r0, #3
 8000706:	f000 ff3b 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f808 	bl	8000720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000710:	f7ff ff00 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40022000 	.word	0x40022000

08000720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_InitTick+0x54>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_InitTick+0x58>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000736:	fbb3 f3f1 	udiv	r3, r3, r1
 800073a:	fbb2 f3f3 	udiv	r3, r2, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f000 ff53 	bl	80015ea <HAL_SYSTICK_Config>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	e00e      	b.n	800076c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b0f      	cmp	r3, #15
 8000752:	d80a      	bhi.n	800076a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000754:	2200      	movs	r2, #0
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800075c:	f000 ff1b 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000760:	4a06      	ldr	r2, [pc, #24]	; (800077c <HAL_InitTick+0x5c>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	e000      	b.n	800076c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000000 	.word	0x20000000
 8000778:	20000008 	.word	0x20000008
 800077c:	20000004 	.word	0x20000004

08000780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x1c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x20>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <HAL_IncTick+0x20>)
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	20000008 	.word	0x20000008
 80007a0:	2000009c 	.word	0x2000009c

080007a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b02      	ldr	r3, [pc, #8]	; (80007b4 <HAL_GetTick+0x10>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	2000009c 	.word	0x2000009c

080007b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e0ed      	b.n	80009a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d102      	bne.n	80007dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff feec 	bl	80005b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f042 0201 	orr.w	r2, r2, #1
 80007ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007ec:	f7ff ffda 	bl	80007a4 <HAL_GetTick>
 80007f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007f2:	e012      	b.n	800081a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007f4:	f7ff ffd6 	bl	80007a4 <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	2b0a      	cmp	r3, #10
 8000800:	d90b      	bls.n	800081a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000806:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2205      	movs	r2, #5
 8000812:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e0c5      	b.n	80009a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0e5      	beq.n	80007f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f022 0202 	bic.w	r2, r2, #2
 8000836:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000838:	f7ff ffb4 	bl	80007a4 <HAL_GetTick>
 800083c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800083e:	e012      	b.n	8000866 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000840:	f7ff ffb0 	bl	80007a4 <HAL_GetTick>
 8000844:	4602      	mov	r2, r0
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	2b0a      	cmp	r3, #10
 800084c:	d90b      	bls.n	8000866 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000852:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2205      	movs	r2, #5
 800085e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e09f      	b.n	80009a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f003 0302 	and.w	r3, r3, #2
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1e5      	bne.n	8000840 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	7e1b      	ldrb	r3, [r3, #24]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d108      	bne.n	800088e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	e007      	b.n	800089e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800089c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7e5b      	ldrb	r3, [r3, #25]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d108      	bne.n	80008b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	e007      	b.n	80008c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80008c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	7e9b      	ldrb	r3, [r3, #26]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d108      	bne.n	80008e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f042 0220 	orr.w	r2, r2, #32
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	e007      	b.n	80008f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f022 0220 	bic.w	r2, r2, #32
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7edb      	ldrb	r3, [r3, #27]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d108      	bne.n	800090c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f022 0210 	bic.w	r2, r2, #16
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	e007      	b.n	800091c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f042 0210 	orr.w	r2, r2, #16
 800091a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7f1b      	ldrb	r3, [r3, #28]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d108      	bne.n	8000936 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f042 0208 	orr.w	r2, r2, #8
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	e007      	b.n	8000946 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f022 0208 	bic.w	r2, r2, #8
 8000944:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7f5b      	ldrb	r3, [r3, #29]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d108      	bne.n	8000960 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f042 0204 	orr.w	r2, r2, #4
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	e007      	b.n	8000970 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f022 0204 	bic.w	r2, r2, #4
 800096e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	431a      	orrs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	431a      	orrs	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	ea42 0103 	orr.w	r1, r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	1e5a      	subs	r2, r3, #1
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	430a      	orrs	r2, r1
 8000994:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2201      	movs	r2, #1
 80009a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b087      	sub	sp, #28
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009c4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80009c6:	7cfb      	ldrb	r3, [r7, #19]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d003      	beq.n	80009d4 <HAL_CAN_ConfigFilter+0x26>
 80009cc:	7cfb      	ldrb	r3, [r7, #19]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	f040 80aa 	bne.w	8000b28 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009da:	f043 0201 	orr.w	r2, r3, #1
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f003 031f 	and.w	r3, r3, #31
 80009ec:	2201      	movs	r2, #1
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d123      	bne.n	8000a56 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	401a      	ands	r2, r3
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3248      	adds	r2, #72	; 0x48
 8000a36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a4c:	6979      	ldr	r1, [r7, #20]
 8000a4e:	3348      	adds	r3, #72	; 0x48
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	440b      	add	r3, r1
 8000a54:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d122      	bne.n	8000aa4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	431a      	orrs	r2, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a7a:	683a      	ldr	r2, [r7, #0]
 8000a7c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a7e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	3248      	adds	r2, #72	; 0x48
 8000a84:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a98:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a9a:	6979      	ldr	r1, [r7, #20]
 8000a9c:	3348      	adds	r3, #72	; 0x48
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	440b      	add	r3, r1
 8000aa2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d109      	bne.n	8000ac0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000abe:	e007      	b.n	8000ad0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	691b      	ldr	r3, [r3, #16]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d109      	bne.n	8000aec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000aea:	e007      	b.n	8000afc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	431a      	orrs	r2, r3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	6a1b      	ldr	r3, [r3, #32]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d107      	bne.n	8000b14 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b1a:	f023 0201 	bic.w	r2, r3, #1
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	e006      	b.n	8000b36 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
  }
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	371c      	adds	r7, #28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d12e      	bne.n	8000bb2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2202      	movs	r2, #2
 8000b58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f022 0201 	bic.w	r2, r2, #1
 8000b6a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b6c:	f7ff fe1a 	bl	80007a4 <HAL_GetTick>
 8000b70:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b72:	e012      	b.n	8000b9a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b74:	f7ff fe16 	bl	80007a4 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b0a      	cmp	r3, #10
 8000b80:	d90b      	bls.n	8000b9a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2205      	movs	r2, #5
 8000b92:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e012      	b.n	8000bc0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1e5      	bne.n	8000b74 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e006      	b.n	8000bc0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
  }
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bdc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000be6:	7ffb      	ldrb	r3, [r7, #31]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d003      	beq.n	8000bf4 <HAL_CAN_AddTxMessage+0x2c>
 8000bec:	7ffb      	ldrb	r3, [r7, #31]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	f040 80b8 	bne.w	8000d64 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d10a      	bne.n	8000c14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d105      	bne.n	8000c14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f000 80a0 	beq.w	8000d54 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	0e1b      	lsrs	r3, r3, #24
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d907      	bls.n	8000c34 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e09e      	b.n	8000d72 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c34:	2201      	movs	r2, #1
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	409a      	lsls	r2, r3
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10d      	bne.n	8000c62 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c50:	68f9      	ldr	r1, [r7, #12]
 8000c52:	6809      	ldr	r1, [r1, #0]
 8000c54:	431a      	orrs	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3318      	adds	r3, #24
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	440b      	add	r3, r1
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	e00f      	b.n	8000c82 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c6c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c72:	68f9      	ldr	r1, [r7, #12]
 8000c74:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c76:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3318      	adds	r3, #24
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	440b      	add	r3, r1
 8000c80:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	691a      	ldr	r2, [r3, #16]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3318      	adds	r3, #24
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	440b      	add	r3, r1
 8000c92:	3304      	adds	r3, #4
 8000c94:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	7d1b      	ldrb	r3, [r3, #20]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d111      	bne.n	8000cc2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3318      	adds	r3, #24
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	4413      	add	r3, r2
 8000caa:	3304      	adds	r3, #4
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	6811      	ldr	r1, [r2, #0]
 8000cb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3318      	adds	r3, #24
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	440b      	add	r3, r1
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3307      	adds	r3, #7
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	061a      	lsls	r2, r3, #24
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3306      	adds	r3, #6
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	041b      	lsls	r3, r3, #16
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3305      	adds	r3, #5
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	3204      	adds	r2, #4
 8000ce2:	7812      	ldrb	r2, [r2, #0]
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	6811      	ldr	r1, [r2, #0]
 8000cea:	ea43 0200 	orr.w	r2, r3, r0
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000cf8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3303      	adds	r3, #3
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	061a      	lsls	r2, r3, #24
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3302      	adds	r3, #2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	041b      	lsls	r3, r3, #16
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	4313      	orrs	r3, r2
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	7812      	ldrb	r2, [r2, #0]
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	6811      	ldr	r1, [r2, #0]
 8000d20:	ea43 0200 	orr.w	r2, r3, r0
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	440b      	add	r3, r1
 8000d2a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000d2e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3318      	adds	r3, #24
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	4413      	add	r3, r2
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	6811      	ldr	r1, [r2, #0]
 8000d42:	f043 0201 	orr.w	r2, r3, #1
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3318      	adds	r3, #24
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	440b      	add	r3, r1
 8000d4e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	e00e      	b.n	8000d72 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e006      	b.n	8000d72 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
  }
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d90:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d003      	beq.n	8000da0 <HAL_CAN_GetRxMessage+0x24>
 8000d98:	7dfb      	ldrb	r3, [r7, #23]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	f040 80f3 	bne.w	8000f86 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10e      	bne.n	8000dc4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d116      	bne.n	8000de2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e0e7      	b.n	8000f94 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d107      	bne.n	8000de2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e0d8      	b.n	8000f94 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	331b      	adds	r3, #27
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	4413      	add	r3, r2
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0204 	and.w	r2, r3, #4
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10c      	bne.n	8000e1a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	331b      	adds	r3, #27
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	4413      	add	r3, r2
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	0d5b      	lsrs	r3, r3, #21
 8000e10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e00b      	b.n	8000e32 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	331b      	adds	r3, #27
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	4413      	add	r3, r2
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	08db      	lsrs	r3, r3, #3
 8000e2a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	331b      	adds	r3, #27
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	4413      	add	r3, r2
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0202 	and.w	r2, r3, #2
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	331b      	adds	r3, #27
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	4413      	add	r3, r2
 8000e54:	3304      	adds	r3, #4
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 020f 	and.w	r2, r3, #15
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	331b      	adds	r3, #27
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	331b      	adds	r3, #27
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	4413      	add	r3, r2
 8000e84:	3304      	adds	r3, #4
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	0c1b      	lsrs	r3, r3, #16
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4413      	add	r3, r2
 8000e9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	4413      	add	r3, r2
 8000eb0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	0a1a      	lsrs	r2, r3, #8
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	4413      	add	r3, r2
 8000eca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0c1a      	lsrs	r2, r3, #16
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	4413      	add	r3, r2
 8000ee4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	0e1a      	lsrs	r2, r3, #24
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	3303      	adds	r3, #3
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	4413      	add	r3, r2
 8000efe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	3304      	adds	r3, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	4413      	add	r3, r2
 8000f16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	0a1a      	lsrs	r2, r3, #8
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	3305      	adds	r3, #5
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	4413      	add	r3, r2
 8000f30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	0c1a      	lsrs	r2, r3, #16
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	3306      	adds	r3, #6
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	4413      	add	r3, r2
 8000f4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	0e1a      	lsrs	r2, r3, #24
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	3307      	adds	r3, #7
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d108      	bne.n	8000f72 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0220 	orr.w	r2, r2, #32
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	e007      	b.n	8000f82 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0220 	orr.w	r2, r2, #32
 8000f80:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e006      	b.n	8000f94 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
  }
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	371c      	adds	r7, #28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b085      	sub	sp, #20
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d002      	beq.n	8000fbc <HAL_CAN_ActivateNotification+0x1e>
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d109      	bne.n	8000fd0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6959      	ldr	r1, [r3, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e006      	b.n	8000fde <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
  }
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d07c      	beq.n	8001128 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d023      	beq.n	8001080 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2201      	movs	r2, #1
 800103e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff f986 	bl	800035c <HAL_CAN_TxMailbox0CompleteCallback>
 8001050:	e016      	b.n	8001080 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	d004      	beq.n	8001066 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
 8001064:	e00c      	b.n	8001080 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	2b00      	cmp	r3, #0
 800106e:	d004      	beq.n	800107a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
 8001078:	e002      	b.n	8001080 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f96b 	bl	8001356 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001086:	2b00      	cmp	r3, #0
 8001088:	d024      	beq.n	80010d4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001092:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff f965 	bl	800036e <HAL_CAN_TxMailbox1CompleteCallback>
 80010a4:	e016      	b.n	80010d4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
 80010b8:	e00c      	b.n	80010d4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
 80010cc:	e002      	b.n	80010d4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f94a 	bl	8001368 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d024      	beq.n	8001128 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff f944 	bl	8000380 <HAL_CAN_TxMailbox2CompleteCallback>
 80010f8:	e016      	b.n	8001128 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
 800110c:	e00c      	b.n	8001128 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d004      	beq.n	8001122 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
 8001120:	e002      	b.n	8001128 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f929 	bl	800137a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00c      	beq.n	800114c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	2b00      	cmp	r3, #0
 800113a:	d007      	beq.n	800114c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001142:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2210      	movs	r2, #16
 800114a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00b      	beq.n	800116e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2208      	movs	r2, #8
 8001166:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f90f 	bl	800138c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d009      	beq.n	800118c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff f904 	bl	8000394 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00c      	beq.n	80011b0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	2b00      	cmp	r3, #0
 800119e:	d007      	beq.n	80011b0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2210      	movs	r2, #16
 80011ae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	f003 0320 	and.w	r3, r3, #32
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d006      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2208      	movs	r2, #8
 80011ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f8ef 	bl	80013b0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d009      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f8d7 	bl	800139e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2b00      	cmp	r3, #0
 8001202:	d006      	beq.n	8001212 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2210      	movs	r2, #16
 800120a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f8d8 	bl	80013c2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00b      	beq.n	8001234 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2208      	movs	r2, #8
 800122c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f8d0 	bl	80013d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d07b      	beq.n	8001336 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	d072      	beq.n	800132e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124e:	2b00      	cmp	r3, #0
 8001250:	d008      	beq.n	8001264 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800126a:	2b00      	cmp	r3, #0
 800126c:	d008      	beq.n	8001280 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001286:	2b00      	cmp	r3, #0
 8001288:	d008      	beq.n	800129c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d043      	beq.n	800132e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d03e      	beq.n	800132e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80012b6:	2b60      	cmp	r3, #96	; 0x60
 80012b8:	d02b      	beq.n	8001312 <HAL_CAN_IRQHandler+0x32a>
 80012ba:	2b60      	cmp	r3, #96	; 0x60
 80012bc:	d82e      	bhi.n	800131c <HAL_CAN_IRQHandler+0x334>
 80012be:	2b50      	cmp	r3, #80	; 0x50
 80012c0:	d022      	beq.n	8001308 <HAL_CAN_IRQHandler+0x320>
 80012c2:	2b50      	cmp	r3, #80	; 0x50
 80012c4:	d82a      	bhi.n	800131c <HAL_CAN_IRQHandler+0x334>
 80012c6:	2b40      	cmp	r3, #64	; 0x40
 80012c8:	d019      	beq.n	80012fe <HAL_CAN_IRQHandler+0x316>
 80012ca:	2b40      	cmp	r3, #64	; 0x40
 80012cc:	d826      	bhi.n	800131c <HAL_CAN_IRQHandler+0x334>
 80012ce:	2b30      	cmp	r3, #48	; 0x30
 80012d0:	d010      	beq.n	80012f4 <HAL_CAN_IRQHandler+0x30c>
 80012d2:	2b30      	cmp	r3, #48	; 0x30
 80012d4:	d822      	bhi.n	800131c <HAL_CAN_IRQHandler+0x334>
 80012d6:	2b10      	cmp	r3, #16
 80012d8:	d002      	beq.n	80012e0 <HAL_CAN_IRQHandler+0x2f8>
 80012da:	2b20      	cmp	r3, #32
 80012dc:	d005      	beq.n	80012ea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012de:	e01d      	b.n	800131c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012e8:	e019      	b.n	800131e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	f043 0310 	orr.w	r3, r3, #16
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012f2:	e014      	b.n	800131e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	f043 0320 	orr.w	r3, r3, #32
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012fc:	e00f      	b.n	800131e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001306:	e00a      	b.n	800131e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001310:	e005      	b.n	800131e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800131a:	e000      	b.n	800131e <HAL_CAN_IRQHandler+0x336>
            break;
 800131c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699a      	ldr	r2, [r3, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800132c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2204      	movs	r2, #4
 8001334:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff f83f 	bl	80003cc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800134e:	bf00      	nop
 8001350:	3728      	adds	r7, #40	; 0x28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
	...

080013e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0b      	blt.n	8001476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	4906      	ldr	r1, [pc, #24]	; (8001480 <__NVIC_EnableIRQ+0x34>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001560:	f7ff ff90 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff2d 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff42 	bl	8001430 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff90 	bl	80014d8 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5f 	bl	8001484 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff35 	bl	800144c <__NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffa2 	bl	800153c <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b04      	cmp	r3, #4
 8001610:	d106      	bne.n	8001620 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800161e:	e005      	b.n	800162c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001626:	f023 0304 	bic.w	r3, r3, #4
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001640:	f000 f802 	bl	8001648 <HAL_SYSTICK_Callback>
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b08b      	sub	sp, #44	; 0x2c
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001666:	e169      	b.n	800193c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001668:	2201      	movs	r2, #1
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	429a      	cmp	r2, r3
 8001682:	f040 8158 	bne.w	8001936 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4a9a      	ldr	r2, [pc, #616]	; (80018f4 <HAL_GPIO_Init+0x2a0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d05e      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 8001690:	4a98      	ldr	r2, [pc, #608]	; (80018f4 <HAL_GPIO_Init+0x2a0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d875      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 8001696:	4a98      	ldr	r2, [pc, #608]	; (80018f8 <HAL_GPIO_Init+0x2a4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d058      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 800169c:	4a96      	ldr	r2, [pc, #600]	; (80018f8 <HAL_GPIO_Init+0x2a4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d86f      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016a2:	4a96      	ldr	r2, [pc, #600]	; (80018fc <HAL_GPIO_Init+0x2a8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d052      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 80016a8:	4a94      	ldr	r2, [pc, #592]	; (80018fc <HAL_GPIO_Init+0x2a8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d869      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016ae:	4a94      	ldr	r2, [pc, #592]	; (8001900 <HAL_GPIO_Init+0x2ac>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d04c      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 80016b4:	4a92      	ldr	r2, [pc, #584]	; (8001900 <HAL_GPIO_Init+0x2ac>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d863      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016ba:	4a92      	ldr	r2, [pc, #584]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d046      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 80016c0:	4a90      	ldr	r2, [pc, #576]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d85d      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016c6:	2b12      	cmp	r3, #18
 80016c8:	d82a      	bhi.n	8001720 <HAL_GPIO_Init+0xcc>
 80016ca:	2b12      	cmp	r3, #18
 80016cc:	d859      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016ce:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <HAL_GPIO_Init+0x80>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	0800174f 	.word	0x0800174f
 80016d8:	08001729 	.word	0x08001729
 80016dc:	0800173b 	.word	0x0800173b
 80016e0:	0800177d 	.word	0x0800177d
 80016e4:	08001783 	.word	0x08001783
 80016e8:	08001783 	.word	0x08001783
 80016ec:	08001783 	.word	0x08001783
 80016f0:	08001783 	.word	0x08001783
 80016f4:	08001783 	.word	0x08001783
 80016f8:	08001783 	.word	0x08001783
 80016fc:	08001783 	.word	0x08001783
 8001700:	08001783 	.word	0x08001783
 8001704:	08001783 	.word	0x08001783
 8001708:	08001783 	.word	0x08001783
 800170c:	08001783 	.word	0x08001783
 8001710:	08001783 	.word	0x08001783
 8001714:	08001783 	.word	0x08001783
 8001718:	08001731 	.word	0x08001731
 800171c:	08001745 	.word	0x08001745
 8001720:	4a79      	ldr	r2, [pc, #484]	; (8001908 <HAL_GPIO_Init+0x2b4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d013      	beq.n	800174e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001726:	e02c      	b.n	8001782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	623b      	str	r3, [r7, #32]
          break;
 800172e:	e029      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	3304      	adds	r3, #4
 8001736:	623b      	str	r3, [r7, #32]
          break;
 8001738:	e024      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	3308      	adds	r3, #8
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e01f      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	330c      	adds	r3, #12
 800174a:	623b      	str	r3, [r7, #32]
          break;
 800174c:	e01a      	b.n	8001784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001756:	2304      	movs	r3, #4
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e013      	b.n	8001784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001764:	2308      	movs	r3, #8
 8001766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	611a      	str	r2, [r3, #16]
          break;
 800176e:	e009      	b.n	8001784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001770:	2308      	movs	r3, #8
 8001772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	615a      	str	r2, [r3, #20]
          break;
 800177a:	e003      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
          break;
 8001780:	e000      	b.n	8001784 <HAL_GPIO_Init+0x130>
          break;
 8001782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2bff      	cmp	r3, #255	; 0xff
 8001788:	d801      	bhi.n	800178e <HAL_GPIO_Init+0x13a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	e001      	b.n	8001792 <HAL_GPIO_Init+0x13e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3304      	adds	r3, #4
 8001792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2bff      	cmp	r3, #255	; 0xff
 8001798:	d802      	bhi.n	80017a0 <HAL_GPIO_Init+0x14c>
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	e002      	b.n	80017a6 <HAL_GPIO_Init+0x152>
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	3b08      	subs	r3, #8
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	210f      	movs	r1, #15
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	401a      	ands	r2, r3
 80017b8:	6a39      	ldr	r1, [r7, #32]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	431a      	orrs	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 80b1 	beq.w	8001936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017d4:	4b4d      	ldr	r3, [pc, #308]	; (800190c <HAL_GPIO_Init+0x2b8>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a4c      	ldr	r2, [pc, #304]	; (800190c <HAL_GPIO_Init+0x2b8>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b4a      	ldr	r3, [pc, #296]	; (800190c <HAL_GPIO_Init+0x2b8>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017ec:	4a48      	ldr	r2, [pc, #288]	; (8001910 <HAL_GPIO_Init+0x2bc>)
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	220f      	movs	r2, #15
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a40      	ldr	r2, [pc, #256]	; (8001914 <HAL_GPIO_Init+0x2c0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d013      	beq.n	8001840 <HAL_GPIO_Init+0x1ec>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a3f      	ldr	r2, [pc, #252]	; (8001918 <HAL_GPIO_Init+0x2c4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00d      	beq.n	800183c <HAL_GPIO_Init+0x1e8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a3e      	ldr	r2, [pc, #248]	; (800191c <HAL_GPIO_Init+0x2c8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d007      	beq.n	8001838 <HAL_GPIO_Init+0x1e4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a3d      	ldr	r2, [pc, #244]	; (8001920 <HAL_GPIO_Init+0x2cc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d101      	bne.n	8001834 <HAL_GPIO_Init+0x1e0>
 8001830:	2303      	movs	r3, #3
 8001832:	e006      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 8001834:	2304      	movs	r3, #4
 8001836:	e004      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 8001838:	2302      	movs	r3, #2
 800183a:	e002      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 8001840:	2300      	movs	r3, #0
 8001842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001844:	f002 0203 	and.w	r2, r2, #3
 8001848:	0092      	lsls	r2, r2, #2
 800184a:	4093      	lsls	r3, r2
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001852:	492f      	ldr	r1, [pc, #188]	; (8001910 <HAL_GPIO_Init+0x2bc>)
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3302      	adds	r3, #2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	492c      	ldr	r1, [pc, #176]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	600b      	str	r3, [r1, #0]
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	43db      	mvns	r3, r3
 8001882:	4928      	ldr	r1, [pc, #160]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 8001884:	4013      	ands	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001894:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	4922      	ldr	r1, [pc, #136]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	491e      	ldr	r1, [pc, #120]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	4918      	ldr	r1, [pc, #96]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	4914      	ldr	r1, [pc, #80]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d021      	beq.n	8001928 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60cb      	str	r3, [r1, #12]
 80018f0:	e021      	b.n	8001936 <HAL_GPIO_Init+0x2e2>
 80018f2:	bf00      	nop
 80018f4:	10320000 	.word	0x10320000
 80018f8:	10310000 	.word	0x10310000
 80018fc:	10220000 	.word	0x10220000
 8001900:	10210000 	.word	0x10210000
 8001904:	10120000 	.word	0x10120000
 8001908:	10110000 	.word	0x10110000
 800190c:	40021000 	.word	0x40021000
 8001910:	40010000 	.word	0x40010000
 8001914:	40010800 	.word	0x40010800
 8001918:	40010c00 	.word	0x40010c00
 800191c:	40011000 	.word	0x40011000
 8001920:	40011400 	.word	0x40011400
 8001924:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_GPIO_Init+0x304>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	43db      	mvns	r3, r3
 8001930:	4909      	ldr	r1, [pc, #36]	; (8001958 <HAL_GPIO_Init+0x304>)
 8001932:	4013      	ands	r3, r2
 8001934:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	3301      	adds	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	f47f ae8e 	bne.w	8001668 <HAL_GPIO_Init+0x14>
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	372c      	adds	r7, #44	; 0x2c
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e26c      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8087 	beq.w	8001a8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800197c:	4b92      	ldr	r3, [pc, #584]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b04      	cmp	r3, #4
 8001986:	d00c      	beq.n	80019a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001988:	4b8f      	ldr	r3, [pc, #572]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b08      	cmp	r3, #8
 8001992:	d112      	bne.n	80019ba <HAL_RCC_OscConfig+0x5e>
 8001994:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a0:	d10b      	bne.n	80019ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a2:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d06c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x12c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d168      	bne.n	8001a88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e246      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x76>
 80019c4:	4b80      	ldr	r3, [pc, #512]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a7f      	ldr	r2, [pc, #508]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e02e      	b.n	8001a30 <HAL_RCC_OscConfig+0xd4>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x98>
 80019da:	4b7b      	ldr	r3, [pc, #492]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a7a      	ldr	r2, [pc, #488]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b78      	ldr	r3, [pc, #480]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a77      	ldr	r2, [pc, #476]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e01d      	b.n	8001a30 <HAL_RCC_OscConfig+0xd4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0xbc>
 80019fe:	4b72      	ldr	r3, [pc, #456]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a71      	ldr	r2, [pc, #452]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b6f      	ldr	r3, [pc, #444]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6e      	ldr	r2, [pc, #440]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0xd4>
 8001a18:	4b6b      	ldr	r3, [pc, #428]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a6a      	ldr	r2, [pc, #424]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b68      	ldr	r3, [pc, #416]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a67      	ldr	r2, [pc, #412]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7fe feb4 	bl	80007a4 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7fe feb0 	bl	80007a4 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e1fa      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b5d      	ldr	r3, [pc, #372]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0xe4>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7fe fea0 	bl	80007a4 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7fe fe9c 	bl	80007a4 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1e6      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x10c>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d063      	beq.n	8001b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a96:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aa2:	4b49      	ldr	r3, [pc, #292]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d11c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x18c>
 8001aae:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x176>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e1ba      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4939      	ldr	r1, [pc, #228]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e03a      	b.n	8001b5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7fe fe55 	bl	80007a4 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afe:	f7fe fe51 	bl	80007a4 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e19b      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4927      	ldr	r1, [pc, #156]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e015      	b.n	8001b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7fe fe34 	bl	80007a4 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b40:	f7fe fe30 	bl	80007a4 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e17a      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d03a      	beq.n	8001be0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d019      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7fe fe14 	bl	80007a4 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7fe fe10 	bl	80007a4 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e15a      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f000 fab0 	bl	8002104 <RCC_Delay>
 8001ba4:	e01c      	b.n	8001be0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7fe fdfa 	bl	80007a4 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb2:	e00f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7fe fdf6 	bl	80007a4 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d908      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e140      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	42420000 	.word	0x42420000
 8001bd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	4b9e      	ldr	r3, [pc, #632]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e9      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80a6 	beq.w	8001d3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf2:	4b97      	ldr	r3, [pc, #604]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10d      	bne.n	8001c1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b94      	ldr	r3, [pc, #592]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a93      	ldr	r2, [pc, #588]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b91      	ldr	r3, [pc, #580]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c16:	2301      	movs	r3, #1
 8001c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1a:	4b8e      	ldr	r3, [pc, #568]	; (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d118      	bne.n	8001c58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c26:	4b8b      	ldr	r3, [pc, #556]	; (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a8a      	ldr	r2, [pc, #552]	; (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c32:	f7fe fdb7 	bl	80007a4 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3a:	f7fe fdb3 	bl	80007a4 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b64      	cmp	r3, #100	; 0x64
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0fd      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	4b81      	ldr	r3, [pc, #516]	; (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x312>
 8001c60:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4a7a      	ldr	r2, [pc, #488]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6213      	str	r3, [r2, #32]
 8001c6c:	e02d      	b.n	8001cca <HAL_RCC_OscConfig+0x36e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x334>
 8001c76:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a75      	ldr	r2, [pc, #468]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	6213      	str	r3, [r2, #32]
 8001c82:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4a72      	ldr	r2, [pc, #456]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	f023 0304 	bic.w	r3, r3, #4
 8001c8c:	6213      	str	r3, [r2, #32]
 8001c8e:	e01c      	b.n	8001cca <HAL_RCC_OscConfig+0x36e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	d10c      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x356>
 8001c98:	4b6d      	ldr	r3, [pc, #436]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a6c      	ldr	r2, [pc, #432]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a69      	ldr	r2, [pc, #420]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	e00b      	b.n	8001cca <HAL_RCC_OscConfig+0x36e>
 8001cb2:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a66      	ldr	r2, [pc, #408]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	6213      	str	r3, [r2, #32]
 8001cbe:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a63      	ldr	r2, [pc, #396]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d015      	beq.n	8001cfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7fe fd67 	bl	80007a4 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7fe fd63 	bl	80007a4 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e0ab      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	4b57      	ldr	r3, [pc, #348]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0ee      	beq.n	8001cda <HAL_RCC_OscConfig+0x37e>
 8001cfc:	e014      	b.n	8001d28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7fe fd51 	bl	80007a4 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7fe fd4d 	bl	80007a4 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e095      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ee      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d105      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2e:	4b48      	ldr	r3, [pc, #288]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a47      	ldr	r2, [pc, #284]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8081 	beq.w	8001e46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d44:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d061      	beq.n	8001e14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d146      	bne.n	8001de6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d58:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <HAL_RCC_OscConfig+0x4fc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7fe fd21 	bl	80007a4 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d66:	f7fe fd1d 	bl	80007a4 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e067      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8c:	d108      	bne.n	8001da0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d8e:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	492d      	ldr	r1, [pc, #180]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a19      	ldr	r1, [r3, #32]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	430b      	orrs	r3, r1
 8001db2:	4927      	ldr	r1, [pc, #156]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig+0x4fc>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fcf1 	bl	80007a4 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe fced 	bl	80007a4 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e037      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x46a>
 8001de4:	e02f      	b.n	8001e46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <HAL_RCC_OscConfig+0x4fc>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7fe fcda 	bl	80007a4 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7fe fcd6 	bl	80007a4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e020      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x498>
 8001e12:	e018      	b.n	8001e46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e013      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40007000 	.word	0x40007000
 8001e58:	42420060 	.word	0x42420060

08001e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0d0      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e70:	4b6a      	ldr	r3, [pc, #424]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d910      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b67      	ldr	r3, [pc, #412]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 0207 	bic.w	r2, r3, #7
 8001e86:	4965      	ldr	r1, [pc, #404]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b63      	ldr	r3, [pc, #396]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0b8      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb8:	4b59      	ldr	r3, [pc, #356]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a58      	ldr	r2, [pc, #352]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ec2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed0:	4b53      	ldr	r3, [pc, #332]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a52      	ldr	r2, [pc, #328]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001edc:	4b50      	ldr	r3, [pc, #320]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	494d      	ldr	r1, [pc, #308]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d040      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	4b47      	ldr	r3, [pc, #284]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d115      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e07f      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e073      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e06b      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3a:	4b39      	ldr	r3, [pc, #228]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f023 0203 	bic.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4936      	ldr	r1, [pc, #216]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f4c:	f7fe fc2a 	bl	80007a4 <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7fe fc26 	bl	80007a4 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e053      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 020c 	and.w	r2, r3, #12
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1eb      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d210      	bcs.n	8001fac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4922      	ldr	r1, [pc, #136]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e032      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d008      	beq.n	8001fca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4916      	ldr	r1, [pc, #88]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	490e      	ldr	r1, [pc, #56]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fea:	f000 f821 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	490a      	ldr	r1, [pc, #40]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	5ccb      	ldrb	r3, [r1, r3]
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	4a09      	ldr	r2, [pc, #36]	; (8002028 <HAL_RCC_ClockConfig+0x1cc>)
 8002004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x1d0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fb88 	bl	8000720 <HAL_InitTick>

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40022000 	.word	0x40022000
 8002020:	40021000 	.word	0x40021000
 8002024:	08002634 	.word	0x08002634
 8002028:	20000000 	.word	0x20000000
 800202c:	20000004 	.word	0x20000004

08002030 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002030:	b490      	push	{r4, r7}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002036:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002038:	1d3c      	adds	r4, r7, #4
 800203a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800203c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002040:	f240 2301 	movw	r3, #513	; 0x201
 8002044:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800205a:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b04      	cmp	r3, #4
 8002068:	d002      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x40>
 800206a:	2b08      	cmp	r3, #8
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x46>
 800206e:	e02d      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002072:	623b      	str	r3, [r7, #32]
      break;
 8002074:	e02d      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	0c9b      	lsrs	r3, r3, #18
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002082:	4413      	add	r3, r2
 8002084:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002088:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d013      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0c5b      	lsrs	r3, r3, #17
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020a2:	4413      	add	r3, r2
 80020a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ae:	fb02 f203 	mul.w	r2, r2, r3
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	e004      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	623b      	str	r3, [r7, #32]
      break;
 80020ca:	e002      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ce:	623b      	str	r3, [r7, #32]
      break;
 80020d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d2:	6a3b      	ldr	r3, [r7, #32]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3728      	adds	r7, #40	; 0x28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc90      	pop	{r4, r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	08002624 	.word	0x08002624
 80020e4:	40021000 	.word	0x40021000
 80020e8:	007a1200 	.word	0x007a1200
 80020ec:	003d0900 	.word	0x003d0900

080020f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f4:	4b02      	ldr	r3, [pc, #8]	; (8002100 <HAL_RCC_GetHCLKFreq+0x10>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20000000 	.word	0x20000000

08002104 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <RCC_Delay+0x34>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0a      	ldr	r2, [pc, #40]	; (800213c <RCC_Delay+0x38>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0a5b      	lsrs	r3, r3, #9
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002120:	bf00      	nop
  }
  while (Delay --);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1e5a      	subs	r2, r3, #1
 8002126:	60fa      	str	r2, [r7, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f9      	bne.n	8002120 <RCC_Delay+0x1c>
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	20000000 	.word	0x20000000
 800213c:	10624dd3 	.word	0x10624dd3

08002140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e041      	b.n	80021d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7fe fa06 	bl	8000578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3304      	adds	r3, #4
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f000 f9ac 	bl	80024dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d001      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e03a      	b.n	800226e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a18      	ldr	r2, [pc, #96]	; (8002278 <HAL_TIM_Base_Start_IT+0x98>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00e      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x58>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002222:	d009      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x58>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <HAL_TIM_Base_Start_IT+0x9c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d004      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x58>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a13      	ldr	r2, [pc, #76]	; (8002280 <HAL_TIM_Base_Start_IT+0xa0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d111      	bne.n	800225c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b06      	cmp	r3, #6
 8002248:	d010      	beq.n	800226c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225a:	e007      	b.n	800226c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40012c00 	.word	0x40012c00
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800

08002284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b02      	cmp	r3, #2
 8002298:	d122      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d11b      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0202 	mvn.w	r2, #2
 80022b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f8ed 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f8e0 	bl	8002494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f8ef 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0204 	mvn.w	r2, #4
 8002304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f8c3 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f8b6 	bl	8002494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f8c5 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b08      	cmp	r3, #8
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0208 	mvn.w	r2, #8
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2204      	movs	r2, #4
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f899 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f88c 	bl	8002494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f89b 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b10      	cmp	r3, #16
 8002394:	d122      	bne.n	80023dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d11b      	bne.n	80023dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0210 	mvn.w	r2, #16
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2208      	movs	r2, #8
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f86f 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f862 	bl	8002494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f871 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0201 	mvn.w	r2, #1
 8002400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fd fefe 	bl	8000204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b80      	cmp	r3, #128	; 0x80
 8002414:	d10e      	bne.n	8002434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b80      	cmp	r3, #128	; 0x80
 8002422:	d107      	bne.n	8002434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800242c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f8bf 	bl	80025b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	2b40      	cmp	r3, #64	; 0x40
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d107      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f835 	bl	80024ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b20      	cmp	r3, #32
 800246c:	d10e      	bne.n	800248c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b20      	cmp	r3, #32
 800247a:	d107      	bne.n	800248c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0220 	mvn.w	r2, #32
 8002484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f88a 	bl	80025a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a29      	ldr	r2, [pc, #164]	; (8002594 <TIM_Base_SetConfig+0xb8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00b      	beq.n	800250c <TIM_Base_SetConfig+0x30>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fa:	d007      	beq.n	800250c <TIM_Base_SetConfig+0x30>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a26      	ldr	r2, [pc, #152]	; (8002598 <TIM_Base_SetConfig+0xbc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d003      	beq.n	800250c <TIM_Base_SetConfig+0x30>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a25      	ldr	r2, [pc, #148]	; (800259c <TIM_Base_SetConfig+0xc0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d108      	bne.n	800251e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <TIM_Base_SetConfig+0xb8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00b      	beq.n	800253e <TIM_Base_SetConfig+0x62>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252c:	d007      	beq.n	800253e <TIM_Base_SetConfig+0x62>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a19      	ldr	r2, [pc, #100]	; (8002598 <TIM_Base_SetConfig+0xbc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d003      	beq.n	800253e <TIM_Base_SetConfig+0x62>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a18      	ldr	r2, [pc, #96]	; (800259c <TIM_Base_SetConfig+0xc0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d108      	bne.n	8002550 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a07      	ldr	r2, [pc, #28]	; (8002594 <TIM_Base_SetConfig+0xb8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d103      	bne.n	8002584 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	615a      	str	r2, [r3, #20]
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40000400 	.word	0x40000400
 800259c:	40000800 	.word	0x40000800

080025a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <__libc_init_array>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	2600      	movs	r6, #0
 80025c8:	4d0c      	ldr	r5, [pc, #48]	; (80025fc <__libc_init_array+0x38>)
 80025ca:	4c0d      	ldr	r4, [pc, #52]	; (8002600 <__libc_init_array+0x3c>)
 80025cc:	1b64      	subs	r4, r4, r5
 80025ce:	10a4      	asrs	r4, r4, #2
 80025d0:	42a6      	cmp	r6, r4
 80025d2:	d109      	bne.n	80025e8 <__libc_init_array+0x24>
 80025d4:	f000 f81a 	bl	800260c <_init>
 80025d8:	2600      	movs	r6, #0
 80025da:	4d0a      	ldr	r5, [pc, #40]	; (8002604 <__libc_init_array+0x40>)
 80025dc:	4c0a      	ldr	r4, [pc, #40]	; (8002608 <__libc_init_array+0x44>)
 80025de:	1b64      	subs	r4, r4, r5
 80025e0:	10a4      	asrs	r4, r4, #2
 80025e2:	42a6      	cmp	r6, r4
 80025e4:	d105      	bne.n	80025f2 <__libc_init_array+0x2e>
 80025e6:	bd70      	pop	{r4, r5, r6, pc}
 80025e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ec:	4798      	blx	r3
 80025ee:	3601      	adds	r6, #1
 80025f0:	e7ee      	b.n	80025d0 <__libc_init_array+0xc>
 80025f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f6:	4798      	blx	r3
 80025f8:	3601      	adds	r6, #1
 80025fa:	e7f2      	b.n	80025e2 <__libc_init_array+0x1e>
 80025fc:	08002644 	.word	0x08002644
 8002600:	08002644 	.word	0x08002644
 8002604:	08002644 	.word	0x08002644
 8002608:	08002648 	.word	0x08002648

0800260c <_init>:
 800260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260e:	bf00      	nop
 8002610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002612:	bc08      	pop	{r3}
 8002614:	469e      	mov	lr, r3
 8002616:	4770      	bx	lr

08002618 <_fini>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	bf00      	nop
 800261c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261e:	bc08      	pop	{r3}
 8002620:	469e      	mov	lr, r3
 8002622:	4770      	bx	lr
