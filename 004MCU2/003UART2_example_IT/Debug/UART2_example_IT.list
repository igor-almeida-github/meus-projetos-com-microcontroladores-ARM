
UART2_example_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ae8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001c70  08001c70  00011c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c98  08001c98  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08001c98  08001c98  00011c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ca0  08001ca0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ca0  08001ca0  00011ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ca4  08001ca4  00011ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000010  08001cb8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08001cb8  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000747b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001515  00000000  00000000  000274bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  000289d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  00029028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb03  00000000  00000000  00029608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000072c7  00000000  00000000  0004910b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1352  00000000  00000000  000503d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00111724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018e0  00000000  00000000  00111778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001c58 	.word	0x08001c58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001c58 	.word	0x08001c58

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <SysTick_Handler>:

#include "stm32f4xx_hal.h"

extern UART_HandleTypeDef huart2;

void SysTick_Handler(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004d4:	f000 f994 	bl	8000800 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004d8:	f000 fac3 	bl	8000a62 <HAL_SYSTICK_IRQHandler>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <USART2_IRQHandler+0x10>)
 80004e6:	f000 fe3b 	bl	8001160 <HAL_UART_IRQHandler>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000038 	.word	0x20000038

080004f4 <main>:

/************************************************************************************
 *                             MAIN                                                 *
 ************************************************************************************/

int main(void){
 80004f4:	b598      	push	{r3, r4, r7, lr}
 80004f6:	af00      	add	r7, sp, #0

	// This should be the first function to be called
	HAL_Init();
 80004f8:	f000 f930 	bl	800075c <HAL_Init>

	// Clock config
	SystemClockConfig();
 80004fc:	f000 f856 	bl	80005ac <SystemClockConfig>

	// Init the UART2
	UART2_Init();
 8000500:	f000 f85c 	bl	80005bc <UART2_Init>

	// Send data in blocking mode
	if(HAL_UART_Transmit(&huart2, (uint8_t *)user_data, strlen(user_data), HAL_MAX_DELAY) != HAL_OK)
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <main+0x50>)
 8000506:	681c      	ldr	r4, [r3, #0]
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <main+0x50>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff fe5b 	bl	80001c8 <strlen>
 8000512:	4603      	mov	r3, r0
 8000514:	b29a      	uxth	r2, r3
 8000516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800051a:	4621      	mov	r1, r4
 800051c:	480a      	ldr	r0, [pc, #40]	; (8000548 <main+0x54>)
 800051e:	f000 fd5c 	bl	8000fda <HAL_UART_Transmit>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d007      	beq.n	8000538 <main+0x44>
		Error_handler();
 8000528:	f000 f86e 	bl	8000608 <Error_handler>

	// Receive data in Interrupt Mode
	while(reception_state != RECEPTION_COMPLETE)
 800052c:	e004      	b.n	8000538 <main+0x44>
		HAL_UART_Receive_IT(&huart2, &received_data, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	4906      	ldr	r1, [pc, #24]	; (800054c <main+0x58>)
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <main+0x54>)
 8000534:	f000 fde3 	bl	80010fe <HAL_UART_Receive_IT>
	while(reception_state != RECEPTION_COMPLETE)
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <main+0x5c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d1f6      	bne.n	800052e <main+0x3a>

	for(;;){
 8000540:	e7fe      	b.n	8000540 <main+0x4c>
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20000038 	.word	0x20000038
 800054c:	20000034 	.word	0x20000034
 8000550:	2000002c 	.word	0x2000002c

08000554 <HAL_UART_RxCpltCallback>:

/************************************************************************************
 *                             FUNCTIONS                                            *
 ************************************************************************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;

	data_buffer[count++] = received_data;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <HAL_UART_RxCpltCallback+0x48>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	1c5a      	adds	r2, r3, #1
 8000562:	490e      	ldr	r1, [pc, #56]	; (800059c <HAL_UART_RxCpltCallback+0x48>)
 8000564:	600a      	str	r2, [r1, #0]
 8000566:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <HAL_UART_RxCpltCallback+0x4c>)
 8000568:	7811      	ldrb	r1, [r2, #0]
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <HAL_UART_RxCpltCallback+0x50>)
 800056c:	54d1      	strb	r1, [r2, r3]

	if(received_data == '\r'){
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_UART_RxCpltCallback+0x4c>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b0d      	cmp	r3, #13
 8000574:	d10d      	bne.n	8000592 <HAL_UART_RxCpltCallback+0x3e>
		reception_state = RECEPTION_COMPLETE;
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <HAL_UART_RxCpltCallback+0x54>)
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(huart, (uint8_t *)data_buffer, strlen(data_buffer), HAL_MAX_DELAY);
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <HAL_UART_RxCpltCallback+0x50>)
 800057e:	f7ff fe23 	bl	80001c8 <strlen>
 8000582:	4603      	mov	r3, r0
 8000584:	b29a      	uxth	r2, r3
 8000586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058a:	4906      	ldr	r1, [pc, #24]	; (80005a4 <HAL_UART_RxCpltCallback+0x50>)
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 fd24 	bl	8000fda <HAL_UART_Transmit>
	}

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000030 	.word	0x20000030
 80005a0:	20000034 	.word	0x20000034
 80005a4:	2000007c 	.word	0x2000007c
 80005a8:	2000002c 	.word	0x2000002c

080005ac <SystemClockConfig>:

void SystemClockConfig(void){
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <UART2_Init>:


void UART2_Init(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <UART2_Init+0x44>)
 80005c2:	4a10      	ldr	r2, [pc, #64]	; (8000604 <UART2_Init+0x48>)
 80005c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <UART2_Init+0x44>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <UART2_Init+0x44>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <UART2_Init+0x44>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <UART2_Init+0x44>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <UART2_Init+0x44>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <UART2_Init+0x44>)
 80005e8:	220c      	movs	r2, #12
 80005ea:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <UART2_Init+0x44>)
 80005ee:	f000 fca7 	bl	8000f40 <HAL_UART_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <UART2_Init+0x40>
		Error_handler();
 80005f8:	f000 f806 	bl	8000608 <Error_handler>
	}

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000038 	.word	0x20000038
 8000604:	40004400 	.word	0x40004400

08000608 <Error_handler>:

void Error_handler(void){
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	while(1);
 800060c:	e7fe      	b.n	800060c <Error_handler+0x4>
	...

08000610 <HAL_MspInit>:
 */

#include "stm32f4xx_hal.h"

/* Low Level processor Init. Called by HAL_Init()*/
void HAL_MspInit(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 f9e3 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x07 << 16;  // En: usg fault, memory fault and bus fault
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <HAL_MspInit+0x40>)
 800061c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061e:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <HAL_MspInit+0x40>)
 8000620:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000624:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	f06f 000b 	mvn.w	r0, #11
 800062e:	f000 f9e2 	bl	80009f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	f06f 000a 	mvn.w	r0, #10
 800063a:	f000 f9dc 	bl	80009f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	f06f 0009 	mvn.w	r0, #9
 8000646:	f000 f9d6 	bl	80009f6 <HAL_NVIC_SetPriority>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_UART_MspInit>:

/* Low level UART init. Called by HAL_UART_Init()*/
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	// 1. Enable the clock for the USART2 peripheral and GPIOA
	__HAL_RCC_USART2_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <HAL_UART_MspInit+0x88>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <HAL_UART_MspInit+0x88>)
 8000666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_UART_MspInit+0x88>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_UART_MspInit+0x88>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	4a16      	ldr	r2, [pc, #88]	; (80006dc <HAL_UART_MspInit+0x88>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	6313      	str	r3, [r2, #48]	; 0x30
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <HAL_UART_MspInit+0x88>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]

	// 2. Do the pin muxing configurations
	GPIO_InitTypeDef gpio_uart;
	gpio_uart.Pin = GPIO_PIN_2;
 8000694:	2304      	movs	r3, #4
 8000696:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80006a4:	2307      	movs	r3, #7
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);  // UART2 TX
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	480c      	ldr	r0, [pc, #48]	; (80006e0 <HAL_UART_MspInit+0x8c>)
 80006b0:	f000 fa76 	bl	8000ba0 <HAL_GPIO_Init>
	gpio_uart.Pin = GPIO_PIN_3;
 80006b4:	2308      	movs	r3, #8
 80006b6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);  // UART2 RX
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4808      	ldr	r0, [pc, #32]	; (80006e0 <HAL_UART_MspInit+0x8c>)
 80006c0:	f000 fa6e 	bl	8000ba0 <HAL_GPIO_Init>

	// 3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006c4:	2026      	movs	r0, #38	; 0x26
 80006c6:	f000 f9b2 	bl	8000a2e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	210f      	movs	r1, #15
 80006ce:	2026      	movs	r0, #38	; 0x26
 80006d0:	f000 f991 	bl	80009f6 <HAL_NVIC_SetPriority>

}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	; 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020000 	.word	0x40020000

080006e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <SystemInit+0x20>)
 80006ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ee:	4a05      	ldr	r2, [pc, #20]	; (8000704 <SystemInit+0x20>)
 80006f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000740 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800070e:	490e      	ldr	r1, [pc, #56]	; (8000748 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000710:	4a0e      	ldr	r2, [pc, #56]	; (800074c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000724:	4c0b      	ldr	r4, [pc, #44]	; (8000754 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000732:	f7ff ffd7 	bl	80006e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000736:	f001 fa6b 	bl	8001c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800073a:	f7ff fedb 	bl	80004f4 <main>
  bx  lr    
 800073e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800074c:	08001ca8 	.word	0x08001ca8
  ldr r2, =_sbss
 8000750:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000754:	200000e4 	.word	0x200000e4

08000758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC_IRQHandler>
	...

0800075c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <HAL_Init+0x40>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0d      	ldr	r2, [pc, #52]	; (800079c <HAL_Init+0x40>)
 8000766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800076a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <HAL_Init+0x40>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <HAL_Init+0x40>)
 8000772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_Init+0x40>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <HAL_Init+0x40>)
 800077e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000784:	2003      	movs	r0, #3
 8000786:	f000 f92b 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078a:	2000      	movs	r0, #0
 800078c:	f000 f808 	bl	80007a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000790:	f7ff ff3e 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023c00 	.word	0x40023c00

080007a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_InitTick+0x54>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_InitTick+0x58>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4619      	mov	r1, r3
 80007b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f943 	bl	8000a4a <HAL_SYSTICK_Config>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e00e      	b.n	80007ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b0f      	cmp	r3, #15
 80007d2:	d80a      	bhi.n	80007ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d4:	2200      	movs	r2, #0
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007dc:	f000 f90b 	bl	80009f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e0:	4a06      	ldr	r2, [pc, #24]	; (80007fc <HAL_InitTick+0x5c>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e6:	2300      	movs	r3, #0
 80007e8:	e000      	b.n	80007ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000004 	.word	0x20000004
 80007f8:	2000000c 	.word	0x2000000c
 80007fc:	20000008 	.word	0x20000008

08000800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_IncTick+0x20>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_IncTick+0x24>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4413      	add	r3, r2
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <HAL_IncTick+0x24>)
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	2000000c 	.word	0x2000000c
 8000824:	200000e0 	.word	0x200000e0

08000828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <HAL_GetTick+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	200000e0 	.word	0x200000e0

08000840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <__NVIC_SetPriorityGrouping+0x44>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800085c:	4013      	ands	r3, r2
 800085e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800086c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000872:	4a04      	ldr	r2, [pc, #16]	; (8000884 <__NVIC_SetPriorityGrouping+0x44>)
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	60d3      	str	r3, [r2, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <__NVIC_GetPriorityGrouping+0x18>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	f003 0307 	and.w	r3, r3, #7
}
 8000896:	4618      	mov	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	db0b      	blt.n	80008ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 021f 	and.w	r2, r3, #31
 80008bc:	4907      	ldr	r1, [pc, #28]	; (80008dc <__NVIC_EnableIRQ+0x38>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	095b      	lsrs	r3, r3, #5
 80008c4:	2001      	movs	r0, #1
 80008c6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000e100 	.word	0xe000e100

080008e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	; (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f1c3 0307 	rsb	r3, r3, #7
 800094e:	2b04      	cmp	r3, #4
 8000950:	bf28      	it	cs
 8000952:	2304      	movcs	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3304      	adds	r3, #4
 800095a:	2b06      	cmp	r3, #6
 800095c:	d902      	bls.n	8000964 <NVIC_EncodePriority+0x30>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3b03      	subs	r3, #3
 8000962:	e000      	b.n	8000966 <NVIC_EncodePriority+0x32>
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800097c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	4313      	orrs	r3, r2
         );
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	; 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ac:	d301      	bcc.n	80009b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00f      	b.n	80009d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <SysTick_Config+0x40>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ba:	210f      	movs	r1, #15
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009c0:	f7ff ff8e 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <SysTick_Config+0x40>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <SysTick_Config+0x40>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff29 	bl	8000840 <__NVIC_SetPriorityGrouping>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a08:	f7ff ff3e 	bl	8000888 <__NVIC_GetPriorityGrouping>
 8000a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	6978      	ldr	r0, [r7, #20]
 8000a14:	f7ff ff8e 	bl	8000934 <NVIC_EncodePriority>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff5d 	bl	80008e0 <__NVIC_SetPriority>
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff31 	bl	80008a4 <__NVIC_EnableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffa2 	bl	800099c <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a66:	f000 f802 	bl	8000a6e <HAL_SYSTICK_Callback>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000a8a:	f7ff fecd 	bl	8000828 <HAL_GetTick>
 8000a8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d008      	beq.n	8000aae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e052      	b.n	8000b54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f022 0216 	bic.w	r2, r2, #22
 8000abc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	695a      	ldr	r2, [r3, #20]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000acc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d103      	bne.n	8000ade <HAL_DMA_Abort+0x62>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d007      	beq.n	8000aee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f022 0208 	bic.w	r2, r2, #8
 8000aec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f022 0201 	bic.w	r2, r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000afe:	e013      	b.n	8000b28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b00:	f7ff fe92 	bl	8000828 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	d90c      	bls.n	8000b28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2220      	movs	r2, #32
 8000b12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2203      	movs	r2, #3
 8000b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000b24:	2303      	movs	r3, #3
 8000b26:	e015      	b.n	8000b54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1e4      	bne.n	8000b00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b3a:	223f      	movs	r2, #63	; 0x3f
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d004      	beq.n	8000b7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00c      	b.n	8000b94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2205      	movs	r2, #5
 8000b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f022 0201 	bic.w	r2, r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	e16b      	b.n	8000e94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	f040 815a 	bne.w	8000e8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d005      	beq.n	8000bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d130      	bne.n	8000c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4013      	ands	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	f003 0201 	and.w	r2, r3, #1
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d017      	beq.n	8000c90 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d123      	bne.n	8000ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	08da      	lsrs	r2, r3, #3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3208      	adds	r2, #8
 8000ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	220f      	movs	r2, #15
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	691a      	ldr	r2, [r3, #16]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	08da      	lsrs	r2, r3, #3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3208      	adds	r2, #8
 8000cde:	69b9      	ldr	r1, [r7, #24]
 8000ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2203      	movs	r2, #3
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0203 	and.w	r2, r3, #3
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f000 80b4 	beq.w	8000e8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b60      	ldr	r3, [pc, #384]	; (8000eac <HAL_GPIO_Init+0x30c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a5f      	ldr	r2, [pc, #380]	; (8000eac <HAL_GPIO_Init+0x30c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b5d      	ldr	r3, [pc, #372]	; (8000eac <HAL_GPIO_Init+0x30c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d42:	4a5b      	ldr	r2, [pc, #364]	; (8000eb0 <HAL_GPIO_Init+0x310>)
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	3302      	adds	r3, #2
 8000d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	220f      	movs	r2, #15
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a52      	ldr	r2, [pc, #328]	; (8000eb4 <HAL_GPIO_Init+0x314>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d02b      	beq.n	8000dc6 <HAL_GPIO_Init+0x226>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a51      	ldr	r2, [pc, #324]	; (8000eb8 <HAL_GPIO_Init+0x318>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d025      	beq.n	8000dc2 <HAL_GPIO_Init+0x222>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a50      	ldr	r2, [pc, #320]	; (8000ebc <HAL_GPIO_Init+0x31c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d01f      	beq.n	8000dbe <HAL_GPIO_Init+0x21e>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4f      	ldr	r2, [pc, #316]	; (8000ec0 <HAL_GPIO_Init+0x320>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d019      	beq.n	8000dba <HAL_GPIO_Init+0x21a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4e      	ldr	r2, [pc, #312]	; (8000ec4 <HAL_GPIO_Init+0x324>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d013      	beq.n	8000db6 <HAL_GPIO_Init+0x216>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4d      	ldr	r2, [pc, #308]	; (8000ec8 <HAL_GPIO_Init+0x328>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d00d      	beq.n	8000db2 <HAL_GPIO_Init+0x212>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4c      	ldr	r2, [pc, #304]	; (8000ecc <HAL_GPIO_Init+0x32c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d007      	beq.n	8000dae <HAL_GPIO_Init+0x20e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4b      	ldr	r2, [pc, #300]	; (8000ed0 <HAL_GPIO_Init+0x330>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d101      	bne.n	8000daa <HAL_GPIO_Init+0x20a>
 8000da6:	2307      	movs	r3, #7
 8000da8:	e00e      	b.n	8000dc8 <HAL_GPIO_Init+0x228>
 8000daa:	2308      	movs	r3, #8
 8000dac:	e00c      	b.n	8000dc8 <HAL_GPIO_Init+0x228>
 8000dae:	2306      	movs	r3, #6
 8000db0:	e00a      	b.n	8000dc8 <HAL_GPIO_Init+0x228>
 8000db2:	2305      	movs	r3, #5
 8000db4:	e008      	b.n	8000dc8 <HAL_GPIO_Init+0x228>
 8000db6:	2304      	movs	r3, #4
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x228>
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e004      	b.n	8000dc8 <HAL_GPIO_Init+0x228>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e002      	b.n	8000dc8 <HAL_GPIO_Init+0x228>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <HAL_GPIO_Init+0x228>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	69fa      	ldr	r2, [r7, #28]
 8000dca:	f002 0203 	and.w	r2, r2, #3
 8000dce:	0092      	lsls	r2, r2, #2
 8000dd0:	4093      	lsls	r3, r2
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd8:	4935      	ldr	r1, [pc, #212]	; (8000eb0 <HAL_GPIO_Init+0x310>)
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de6:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <HAL_GPIO_Init+0x334>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e0a:	4a32      	ldr	r2, [pc, #200]	; (8000ed4 <HAL_GPIO_Init+0x334>)
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e10:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <HAL_GPIO_Init+0x334>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e34:	4a27      	ldr	r2, [pc, #156]	; (8000ed4 <HAL_GPIO_Init+0x334>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e3a:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <HAL_GPIO_Init+0x334>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e5e:	4a1d      	ldr	r2, [pc, #116]	; (8000ed4 <HAL_GPIO_Init+0x334>)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_GPIO_Init+0x334>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e88:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <HAL_GPIO_Init+0x334>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3301      	adds	r3, #1
 8000e92:	61fb      	str	r3, [r7, #28]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	2b0f      	cmp	r3, #15
 8000e98:	f67f ae90 	bls.w	8000bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40013800 	.word	0x40013800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40021400 	.word	0x40021400
 8000ecc:	40021800 	.word	0x40021800
 8000ed0:	40021c00 	.word	0x40021c00
 8000ed4:	40013c00 	.word	0x40013c00

08000ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_RCC_GetHCLKFreq+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ef4:	f7ff fff0 	bl	8000ed8 <HAL_RCC_GetHCLKFreq>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	0a9b      	lsrs	r3, r3, #10
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	4903      	ldr	r1, [pc, #12]	; (8000f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f06:	5ccb      	ldrb	r3, [r1, r3]
 8000f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40023800 	.word	0x40023800
 8000f14:	08001c90 	.word	0x08001c90

08000f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f1c:	f7ff ffdc 	bl	8000ed8 <HAL_RCC_GetHCLKFreq>
 8000f20:	4602      	mov	r2, r0
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	0b5b      	lsrs	r3, r3, #13
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	4903      	ldr	r1, [pc, #12]	; (8000f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f2e:	5ccb      	ldrb	r3, [r1, r3]
 8000f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	08001c90 	.word	0x08001c90

08000f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e03f      	b.n	8000fd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d106      	bne.n	8000f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fb74 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2224      	movs	r2, #36	; 0x24
 8000f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 fc7b 	bl	8001880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2220      	movs	r2, #32
 8000fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b08a      	sub	sp, #40	; 0x28
 8000fde:	af02      	add	r7, sp, #8
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b20      	cmp	r3, #32
 8000ff8:	d17c      	bne.n	80010f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <HAL_UART_Transmit+0x2c>
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e075      	b.n	80010f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <HAL_UART_Transmit+0x3e>
 8001014:	2302      	movs	r3, #2
 8001016:	e06e      	b.n	80010f6 <HAL_UART_Transmit+0x11c>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2221      	movs	r2, #33	; 0x21
 800102a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800102e:	f7ff fbfb 	bl	8000828 <HAL_GetTick>
 8001032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	88fa      	ldrh	r2, [r7, #6]
 800103e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001048:	d108      	bne.n	800105c <HAL_UART_Transmit+0x82>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d104      	bne.n	800105c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	e003      	b.n	8001064 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800106c:	e02a      	b.n	80010c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2200      	movs	r2, #0
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f000 fa3d 	bl	80014f8 <UART_WaitOnFlagUntilTimeout>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e036      	b.n	80010f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10b      	bne.n	80010a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800109c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	3302      	adds	r3, #2
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	e007      	b.n	80010b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	781a      	ldrb	r2, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	3301      	adds	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	3b01      	subs	r3, #1
 80010be:	b29a      	uxth	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1cf      	bne.n	800106e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2200      	movs	r2, #0
 80010d6:	2140      	movs	r1, #64	; 0x40
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f000 fa0d 	bl	80014f8 <UART_WaitOnFlagUntilTimeout>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e006      	b.n	80010f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2220      	movs	r2, #32
 80010ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e000      	b.n	80010f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80010f4:	2302      	movs	r3, #2
  }
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	4613      	mov	r3, r2
 800110a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b20      	cmp	r3, #32
 8001116:	d11d      	bne.n	8001154 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <HAL_UART_Receive_IT+0x26>
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e016      	b.n	8001156 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800112e:	2b01      	cmp	r3, #1
 8001130:	d101      	bne.n	8001136 <HAL_UART_Receive_IT+0x38>
 8001132:	2302      	movs	r3, #2
 8001134:	e00f      	b.n	8001156 <HAL_UART_Receive_IT+0x58>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2200      	movs	r2, #0
 8001142:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	461a      	mov	r2, r3
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 fa1e 	bl	800158c <UART_Start_Receive_IT>
 8001150:	4603      	mov	r3, r0
 8001152:	e000      	b.n	8001156 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001154:	2302      	movs	r3, #2
  }
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10d      	bne.n	80011b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d008      	beq.n	80011b2 <HAL_UART_IRQHandler+0x52>
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	f003 0320 	and.w	r3, r3, #32
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 fad1 	bl	8001752 <UART_Receive_IT>
      return;
 80011b0:	e17c      	b.n	80014ac <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80b1 	beq.w	800131c <HAL_UART_IRQHandler+0x1bc>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_UART_IRQHandler+0x70>
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 80a6 	beq.w	800131c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00a      	beq.n	80011f0 <HAL_UART_IRQHandler+0x90>
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00a      	beq.n	8001210 <HAL_UART_IRQHandler+0xb0>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f043 0202 	orr.w	r2, r3, #2
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00a      	beq.n	8001230 <HAL_UART_IRQHandler+0xd0>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f043 0204 	orr.w	r2, r3, #4
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00f      	beq.n	800125a <HAL_UART_IRQHandler+0xfa>
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	f003 0320 	and.w	r3, r3, #32
 8001240:	2b00      	cmp	r3, #0
 8001242:	d104      	bne.n	800124e <HAL_UART_IRQHandler+0xee>
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f043 0208 	orr.w	r2, r3, #8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 811f 	beq.w	80014a2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	f003 0320 	and.w	r3, r3, #32
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <HAL_UART_IRQHandler+0x11e>
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	f003 0320 	and.w	r3, r3, #32
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 fa6a 	bl	8001752 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001288:	2b40      	cmp	r3, #64	; 0x40
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <HAL_UART_IRQHandler+0x146>
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d031      	beq.n	800130a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f9aa 	bl	8001600 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b6:	2b40      	cmp	r3, #64	; 0x40
 80012b8:	d123      	bne.n	8001302 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	695a      	ldr	r2, [r3, #20]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d013      	beq.n	80012fa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d6:	4a77      	ldr	r2, [pc, #476]	; (80014b4 <HAL_UART_IRQHandler+0x354>)
 80012d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fc3c 	bl	8000b5c <HAL_DMA_Abort_IT>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d016      	beq.n	8001318 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012f4:	4610      	mov	r0, r2
 80012f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012f8:	e00e      	b.n	8001318 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f8e6 	bl	80014cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001300:	e00a      	b.n	8001318 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f8e2 	bl	80014cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001308:	e006      	b.n	8001318 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f8de 	bl	80014cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001316:	e0c4      	b.n	80014a2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001318:	bf00      	nop
    return;
 800131a:	e0c2      	b.n	80014a2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	2b01      	cmp	r3, #1
 8001322:	f040 80a2 	bne.w	800146a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 809c 	beq.w	800146a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	f003 0310 	and.w	r3, r3, #16
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 8096 	beq.w	800146a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135e:	2b40      	cmp	r3, #64	; 0x40
 8001360:	d14f      	bne.n	8001402 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800136c:	8a3b      	ldrh	r3, [r7, #16]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8099 	beq.w	80014a6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001378:	8a3a      	ldrh	r2, [r7, #16]
 800137a:	429a      	cmp	r2, r3
 800137c:	f080 8093 	bcs.w	80014a6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	8a3a      	ldrh	r2, [r7, #16]
 8001384:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001390:	d02b      	beq.n	80013ea <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013a0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0201 	bic.w	r2, r2, #1
 80013b0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013c0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2220      	movs	r2, #32
 80013c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0210 	bic.w	r2, r2, #16
 80013de:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fb49 	bl	8000a7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f870 	bl	80014e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001400:	e051      	b.n	80014a6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800140a:	b29b      	uxth	r3, r3
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001414:	b29b      	uxth	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d047      	beq.n	80014aa <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800141a:	8a7b      	ldrh	r3, [r7, #18]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d044      	beq.n	80014aa <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800142e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2220      	movs	r2, #32
 8001444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0210 	bic.w	r2, r2, #16
 800145c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800145e:	8a7b      	ldrh	r3, [r7, #18]
 8001460:	4619      	mov	r1, r3
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f83c 	bl	80014e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001468:	e01f      	b.n	80014aa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <HAL_UART_IRQHandler+0x326>
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f8ff 	bl	8001682 <UART_Transmit_IT>
    return;
 8001484:	e012      	b.n	80014ac <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00d      	beq.n	80014ac <HAL_UART_IRQHandler+0x34c>
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001496:	2b00      	cmp	r3, #0
 8001498:	d008      	beq.n	80014ac <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f941 	bl	8001722 <UART_EndTransmit_IT>
    return;
 80014a0:	e004      	b.n	80014ac <HAL_UART_IRQHandler+0x34c>
    return;
 80014a2:	bf00      	nop
 80014a4:	e002      	b.n	80014ac <HAL_UART_IRQHandler+0x34c>
      return;
 80014a6:	bf00      	nop
 80014a8:	e000      	b.n	80014ac <HAL_UART_IRQHandler+0x34c>
      return;
 80014aa:	bf00      	nop
  }
}
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	0800165b 	.word	0x0800165b

080014b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	4613      	mov	r3, r2
 8001506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001508:	e02c      	b.n	8001564 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001510:	d028      	beq.n	8001564 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d007      	beq.n	8001528 <UART_WaitOnFlagUntilTimeout+0x30>
 8001518:	f7ff f986 	bl	8000828 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	429a      	cmp	r2, r3
 8001526:	d21d      	bcs.n	8001564 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001536:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2220      	movs	r2, #32
 800154c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2220      	movs	r2, #32
 8001554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e00f      	b.n	8001584 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	4013      	ands	r3, r2
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	429a      	cmp	r2, r3
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	429a      	cmp	r2, r3
 8001580:	d0c3      	beq.n	800150a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	4613      	mov	r3, r2
 8001598:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	88fa      	ldrh	r2, [r7, #6]
 80015a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	88fa      	ldrh	r2, [r7, #6]
 80015aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2222      	movs	r2, #34	; 0x22
 80015b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015d0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 0201 	orr.w	r2, r2, #1
 80015e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0220 	orr.w	r2, r2, #32
 80015f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001616:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	2b01      	cmp	r3, #1
 800162e:	d107      	bne.n	8001640 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0210 	bic.w	r2, r2, #16
 800163e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2220      	movs	r2, #32
 8001644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001666:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff ff29 	bl	80014cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001682:	b480      	push	{r7}
 8001684:	b085      	sub	sp, #20
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b21      	cmp	r3, #33	; 0x21
 8001694:	d13e      	bne.n	8001714 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800169e:	d114      	bne.n	80016ca <UART_Transmit_IT+0x48>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d110      	bne.n	80016ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	1c9a      	adds	r2, r3, #2
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	621a      	str	r2, [r3, #32]
 80016c8:	e008      	b.n	80016dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	1c59      	adds	r1, r3, #1
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6211      	str	r1, [r2, #32]
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4619      	mov	r1, r3
 80016ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10f      	bne.n	8001710 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800170e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	e000      	b.n	8001716 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001714:	2302      	movs	r3, #2
  }
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001738:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2220      	movs	r2, #32
 800173e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff feb8 	bl	80014b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b22      	cmp	r3, #34	; 0x22
 8001764:	f040 8087 	bne.w	8001876 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001770:	d117      	bne.n	80017a2 <UART_Receive_IT+0x50>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d113      	bne.n	80017a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	b29b      	uxth	r3, r3
 800178c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001790:	b29a      	uxth	r2, r3
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	1c9a      	adds	r2, r3, #2
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
 80017a0:	e026      	b.n	80017f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b4:	d007      	beq.n	80017c6 <UART_Receive_IT+0x74>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10a      	bne.n	80017d4 <UART_Receive_IT+0x82>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d106      	bne.n	80017d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	e008      	b.n	80017e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4619      	mov	r1, r3
 80017fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001800:	2b00      	cmp	r3, #0
 8001802:	d136      	bne.n	8001872 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0220 	bic.w	r2, r2, #32
 8001812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001822:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0201 	bic.w	r2, r2, #1
 8001832:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2220      	movs	r2, #32
 8001838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	2b01      	cmp	r3, #1
 8001842:	d10e      	bne.n	8001862 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0210 	bic.w	r2, r2, #16
 8001852:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001858:	4619      	mov	r1, r3
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fe40 	bl	80014e0 <HAL_UARTEx_RxEventCallback>
 8001860:	e002      	b.n	8001868 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7fe fe76 	bl	8000554 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e002      	b.n	8001878 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001876:	2302      	movs	r3, #2
  }
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001884:	b09f      	sub	sp, #124	; 0x7c
 8001886:	af00      	add	r7, sp, #0
 8001888:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800188a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001896:	68d9      	ldr	r1, [r3, #12]
 8001898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	ea40 0301 	orr.w	r3, r0, r1
 80018a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80018ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80018c4:	f021 010c 	bic.w	r1, r1, #12
 80018c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018ce:	430b      	orrs	r3, r1
 80018d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80018dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018de:	6999      	ldr	r1, [r3, #24]
 80018e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	ea40 0301 	orr.w	r3, r0, r1
 80018e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80018ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4bc5      	ldr	r3, [pc, #788]	; (8001c04 <UART_SetConfig+0x384>)
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d004      	beq.n	80018fe <UART_SetConfig+0x7e>
 80018f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4bc3      	ldr	r3, [pc, #780]	; (8001c08 <UART_SetConfig+0x388>)
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d103      	bne.n	8001906 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80018fe:	f7ff fb0b 	bl	8000f18 <HAL_RCC_GetPCLK2Freq>
 8001902:	6778      	str	r0, [r7, #116]	; 0x74
 8001904:	e002      	b.n	800190c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001906:	f7ff faf3 	bl	8000ef0 <HAL_RCC_GetPCLK1Freq>
 800190a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800190c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001914:	f040 80b6 	bne.w	8001a84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800191a:	461c      	mov	r4, r3
 800191c:	f04f 0500 	mov.w	r5, #0
 8001920:	4622      	mov	r2, r4
 8001922:	462b      	mov	r3, r5
 8001924:	1891      	adds	r1, r2, r2
 8001926:	6439      	str	r1, [r7, #64]	; 0x40
 8001928:	415b      	adcs	r3, r3
 800192a:	647b      	str	r3, [r7, #68]	; 0x44
 800192c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001930:	1912      	adds	r2, r2, r4
 8001932:	eb45 0303 	adc.w	r3, r5, r3
 8001936:	f04f 0000 	mov.w	r0, #0
 800193a:	f04f 0100 	mov.w	r1, #0
 800193e:	00d9      	lsls	r1, r3, #3
 8001940:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001944:	00d0      	lsls	r0, r2, #3
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	1911      	adds	r1, r2, r4
 800194c:	6639      	str	r1, [r7, #96]	; 0x60
 800194e:	416b      	adcs	r3, r5
 8001950:	667b      	str	r3, [r7, #100]	; 0x64
 8001952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	461a      	mov	r2, r3
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	1891      	adds	r1, r2, r2
 800195e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001960:	415b      	adcs	r3, r3
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001968:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800196c:	f7fe fc34 	bl	80001d8 <__aeabi_uldivmod>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4ba5      	ldr	r3, [pc, #660]	; (8001c0c <UART_SetConfig+0x38c>)
 8001976:	fba3 2302 	umull	r2, r3, r3, r2
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	011e      	lsls	r6, r3, #4
 800197e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001980:	461c      	mov	r4, r3
 8001982:	f04f 0500 	mov.w	r5, #0
 8001986:	4622      	mov	r2, r4
 8001988:	462b      	mov	r3, r5
 800198a:	1891      	adds	r1, r2, r2
 800198c:	6339      	str	r1, [r7, #48]	; 0x30
 800198e:	415b      	adcs	r3, r3
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
 8001992:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001996:	1912      	adds	r2, r2, r4
 8001998:	eb45 0303 	adc.w	r3, r5, r3
 800199c:	f04f 0000 	mov.w	r0, #0
 80019a0:	f04f 0100 	mov.w	r1, #0
 80019a4:	00d9      	lsls	r1, r3, #3
 80019a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019aa:	00d0      	lsls	r0, r2, #3
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	1911      	adds	r1, r2, r4
 80019b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80019b4:	416b      	adcs	r3, r5
 80019b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	461a      	mov	r2, r3
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	1891      	adds	r1, r2, r2
 80019c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80019c6:	415b      	adcs	r3, r3
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80019d2:	f7fe fc01 	bl	80001d8 <__aeabi_uldivmod>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4b8c      	ldr	r3, [pc, #560]	; (8001c0c <UART_SetConfig+0x38c>)
 80019dc:	fba3 1302 	umull	r1, r3, r3, r2
 80019e0:	095b      	lsrs	r3, r3, #5
 80019e2:	2164      	movs	r1, #100	; 0x64
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	3332      	adds	r3, #50	; 0x32
 80019ee:	4a87      	ldr	r2, [pc, #540]	; (8001c0c <UART_SetConfig+0x38c>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	095b      	lsrs	r3, r3, #5
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80019fc:	441e      	add	r6, r3
 80019fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a00:	4618      	mov	r0, r3
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	1894      	adds	r4, r2, r2
 8001a0c:	623c      	str	r4, [r7, #32]
 8001a0e:	415b      	adcs	r3, r3
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a16:	1812      	adds	r2, r2, r0
 8001a18:	eb41 0303 	adc.w	r3, r1, r3
 8001a1c:	f04f 0400 	mov.w	r4, #0
 8001a20:	f04f 0500 	mov.w	r5, #0
 8001a24:	00dd      	lsls	r5, r3, #3
 8001a26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001a2a:	00d4      	lsls	r4, r2, #3
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	462b      	mov	r3, r5
 8001a30:	1814      	adds	r4, r2, r0
 8001a32:	653c      	str	r4, [r7, #80]	; 0x50
 8001a34:	414b      	adcs	r3, r1
 8001a36:	657b      	str	r3, [r7, #84]	; 0x54
 8001a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	1891      	adds	r1, r2, r2
 8001a44:	61b9      	str	r1, [r7, #24]
 8001a46:	415b      	adcs	r3, r3
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a52:	f7fe fbc1 	bl	80001d8 <__aeabi_uldivmod>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4b6c      	ldr	r3, [pc, #432]	; (8001c0c <UART_SetConfig+0x38c>)
 8001a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a60:	095b      	lsrs	r3, r3, #5
 8001a62:	2164      	movs	r1, #100	; 0x64
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	3332      	adds	r3, #50	; 0x32
 8001a6e:	4a67      	ldr	r2, [pc, #412]	; (8001c0c <UART_SetConfig+0x38c>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	095b      	lsrs	r3, r3, #5
 8001a76:	f003 0207 	and.w	r2, r3, #7
 8001a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4432      	add	r2, r6
 8001a80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001a82:	e0b9      	b.n	8001bf8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a86:	461c      	mov	r4, r3
 8001a88:	f04f 0500 	mov.w	r5, #0
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	462b      	mov	r3, r5
 8001a90:	1891      	adds	r1, r2, r2
 8001a92:	6139      	str	r1, [r7, #16]
 8001a94:	415b      	adcs	r3, r3
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a9c:	1912      	adds	r2, r2, r4
 8001a9e:	eb45 0303 	adc.w	r3, r5, r3
 8001aa2:	f04f 0000 	mov.w	r0, #0
 8001aa6:	f04f 0100 	mov.w	r1, #0
 8001aaa:	00d9      	lsls	r1, r3, #3
 8001aac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ab0:	00d0      	lsls	r0, r2, #3
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	eb12 0804 	adds.w	r8, r2, r4
 8001aba:	eb43 0905 	adc.w	r9, r3, r5
 8001abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	008b      	lsls	r3, r1, #2
 8001ad2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001ad6:	0082      	lsls	r2, r0, #2
 8001ad8:	4640      	mov	r0, r8
 8001ada:	4649      	mov	r1, r9
 8001adc:	f7fe fb7c 	bl	80001d8 <__aeabi_uldivmod>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <UART_SetConfig+0x38c>)
 8001ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	011e      	lsls	r6, r3, #4
 8001aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af0:	4618      	mov	r0, r3
 8001af2:	f04f 0100 	mov.w	r1, #0
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	1894      	adds	r4, r2, r2
 8001afc:	60bc      	str	r4, [r7, #8]
 8001afe:	415b      	adcs	r3, r3
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b06:	1812      	adds	r2, r2, r0
 8001b08:	eb41 0303 	adc.w	r3, r1, r3
 8001b0c:	f04f 0400 	mov.w	r4, #0
 8001b10:	f04f 0500 	mov.w	r5, #0
 8001b14:	00dd      	lsls	r5, r3, #3
 8001b16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001b1a:	00d4      	lsls	r4, r2, #3
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	462b      	mov	r3, r5
 8001b20:	1814      	adds	r4, r2, r0
 8001b22:	64bc      	str	r4, [r7, #72]	; 0x48
 8001b24:	414b      	adcs	r3, r1
 8001b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f04f 0100 	mov.w	r1, #0
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	008b      	lsls	r3, r1, #2
 8001b3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001b40:	0082      	lsls	r2, r0, #2
 8001b42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001b46:	f7fe fb47 	bl	80001d8 <__aeabi_uldivmod>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <UART_SetConfig+0x38c>)
 8001b50:	fba3 1302 	umull	r1, r3, r3, r2
 8001b54:	095b      	lsrs	r3, r3, #5
 8001b56:	2164      	movs	r1, #100	; 0x64
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	3332      	adds	r3, #50	; 0x32
 8001b62:	4a2a      	ldr	r2, [pc, #168]	; (8001c0c <UART_SetConfig+0x38c>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	095b      	lsrs	r3, r3, #5
 8001b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b6e:	441e      	add	r6, r3
 8001b70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b72:	4618      	mov	r0, r3
 8001b74:	f04f 0100 	mov.w	r1, #0
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	1894      	adds	r4, r2, r2
 8001b7e:	603c      	str	r4, [r7, #0]
 8001b80:	415b      	adcs	r3, r3
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b88:	1812      	adds	r2, r2, r0
 8001b8a:	eb41 0303 	adc.w	r3, r1, r3
 8001b8e:	f04f 0400 	mov.w	r4, #0
 8001b92:	f04f 0500 	mov.w	r5, #0
 8001b96:	00dd      	lsls	r5, r3, #3
 8001b98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001b9c:	00d4      	lsls	r4, r2, #3
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	462b      	mov	r3, r5
 8001ba2:	eb12 0a00 	adds.w	sl, r2, r0
 8001ba6:	eb43 0b01 	adc.w	fp, r3, r1
 8001baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f04f 0100 	mov.w	r1, #0
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	008b      	lsls	r3, r1, #2
 8001bbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001bc2:	0082      	lsls	r2, r0, #2
 8001bc4:	4650      	mov	r0, sl
 8001bc6:	4659      	mov	r1, fp
 8001bc8:	f7fe fb06 	bl	80001d8 <__aeabi_uldivmod>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <UART_SetConfig+0x38c>)
 8001bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2164      	movs	r1, #100	; 0x64
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	3332      	adds	r3, #50	; 0x32
 8001be4:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <UART_SetConfig+0x38c>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	f003 020f 	and.w	r2, r3, #15
 8001bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4432      	add	r2, r6
 8001bf6:	609a      	str	r2, [r3, #8]
}
 8001bf8:	bf00      	nop
 8001bfa:	377c      	adds	r7, #124	; 0x7c
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c02:	bf00      	nop
 8001c04:	40011000 	.word	0x40011000
 8001c08:	40011400 	.word	0x40011400
 8001c0c:	51eb851f 	.word	0x51eb851f

08001c10 <__libc_init_array>:
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	4d0d      	ldr	r5, [pc, #52]	; (8001c48 <__libc_init_array+0x38>)
 8001c14:	4c0d      	ldr	r4, [pc, #52]	; (8001c4c <__libc_init_array+0x3c>)
 8001c16:	1b64      	subs	r4, r4, r5
 8001c18:	10a4      	asrs	r4, r4, #2
 8001c1a:	2600      	movs	r6, #0
 8001c1c:	42a6      	cmp	r6, r4
 8001c1e:	d109      	bne.n	8001c34 <__libc_init_array+0x24>
 8001c20:	4d0b      	ldr	r5, [pc, #44]	; (8001c50 <__libc_init_array+0x40>)
 8001c22:	4c0c      	ldr	r4, [pc, #48]	; (8001c54 <__libc_init_array+0x44>)
 8001c24:	f000 f818 	bl	8001c58 <_init>
 8001c28:	1b64      	subs	r4, r4, r5
 8001c2a:	10a4      	asrs	r4, r4, #2
 8001c2c:	2600      	movs	r6, #0
 8001c2e:	42a6      	cmp	r6, r4
 8001c30:	d105      	bne.n	8001c3e <__libc_init_array+0x2e>
 8001c32:	bd70      	pop	{r4, r5, r6, pc}
 8001c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c38:	4798      	blx	r3
 8001c3a:	3601      	adds	r6, #1
 8001c3c:	e7ee      	b.n	8001c1c <__libc_init_array+0xc>
 8001c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c42:	4798      	blx	r3
 8001c44:	3601      	adds	r6, #1
 8001c46:	e7f2      	b.n	8001c2e <__libc_init_array+0x1e>
 8001c48:	08001ca0 	.word	0x08001ca0
 8001c4c:	08001ca0 	.word	0x08001ca0
 8001c50:	08001ca0 	.word	0x08001ca0
 8001c54:	08001ca4 	.word	0x08001ca4

08001c58 <_init>:
 8001c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5a:	bf00      	nop
 8001c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c5e:	bc08      	pop	{r3}
 8001c60:	469e      	mov	lr, r3
 8001c62:	4770      	bx	lr

08001c64 <_fini>:
 8001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c66:	bf00      	nop
 8001c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c6a:	bc08      	pop	{r3}
 8001c6c:	469e      	mov	lr, r3
 8001c6e:	4770      	bx	lr
