
016RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003764  08003764  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003764  08003764  00013764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800376c  0800376c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800376c  0800376c  0001376c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  080037e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080037e4  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7c4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3b  00000000  00000000  0002a864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002cb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fbd  00000000  00000000  0002d308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c1c  00000000  00000000  0004e2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8603  00000000  00000000  00057ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001204e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002610  00000000  00000000  00120538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800364c 	.word	0x0800364c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800364c 	.word	0x0800364c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:

/************************************************************************************
 *                             MAIN                                                 *
 ************************************************************************************/

int main(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	// Local variables


	// This should be the first function to be called
	HAL_Init();
 800057c:	f000 fb14 	bl	8000ba8 <HAL_Init>

	// Config. the clock
	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000580:	2032      	movs	r0, #50	; 0x32
 8000582:	f000 f979 	bl	8000878 <SystemClock_Config_HSE>

	// Init the UART2
	UART2_Init();
 8000586:	f000 f951 	bl	800082c <UART2_Init>

	// Start the button
	Button_Init();
 800058a:	f000 f91f 	bl	80007cc <Button_Init>



	for(;;){
 800058e:	e7fe      	b.n	800058e <main+0x16>

08000590 <HAL_GPIO_EXTI_Callback>:

/************************************************************************************
 *                             FUNCTIONS                                            *
 ************************************************************************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]
	// Init the RTC
	RTC_Init();
 800059a:	f000 f8f1 	bl	8000780 <RTC_Init>

	// Configure the RTC calendar
	RTC_CalendarConfig();
 800059e:	f000 f8bb 	bl	8000718 <RTC_CalendarConfig>

	// Configure the alarm
	RTC_AlarmConfig();
 80005a2:	f000 f83f 	bl	8000624 <RTC_AlarmConfig>

}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	b08b      	sub	sp, #44	; 0x2c
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	6078      	str	r0, [r7, #4]
	printmsg("Alarm Triggered \r\n");
 80005b8:	4817      	ldr	r0, [pc, #92]	; (8000618 <HAL_RTC_AlarmAEventCallback+0x68>)
 80005ba:	f000 f869 	bl	8000690 <printmsg>
	// Read the RTC time
	RTC_TimeTypeDef RTC_TimeRead;
	HAL_RTC_GetTime(hrtc, &RTC_TimeRead, RTC_FORMAT_BIN);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2200      	movs	r2, #0
 80005c4:	4619      	mov	r1, r3
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f001 fcf4 	bl	8001fb4 <HAL_RTC_GetTime>

	// Read the RTC date
	RTC_DateTypeDef RTC_DateRead;
	HAL_RTC_GetDate(hrtc, &RTC_DateRead, RTC_FORMAT_BIN);
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 fdf2 	bl	80021be <HAL_RTC_GetDate>

	// Print message over USART
	printmsg("Current Time is: %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,\
 80005da:	7b3b      	ldrb	r3, [r7, #12]
 80005dc:	4619      	mov	r1, r3
			RTC_TimeRead.Minutes, RTC_TimeRead.Seconds);
 80005de:	7b7b      	ldrb	r3, [r7, #13]
	printmsg("Current Time is: %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,\
 80005e0:	461a      	mov	r2, r3
			RTC_TimeRead.Minutes, RTC_TimeRead.Seconds);
 80005e2:	7bbb      	ldrb	r3, [r7, #14]
	printmsg("Current Time is: %02d:%02d:%02d\r\n", RTC_TimeRead.Hours,\
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <HAL_RTC_AlarmAEventCallback+0x6c>)
 80005e6:	f000 f853 	bl	8000690 <printmsg>
	printmsg("Current Date is: %02d-%02d-%02d <%s> \r\n", RTC_DateRead.Date,\
 80005ea:	7abb      	ldrb	r3, [r7, #10]
 80005ec:	461c      	mov	r4, r3
			RTC_DateRead.Month, RTC_DateRead.Year, getDayofweek(RTC_DateRead.WeekDay));
 80005ee:	7a7b      	ldrb	r3, [r7, #9]
	printmsg("Current Date is: %02d-%02d-%02d <%s> \r\n", RTC_DateRead.Date,\
 80005f0:	461d      	mov	r5, r3
			RTC_DateRead.Month, RTC_DateRead.Year, getDayofweek(RTC_DateRead.WeekDay));
 80005f2:	7afb      	ldrb	r3, [r7, #11]
	printmsg("Current Date is: %02d-%02d-%02d <%s> \r\n", RTC_DateRead.Date,\
 80005f4:	461e      	mov	r6, r3
 80005f6:	7a3b      	ldrb	r3, [r7, #8]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f86f 	bl	80006dc <getDayofweek>
 80005fe:	4603      	mov	r3, r0
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	4633      	mov	r3, r6
 8000604:	462a      	mov	r2, r5
 8000606:	4621      	mov	r1, r4
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <HAL_RTC_AlarmAEventCallback+0x70>)
 800060a:	f000 f841 	bl	8000690 <printmsg>
}
 800060e:	bf00      	nop
 8000610:	3724      	adds	r7, #36	; 0x24
 8000612:	46bd      	mov	sp, r7
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	bf00      	nop
 8000618:	0800369c 	.word	0x0800369c
 800061c:	080036b0 	.word	0x080036b0
 8000620:	080036d4 	.word	0x080036d4

08000624 <RTC_AlarmConfig>:

void RTC_AlarmConfig(void){
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0

	// Deactivate existing alarms
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800062a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062e:	4817      	ldr	r0, [pc, #92]	; (800068c <RTC_AlarmConfig+0x68>)
 8000630:	f001 ff4c 	bl	80024cc <HAL_RTC_DeactivateAlarm>

	// Set up the alarm for 12:00:15
	RTC_AlarmTypeDef AlarmA_Set;
	memset(&AlarmA_Set, 0, sizeof(AlarmA_Set));
 8000634:	463b      	mov	r3, r7
 8000636:	2228      	movs	r2, #40	; 0x28
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fbd0 	bl	8002de0 <memset>
	AlarmA_Set.Alarm = RTC_ALARM_A;
 8000640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
	AlarmA_Set.AlarmTime.Hours = 8;
 8000646:	2308      	movs	r3, #8
 8000648:	703b      	strb	r3, [r7, #0]
	AlarmA_Set.AlarmTime.Minutes = 00;
 800064a:	2300      	movs	r3, #0
 800064c:	707b      	strb	r3, [r7, #1]
	AlarmA_Set.AlarmTime.Seconds = 00;
 800064e:	2300      	movs	r3, #0
 8000650:	70bb      	strb	r3, [r7, #2]
	AlarmA_Set.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000652:	2300      	movs	r3, #0
 8000654:	70fb      	strb	r3, [r7, #3]
	AlarmA_Set.AlarmMask = RTC_ALARMMASK_NONE;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
	// AlarmA_Set.AlarmMask = RTC_ALARMMASK_MINUTES | RTC_ALARMMASK_HOURS;  // Masking stuff out
	AlarmA_Set.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800065a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800065e:	61fb      	str	r3, [r7, #28]
	AlarmA_Set.AlarmDateWeekDay = RTC_WEEKDAY_SUNDAY;
 8000660:	2307      	movs	r3, #7
 8000662:	f887 3020 	strb.w	r3, [r7, #32]
	AlarmA_Set.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000666:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800066a:	61bb      	str	r3, [r7, #24]

	if(HAL_RTC_SetAlarm_IT(&hrtc, &AlarmA_Set, RTC_FORMAT_BIN) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <RTC_AlarmConfig+0x68>)
 8000674:	f001 fdf2 	bl	800225c <HAL_RTC_SetAlarm_IT>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <RTC_AlarmConfig+0x5e>
		Error_handler();
 800067e:	f000 f87b 	bl	8000778 <Error_handler>
}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	; 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000098 	.word	0x20000098

08000690 <printmsg>:

void printmsg(char *format,...){
 8000690:	b40f      	push	{r0, r1, r2, r3}
 8000692:	b580      	push	{r7, lr}
 8000694:	b096      	sub	sp, #88	; 0x58
 8000696:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000698:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800069c:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fbb8 	bl	8002e1c <vsiprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fd8d 	bl	80001d0 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f107 0108 	add.w	r1, r7, #8
 80006be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <printmsg+0x48>)
 80006c4:	f002 f8bd 	bl	8002842 <HAL_UART_Transmit>
	va_end(args);

 }
 80006c8:	bf00      	nop
 80006ca:	3758      	adds	r7, #88	; 0x58
 80006cc:	46bd      	mov	sp, r7
 80006ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006d2:	b004      	add	sp, #16
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200000b8 	.word	0x200000b8

080006dc <getDayofweek>:

char *getDayofweek(uint8_t number){
 80006dc:	b4b0      	push	{r4, r5, r7}
 80006de:	b08b      	sub	sp, #44	; 0x2c
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	// Get the week number and return a string
	char *weekday[] = {"Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado", "Domingo"};
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <getDayofweek+0x38>)
 80006e8:	f107 040c 	add.w	r4, r7, #12
 80006ec:	461d      	mov	r5, r3
 80006ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return weekday[number - 1];
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000704:	4413      	add	r3, r2
 8000706:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 800070a:	4618      	mov	r0, r3
 800070c:	372c      	adds	r7, #44	; 0x2c
 800070e:	46bd      	mov	sp, r7
 8000710:	bcb0      	pop	{r4, r5, r7}
 8000712:	4770      	bx	lr
 8000714:	080036fc 	.word	0x080036fc

08000718 <RTC_CalendarConfig>:

void RTC_CalendarConfig(void){
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
	// 1. Set the time
	RTC_TimeTypeDef RTC_TimeInit;
	RTC_TimeInit.Hours = 7;
 800071e:	2307      	movs	r3, #7
 8000720:	713b      	strb	r3, [r7, #4]
	RTC_TimeInit.Minutes = 59;
 8000722:	233b      	movs	r3, #59	; 0x3b
 8000724:	717b      	strb	r3, [r7, #5]
	RTC_TimeInit.Seconds = 50;
 8000726:	2332      	movs	r3, #50	; 0x32
 8000728:	71bb      	strb	r3, [r7, #6]
	RTC_TimeInit.TimeFormat = RTC_HOURFORMAT12_AM;
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]
	if(HAL_RTC_SetTime(&hrtc, &RTC_TimeInit, RTC_FORMAT_BIN) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	4619      	mov	r1, r3
 8000734:	480f      	ldr	r0, [pc, #60]	; (8000774 <RTC_CalendarConfig+0x5c>)
 8000736:	f001 fb80 	bl	8001e3a <HAL_RTC_SetTime>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <RTC_CalendarConfig+0x2c>
		Error_handler();
 8000740:	f000 f81a 	bl	8000778 <Error_handler>

	// 2. Set the date
	RTC_DateTypeDef RTC_DateInit;
	RTC_DateInit.Date = 12;
 8000744:	230c      	movs	r3, #12
 8000746:	70bb      	strb	r3, [r7, #2]
	RTC_DateInit.Month = RTC_MONTH_JUNE;
 8000748:	2306      	movs	r3, #6
 800074a:	707b      	strb	r3, [r7, #1]
	RTC_DateInit.WeekDay = RTC_WEEKDAY_SUNDAY;
 800074c:	2307      	movs	r3, #7
 800074e:	703b      	strb	r3, [r7, #0]
	RTC_DateInit.Year = 18;
 8000750:	2312      	movs	r3, #18
 8000752:	70fb      	strb	r3, [r7, #3]
	if(HAL_RTC_SetDate(&hrtc, &RTC_DateInit, RTC_FORMAT_BIN) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	4619      	mov	r1, r3
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <RTC_CalendarConfig+0x5c>)
 800075c:	f001 fc88 	bl	8002070 <HAL_RTC_SetDate>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <RTC_CalendarConfig+0x52>
		Error_handler();
 8000766:	f000 f807 	bl	8000778 <Error_handler>

}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000098 	.word	0x20000098

08000778 <Error_handler>:

void Error_handler(void){
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
	while(1);
 800077c:	e7fe      	b.n	800077c <Error_handler+0x4>
	...

08000780 <RTC_Init>:
}

void RTC_Init(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	hrtc.Instance = RTC;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <RTC_Init+0x44>)
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <RTC_Init+0x48>)
 8000788:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <RTC_Init+0x44>)
 800078c:	2240      	movs	r2, #64	; 0x40
 800078e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <RTC_Init+0x44>)
 8000792:	227f      	movs	r2, #127	; 0x7f
 8000794:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 249;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <RTC_Init+0x44>)
 8000798:	22f9      	movs	r2, #249	; 0xf9
 800079a:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <RTC_Init+0x44>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_LOW;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <RTC_Init+0x44>)
 80007a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007a8:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <RTC_Init+0x44>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]

	if(HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <RTC_Init+0x44>)
 80007b2:	f001 fab1 	bl	8001d18 <HAL_RTC_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <RTC_Init+0x40>
		Error_handler();
 80007bc:	f7ff ffdc 	bl	8000778 <Error_handler>

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000098 	.word	0x20000098
 80007c8:	40002800 	.word	0x40002800

080007cc <Button_Init>:

void Button_Init(void){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <Button_Init+0x54>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a11      	ldr	r2, [pc, #68]	; (8000820 <Button_Init+0x54>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <Button_Init+0x54>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

	// Configure GPIO button PIN
	GPIO_InitTypeDef buttonInit;
	buttonInit.Pin = BUTTON_PIN;
 80007ee:	2301      	movs	r3, #1
 80007f0:	607b      	str	r3, [r7, #4]
	buttonInit.Mode = GPIO_MODE_IT_RISING;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <Button_Init+0x58>)
 80007f4:	60bb      	str	r3, [r7, #8]
	buttonInit.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
	buttonInit.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &buttonInit);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <Button_Init+0x5c>)
 8000804:	f000 fb7e 	bl	8000f04 <HAL_GPIO_Init>

	// Configure the NVIC to take EXTI interrupts from the GPIO button PIN
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	2006      	movs	r0, #6
 800080e:	f000 fb18 	bl	8000e42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000812:	2006      	movs	r0, #6
 8000814:	f000 fb31 	bl	8000e7a <HAL_NVIC_EnableIRQ>
}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	10110000 	.word	0x10110000
 8000828:	40020000 	.word	0x40020000

0800082c <UART2_Init>:

void UART2_Init(void){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <UART2_Init+0x44>)
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <UART2_Init+0x48>)
 8000834:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <UART2_Init+0x44>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <UART2_Init+0x44>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <UART2_Init+0x44>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <UART2_Init+0x44>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <UART2_Init+0x44>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <UART2_Init+0x44>)
 8000858:	220c      	movs	r2, #12
 800085a:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <UART2_Init+0x44>)
 800085e:	f001 ffa3 	bl	80027a8 <HAL_UART_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <UART2_Init+0x40>
		Error_handler();
 8000868:	f7ff ff86 	bl	8000778 <Error_handler>
	}

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000b8 	.word	0x200000b8
 8000874:	40004400 	.word	0x40004400

08000878 <SystemClock_Config_HSE>:


void SystemClock_Config_HSE(uint8_t clock_freq){
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	; 0x50
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint32_t FLatency;

	// 1. Init. the oscillator
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000882:	2301      	movs	r3, #1
 8000884:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_ON;
 8000886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088a:	623b      	str	r3, [r7, #32]
	osc_init.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000890:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000894:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLQ = 2;
 8000896:	2302      	movs	r3, #2
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48

	// 2. Init. the clock
	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |\
 800089a:	230f      	movs	r3, #15
 800089c:	60bb      	str	r3, [r7, #8]
			 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089e:	2302      	movs	r3, #2
 80008a0:	60fb      	str	r3, [r7, #12]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008aa:	617b      	str	r3, [r7, #20]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b0:	61bb      	str	r3, [r7, #24]

	// 3. Configurations that depend on clock_freq
	switch(clock_freq){
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b78      	cmp	r3, #120	; 0x78
 80008b6:	d018      	beq.n	80008ea <SystemClock_Config_HSE+0x72>
 80008b8:	2b78      	cmp	r3, #120	; 0x78
 80008ba:	dc45      	bgt.n	8000948 <SystemClock_Config_HSE+0xd0>
 80008bc:	2b32      	cmp	r3, #50	; 0x32
 80008be:	d002      	beq.n	80008c6 <SystemClock_Config_HSE+0x4e>
 80008c0:	2b54      	cmp	r3, #84	; 0x54
 80008c2:	d009      	beq.n	80008d8 <SystemClock_Config_HSE+0x60>
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
			FLatency = FLASH_LATENCY_3;
			break;
		default:
			return;
 80008c4:	e040      	b.n	8000948 <SystemClock_Config_HSE+0xd0>
			osc_init.PLL.PLLM = 8;
 80008c6:	2308      	movs	r3, #8
 80008c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 100;
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	647b      	str	r3, [r7, #68]	; 0x44
			FLatency = FLASH_LATENCY_1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 80008d6:	e014      	b.n	8000902 <SystemClock_Config_HSE+0x8a>
			osc_init.PLL.PLLM = 8;
 80008d8:	2308      	movs	r3, #8
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 168;
 80008dc:	23a8      	movs	r3, #168	; 0xa8
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	647b      	str	r3, [r7, #68]	; 0x44
			FLatency = FLASH_LATENCY_2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 80008e8:	e00b      	b.n	8000902 <SystemClock_Config_HSE+0x8a>
			osc_init.PLL.PLLM = 8;
 80008ea:	2308      	movs	r3, #8
 80008ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 240;
 80008ee:	23f0      	movs	r3, #240	; 0xf0
 80008f0:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	647b      	str	r3, [r7, #68]	; 0x44
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008fa:	617b      	str	r3, [r7, #20]
			FLatency = FLASH_LATENCY_3;
 80008fc:	2303      	movs	r3, #3
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 8000900:	bf00      	nop
	}

	// 4. Call the APIs
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fcb0 	bl	800126c <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config_HSE+0x9e>
		Error_handler();
 8000912:	f7ff ff31 	bl	8000778 <Error_handler>
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800091c:	4618      	mov	r0, r3
 800091e:	f000 ff1d 	bl	800175c <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config_HSE+0xb4>
		Error_handler();
 8000928:	f7ff ff26 	bl	8000778 <Error_handler>

	// 5. Systick
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800092c:	f001 f8de 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8000930:	4603      	mov	r3, r0
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <SystemClock_Config_HSE+0xd8>)
 8000934:	fba2 2303 	umull	r2, r3, r2, r3
 8000938:	099b      	lsrs	r3, r3, #6
 800093a:	4618      	mov	r0, r3
 800093c:	f000 faab 	bl	8000e96 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000940:	2004      	movs	r0, #4
 8000942:	f000 fab5 	bl	8000eb0 <HAL_SYSTICK_CLKSourceConfig>
 8000946:	e000      	b.n	800094a <SystemClock_Config_HSE+0xd2>
			return;
 8000948:	bf00      	nop

}
 800094a:	3750      	adds	r7, #80	; 0x50
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	10624dd3 	.word	0x10624dd3

08000954 <SysTick_Handler>:
 */

#include "stm32f4xx_hal.h"
extern RTC_HandleTypeDef hrtc;

void SysTick_Handler(void){
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000958:	f000 f978 	bl	8000c4c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800095c:	f000 fac4 	bl	8000ee8 <HAL_SYSTICK_IRQHandler>
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	// Button pressed interrupt handler
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000968:	2001      	movs	r0, #1
 800096a:	f000 fc67 	bl	800123c <HAL_GPIO_EXTI_IRQHandler>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	HAL_RTC_AlarmIRQHandler(&hrtc);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <RTC_Alarm_IRQHandler+0x10>)
 800097a:	f001 fe35 	bl	80025e8 <HAL_RTC_AlarmIRQHandler>
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000098 	.word	0x20000098

08000988 <HAL_MspInit>:

#include "stm32f4xx_hal.h"
#include "main.h"

/* Low Level processor Init. Called by HAL_Init()*/
void HAL_MspInit(void){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 fa4d 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x07 << 16;  // En: usg fault, memory fault and bus fault
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <HAL_MspInit+0x40>)
 8000994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000996:	4a0c      	ldr	r2, [pc, #48]	; (80009c8 <HAL_MspInit+0x40>)
 8000998:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800099c:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	f06f 000b 	mvn.w	r0, #11
 80009a6:	f000 fa4c 	bl	8000e42 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	f06f 000a 	mvn.w	r0, #10
 80009b2:	f000 fa46 	bl	8000e42 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	f06f 0009 	mvn.w	r0, #9
 80009be:	f000 fa40 	bl	8000e42 <HAL_NVIC_SetPriority>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <HAL_UART_MspInit>:

/* Low level UART init. Called by HAL_UART_Init()*/
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	// 1. Enable the clock for the USART2 peripheral and GPIOA
	__HAL_RCC_USART2_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

	// 2. Do the pin muxing configurations
	GPIO_InitTypeDef gpio_uart;
	gpio_uart.Pin = GPIO_PIN_2;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);  // UART2 TX - PA2
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	480c      	ldr	r0, [pc, #48]	; (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a28:	f000 fa6c 	bl	8000f04 <HAL_GPIO_Init>
	gpio_uart.Pin = GPIO_PIN_3;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);  // UART2 RX - PA3
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4808      	ldr	r0, [pc, #32]	; (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a38:	f000 fa64 	bl	8000f04 <HAL_GPIO_Init>

	// 3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a3c:	2026      	movs	r0, #38	; 0x26
 8000a3e:	f000 fa1c 	bl	8000e7a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	210f      	movs	r1, #15
 8000a46:	2026      	movs	r0, #38	; 0x26
 8000a48:	f000 f9fb 	bl	8000e42 <HAL_NVIC_SetPriority>

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000

08000a5c <HAL_RTC_MspInit>:

/* Low level RTC init. */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b092      	sub	sp, #72	; 0x48
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

	// 1. Turn on the LSI
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI;
 8000a64:	2308      	movs	r3, #8
 8000a66:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fbf9 	bl	800126c <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_RTC_MspInit+0x28>
		Error_handler();
 8000a80:	f7ff fe7a 	bl	8000778 <Error_handler>

	// 2. Select LSI as RTCCLK
	RCC_PeriphCLKInitTypeDef RCC_RTCPeriClkInit;
	RCC_RTCPeriClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a84:	2302      	movs	r3, #2
 8000a86:	60bb      	str	r3, [r7, #8]
	RCC_RTCPeriClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8c:	617b      	str	r3, [r7, #20]
	if(HAL_RCCEx_PeriphCLKConfig(&RCC_RTCPeriClkInit) != HAL_OK)
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f85e 	bl	8001b54 <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_RTC_MspInit+0x46>
		Error_handler();
 8000a9e:	f7ff fe6b 	bl	8000778 <Error_handler>

	// 3. Enable the RTC clock
	__HAL_RCC_RTC_ENABLE();
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <HAL_RTC_MspInit+0x64>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]

	// 4. Enable RTC Alarm IQR in the NVIC
	HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 15, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	210f      	movs	r1, #15
 8000aac:	2029      	movs	r0, #41	; 0x29
 8000aae:	f000 f9c8 	bl	8000e42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000ab2:	2029      	movs	r0, #41	; 0x29
 8000ab4:	f000 f9e1 	bl	8000e7a <HAL_NVIC_EnableIRQ>
}
 8000ab8:	bf00      	nop
 8000aba:	3748      	adds	r7, #72	; 0x48
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	42470e3c 	.word	0x42470e3c

08000ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000acc:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <_sbrk+0x5c>)
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <_sbrk+0x60>)
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <_sbrk+0x64>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <_sbrk+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d207      	bcs.n	8000b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af4:	f002 f94a 	bl	8002d8c <__errno>
 8000af8:	4603      	mov	r3, r0
 8000afa:	220c      	movs	r2, #12
 8000afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b02:	e009      	b.n	8000b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <_sbrk+0x64>)
 8000b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20020000 	.word	0x20020000
 8000b24:	00000400 	.word	0x00000400
 8000b28:	2000008c 	.word	0x2000008c
 8000b2c:	20000110 	.word	0x20000110

08000b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <SystemInit+0x20>)
 8000b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <SystemInit+0x20>)
 8000b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b5a:	490e      	ldr	r1, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b5c:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b70:	4c0b      	ldr	r4, [pc, #44]	; (8000ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b7e:	f7ff ffd7 	bl	8000b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b82:	f002 f909 	bl	8002d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b86:	f7ff fcf7 	bl	8000578 <main>
  bx  lr    
 8000b8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b98:	08003774 	.word	0x08003774
  ldr r2, =_sbss
 8000b9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ba0:	20000110 	.word	0x20000110

08000ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <HAL_Init+0x40>)
 8000bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <HAL_Init+0x40>)
 8000bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x40>)
 8000bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f92b 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fed4 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023c00 	.word	0x40023c00

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f943 	bl	8000e96 <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	f000 f90b 	bl	8000e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	200000fc 	.word	0x200000fc

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	200000fc 	.word	0x200000fc

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db0b      	blt.n	8000d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	4907      	ldr	r1, [pc, #28]	; (8000d28 <__NVIC_EnableIRQ+0x38>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	fa00 f202 	lsl.w	r2, r0, r2
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e0c:	f7ff ff8e 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff29 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff3e 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff8e 	bl	8000d80 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5d 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff31 	bl	8000cf0 <__NVIC_EnableIRQ>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ffa2 	bl	8000de8 <SysTick_Config>
 8000ea4:	4603      	mov	r3, r0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d106      	bne.n	8000ecc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000eca:	e005      	b.n	8000ed8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ed2:	f023 0304 	bic.w	r3, r3, #4
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000eec:	f000 f802 	bl	8000ef4 <HAL_SYSTICK_Callback>
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e16b      	b.n	80011f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 815a 	bne.w	80011f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d130      	bne.n	8000fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d017      	beq.n	8000ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80b4 	beq.w	80011f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b60      	ldr	r3, [pc, #384]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a5f      	ldr	r2, [pc, #380]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_GPIO_Init+0x30c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a5b      	ldr	r2, [pc, #364]	; (8001214 <HAL_GPIO_Init+0x310>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_GPIO_Init+0x314>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d02b      	beq.n	800112a <HAL_GPIO_Init+0x226>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a51      	ldr	r2, [pc, #324]	; (800121c <HAL_GPIO_Init+0x318>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x222>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a50      	ldr	r2, [pc, #320]	; (8001220 <HAL_GPIO_Init+0x31c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x21e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <HAL_GPIO_Init+0x320>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x21a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <HAL_GPIO_Init+0x324>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x216>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	; (800122c <HAL_GPIO_Init+0x328>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x212>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	; (8001230 <HAL_GPIO_Init+0x32c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x20e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x330>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x20a>
 800110a:	2307      	movs	r3, #7
 800110c:	e00e      	b.n	800112c <HAL_GPIO_Init+0x228>
 800110e:	2308      	movs	r3, #8
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001112:	2306      	movs	r3, #6
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x228>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	; (8001214 <HAL_GPIO_Init+0x310>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <HAL_GPIO_Init+0x334>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800116e:	4a32      	ldr	r2, [pc, #200]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001198:	4a27      	ldr	r2, [pc, #156]	; (8001238 <HAL_GPIO_Init+0x334>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae90 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40021c00 	.word	0x40021c00
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f998 	bl	8000590 <HAL_GPIO_EXTI_Callback>
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e264      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d075      	beq.n	8001376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800128a:	4ba3      	ldr	r3, [pc, #652]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b04      	cmp	r3, #4
 8001294:	d00c      	beq.n	80012b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001296:	4ba0      	ldr	r3, [pc, #640]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d112      	bne.n	80012c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a2:	4b9d      	ldr	r3, [pc, #628]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ae:	d10b      	bne.n	80012c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	4b99      	ldr	r3, [pc, #612]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d05b      	beq.n	8001374 <HAL_RCC_OscConfig+0x108>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d157      	bne.n	8001374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e23f      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d0:	d106      	bne.n	80012e0 <HAL_RCC_OscConfig+0x74>
 80012d2:	4b91      	ldr	r3, [pc, #580]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a90      	ldr	r2, [pc, #576]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e01d      	b.n	800131c <HAL_RCC_OscConfig+0xb0>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x98>
 80012ea:	4b8b      	ldr	r3, [pc, #556]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a8a      	ldr	r2, [pc, #552]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a87      	ldr	r2, [pc, #540]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e00b      	b.n	800131c <HAL_RCC_OscConfig+0xb0>
 8001304:	4b84      	ldr	r3, [pc, #528]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a83      	ldr	r2, [pc, #524]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b81      	ldr	r3, [pc, #516]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a80      	ldr	r2, [pc, #512]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d013      	beq.n	800134c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fca6 	bl	8000c74 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fca2 	bl	8000c74 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e204      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b76      	ldr	r3, [pc, #472]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0xc0>
 800134a:	e014      	b.n	8001376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fc92 	bl	8000c74 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fc8e 	bl	8000c74 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	; 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e1f0      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	4b6c      	ldr	r3, [pc, #432]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0xe8>
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d063      	beq.n	800144a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001382:	4b65      	ldr	r3, [pc, #404]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138e:	4b62      	ldr	r3, [pc, #392]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001396:	2b08      	cmp	r3, #8
 8001398:	d11c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d116      	bne.n	80013d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	4b5c      	ldr	r3, [pc, #368]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d005      	beq.n	80013be <HAL_RCC_OscConfig+0x152>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e1c4      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4b56      	ldr	r3, [pc, #344]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4952      	ldr	r1, [pc, #328]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	e03a      	b.n	800144a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d020      	beq.n	800141e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013dc:	4b4f      	ldr	r3, [pc, #316]	; (800151c <HAL_RCC_OscConfig+0x2b0>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fc47 	bl	8000c74 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fc43 	bl	8000c74 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e1a5      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	4b46      	ldr	r3, [pc, #280]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4940      	ldr	r1, [pc, #256]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	4313      	orrs	r3, r2
 800141a:	600b      	str	r3, [r1, #0]
 800141c:	e015      	b.n	800144a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141e:	4b3f      	ldr	r3, [pc, #252]	; (800151c <HAL_RCC_OscConfig+0x2b0>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fc26 	bl	8000c74 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142c:	f7ff fc22 	bl	8000c74 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e184      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d030      	beq.n	80014b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d016      	beq.n	800148c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_RCC_OscConfig+0x2b4>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff fc06 	bl	8000c74 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff fc02 	bl	8000c74 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e164      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x200>
 800148a:	e015      	b.n	80014b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_RCC_OscConfig+0x2b4>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff fbef 	bl	8000c74 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149a:	f7ff fbeb 	bl	8000c74 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e14d      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80a0 	beq.w	8001606 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f2:	2301      	movs	r3, #1
 80014f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d121      	bne.n	8001546 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_RCC_OscConfig+0x2b8>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150e:	f7ff fbb1 	bl	8000c74 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	e011      	b.n	800153a <HAL_RCC_OscConfig+0x2ce>
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	42470000 	.word	0x42470000
 8001520:	42470e80 	.word	0x42470e80
 8001524:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001528:	f7ff fba4 	bl	8000c74 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e106      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b85      	ldr	r3, [pc, #532]	; (8001750 <HAL_RCC_OscConfig+0x4e4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d106      	bne.n	800155c <HAL_RCC_OscConfig+0x2f0>
 800154e:	4b81      	ldr	r3, [pc, #516]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a80      	ldr	r2, [pc, #512]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
 800155a:	e01c      	b.n	8001596 <HAL_RCC_OscConfig+0x32a>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x312>
 8001564:	4b7b      	ldr	r3, [pc, #492]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a7a      	ldr	r2, [pc, #488]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
 8001570:	4b78      	ldr	r3, [pc, #480]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001574:	4a77      	ldr	r2, [pc, #476]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6713      	str	r3, [r2, #112]	; 0x70
 800157c:	e00b      	b.n	8001596 <HAL_RCC_OscConfig+0x32a>
 800157e:	4b75      	ldr	r3, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	4a74      	ldr	r2, [pc, #464]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6713      	str	r3, [r2, #112]	; 0x70
 800158a:	4b72      	ldr	r3, [pc, #456]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	4a71      	ldr	r2, [pc, #452]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d015      	beq.n	80015ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159e:	f7ff fb69 	bl	8000c74 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fb65 	bl	8000c74 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0c5      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	4b65      	ldr	r3, [pc, #404]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ee      	beq.n	80015a6 <HAL_RCC_OscConfig+0x33a>
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fb53 	bl	8000c74 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff fb4f 	bl	8000c74 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0af      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	4b5a      	ldr	r3, [pc, #360]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d105      	bne.n	8001606 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fa:	4b56      	ldr	r3, [pc, #344]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a55      	ldr	r2, [pc, #340]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 809b 	beq.w	8001746 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001610:	4b50      	ldr	r3, [pc, #320]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d05c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d141      	bne.n	80016a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001624:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <HAL_RCC_OscConfig+0x4ec>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fb23 	bl	8000c74 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff fb1f 	bl	8000c74 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e081      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001644:	4b43      	ldr	r3, [pc, #268]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69da      	ldr	r2, [r3, #28]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	019b      	lsls	r3, r3, #6
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	3b01      	subs	r3, #1
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	4937      	ldr	r1, [pc, #220]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_RCC_OscConfig+0x4ec>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff faf8 	bl	8000c74 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff faf4 	bl	8000c74 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e056      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x41c>
 80016a6:	e04e      	b.n	8001746 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_OscConfig+0x4ec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fae1 	bl	8000c74 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff fadd 	bl	8000c74 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e03f      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x44a>
 80016d4:	e037      	b.n	8001746 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e032      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <HAL_RCC_OscConfig+0x4e8>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d028      	beq.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d121      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d11a      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001712:	4013      	ands	r3, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001718:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800171a:	4293      	cmp	r3, r2
 800171c:	d111      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	3b01      	subs	r3, #1
 800172c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d107      	bne.n	8001742 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40007000 	.word	0x40007000
 8001754:	40023800 	.word	0x40023800
 8001758:	42470060 	.word	0x42470060

0800175c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0cc      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d90c      	bls.n	8001798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	4b65      	ldr	r3, [pc, #404]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0b8      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b0:	4b59      	ldr	r3, [pc, #356]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a52      	ldr	r2, [pc, #328]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b50      	ldr	r3, [pc, #320]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	494d      	ldr	r1, [pc, #308]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d044      	beq.n	800187c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d119      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e07f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d003      	beq.n	800181a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	2b03      	cmp	r3, #3
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181a:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e06f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e067      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183a:	4b37      	ldr	r3, [pc, #220]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f023 0203 	bic.w	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4934      	ldr	r1, [pc, #208]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800184c:	f7ff fa12 	bl	8000c74 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	e00a      	b.n	800186a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001854:	f7ff fa0e 	bl	8000c74 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e04f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 020c 	and.w	r2, r3, #12
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	429a      	cmp	r2, r3
 800187a:	d1eb      	bne.n	8001854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800187c:	4b25      	ldr	r3, [pc, #148]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d20c      	bcs.n	80018a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b22      	ldr	r3, [pc, #136]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e032      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4916      	ldr	r1, [pc, #88]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	490e      	ldr	r1, [pc, #56]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018e2:	f000 f821 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	490a      	ldr	r1, [pc, #40]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	5ccb      	ldrb	r3, [r1, r3]
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f972 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00
 8001918:	40023800 	.word	0x40023800
 800191c:	08003718 	.word	0x08003718
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	2300      	movs	r3, #0
 800193a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001940:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d00d      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x40>
 800194c:	2b08      	cmp	r3, #8
 800194e:	f200 80bd 	bhi.w	8001acc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x34>
 8001956:	2b04      	cmp	r3, #4
 8001958:	d003      	beq.n	8001962 <HAL_RCC_GetSysClockFreq+0x3a>
 800195a:	e0b7      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b61      	ldr	r3, [pc, #388]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800195e:	60bb      	str	r3, [r7, #8]
       break;
 8001960:	e0b7      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001962:	4b61      	ldr	r3, [pc, #388]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001964:	60bb      	str	r3, [r7, #8]
      break;
 8001966:	e0b4      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001968:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001970:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001972:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d04d      	beq.n	8001a1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197e:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	099b      	lsrs	r3, r3, #6
 8001984:	461a      	mov	r2, r3
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	ea02 0800 	and.w	r8, r2, r0
 8001996:	ea03 0901 	and.w	r9, r3, r1
 800199a:	4640      	mov	r0, r8
 800199c:	4649      	mov	r1, r9
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	014b      	lsls	r3, r1, #5
 80019a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019ac:	0142      	lsls	r2, r0, #5
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	ebb0 0008 	subs.w	r0, r0, r8
 80019b6:	eb61 0109 	sbc.w	r1, r1, r9
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	018b      	lsls	r3, r1, #6
 80019c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019c8:	0182      	lsls	r2, r0, #6
 80019ca:	1a12      	subs	r2, r2, r0
 80019cc:	eb63 0301 	sbc.w	r3, r3, r1
 80019d0:	f04f 0000 	mov.w	r0, #0
 80019d4:	f04f 0100 	mov.w	r1, #0
 80019d8:	00d9      	lsls	r1, r3, #3
 80019da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019de:	00d0      	lsls	r0, r2, #3
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	eb12 0208 	adds.w	r2, r2, r8
 80019e8:	eb43 0309 	adc.w	r3, r3, r9
 80019ec:	f04f 0000 	mov.w	r0, #0
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	0259      	lsls	r1, r3, #9
 80019f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019fa:	0250      	lsls	r0, r2, #9
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	f7fe fc38 	bl	8000280 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	e04a      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	099b      	lsrs	r3, r3, #6
 8001a20:	461a      	mov	r2, r3
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	ea02 0400 	and.w	r4, r2, r0
 8001a32:	ea03 0501 	and.w	r5, r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	014b      	lsls	r3, r1, #5
 8001a44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a48:	0142      	lsls	r2, r0, #5
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	1b00      	subs	r0, r0, r4
 8001a50:	eb61 0105 	sbc.w	r1, r1, r5
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	018b      	lsls	r3, r1, #6
 8001a5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a62:	0182      	lsls	r2, r0, #6
 8001a64:	1a12      	subs	r2, r2, r0
 8001a66:	eb63 0301 	sbc.w	r3, r3, r1
 8001a6a:	f04f 0000 	mov.w	r0, #0
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	00d9      	lsls	r1, r3, #3
 8001a74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a78:	00d0      	lsls	r0, r2, #3
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	1912      	adds	r2, r2, r4
 8001a80:	eb45 0303 	adc.w	r3, r5, r3
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	0299      	lsls	r1, r3, #10
 8001a8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a92:	0290      	lsls	r0, r2, #10
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	f7fe fbec 	bl	8000280 <__aeabi_uldivmod>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4613      	mov	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	3301      	adds	r3, #1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	60bb      	str	r3, [r7, #8]
      break;
 8001aca:	e002      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ace:	60bb      	str	r3, [r7, #8]
      break;
 8001ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	00f42400 	.word	0x00f42400
 8001ae8:	007a1200 	.word	0x007a1200

08001aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000000 	.word	0x20000000

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b08:	f7ff fff0 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0a9b      	lsrs	r3, r3, #10
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4903      	ldr	r1, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	08003728 	.word	0x08003728

08001b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b30:	f7ff ffdc 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0b5b      	lsrs	r3, r3, #13
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4903      	ldr	r1, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	08003728 	.word	0x08003728

08001b54 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d035      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b7c:	4b62      	ldr	r3, [pc, #392]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b82:	f7ff f877 	bl	8000c74 <HAL_GetTick>
 8001b86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b8a:	f7ff f873 	bl	8000c74 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e0b0      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b9c:	4b5b      	ldr	r3, [pc, #364]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	019a      	lsls	r2, r3, #6
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	071b      	lsls	r3, r3, #28
 8001bb4:	4955      	ldr	r1, [pc, #340]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001bbc:	4b52      	ldr	r3, [pc, #328]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bc2:	f7ff f857 	bl	8000c74 <HAL_GetTick>
 8001bc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001bca:	f7ff f853 	bl	8000c74 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e090      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001bdc:	4b4b      	ldr	r3, [pc, #300]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8083 	beq.w	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a43      	ldr	r2, [pc, #268]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c12:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a3e      	ldr	r2, [pc, #248]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c1e:	f7ff f829 	bl	8000c74 <HAL_GetTick>
 8001c22:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c26:	f7ff f825 	bl	8000c74 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e062      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c38:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c44:	4b31      	ldr	r3, [pc, #196]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d02f      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d028      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001c78:	4a24      	ldr	r2, [pc, #144]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c7e:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d114      	bne.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7fe fff3 	bl	8000c74 <HAL_GetTick>
 8001c8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7fe ffef 	bl	8000c74 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e02a      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca8:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0ee      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cc0:	d10d      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd6:	490d      	ldr	r1, [pc, #52]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]
 8001cdc:	e005      	b.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ce4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001ce8:	6093      	str	r3, [r2, #8]
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf6:	4905      	ldr	r1, [pc, #20]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	42470068 	.word	0x42470068
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40007000 	.word	0x40007000
 8001d14:	42470e40 	.word	0x42470e40

08001d18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e083      	b.n	8001e32 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7f5b      	ldrb	r3, [r3, #29]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fe8e 	bl	8000a5c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	22ca      	movs	r2, #202	; 0xca
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2253      	movs	r2, #83	; 0x53
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fcb4 	bl	80026c4 <RTC_EnterInitMode>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d008      	beq.n	8001d74 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	22ff      	movs	r2, #255	; 0xff
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e05e      	b.n	8001e32 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d86:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6899      	ldr	r1, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68d2      	ldr	r2, [r2, #12]
 8001dae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6919      	ldr	r1, [r3, #16]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	041a      	lsls	r2, r3, #16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dd2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10e      	bne.n	8001e00 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fc46 	bl	8002674 <HAL_RTC_WaitForSynchro>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d008      	beq.n	8001e00 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	22ff      	movs	r2, #255	; 0xff
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2204      	movs	r2, #4
 8001dfa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e018      	b.n	8001e32 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	22ff      	movs	r2, #255	; 0xff
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001e30:	2300      	movs	r3, #0
  }
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001e3a:	b590      	push	{r4, r7, lr}
 8001e3c:	b087      	sub	sp, #28
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	7f1b      	ldrb	r3, [r3, #28]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_RTC_SetTime+0x1c>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e0aa      	b.n	8001fac <HAL_RTC_SetTime+0x172>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d126      	bne.n	8001eb6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fc4b 	bl	800271c <RTC_ByteToBcd2>
 8001e86:	4603      	mov	r3, r0
 8001e88:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	785b      	ldrb	r3, [r3, #1]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 fc44 	bl	800271c <RTC_ByteToBcd2>
 8001e94:	4603      	mov	r3, r0
 8001e96:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001e98:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	789b      	ldrb	r3, [r3, #2]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fc3c 	bl	800271c <RTC_ByteToBcd2>
 8001ea4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001ea6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	78db      	ldrb	r3, [r3, #3]
 8001eae:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	e018      	b.n	8001ee8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	785b      	ldrb	r3, [r3, #1]
 8001ed4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001ed6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001edc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	78db      	ldrb	r3, [r3, #3]
 8001ee2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	22ca      	movs	r2, #202	; 0xca
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2253      	movs	r2, #83	; 0x53
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 fbe3 	bl	80026c4 <RTC_EnterInitMode>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00b      	beq.n	8001f1c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	22ff      	movs	r2, #255	; 0xff
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2204      	movs	r2, #4
 8001f10:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e047      	b.n	8001fac <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001f26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001f2a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f3a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6899      	ldr	r1, [r3, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f62:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d111      	bne.n	8001f96 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 fb7e 	bl	8002674 <HAL_RTC_WaitForSynchro>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	22ff      	movs	r2, #255	; 0xff
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00a      	b.n	8001fac <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	22ff      	movs	r2, #255	; 0xff
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8001faa:	2300      	movs	r3, #0
  }
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	371c      	adds	r7, #28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd90      	pop	{r4, r7, pc}

08001fb4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001fe6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001fea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	0c1b      	lsrs	r3, r3, #16
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002006:	b2da      	uxtb	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002014:	b2da      	uxtb	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	0c1b      	lsrs	r3, r3, #16
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002024:	b2da      	uxtb	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d11a      	bne.n	8002066 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fb8f 	bl	8002758 <RTC_Bcd2ToByte>
 800203a:	4603      	mov	r3, r0
 800203c:	461a      	mov	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	785b      	ldrb	r3, [r3, #1]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fb86 	bl	8002758 <RTC_Bcd2ToByte>
 800204c:	4603      	mov	r3, r0
 800204e:	461a      	mov	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	789b      	ldrb	r3, [r3, #2]
 8002058:	4618      	mov	r0, r3
 800205a:	f000 fb7d 	bl	8002758 <RTC_Bcd2ToByte>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	7f1b      	ldrb	r3, [r3, #28]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_RTC_SetDate+0x1c>
 8002088:	2302      	movs	r3, #2
 800208a:	e094      	b.n	80021b6 <HAL_RTC_SetDate+0x146>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2201      	movs	r2, #1
 8002090:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2202      	movs	r2, #2
 8002096:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10e      	bne.n	80020bc <HAL_RTC_SetDate+0x4c>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	785b      	ldrb	r3, [r3, #1]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d008      	beq.n	80020bc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	785b      	ldrb	r3, [r3, #1]
 80020ae:	f023 0310 	bic.w	r3, r3, #16
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	330a      	adds	r3, #10
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d11c      	bne.n	80020fc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	78db      	ldrb	r3, [r3, #3]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fb28 	bl	800271c <RTC_ByteToBcd2>
 80020cc:	4603      	mov	r3, r0
 80020ce:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fb21 	bl	800271c <RTC_ByteToBcd2>
 80020da:	4603      	mov	r3, r0
 80020dc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80020de:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	789b      	ldrb	r3, [r3, #2]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fb19 	bl	800271c <RTC_ByteToBcd2>
 80020ea:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80020ec:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e00e      	b.n	800211a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	78db      	ldrb	r3, [r3, #3]
 8002100:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	785b      	ldrb	r3, [r3, #1]
 8002106:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002108:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800210e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002116:	4313      	orrs	r3, r2
 8002118:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	22ca      	movs	r2, #202	; 0xca
 8002120:	625a      	str	r2, [r3, #36]	; 0x24
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2253      	movs	r2, #83	; 0x53
 8002128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 faca 	bl	80026c4 <RTC_EnterInitMode>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	22ff      	movs	r2, #255	; 0xff
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2204      	movs	r2, #4
 8002142:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e033      	b.n	80021b6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002158:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800215c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800216c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d111      	bne.n	80021a0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fa79 	bl	8002674 <HAL_RTC_WaitForSynchro>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00b      	beq.n	80021a0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	22ff      	movs	r2, #255	; 0xff
 800218e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2204      	movs	r2, #4
 8002194:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e00a      	b.n	80021b6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	22ff      	movs	r2, #255	; 0xff
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd90      	pop	{r4, r7, pc}

080021be <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	0b5b      	lsrs	r3, r3, #13
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	b2da      	uxtb	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d11a      	bne.n	8002252 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	78db      	ldrb	r3, [r3, #3]
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fa99 	bl	8002758 <RTC_Bcd2ToByte>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fa90 	bl	8002758 <RTC_Bcd2ToByte>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	789b      	ldrb	r3, [r3, #2]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fa87 	bl	8002758 <RTC_Bcd2ToByte>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002270:	4b93      	ldr	r3, [pc, #588]	; (80024c0 <HAL_RTC_SetAlarm_IT+0x264>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a93      	ldr	r2, [pc, #588]	; (80024c4 <HAL_RTC_SetAlarm_IT+0x268>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0adb      	lsrs	r3, r3, #11
 800227c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	7f1b      	ldrb	r3, [r3, #28]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_RTC_SetAlarm_IT+0x36>
 800228e:	2302      	movs	r3, #2
 8002290:	e111      	b.n	80024b6 <HAL_RTC_SetAlarm_IT+0x25a>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2202      	movs	r2, #2
 800229c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d137      	bne.n	8002314 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2200      	movs	r2, #0
 80022b6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fa2d 	bl	800271c <RTC_ByteToBcd2>
 80022c2:	4603      	mov	r3, r0
 80022c4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	785b      	ldrb	r3, [r3, #1]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fa26 	bl	800271c <RTC_ByteToBcd2>
 80022d0:	4603      	mov	r3, r0
 80022d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80022d4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	789b      	ldrb	r3, [r3, #2]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fa1e 	bl	800271c <RTC_ByteToBcd2>
 80022e0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80022e2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	78db      	ldrb	r3, [r3, #3]
 80022ea:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80022ec:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fa10 	bl	800271c <RTC_ByteToBcd2>
 80022fc:	4603      	mov	r3, r0
 80022fe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002300:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002308:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800230e:	4313      	orrs	r3, r2
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e023      	b.n	800235c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d102      	bne.n	8002328 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2200      	movs	r2, #0
 8002326:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002334:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800233a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	78db      	ldrb	r3, [r3, #3]
 8002340:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002342:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800234c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002352:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002358:	4313      	orrs	r3, r2
 800235a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	22ca      	movs	r2, #202	; 0xca
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2253      	movs	r2, #83	; 0x53
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002380:	d141      	bne.n	8002406 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002390:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80023a2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	1e5a      	subs	r2, r3, #1
 80023a8:	617a      	str	r2, [r7, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10b      	bne.n	80023c6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	22ff      	movs	r2, #255	; 0xff
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2203      	movs	r2, #3
 80023ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e077      	b.n	80024b6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0e7      	beq.n	80023a4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	e040      	b.n	8002488 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002414:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002426:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	1e5a      	subs	r2, r3, #1
 800242c:	617a      	str	r2, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10b      	bne.n	800244a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	22ff      	movs	r2, #255	; 0xff
 8002438:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2203      	movs	r2, #3
 800243e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e035      	b.n	80024b6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0e7      	beq.n	8002428 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002476:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002486:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0e      	ldr	r2, [pc, #56]	; (80024c8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800248e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002492:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800249a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	22ff      	movs	r2, #255	; 0xff
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000000 	.word	0x20000000
 80024c4:	10624dd3 	.word	0x10624dd3
 80024c8:	40013c00 	.word	0x40013c00

080024cc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7f1b      	ldrb	r3, [r3, #28]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_RTC_DeactivateAlarm+0x1a>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e07b      	b.n	80025de <HAL_RTC_DeactivateAlarm+0x112>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	22ca      	movs	r2, #202	; 0xca
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2253      	movs	r2, #83	; 0x53
 8002500:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002508:	d12f      	bne.n	800256a <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002518:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002528:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800252a:	f7fe fba3 	bl	8000c74 <HAL_GetTick>
 800252e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002530:	e013      	b.n	800255a <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002532:	f7fe fb9f 	bl	8000c74 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002540:	d90b      	bls.n	800255a <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	22ff      	movs	r2, #255	; 0xff
 8002548:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2203      	movs	r2, #3
 800254e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e041      	b.n	80025de <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0e4      	beq.n	8002532 <HAL_RTC_DeactivateAlarm+0x66>
 8002568:	e02e      	b.n	80025c8 <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002578:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002588:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800258a:	f7fe fb73 	bl	8000c74 <HAL_GetTick>
 800258e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8002590:	e013      	b.n	80025ba <HAL_RTC_DeactivateAlarm+0xee>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002592:	f7fe fb6f 	bl	8000c74 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025a0:	d90b      	bls.n	80025ba <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	22ff      	movs	r2, #255	; 0xff
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2203      	movs	r2, #3
 80025ae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e011      	b.n	80025de <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0e4      	beq.n	8002592 <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	22ff      	movs	r2, #255	; 0xff
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d012      	beq.n	8002624 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00b      	beq.n	8002624 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7fd ffcf 	bl	80005b0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002622:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d012      	beq.n	8002658 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00b      	beq.n	8002658 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f8a7 	bl	8002794 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002656:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_RTC_AlarmIRQHandler+0x88>)
 800265a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800265e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	775a      	strb	r2, [r3, #29]
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40013c00 	.word	0x40013c00

08002674 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800268e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002690:	f7fe faf0 	bl	8000c74 <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002696:	e009      	b.n	80026ac <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002698:	f7fe faec 	bl	8000c74 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a6:	d901      	bls.n	80026ac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e007      	b.n	80026bc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0ee      	beq.n	8002698 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d119      	bne.n	8002712 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026e8:	f7fe fac4 	bl	8000c74 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80026ee:	e009      	b.n	8002704 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80026f0:	f7fe fac0 	bl	8000c74 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026fe:	d901      	bls.n	8002704 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e007      	b.n	8002714 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0ee      	beq.n	80026f0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800272a:	e005      	b.n	8002738 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3301      	adds	r3, #1
 8002730:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	3b0a      	subs	r3, #10
 8002736:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	2b09      	cmp	r3, #9
 800273c:	d8f6      	bhi.n	800272c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	b2da      	uxtb	r2, r3
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	4313      	orrs	r3, r2
 800274a:	b2db      	uxtb	r3, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	b2da      	uxtb	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4413      	add	r3, r2
 8002786:	b2db      	uxtb	r3, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e03f      	b.n	800283a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe f8fc 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	; 0x24
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f905 	bl	80029fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b08a      	sub	sp, #40	; 0x28
 8002846:	af02      	add	r7, sp, #8
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	4613      	mov	r3, r2
 8002850:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b20      	cmp	r3, #32
 8002860:	d17c      	bne.n	800295c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_UART_Transmit+0x2c>
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e075      	b.n	800295e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_UART_Transmit+0x3e>
 800287c:	2302      	movs	r3, #2
 800287e:	e06e      	b.n	800295e <HAL_UART_Transmit+0x11c>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2221      	movs	r2, #33	; 0x21
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002896:	f7fe f9ed 	bl	8000c74 <HAL_GetTick>
 800289a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	88fa      	ldrh	r2, [r7, #6]
 80028a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	88fa      	ldrh	r2, [r7, #6]
 80028a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b0:	d108      	bne.n	80028c4 <HAL_UART_Transmit+0x82>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d104      	bne.n	80028c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	e003      	b.n	80028cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028d4:	e02a      	b.n	800292c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	2180      	movs	r1, #128	; 0x80
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f840 	bl	8002966 <UART_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e036      	b.n	800295e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10b      	bne.n	800290e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002904:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	3302      	adds	r3, #2
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	e007      	b.n	800291e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	3301      	adds	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1cf      	bne.n	80028d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2200      	movs	r2, #0
 800293e:	2140      	movs	r1, #64	; 0x40
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f810 	bl	8002966 <UART_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e006      	b.n	800295e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e000      	b.n	800295e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800295c:	2302      	movs	r3, #2
  }
}
 800295e:	4618      	mov	r0, r3
 8002960:	3720      	adds	r7, #32
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	4613      	mov	r3, r2
 8002974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002976:	e02c      	b.n	80029d2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800297e:	d028      	beq.n	80029d2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <UART_WaitOnFlagUntilTimeout+0x30>
 8002986:	f7fe f975 	bl	8000c74 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	429a      	cmp	r2, r3
 8002994:	d21d      	bcs.n	80029d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029a4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e00f      	b.n	80029f2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4013      	ands	r3, r2
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	429a      	cmp	r2, r3
 80029e0:	bf0c      	ite	eq
 80029e2:	2301      	moveq	r3, #1
 80029e4:	2300      	movne	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d0c3      	beq.n	8002978 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a00:	b09f      	sub	sp, #124	; 0x7c
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a12:	68d9      	ldr	r1, [r3, #12]
 8002a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	ea40 0301 	orr.w	r3, r0, r1
 8002a1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a40:	f021 010c 	bic.w	r1, r1, #12
 8002a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5a:	6999      	ldr	r1, [r3, #24]
 8002a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	ea40 0301 	orr.w	r3, r0, r1
 8002a64:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4bc5      	ldr	r3, [pc, #788]	; (8002d80 <UART_SetConfig+0x384>)
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d004      	beq.n	8002a7a <UART_SetConfig+0x7e>
 8002a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4bc3      	ldr	r3, [pc, #780]	; (8002d84 <UART_SetConfig+0x388>)
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d103      	bne.n	8002a82 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a7a:	f7ff f857 	bl	8001b2c <HAL_RCC_GetPCLK2Freq>
 8002a7e:	6778      	str	r0, [r7, #116]	; 0x74
 8002a80:	e002      	b.n	8002a88 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a82:	f7ff f83f 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8002a86:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a90:	f040 80b6 	bne.w	8002c00 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a96:	461c      	mov	r4, r3
 8002a98:	f04f 0500 	mov.w	r5, #0
 8002a9c:	4622      	mov	r2, r4
 8002a9e:	462b      	mov	r3, r5
 8002aa0:	1891      	adds	r1, r2, r2
 8002aa2:	6439      	str	r1, [r7, #64]	; 0x40
 8002aa4:	415b      	adcs	r3, r3
 8002aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002aac:	1912      	adds	r2, r2, r4
 8002aae:	eb45 0303 	adc.w	r3, r5, r3
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	f04f 0100 	mov.w	r1, #0
 8002aba:	00d9      	lsls	r1, r3, #3
 8002abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ac0:	00d0      	lsls	r0, r2, #3
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	1911      	adds	r1, r2, r4
 8002ac8:	6639      	str	r1, [r7, #96]	; 0x60
 8002aca:	416b      	adcs	r3, r5
 8002acc:	667b      	str	r3, [r7, #100]	; 0x64
 8002ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	1891      	adds	r1, r2, r2
 8002ada:	63b9      	str	r1, [r7, #56]	; 0x38
 8002adc:	415b      	adcs	r3, r3
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ae4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ae8:	f7fd fbca 	bl	8000280 <__aeabi_uldivmod>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4ba5      	ldr	r3, [pc, #660]	; (8002d88 <UART_SetConfig+0x38c>)
 8002af2:	fba3 2302 	umull	r2, r3, r3, r2
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	011e      	lsls	r6, r3, #4
 8002afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002afc:	461c      	mov	r4, r3
 8002afe:	f04f 0500 	mov.w	r5, #0
 8002b02:	4622      	mov	r2, r4
 8002b04:	462b      	mov	r3, r5
 8002b06:	1891      	adds	r1, r2, r2
 8002b08:	6339      	str	r1, [r7, #48]	; 0x30
 8002b0a:	415b      	adcs	r3, r3
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b12:	1912      	adds	r2, r2, r4
 8002b14:	eb45 0303 	adc.w	r3, r5, r3
 8002b18:	f04f 0000 	mov.w	r0, #0
 8002b1c:	f04f 0100 	mov.w	r1, #0
 8002b20:	00d9      	lsls	r1, r3, #3
 8002b22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b26:	00d0      	lsls	r0, r2, #3
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	1911      	adds	r1, r2, r4
 8002b2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b30:	416b      	adcs	r3, r5
 8002b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	1891      	adds	r1, r2, r2
 8002b40:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b42:	415b      	adcs	r3, r3
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002b4e:	f7fd fb97 	bl	8000280 <__aeabi_uldivmod>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4b8c      	ldr	r3, [pc, #560]	; (8002d88 <UART_SetConfig+0x38c>)
 8002b58:	fba3 1302 	umull	r1, r3, r3, r2
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	2164      	movs	r1, #100	; 0x64
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	3332      	adds	r3, #50	; 0x32
 8002b6a:	4a87      	ldr	r2, [pc, #540]	; (8002d88 <UART_SetConfig+0x38c>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b78:	441e      	add	r6, r3
 8002b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f04f 0100 	mov.w	r1, #0
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	1894      	adds	r4, r2, r2
 8002b88:	623c      	str	r4, [r7, #32]
 8002b8a:	415b      	adcs	r3, r3
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b92:	1812      	adds	r2, r2, r0
 8002b94:	eb41 0303 	adc.w	r3, r1, r3
 8002b98:	f04f 0400 	mov.w	r4, #0
 8002b9c:	f04f 0500 	mov.w	r5, #0
 8002ba0:	00dd      	lsls	r5, r3, #3
 8002ba2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ba6:	00d4      	lsls	r4, r2, #3
 8002ba8:	4622      	mov	r2, r4
 8002baa:	462b      	mov	r3, r5
 8002bac:	1814      	adds	r4, r2, r0
 8002bae:	653c      	str	r4, [r7, #80]	; 0x50
 8002bb0:	414b      	adcs	r3, r1
 8002bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8002bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	1891      	adds	r1, r2, r2
 8002bc0:	61b9      	str	r1, [r7, #24]
 8002bc2:	415b      	adcs	r3, r3
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002bce:	f7fd fb57 	bl	8000280 <__aeabi_uldivmod>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4b6c      	ldr	r3, [pc, #432]	; (8002d88 <UART_SetConfig+0x38c>)
 8002bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	2164      	movs	r1, #100	; 0x64
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	3332      	adds	r3, #50	; 0x32
 8002bea:	4a67      	ldr	r2, [pc, #412]	; (8002d88 <UART_SetConfig+0x38c>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	f003 0207 	and.w	r2, r3, #7
 8002bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4432      	add	r2, r6
 8002bfc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bfe:	e0b9      	b.n	8002d74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c02:	461c      	mov	r4, r3
 8002c04:	f04f 0500 	mov.w	r5, #0
 8002c08:	4622      	mov	r2, r4
 8002c0a:	462b      	mov	r3, r5
 8002c0c:	1891      	adds	r1, r2, r2
 8002c0e:	6139      	str	r1, [r7, #16]
 8002c10:	415b      	adcs	r3, r3
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c18:	1912      	adds	r2, r2, r4
 8002c1a:	eb45 0303 	adc.w	r3, r5, r3
 8002c1e:	f04f 0000 	mov.w	r0, #0
 8002c22:	f04f 0100 	mov.w	r1, #0
 8002c26:	00d9      	lsls	r1, r3, #3
 8002c28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c2c:	00d0      	lsls	r0, r2, #3
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	eb12 0804 	adds.w	r8, r2, r4
 8002c36:	eb43 0905 	adc.w	r9, r3, r5
 8002c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f04f 0100 	mov.w	r1, #0
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	008b      	lsls	r3, r1, #2
 8002c4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c52:	0082      	lsls	r2, r0, #2
 8002c54:	4640      	mov	r0, r8
 8002c56:	4649      	mov	r1, r9
 8002c58:	f7fd fb12 	bl	8000280 <__aeabi_uldivmod>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <UART_SetConfig+0x38c>)
 8002c62:	fba3 2302 	umull	r2, r3, r3, r2
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	011e      	lsls	r6, r3, #4
 8002c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f04f 0100 	mov.w	r1, #0
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	1894      	adds	r4, r2, r2
 8002c78:	60bc      	str	r4, [r7, #8]
 8002c7a:	415b      	adcs	r3, r3
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c82:	1812      	adds	r2, r2, r0
 8002c84:	eb41 0303 	adc.w	r3, r1, r3
 8002c88:	f04f 0400 	mov.w	r4, #0
 8002c8c:	f04f 0500 	mov.w	r5, #0
 8002c90:	00dd      	lsls	r5, r3, #3
 8002c92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c96:	00d4      	lsls	r4, r2, #3
 8002c98:	4622      	mov	r2, r4
 8002c9a:	462b      	mov	r3, r5
 8002c9c:	1814      	adds	r4, r2, r0
 8002c9e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ca0:	414b      	adcs	r3, r1
 8002ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	008b      	lsls	r3, r1, #2
 8002cb8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002cbc:	0082      	lsls	r2, r0, #2
 8002cbe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002cc2:	f7fd fadd 	bl	8000280 <__aeabi_uldivmod>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <UART_SetConfig+0x38c>)
 8002ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	2164      	movs	r1, #100	; 0x64
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	3332      	adds	r3, #50	; 0x32
 8002cde:	4a2a      	ldr	r2, [pc, #168]	; (8002d88 <UART_SetConfig+0x38c>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cea:	441e      	add	r6, r3
 8002cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f04f 0100 	mov.w	r1, #0
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	1894      	adds	r4, r2, r2
 8002cfa:	603c      	str	r4, [r7, #0]
 8002cfc:	415b      	adcs	r3, r3
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d04:	1812      	adds	r2, r2, r0
 8002d06:	eb41 0303 	adc.w	r3, r1, r3
 8002d0a:	f04f 0400 	mov.w	r4, #0
 8002d0e:	f04f 0500 	mov.w	r5, #0
 8002d12:	00dd      	lsls	r5, r3, #3
 8002d14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d18:	00d4      	lsls	r4, r2, #3
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	462b      	mov	r3, r5
 8002d1e:	eb12 0a00 	adds.w	sl, r2, r0
 8002d22:	eb43 0b01 	adc.w	fp, r3, r1
 8002d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	008b      	lsls	r3, r1, #2
 8002d3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d3e:	0082      	lsls	r2, r0, #2
 8002d40:	4650      	mov	r0, sl
 8002d42:	4659      	mov	r1, fp
 8002d44:	f7fd fa9c 	bl	8000280 <__aeabi_uldivmod>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <UART_SetConfig+0x38c>)
 8002d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	2164      	movs	r1, #100	; 0x64
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	3332      	adds	r3, #50	; 0x32
 8002d60:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <UART_SetConfig+0x38c>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	f003 020f 	and.w	r2, r3, #15
 8002d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4432      	add	r2, r6
 8002d72:	609a      	str	r2, [r3, #8]
}
 8002d74:	bf00      	nop
 8002d76:	377c      	adds	r7, #124	; 0x7c
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d7e:	bf00      	nop
 8002d80:	40011000 	.word	0x40011000
 8002d84:	40011400 	.word	0x40011400
 8002d88:	51eb851f 	.word	0x51eb851f

08002d8c <__errno>:
 8002d8c:	4b01      	ldr	r3, [pc, #4]	; (8002d94 <__errno+0x8>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	2000000c 	.word	0x2000000c

08002d98 <__libc_init_array>:
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	4d0d      	ldr	r5, [pc, #52]	; (8002dd0 <__libc_init_array+0x38>)
 8002d9c:	4c0d      	ldr	r4, [pc, #52]	; (8002dd4 <__libc_init_array+0x3c>)
 8002d9e:	1b64      	subs	r4, r4, r5
 8002da0:	10a4      	asrs	r4, r4, #2
 8002da2:	2600      	movs	r6, #0
 8002da4:	42a6      	cmp	r6, r4
 8002da6:	d109      	bne.n	8002dbc <__libc_init_array+0x24>
 8002da8:	4d0b      	ldr	r5, [pc, #44]	; (8002dd8 <__libc_init_array+0x40>)
 8002daa:	4c0c      	ldr	r4, [pc, #48]	; (8002ddc <__libc_init_array+0x44>)
 8002dac:	f000 fc4e 	bl	800364c <_init>
 8002db0:	1b64      	subs	r4, r4, r5
 8002db2:	10a4      	asrs	r4, r4, #2
 8002db4:	2600      	movs	r6, #0
 8002db6:	42a6      	cmp	r6, r4
 8002db8:	d105      	bne.n	8002dc6 <__libc_init_array+0x2e>
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc0:	4798      	blx	r3
 8002dc2:	3601      	adds	r6, #1
 8002dc4:	e7ee      	b.n	8002da4 <__libc_init_array+0xc>
 8002dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dca:	4798      	blx	r3
 8002dcc:	3601      	adds	r6, #1
 8002dce:	e7f2      	b.n	8002db6 <__libc_init_array+0x1e>
 8002dd0:	0800376c 	.word	0x0800376c
 8002dd4:	0800376c 	.word	0x0800376c
 8002dd8:	0800376c 	.word	0x0800376c
 8002ddc:	08003770 	.word	0x08003770

08002de0 <memset>:
 8002de0:	4402      	add	r2, r0
 8002de2:	4603      	mov	r3, r0
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d100      	bne.n	8002dea <memset+0xa>
 8002de8:	4770      	bx	lr
 8002dea:	f803 1b01 	strb.w	r1, [r3], #1
 8002dee:	e7f9      	b.n	8002de4 <memset+0x4>

08002df0 <_vsiprintf_r>:
 8002df0:	b500      	push	{lr}
 8002df2:	b09b      	sub	sp, #108	; 0x6c
 8002df4:	9100      	str	r1, [sp, #0]
 8002df6:	9104      	str	r1, [sp, #16]
 8002df8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002dfc:	9105      	str	r1, [sp, #20]
 8002dfe:	9102      	str	r1, [sp, #8]
 8002e00:	4905      	ldr	r1, [pc, #20]	; (8002e18 <_vsiprintf_r+0x28>)
 8002e02:	9103      	str	r1, [sp, #12]
 8002e04:	4669      	mov	r1, sp
 8002e06:	f000 f86f 	bl	8002ee8 <_svfiprintf_r>
 8002e0a:	9b00      	ldr	r3, [sp, #0]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	b01b      	add	sp, #108	; 0x6c
 8002e12:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e16:	bf00      	nop
 8002e18:	ffff0208 	.word	0xffff0208

08002e1c <vsiprintf>:
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	460a      	mov	r2, r1
 8002e20:	4601      	mov	r1, r0
 8002e22:	4802      	ldr	r0, [pc, #8]	; (8002e2c <vsiprintf+0x10>)
 8002e24:	6800      	ldr	r0, [r0, #0]
 8002e26:	f7ff bfe3 	b.w	8002df0 <_vsiprintf_r>
 8002e2a:	bf00      	nop
 8002e2c:	2000000c 	.word	0x2000000c

08002e30 <__ssputs_r>:
 8002e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e34:	688e      	ldr	r6, [r1, #8]
 8002e36:	429e      	cmp	r6, r3
 8002e38:	4682      	mov	sl, r0
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	4690      	mov	r8, r2
 8002e3e:	461f      	mov	r7, r3
 8002e40:	d838      	bhi.n	8002eb4 <__ssputs_r+0x84>
 8002e42:	898a      	ldrh	r2, [r1, #12]
 8002e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e48:	d032      	beq.n	8002eb0 <__ssputs_r+0x80>
 8002e4a:	6825      	ldr	r5, [r4, #0]
 8002e4c:	6909      	ldr	r1, [r1, #16]
 8002e4e:	eba5 0901 	sub.w	r9, r5, r1
 8002e52:	6965      	ldr	r5, [r4, #20]
 8002e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	444b      	add	r3, r9
 8002e60:	106d      	asrs	r5, r5, #1
 8002e62:	429d      	cmp	r5, r3
 8002e64:	bf38      	it	cc
 8002e66:	461d      	movcc	r5, r3
 8002e68:	0553      	lsls	r3, r2, #21
 8002e6a:	d531      	bpl.n	8002ed0 <__ssputs_r+0xa0>
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	f000 fb47 	bl	8003500 <_malloc_r>
 8002e72:	4606      	mov	r6, r0
 8002e74:	b950      	cbnz	r0, 8002e8c <__ssputs_r+0x5c>
 8002e76:	230c      	movs	r3, #12
 8002e78:	f8ca 3000 	str.w	r3, [sl]
 8002e7c:	89a3      	ldrh	r3, [r4, #12]
 8002e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e82:	81a3      	strh	r3, [r4, #12]
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e8c:	6921      	ldr	r1, [r4, #16]
 8002e8e:	464a      	mov	r2, r9
 8002e90:	f000 fabe 	bl	8003410 <memcpy>
 8002e94:	89a3      	ldrh	r3, [r4, #12]
 8002e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9e:	81a3      	strh	r3, [r4, #12]
 8002ea0:	6126      	str	r6, [r4, #16]
 8002ea2:	6165      	str	r5, [r4, #20]
 8002ea4:	444e      	add	r6, r9
 8002ea6:	eba5 0509 	sub.w	r5, r5, r9
 8002eaa:	6026      	str	r6, [r4, #0]
 8002eac:	60a5      	str	r5, [r4, #8]
 8002eae:	463e      	mov	r6, r7
 8002eb0:	42be      	cmp	r6, r7
 8002eb2:	d900      	bls.n	8002eb6 <__ssputs_r+0x86>
 8002eb4:	463e      	mov	r6, r7
 8002eb6:	4632      	mov	r2, r6
 8002eb8:	6820      	ldr	r0, [r4, #0]
 8002eba:	4641      	mov	r1, r8
 8002ebc:	f000 fab6 	bl	800342c <memmove>
 8002ec0:	68a3      	ldr	r3, [r4, #8]
 8002ec2:	6822      	ldr	r2, [r4, #0]
 8002ec4:	1b9b      	subs	r3, r3, r6
 8002ec6:	4432      	add	r2, r6
 8002ec8:	60a3      	str	r3, [r4, #8]
 8002eca:	6022      	str	r2, [r4, #0]
 8002ecc:	2000      	movs	r0, #0
 8002ece:	e7db      	b.n	8002e88 <__ssputs_r+0x58>
 8002ed0:	462a      	mov	r2, r5
 8002ed2:	f000 fb6f 	bl	80035b4 <_realloc_r>
 8002ed6:	4606      	mov	r6, r0
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	d1e1      	bne.n	8002ea0 <__ssputs_r+0x70>
 8002edc:	6921      	ldr	r1, [r4, #16]
 8002ede:	4650      	mov	r0, sl
 8002ee0:	f000 fabe 	bl	8003460 <_free_r>
 8002ee4:	e7c7      	b.n	8002e76 <__ssputs_r+0x46>
	...

08002ee8 <_svfiprintf_r>:
 8002ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eec:	4698      	mov	r8, r3
 8002eee:	898b      	ldrh	r3, [r1, #12]
 8002ef0:	061b      	lsls	r3, r3, #24
 8002ef2:	b09d      	sub	sp, #116	; 0x74
 8002ef4:	4607      	mov	r7, r0
 8002ef6:	460d      	mov	r5, r1
 8002ef8:	4614      	mov	r4, r2
 8002efa:	d50e      	bpl.n	8002f1a <_svfiprintf_r+0x32>
 8002efc:	690b      	ldr	r3, [r1, #16]
 8002efe:	b963      	cbnz	r3, 8002f1a <_svfiprintf_r+0x32>
 8002f00:	2140      	movs	r1, #64	; 0x40
 8002f02:	f000 fafd 	bl	8003500 <_malloc_r>
 8002f06:	6028      	str	r0, [r5, #0]
 8002f08:	6128      	str	r0, [r5, #16]
 8002f0a:	b920      	cbnz	r0, 8002f16 <_svfiprintf_r+0x2e>
 8002f0c:	230c      	movs	r3, #12
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f14:	e0d1      	b.n	80030ba <_svfiprintf_r+0x1d2>
 8002f16:	2340      	movs	r3, #64	; 0x40
 8002f18:	616b      	str	r3, [r5, #20]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f1e:	2320      	movs	r3, #32
 8002f20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f28:	2330      	movs	r3, #48	; 0x30
 8002f2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80030d4 <_svfiprintf_r+0x1ec>
 8002f2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f32:	f04f 0901 	mov.w	r9, #1
 8002f36:	4623      	mov	r3, r4
 8002f38:	469a      	mov	sl, r3
 8002f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f3e:	b10a      	cbz	r2, 8002f44 <_svfiprintf_r+0x5c>
 8002f40:	2a25      	cmp	r2, #37	; 0x25
 8002f42:	d1f9      	bne.n	8002f38 <_svfiprintf_r+0x50>
 8002f44:	ebba 0b04 	subs.w	fp, sl, r4
 8002f48:	d00b      	beq.n	8002f62 <_svfiprintf_r+0x7a>
 8002f4a:	465b      	mov	r3, fp
 8002f4c:	4622      	mov	r2, r4
 8002f4e:	4629      	mov	r1, r5
 8002f50:	4638      	mov	r0, r7
 8002f52:	f7ff ff6d 	bl	8002e30 <__ssputs_r>
 8002f56:	3001      	adds	r0, #1
 8002f58:	f000 80aa 	beq.w	80030b0 <_svfiprintf_r+0x1c8>
 8002f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f5e:	445a      	add	r2, fp
 8002f60:	9209      	str	r2, [sp, #36]	; 0x24
 8002f62:	f89a 3000 	ldrb.w	r3, [sl]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 80a2 	beq.w	80030b0 <_svfiprintf_r+0x1c8>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f76:	f10a 0a01 	add.w	sl, sl, #1
 8002f7a:	9304      	str	r3, [sp, #16]
 8002f7c:	9307      	str	r3, [sp, #28]
 8002f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f82:	931a      	str	r3, [sp, #104]	; 0x68
 8002f84:	4654      	mov	r4, sl
 8002f86:	2205      	movs	r2, #5
 8002f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f8c:	4851      	ldr	r0, [pc, #324]	; (80030d4 <_svfiprintf_r+0x1ec>)
 8002f8e:	f7fd f927 	bl	80001e0 <memchr>
 8002f92:	9a04      	ldr	r2, [sp, #16]
 8002f94:	b9d8      	cbnz	r0, 8002fce <_svfiprintf_r+0xe6>
 8002f96:	06d0      	lsls	r0, r2, #27
 8002f98:	bf44      	itt	mi
 8002f9a:	2320      	movmi	r3, #32
 8002f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fa0:	0711      	lsls	r1, r2, #28
 8002fa2:	bf44      	itt	mi
 8002fa4:	232b      	movmi	r3, #43	; 0x2b
 8002fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002faa:	f89a 3000 	ldrb.w	r3, [sl]
 8002fae:	2b2a      	cmp	r3, #42	; 0x2a
 8002fb0:	d015      	beq.n	8002fde <_svfiprintf_r+0xf6>
 8002fb2:	9a07      	ldr	r2, [sp, #28]
 8002fb4:	4654      	mov	r4, sl
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f04f 0c0a 	mov.w	ip, #10
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fc2:	3b30      	subs	r3, #48	; 0x30
 8002fc4:	2b09      	cmp	r3, #9
 8002fc6:	d94e      	bls.n	8003066 <_svfiprintf_r+0x17e>
 8002fc8:	b1b0      	cbz	r0, 8002ff8 <_svfiprintf_r+0x110>
 8002fca:	9207      	str	r2, [sp, #28]
 8002fcc:	e014      	b.n	8002ff8 <_svfiprintf_r+0x110>
 8002fce:	eba0 0308 	sub.w	r3, r0, r8
 8002fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	9304      	str	r3, [sp, #16]
 8002fda:	46a2      	mov	sl, r4
 8002fdc:	e7d2      	b.n	8002f84 <_svfiprintf_r+0x9c>
 8002fde:	9b03      	ldr	r3, [sp, #12]
 8002fe0:	1d19      	adds	r1, r3, #4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	9103      	str	r1, [sp, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bfbb      	ittet	lt
 8002fea:	425b      	neglt	r3, r3
 8002fec:	f042 0202 	orrlt.w	r2, r2, #2
 8002ff0:	9307      	strge	r3, [sp, #28]
 8002ff2:	9307      	strlt	r3, [sp, #28]
 8002ff4:	bfb8      	it	lt
 8002ff6:	9204      	strlt	r2, [sp, #16]
 8002ff8:	7823      	ldrb	r3, [r4, #0]
 8002ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8002ffc:	d10c      	bne.n	8003018 <_svfiprintf_r+0x130>
 8002ffe:	7863      	ldrb	r3, [r4, #1]
 8003000:	2b2a      	cmp	r3, #42	; 0x2a
 8003002:	d135      	bne.n	8003070 <_svfiprintf_r+0x188>
 8003004:	9b03      	ldr	r3, [sp, #12]
 8003006:	1d1a      	adds	r2, r3, #4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	9203      	str	r2, [sp, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	bfb8      	it	lt
 8003010:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003014:	3402      	adds	r4, #2
 8003016:	9305      	str	r3, [sp, #20]
 8003018:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80030e4 <_svfiprintf_r+0x1fc>
 800301c:	7821      	ldrb	r1, [r4, #0]
 800301e:	2203      	movs	r2, #3
 8003020:	4650      	mov	r0, sl
 8003022:	f7fd f8dd 	bl	80001e0 <memchr>
 8003026:	b140      	cbz	r0, 800303a <_svfiprintf_r+0x152>
 8003028:	2340      	movs	r3, #64	; 0x40
 800302a:	eba0 000a 	sub.w	r0, r0, sl
 800302e:	fa03 f000 	lsl.w	r0, r3, r0
 8003032:	9b04      	ldr	r3, [sp, #16]
 8003034:	4303      	orrs	r3, r0
 8003036:	3401      	adds	r4, #1
 8003038:	9304      	str	r3, [sp, #16]
 800303a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800303e:	4826      	ldr	r0, [pc, #152]	; (80030d8 <_svfiprintf_r+0x1f0>)
 8003040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003044:	2206      	movs	r2, #6
 8003046:	f7fd f8cb 	bl	80001e0 <memchr>
 800304a:	2800      	cmp	r0, #0
 800304c:	d038      	beq.n	80030c0 <_svfiprintf_r+0x1d8>
 800304e:	4b23      	ldr	r3, [pc, #140]	; (80030dc <_svfiprintf_r+0x1f4>)
 8003050:	bb1b      	cbnz	r3, 800309a <_svfiprintf_r+0x1b2>
 8003052:	9b03      	ldr	r3, [sp, #12]
 8003054:	3307      	adds	r3, #7
 8003056:	f023 0307 	bic.w	r3, r3, #7
 800305a:	3308      	adds	r3, #8
 800305c:	9303      	str	r3, [sp, #12]
 800305e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003060:	4433      	add	r3, r6
 8003062:	9309      	str	r3, [sp, #36]	; 0x24
 8003064:	e767      	b.n	8002f36 <_svfiprintf_r+0x4e>
 8003066:	fb0c 3202 	mla	r2, ip, r2, r3
 800306a:	460c      	mov	r4, r1
 800306c:	2001      	movs	r0, #1
 800306e:	e7a5      	b.n	8002fbc <_svfiprintf_r+0xd4>
 8003070:	2300      	movs	r3, #0
 8003072:	3401      	adds	r4, #1
 8003074:	9305      	str	r3, [sp, #20]
 8003076:	4619      	mov	r1, r3
 8003078:	f04f 0c0a 	mov.w	ip, #10
 800307c:	4620      	mov	r0, r4
 800307e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003082:	3a30      	subs	r2, #48	; 0x30
 8003084:	2a09      	cmp	r2, #9
 8003086:	d903      	bls.n	8003090 <_svfiprintf_r+0x1a8>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0c5      	beq.n	8003018 <_svfiprintf_r+0x130>
 800308c:	9105      	str	r1, [sp, #20]
 800308e:	e7c3      	b.n	8003018 <_svfiprintf_r+0x130>
 8003090:	fb0c 2101 	mla	r1, ip, r1, r2
 8003094:	4604      	mov	r4, r0
 8003096:	2301      	movs	r3, #1
 8003098:	e7f0      	b.n	800307c <_svfiprintf_r+0x194>
 800309a:	ab03      	add	r3, sp, #12
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	462a      	mov	r2, r5
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <_svfiprintf_r+0x1f8>)
 80030a2:	a904      	add	r1, sp, #16
 80030a4:	4638      	mov	r0, r7
 80030a6:	f3af 8000 	nop.w
 80030aa:	1c42      	adds	r2, r0, #1
 80030ac:	4606      	mov	r6, r0
 80030ae:	d1d6      	bne.n	800305e <_svfiprintf_r+0x176>
 80030b0:	89ab      	ldrh	r3, [r5, #12]
 80030b2:	065b      	lsls	r3, r3, #25
 80030b4:	f53f af2c 	bmi.w	8002f10 <_svfiprintf_r+0x28>
 80030b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030ba:	b01d      	add	sp, #116	; 0x74
 80030bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c0:	ab03      	add	r3, sp, #12
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	462a      	mov	r2, r5
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <_svfiprintf_r+0x1f8>)
 80030c8:	a904      	add	r1, sp, #16
 80030ca:	4638      	mov	r0, r7
 80030cc:	f000 f87a 	bl	80031c4 <_printf_i>
 80030d0:	e7eb      	b.n	80030aa <_svfiprintf_r+0x1c2>
 80030d2:	bf00      	nop
 80030d4:	08003730 	.word	0x08003730
 80030d8:	0800373a 	.word	0x0800373a
 80030dc:	00000000 	.word	0x00000000
 80030e0:	08002e31 	.word	0x08002e31
 80030e4:	08003736 	.word	0x08003736

080030e8 <_printf_common>:
 80030e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ec:	4616      	mov	r6, r2
 80030ee:	4699      	mov	r9, r3
 80030f0:	688a      	ldr	r2, [r1, #8]
 80030f2:	690b      	ldr	r3, [r1, #16]
 80030f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030f8:	4293      	cmp	r3, r2
 80030fa:	bfb8      	it	lt
 80030fc:	4613      	movlt	r3, r2
 80030fe:	6033      	str	r3, [r6, #0]
 8003100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003104:	4607      	mov	r7, r0
 8003106:	460c      	mov	r4, r1
 8003108:	b10a      	cbz	r2, 800310e <_printf_common+0x26>
 800310a:	3301      	adds	r3, #1
 800310c:	6033      	str	r3, [r6, #0]
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	0699      	lsls	r1, r3, #26
 8003112:	bf42      	ittt	mi
 8003114:	6833      	ldrmi	r3, [r6, #0]
 8003116:	3302      	addmi	r3, #2
 8003118:	6033      	strmi	r3, [r6, #0]
 800311a:	6825      	ldr	r5, [r4, #0]
 800311c:	f015 0506 	ands.w	r5, r5, #6
 8003120:	d106      	bne.n	8003130 <_printf_common+0x48>
 8003122:	f104 0a19 	add.w	sl, r4, #25
 8003126:	68e3      	ldr	r3, [r4, #12]
 8003128:	6832      	ldr	r2, [r6, #0]
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	42ab      	cmp	r3, r5
 800312e:	dc26      	bgt.n	800317e <_printf_common+0x96>
 8003130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003134:	1e13      	subs	r3, r2, #0
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	bf18      	it	ne
 800313a:	2301      	movne	r3, #1
 800313c:	0692      	lsls	r2, r2, #26
 800313e:	d42b      	bmi.n	8003198 <_printf_common+0xb0>
 8003140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003144:	4649      	mov	r1, r9
 8003146:	4638      	mov	r0, r7
 8003148:	47c0      	blx	r8
 800314a:	3001      	adds	r0, #1
 800314c:	d01e      	beq.n	800318c <_printf_common+0xa4>
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	68e5      	ldr	r5, [r4, #12]
 8003152:	6832      	ldr	r2, [r6, #0]
 8003154:	f003 0306 	and.w	r3, r3, #6
 8003158:	2b04      	cmp	r3, #4
 800315a:	bf08      	it	eq
 800315c:	1aad      	subeq	r5, r5, r2
 800315e:	68a3      	ldr	r3, [r4, #8]
 8003160:	6922      	ldr	r2, [r4, #16]
 8003162:	bf0c      	ite	eq
 8003164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003168:	2500      	movne	r5, #0
 800316a:	4293      	cmp	r3, r2
 800316c:	bfc4      	itt	gt
 800316e:	1a9b      	subgt	r3, r3, r2
 8003170:	18ed      	addgt	r5, r5, r3
 8003172:	2600      	movs	r6, #0
 8003174:	341a      	adds	r4, #26
 8003176:	42b5      	cmp	r5, r6
 8003178:	d11a      	bne.n	80031b0 <_printf_common+0xc8>
 800317a:	2000      	movs	r0, #0
 800317c:	e008      	b.n	8003190 <_printf_common+0xa8>
 800317e:	2301      	movs	r3, #1
 8003180:	4652      	mov	r2, sl
 8003182:	4649      	mov	r1, r9
 8003184:	4638      	mov	r0, r7
 8003186:	47c0      	blx	r8
 8003188:	3001      	adds	r0, #1
 800318a:	d103      	bne.n	8003194 <_printf_common+0xac>
 800318c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003194:	3501      	adds	r5, #1
 8003196:	e7c6      	b.n	8003126 <_printf_common+0x3e>
 8003198:	18e1      	adds	r1, r4, r3
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	2030      	movs	r0, #48	; 0x30
 800319e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031a2:	4422      	add	r2, r4
 80031a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031ac:	3302      	adds	r3, #2
 80031ae:	e7c7      	b.n	8003140 <_printf_common+0x58>
 80031b0:	2301      	movs	r3, #1
 80031b2:	4622      	mov	r2, r4
 80031b4:	4649      	mov	r1, r9
 80031b6:	4638      	mov	r0, r7
 80031b8:	47c0      	blx	r8
 80031ba:	3001      	adds	r0, #1
 80031bc:	d0e6      	beq.n	800318c <_printf_common+0xa4>
 80031be:	3601      	adds	r6, #1
 80031c0:	e7d9      	b.n	8003176 <_printf_common+0x8e>
	...

080031c4 <_printf_i>:
 80031c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031c8:	460c      	mov	r4, r1
 80031ca:	4691      	mov	r9, r2
 80031cc:	7e27      	ldrb	r7, [r4, #24]
 80031ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80031d0:	2f78      	cmp	r7, #120	; 0x78
 80031d2:	4680      	mov	r8, r0
 80031d4:	469a      	mov	sl, r3
 80031d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031da:	d807      	bhi.n	80031ec <_printf_i+0x28>
 80031dc:	2f62      	cmp	r7, #98	; 0x62
 80031de:	d80a      	bhi.n	80031f6 <_printf_i+0x32>
 80031e0:	2f00      	cmp	r7, #0
 80031e2:	f000 80d8 	beq.w	8003396 <_printf_i+0x1d2>
 80031e6:	2f58      	cmp	r7, #88	; 0x58
 80031e8:	f000 80a3 	beq.w	8003332 <_printf_i+0x16e>
 80031ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80031f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031f4:	e03a      	b.n	800326c <_printf_i+0xa8>
 80031f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031fa:	2b15      	cmp	r3, #21
 80031fc:	d8f6      	bhi.n	80031ec <_printf_i+0x28>
 80031fe:	a001      	add	r0, pc, #4	; (adr r0, 8003204 <_printf_i+0x40>)
 8003200:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003204:	0800325d 	.word	0x0800325d
 8003208:	08003271 	.word	0x08003271
 800320c:	080031ed 	.word	0x080031ed
 8003210:	080031ed 	.word	0x080031ed
 8003214:	080031ed 	.word	0x080031ed
 8003218:	080031ed 	.word	0x080031ed
 800321c:	08003271 	.word	0x08003271
 8003220:	080031ed 	.word	0x080031ed
 8003224:	080031ed 	.word	0x080031ed
 8003228:	080031ed 	.word	0x080031ed
 800322c:	080031ed 	.word	0x080031ed
 8003230:	0800337d 	.word	0x0800337d
 8003234:	080032a1 	.word	0x080032a1
 8003238:	0800335f 	.word	0x0800335f
 800323c:	080031ed 	.word	0x080031ed
 8003240:	080031ed 	.word	0x080031ed
 8003244:	0800339f 	.word	0x0800339f
 8003248:	080031ed 	.word	0x080031ed
 800324c:	080032a1 	.word	0x080032a1
 8003250:	080031ed 	.word	0x080031ed
 8003254:	080031ed 	.word	0x080031ed
 8003258:	08003367 	.word	0x08003367
 800325c:	680b      	ldr	r3, [r1, #0]
 800325e:	1d1a      	adds	r2, r3, #4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	600a      	str	r2, [r1, #0]
 8003264:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800326c:	2301      	movs	r3, #1
 800326e:	e0a3      	b.n	80033b8 <_printf_i+0x1f4>
 8003270:	6825      	ldr	r5, [r4, #0]
 8003272:	6808      	ldr	r0, [r1, #0]
 8003274:	062e      	lsls	r6, r5, #24
 8003276:	f100 0304 	add.w	r3, r0, #4
 800327a:	d50a      	bpl.n	8003292 <_printf_i+0xce>
 800327c:	6805      	ldr	r5, [r0, #0]
 800327e:	600b      	str	r3, [r1, #0]
 8003280:	2d00      	cmp	r5, #0
 8003282:	da03      	bge.n	800328c <_printf_i+0xc8>
 8003284:	232d      	movs	r3, #45	; 0x2d
 8003286:	426d      	negs	r5, r5
 8003288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800328c:	485e      	ldr	r0, [pc, #376]	; (8003408 <_printf_i+0x244>)
 800328e:	230a      	movs	r3, #10
 8003290:	e019      	b.n	80032c6 <_printf_i+0x102>
 8003292:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003296:	6805      	ldr	r5, [r0, #0]
 8003298:	600b      	str	r3, [r1, #0]
 800329a:	bf18      	it	ne
 800329c:	b22d      	sxthne	r5, r5
 800329e:	e7ef      	b.n	8003280 <_printf_i+0xbc>
 80032a0:	680b      	ldr	r3, [r1, #0]
 80032a2:	6825      	ldr	r5, [r4, #0]
 80032a4:	1d18      	adds	r0, r3, #4
 80032a6:	6008      	str	r0, [r1, #0]
 80032a8:	0628      	lsls	r0, r5, #24
 80032aa:	d501      	bpl.n	80032b0 <_printf_i+0xec>
 80032ac:	681d      	ldr	r5, [r3, #0]
 80032ae:	e002      	b.n	80032b6 <_printf_i+0xf2>
 80032b0:	0669      	lsls	r1, r5, #25
 80032b2:	d5fb      	bpl.n	80032ac <_printf_i+0xe8>
 80032b4:	881d      	ldrh	r5, [r3, #0]
 80032b6:	4854      	ldr	r0, [pc, #336]	; (8003408 <_printf_i+0x244>)
 80032b8:	2f6f      	cmp	r7, #111	; 0x6f
 80032ba:	bf0c      	ite	eq
 80032bc:	2308      	moveq	r3, #8
 80032be:	230a      	movne	r3, #10
 80032c0:	2100      	movs	r1, #0
 80032c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032c6:	6866      	ldr	r6, [r4, #4]
 80032c8:	60a6      	str	r6, [r4, #8]
 80032ca:	2e00      	cmp	r6, #0
 80032cc:	bfa2      	ittt	ge
 80032ce:	6821      	ldrge	r1, [r4, #0]
 80032d0:	f021 0104 	bicge.w	r1, r1, #4
 80032d4:	6021      	strge	r1, [r4, #0]
 80032d6:	b90d      	cbnz	r5, 80032dc <_printf_i+0x118>
 80032d8:	2e00      	cmp	r6, #0
 80032da:	d04d      	beq.n	8003378 <_printf_i+0x1b4>
 80032dc:	4616      	mov	r6, r2
 80032de:	fbb5 f1f3 	udiv	r1, r5, r3
 80032e2:	fb03 5711 	mls	r7, r3, r1, r5
 80032e6:	5dc7      	ldrb	r7, [r0, r7]
 80032e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032ec:	462f      	mov	r7, r5
 80032ee:	42bb      	cmp	r3, r7
 80032f0:	460d      	mov	r5, r1
 80032f2:	d9f4      	bls.n	80032de <_printf_i+0x11a>
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d10b      	bne.n	8003310 <_printf_i+0x14c>
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	07df      	lsls	r7, r3, #31
 80032fc:	d508      	bpl.n	8003310 <_printf_i+0x14c>
 80032fe:	6923      	ldr	r3, [r4, #16]
 8003300:	6861      	ldr	r1, [r4, #4]
 8003302:	4299      	cmp	r1, r3
 8003304:	bfde      	ittt	le
 8003306:	2330      	movle	r3, #48	; 0x30
 8003308:	f806 3c01 	strble.w	r3, [r6, #-1]
 800330c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003310:	1b92      	subs	r2, r2, r6
 8003312:	6122      	str	r2, [r4, #16]
 8003314:	f8cd a000 	str.w	sl, [sp]
 8003318:	464b      	mov	r3, r9
 800331a:	aa03      	add	r2, sp, #12
 800331c:	4621      	mov	r1, r4
 800331e:	4640      	mov	r0, r8
 8003320:	f7ff fee2 	bl	80030e8 <_printf_common>
 8003324:	3001      	adds	r0, #1
 8003326:	d14c      	bne.n	80033c2 <_printf_i+0x1fe>
 8003328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800332c:	b004      	add	sp, #16
 800332e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003332:	4835      	ldr	r0, [pc, #212]	; (8003408 <_printf_i+0x244>)
 8003334:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003338:	6823      	ldr	r3, [r4, #0]
 800333a:	680e      	ldr	r6, [r1, #0]
 800333c:	061f      	lsls	r7, r3, #24
 800333e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003342:	600e      	str	r6, [r1, #0]
 8003344:	d514      	bpl.n	8003370 <_printf_i+0x1ac>
 8003346:	07d9      	lsls	r1, r3, #31
 8003348:	bf44      	itt	mi
 800334a:	f043 0320 	orrmi.w	r3, r3, #32
 800334e:	6023      	strmi	r3, [r4, #0]
 8003350:	b91d      	cbnz	r5, 800335a <_printf_i+0x196>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	f023 0320 	bic.w	r3, r3, #32
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	2310      	movs	r3, #16
 800335c:	e7b0      	b.n	80032c0 <_printf_i+0xfc>
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	f043 0320 	orr.w	r3, r3, #32
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	2378      	movs	r3, #120	; 0x78
 8003368:	4828      	ldr	r0, [pc, #160]	; (800340c <_printf_i+0x248>)
 800336a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800336e:	e7e3      	b.n	8003338 <_printf_i+0x174>
 8003370:	065e      	lsls	r6, r3, #25
 8003372:	bf48      	it	mi
 8003374:	b2ad      	uxthmi	r5, r5
 8003376:	e7e6      	b.n	8003346 <_printf_i+0x182>
 8003378:	4616      	mov	r6, r2
 800337a:	e7bb      	b.n	80032f4 <_printf_i+0x130>
 800337c:	680b      	ldr	r3, [r1, #0]
 800337e:	6826      	ldr	r6, [r4, #0]
 8003380:	6960      	ldr	r0, [r4, #20]
 8003382:	1d1d      	adds	r5, r3, #4
 8003384:	600d      	str	r5, [r1, #0]
 8003386:	0635      	lsls	r5, r6, #24
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	d501      	bpl.n	8003390 <_printf_i+0x1cc>
 800338c:	6018      	str	r0, [r3, #0]
 800338e:	e002      	b.n	8003396 <_printf_i+0x1d2>
 8003390:	0671      	lsls	r1, r6, #25
 8003392:	d5fb      	bpl.n	800338c <_printf_i+0x1c8>
 8003394:	8018      	strh	r0, [r3, #0]
 8003396:	2300      	movs	r3, #0
 8003398:	6123      	str	r3, [r4, #16]
 800339a:	4616      	mov	r6, r2
 800339c:	e7ba      	b.n	8003314 <_printf_i+0x150>
 800339e:	680b      	ldr	r3, [r1, #0]
 80033a0:	1d1a      	adds	r2, r3, #4
 80033a2:	600a      	str	r2, [r1, #0]
 80033a4:	681e      	ldr	r6, [r3, #0]
 80033a6:	6862      	ldr	r2, [r4, #4]
 80033a8:	2100      	movs	r1, #0
 80033aa:	4630      	mov	r0, r6
 80033ac:	f7fc ff18 	bl	80001e0 <memchr>
 80033b0:	b108      	cbz	r0, 80033b6 <_printf_i+0x1f2>
 80033b2:	1b80      	subs	r0, r0, r6
 80033b4:	6060      	str	r0, [r4, #4]
 80033b6:	6863      	ldr	r3, [r4, #4]
 80033b8:	6123      	str	r3, [r4, #16]
 80033ba:	2300      	movs	r3, #0
 80033bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033c0:	e7a8      	b.n	8003314 <_printf_i+0x150>
 80033c2:	6923      	ldr	r3, [r4, #16]
 80033c4:	4632      	mov	r2, r6
 80033c6:	4649      	mov	r1, r9
 80033c8:	4640      	mov	r0, r8
 80033ca:	47d0      	blx	sl
 80033cc:	3001      	adds	r0, #1
 80033ce:	d0ab      	beq.n	8003328 <_printf_i+0x164>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	079b      	lsls	r3, r3, #30
 80033d4:	d413      	bmi.n	80033fe <_printf_i+0x23a>
 80033d6:	68e0      	ldr	r0, [r4, #12]
 80033d8:	9b03      	ldr	r3, [sp, #12]
 80033da:	4298      	cmp	r0, r3
 80033dc:	bfb8      	it	lt
 80033de:	4618      	movlt	r0, r3
 80033e0:	e7a4      	b.n	800332c <_printf_i+0x168>
 80033e2:	2301      	movs	r3, #1
 80033e4:	4632      	mov	r2, r6
 80033e6:	4649      	mov	r1, r9
 80033e8:	4640      	mov	r0, r8
 80033ea:	47d0      	blx	sl
 80033ec:	3001      	adds	r0, #1
 80033ee:	d09b      	beq.n	8003328 <_printf_i+0x164>
 80033f0:	3501      	adds	r5, #1
 80033f2:	68e3      	ldr	r3, [r4, #12]
 80033f4:	9903      	ldr	r1, [sp, #12]
 80033f6:	1a5b      	subs	r3, r3, r1
 80033f8:	42ab      	cmp	r3, r5
 80033fa:	dcf2      	bgt.n	80033e2 <_printf_i+0x21e>
 80033fc:	e7eb      	b.n	80033d6 <_printf_i+0x212>
 80033fe:	2500      	movs	r5, #0
 8003400:	f104 0619 	add.w	r6, r4, #25
 8003404:	e7f5      	b.n	80033f2 <_printf_i+0x22e>
 8003406:	bf00      	nop
 8003408:	08003741 	.word	0x08003741
 800340c:	08003752 	.word	0x08003752

08003410 <memcpy>:
 8003410:	440a      	add	r2, r1
 8003412:	4291      	cmp	r1, r2
 8003414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003418:	d100      	bne.n	800341c <memcpy+0xc>
 800341a:	4770      	bx	lr
 800341c:	b510      	push	{r4, lr}
 800341e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003426:	4291      	cmp	r1, r2
 8003428:	d1f9      	bne.n	800341e <memcpy+0xe>
 800342a:	bd10      	pop	{r4, pc}

0800342c <memmove>:
 800342c:	4288      	cmp	r0, r1
 800342e:	b510      	push	{r4, lr}
 8003430:	eb01 0402 	add.w	r4, r1, r2
 8003434:	d902      	bls.n	800343c <memmove+0x10>
 8003436:	4284      	cmp	r4, r0
 8003438:	4623      	mov	r3, r4
 800343a:	d807      	bhi.n	800344c <memmove+0x20>
 800343c:	1e43      	subs	r3, r0, #1
 800343e:	42a1      	cmp	r1, r4
 8003440:	d008      	beq.n	8003454 <memmove+0x28>
 8003442:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800344a:	e7f8      	b.n	800343e <memmove+0x12>
 800344c:	4402      	add	r2, r0
 800344e:	4601      	mov	r1, r0
 8003450:	428a      	cmp	r2, r1
 8003452:	d100      	bne.n	8003456 <memmove+0x2a>
 8003454:	bd10      	pop	{r4, pc}
 8003456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800345a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800345e:	e7f7      	b.n	8003450 <memmove+0x24>

08003460 <_free_r>:
 8003460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003462:	2900      	cmp	r1, #0
 8003464:	d048      	beq.n	80034f8 <_free_r+0x98>
 8003466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800346a:	9001      	str	r0, [sp, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f1a1 0404 	sub.w	r4, r1, #4
 8003472:	bfb8      	it	lt
 8003474:	18e4      	addlt	r4, r4, r3
 8003476:	f000 f8d3 	bl	8003620 <__malloc_lock>
 800347a:	4a20      	ldr	r2, [pc, #128]	; (80034fc <_free_r+0x9c>)
 800347c:	9801      	ldr	r0, [sp, #4]
 800347e:	6813      	ldr	r3, [r2, #0]
 8003480:	4615      	mov	r5, r2
 8003482:	b933      	cbnz	r3, 8003492 <_free_r+0x32>
 8003484:	6063      	str	r3, [r4, #4]
 8003486:	6014      	str	r4, [r2, #0]
 8003488:	b003      	add	sp, #12
 800348a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800348e:	f000 b8cd 	b.w	800362c <__malloc_unlock>
 8003492:	42a3      	cmp	r3, r4
 8003494:	d90b      	bls.n	80034ae <_free_r+0x4e>
 8003496:	6821      	ldr	r1, [r4, #0]
 8003498:	1862      	adds	r2, r4, r1
 800349a:	4293      	cmp	r3, r2
 800349c:	bf04      	itt	eq
 800349e:	681a      	ldreq	r2, [r3, #0]
 80034a0:	685b      	ldreq	r3, [r3, #4]
 80034a2:	6063      	str	r3, [r4, #4]
 80034a4:	bf04      	itt	eq
 80034a6:	1852      	addeq	r2, r2, r1
 80034a8:	6022      	streq	r2, [r4, #0]
 80034aa:	602c      	str	r4, [r5, #0]
 80034ac:	e7ec      	b.n	8003488 <_free_r+0x28>
 80034ae:	461a      	mov	r2, r3
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	b10b      	cbz	r3, 80034b8 <_free_r+0x58>
 80034b4:	42a3      	cmp	r3, r4
 80034b6:	d9fa      	bls.n	80034ae <_free_r+0x4e>
 80034b8:	6811      	ldr	r1, [r2, #0]
 80034ba:	1855      	adds	r5, r2, r1
 80034bc:	42a5      	cmp	r5, r4
 80034be:	d10b      	bne.n	80034d8 <_free_r+0x78>
 80034c0:	6824      	ldr	r4, [r4, #0]
 80034c2:	4421      	add	r1, r4
 80034c4:	1854      	adds	r4, r2, r1
 80034c6:	42a3      	cmp	r3, r4
 80034c8:	6011      	str	r1, [r2, #0]
 80034ca:	d1dd      	bne.n	8003488 <_free_r+0x28>
 80034cc:	681c      	ldr	r4, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	6053      	str	r3, [r2, #4]
 80034d2:	4421      	add	r1, r4
 80034d4:	6011      	str	r1, [r2, #0]
 80034d6:	e7d7      	b.n	8003488 <_free_r+0x28>
 80034d8:	d902      	bls.n	80034e0 <_free_r+0x80>
 80034da:	230c      	movs	r3, #12
 80034dc:	6003      	str	r3, [r0, #0]
 80034de:	e7d3      	b.n	8003488 <_free_r+0x28>
 80034e0:	6825      	ldr	r5, [r4, #0]
 80034e2:	1961      	adds	r1, r4, r5
 80034e4:	428b      	cmp	r3, r1
 80034e6:	bf04      	itt	eq
 80034e8:	6819      	ldreq	r1, [r3, #0]
 80034ea:	685b      	ldreq	r3, [r3, #4]
 80034ec:	6063      	str	r3, [r4, #4]
 80034ee:	bf04      	itt	eq
 80034f0:	1949      	addeq	r1, r1, r5
 80034f2:	6021      	streq	r1, [r4, #0]
 80034f4:	6054      	str	r4, [r2, #4]
 80034f6:	e7c7      	b.n	8003488 <_free_r+0x28>
 80034f8:	b003      	add	sp, #12
 80034fa:	bd30      	pop	{r4, r5, pc}
 80034fc:	20000090 	.word	0x20000090

08003500 <_malloc_r>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	1ccd      	adds	r5, r1, #3
 8003504:	f025 0503 	bic.w	r5, r5, #3
 8003508:	3508      	adds	r5, #8
 800350a:	2d0c      	cmp	r5, #12
 800350c:	bf38      	it	cc
 800350e:	250c      	movcc	r5, #12
 8003510:	2d00      	cmp	r5, #0
 8003512:	4606      	mov	r6, r0
 8003514:	db01      	blt.n	800351a <_malloc_r+0x1a>
 8003516:	42a9      	cmp	r1, r5
 8003518:	d903      	bls.n	8003522 <_malloc_r+0x22>
 800351a:	230c      	movs	r3, #12
 800351c:	6033      	str	r3, [r6, #0]
 800351e:	2000      	movs	r0, #0
 8003520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003522:	f000 f87d 	bl	8003620 <__malloc_lock>
 8003526:	4921      	ldr	r1, [pc, #132]	; (80035ac <_malloc_r+0xac>)
 8003528:	680a      	ldr	r2, [r1, #0]
 800352a:	4614      	mov	r4, r2
 800352c:	b99c      	cbnz	r4, 8003556 <_malloc_r+0x56>
 800352e:	4f20      	ldr	r7, [pc, #128]	; (80035b0 <_malloc_r+0xb0>)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	b923      	cbnz	r3, 800353e <_malloc_r+0x3e>
 8003534:	4621      	mov	r1, r4
 8003536:	4630      	mov	r0, r6
 8003538:	f000 f862 	bl	8003600 <_sbrk_r>
 800353c:	6038      	str	r0, [r7, #0]
 800353e:	4629      	mov	r1, r5
 8003540:	4630      	mov	r0, r6
 8003542:	f000 f85d 	bl	8003600 <_sbrk_r>
 8003546:	1c43      	adds	r3, r0, #1
 8003548:	d123      	bne.n	8003592 <_malloc_r+0x92>
 800354a:	230c      	movs	r3, #12
 800354c:	6033      	str	r3, [r6, #0]
 800354e:	4630      	mov	r0, r6
 8003550:	f000 f86c 	bl	800362c <__malloc_unlock>
 8003554:	e7e3      	b.n	800351e <_malloc_r+0x1e>
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	1b5b      	subs	r3, r3, r5
 800355a:	d417      	bmi.n	800358c <_malloc_r+0x8c>
 800355c:	2b0b      	cmp	r3, #11
 800355e:	d903      	bls.n	8003568 <_malloc_r+0x68>
 8003560:	6023      	str	r3, [r4, #0]
 8003562:	441c      	add	r4, r3
 8003564:	6025      	str	r5, [r4, #0]
 8003566:	e004      	b.n	8003572 <_malloc_r+0x72>
 8003568:	6863      	ldr	r3, [r4, #4]
 800356a:	42a2      	cmp	r2, r4
 800356c:	bf0c      	ite	eq
 800356e:	600b      	streq	r3, [r1, #0]
 8003570:	6053      	strne	r3, [r2, #4]
 8003572:	4630      	mov	r0, r6
 8003574:	f000 f85a 	bl	800362c <__malloc_unlock>
 8003578:	f104 000b 	add.w	r0, r4, #11
 800357c:	1d23      	adds	r3, r4, #4
 800357e:	f020 0007 	bic.w	r0, r0, #7
 8003582:	1ac2      	subs	r2, r0, r3
 8003584:	d0cc      	beq.n	8003520 <_malloc_r+0x20>
 8003586:	1a1b      	subs	r3, r3, r0
 8003588:	50a3      	str	r3, [r4, r2]
 800358a:	e7c9      	b.n	8003520 <_malloc_r+0x20>
 800358c:	4622      	mov	r2, r4
 800358e:	6864      	ldr	r4, [r4, #4]
 8003590:	e7cc      	b.n	800352c <_malloc_r+0x2c>
 8003592:	1cc4      	adds	r4, r0, #3
 8003594:	f024 0403 	bic.w	r4, r4, #3
 8003598:	42a0      	cmp	r0, r4
 800359a:	d0e3      	beq.n	8003564 <_malloc_r+0x64>
 800359c:	1a21      	subs	r1, r4, r0
 800359e:	4630      	mov	r0, r6
 80035a0:	f000 f82e 	bl	8003600 <_sbrk_r>
 80035a4:	3001      	adds	r0, #1
 80035a6:	d1dd      	bne.n	8003564 <_malloc_r+0x64>
 80035a8:	e7cf      	b.n	800354a <_malloc_r+0x4a>
 80035aa:	bf00      	nop
 80035ac:	20000090 	.word	0x20000090
 80035b0:	20000094 	.word	0x20000094

080035b4 <_realloc_r>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	4607      	mov	r7, r0
 80035b8:	4614      	mov	r4, r2
 80035ba:	460e      	mov	r6, r1
 80035bc:	b921      	cbnz	r1, 80035c8 <_realloc_r+0x14>
 80035be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035c2:	4611      	mov	r1, r2
 80035c4:	f7ff bf9c 	b.w	8003500 <_malloc_r>
 80035c8:	b922      	cbnz	r2, 80035d4 <_realloc_r+0x20>
 80035ca:	f7ff ff49 	bl	8003460 <_free_r>
 80035ce:	4625      	mov	r5, r4
 80035d0:	4628      	mov	r0, r5
 80035d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d4:	f000 f830 	bl	8003638 <_malloc_usable_size_r>
 80035d8:	42a0      	cmp	r0, r4
 80035da:	d20f      	bcs.n	80035fc <_realloc_r+0x48>
 80035dc:	4621      	mov	r1, r4
 80035de:	4638      	mov	r0, r7
 80035e0:	f7ff ff8e 	bl	8003500 <_malloc_r>
 80035e4:	4605      	mov	r5, r0
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d0f2      	beq.n	80035d0 <_realloc_r+0x1c>
 80035ea:	4631      	mov	r1, r6
 80035ec:	4622      	mov	r2, r4
 80035ee:	f7ff ff0f 	bl	8003410 <memcpy>
 80035f2:	4631      	mov	r1, r6
 80035f4:	4638      	mov	r0, r7
 80035f6:	f7ff ff33 	bl	8003460 <_free_r>
 80035fa:	e7e9      	b.n	80035d0 <_realloc_r+0x1c>
 80035fc:	4635      	mov	r5, r6
 80035fe:	e7e7      	b.n	80035d0 <_realloc_r+0x1c>

08003600 <_sbrk_r>:
 8003600:	b538      	push	{r3, r4, r5, lr}
 8003602:	4d06      	ldr	r5, [pc, #24]	; (800361c <_sbrk_r+0x1c>)
 8003604:	2300      	movs	r3, #0
 8003606:	4604      	mov	r4, r0
 8003608:	4608      	mov	r0, r1
 800360a:	602b      	str	r3, [r5, #0]
 800360c:	f7fd fa5a 	bl	8000ac4 <_sbrk>
 8003610:	1c43      	adds	r3, r0, #1
 8003612:	d102      	bne.n	800361a <_sbrk_r+0x1a>
 8003614:	682b      	ldr	r3, [r5, #0]
 8003616:	b103      	cbz	r3, 800361a <_sbrk_r+0x1a>
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	bd38      	pop	{r3, r4, r5, pc}
 800361c:	20000100 	.word	0x20000100

08003620 <__malloc_lock>:
 8003620:	4801      	ldr	r0, [pc, #4]	; (8003628 <__malloc_lock+0x8>)
 8003622:	f000 b811 	b.w	8003648 <__retarget_lock_acquire_recursive>
 8003626:	bf00      	nop
 8003628:	20000108 	.word	0x20000108

0800362c <__malloc_unlock>:
 800362c:	4801      	ldr	r0, [pc, #4]	; (8003634 <__malloc_unlock+0x8>)
 800362e:	f000 b80c 	b.w	800364a <__retarget_lock_release_recursive>
 8003632:	bf00      	nop
 8003634:	20000108 	.word	0x20000108

08003638 <_malloc_usable_size_r>:
 8003638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800363c:	1f18      	subs	r0, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	bfbc      	itt	lt
 8003642:	580b      	ldrlt	r3, [r1, r0]
 8003644:	18c0      	addlt	r0, r0, r3
 8003646:	4770      	bx	lr

08003648 <__retarget_lock_acquire_recursive>:
 8003648:	4770      	bx	lr

0800364a <__retarget_lock_release_recursive>:
 800364a:	4770      	bx	lr

0800364c <_init>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	bf00      	nop
 8003650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003652:	bc08      	pop	{r3}
 8003654:	469e      	mov	lr, r3
 8003656:	4770      	bx	lr

08003658 <_fini>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr
