
013SLEEPONEXIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001c0c  08001c0c  00011c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c3c  08001c3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c3c  08001c3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c3c  08001c3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c3c  08001c3c  00011c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c40  08001c40  00011c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08001c50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08001c50  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a51e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001949  00000000  00000000  0002a553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0002bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  0002ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c1c  00000000  00000000  0002d548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3ac  00000000  00000000  00044164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008670f  00000000  00000000  0004f510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5c1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003068  00000000  00000000  000d5c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001bf4 	.word	0x08001bf4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001bf4 	.word	0x08001bf4

0800014c <SysTick_Handler>:
 */
#include "stm32f1xx.h"

extern TIM_HandleTypeDef timer2_handle;

void SysTick_Handler(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000150:	f000 fa34 	bl	80005bc <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000154:	f000 fb78 	bl	8000848 <HAL_SYSTICK_IRQHandler>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&timer2_handle);
 8000160:	4802      	ldr	r0, [pc, #8]	; (800016c <TIM2_IRQHandler+0x10>)
 8000162:	f001 f9cb 	bl	80014fc <HAL_TIM_IRQHandler>
}
 8000166:	bf00      	nop
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	20000028 	.word	0x20000028

08000170 <main>:
UART_HandleTypeDef huart2;

/************************************************************************************
 *                             MAIN                                                 *
 ************************************************************************************/
int main(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	// Local variables

	// This should be the first function to be called
	HAL_Init();
 8000174:	f000 f9dc 	bl	8000530 <HAL_Init>

	// Config. the clock
	SystemClock_Config_HSE(SYS_CLOCK_FREQ_72_MHZ);
 8000178:	2048      	movs	r0, #72	; 0x48
 800017a:	f000 f8af 	bl	80002dc <SystemClock_Config_HSE>

	// Init the UART2
	UART2_Init();
 800017e:	f000 f86b 	bl	8000258 <UART2_Init>

	// Init Timer 2
	TIMER2_Init();
 8000182:	f000 f84d 	bl	8000220 <TIMER2_Init>

	// Analog config for GPIOs to reduce power
	GPIO_AnalogConfig();
 8000186:	f000 f891 	bl	80002ac <GPIO_AnalogConfig>

	// Start timer
	HAL_TIM_Base_Start_IT(&timer2_handle);
 800018a:	4803      	ldr	r0, [pc, #12]	; (8000198 <main+0x28>)
 800018c:	f001 f964 	bl	8001458 <HAL_TIM_Base_Start_IT>

	// Enable sleep on exit
	HAL_PWR_EnableSleepOnExit(); //SCB->SCR |= (1 << 1);
 8000190:	f000 fcea 	bl	8000b68 <HAL_PWR_EnableSleepOnExit>

	for(;;);
 8000194:	e7fe      	b.n	8000194 <main+0x24>
 8000196:	bf00      	nop
 8000198:	20000028 	.word	0x20000028

0800019c <HAL_TIM_PeriodElapsedCallback>:

/************************************************************************************
 *                             FUNCTIONS                                            *
 ************************************************************************************/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]

	// 1. Enable the clock for the USART2 peripheral and GPIOA (on other microcontrollers, RCC may have a register to configure automatic disable for each peripheral clock in low power mode whenever MCU goes to sleep )
	__HAL_RCC_USART2_CLK_ENABLE();
 80001a4:	4b1b      	ldr	r3, [pc, #108]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80001a6:	69db      	ldr	r3, [r3, #28]
 80001a8:	4a1a      	ldr	r2, [pc, #104]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80001aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001ae:	61d3      	str	r3, [r2, #28]
 80001b0:	4b18      	ldr	r3, [pc, #96]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80001b2:	69db      	ldr	r3, [r3, #28]
 80001b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001b8:	60fb      	str	r3, [r7, #12]
 80001ba:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80001bc:	4b15      	ldr	r3, [pc, #84]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	4a14      	ldr	r2, [pc, #80]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6193      	str	r3, [r2, #24]
 80001c8:	4b12      	ldr	r3, [pc, #72]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80001ca:	699b      	ldr	r3, [r3, #24]
 80001cc:	f003 0304 	and.w	r3, r3, #4
 80001d0:	60bb      	str	r3, [r7, #8]
 80001d2:	68bb      	ldr	r3, [r7, #8]

	// 2. Send data received back to the sender
	uint8_t message[] = "Hello";
 80001d4:	4a10      	ldr	r2, [pc, #64]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80001d6:	f107 0310 	add.w	r3, r7, #16
 80001da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001de:	6018      	str	r0, [r3, #0]
 80001e0:	3304      	adds	r3, #4
 80001e2:	8019      	strh	r1, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 80001e4:	f107 0110 	add.w	r1, r7, #16
 80001e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001ec:	2206      	movs	r2, #6
 80001ee:	480b      	ldr	r0, [pc, #44]	; (800021c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80001f0:	f001 fb71 	bl	80018d6 <HAL_UART_Transmit>

	// 3. Disable the clock for the USART2 peripheral and GPIOA ( before processor enters sleep mode).
	// On other microcontrollers, RCC may have a register to configure automatic disabling for each
	// peripheral clock in low power mode whenever MCU goes to sleep.
	// API for that - HAL_RCC_USART2_CLK_SLEEP_DISABLE()
	__HAL_RCC_USART2_CLK_DISABLE();
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80001f6:	69db      	ldr	r3, [r3, #28]
 80001f8:	4a06      	ldr	r2, [pc, #24]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80001fa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80001fe:	61d3      	str	r3, [r2, #28]
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a03      	ldr	r2, [pc, #12]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000206:	f023 0304 	bic.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
}
 800020c:	bf00      	nop
 800020e:	3718      	adds	r7, #24
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	40021000 	.word	0x40021000
 8000218:	08001c0c 	.word	0x08001c0c
 800021c:	20000070 	.word	0x20000070

08000220 <TIMER2_Init>:


void TIMER2_Init(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	// 1. Initialize the TIMER2 time base (10ms)
	timer2_handle.Instance = TIM2;
 8000224:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <TIMER2_Init+0x34>)
 8000226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800022a:	601a      	str	r2, [r3, #0]
	timer2_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <TIMER2_Init+0x34>)
 800022e:	2200      	movs	r2, #0
 8000230:	609a      	str	r2, [r3, #8]
	timer2_handle.Init.Period = 100 - 1;
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <TIMER2_Init+0x34>)
 8000234:	2263      	movs	r2, #99	; 0x63
 8000236:	60da      	str	r2, [r3, #12]
	timer2_handle.Init.Prescaler = 7200 - 1;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <TIMER2_Init+0x34>)
 800023a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800023e:	605a      	str	r2, [r3, #4]

	if(HAL_TIM_Base_Init(&timer2_handle) != HAL_OK)
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <TIMER2_Init+0x34>)
 8000242:	f001 f8b9 	bl	80013b8 <HAL_TIM_Base_Init>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <TIMER2_Init+0x30>
		Error_handler();
 800024c:	f000 f8be 	bl	80003cc <Error_handler>

}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000028 	.word	0x20000028

08000258 <UART2_Init>:

void UART2_Init(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 800025c:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <UART2_Init+0x4c>)
 800025e:	4a12      	ldr	r2, [pc, #72]	; (80002a8 <UART2_Init+0x50>)
 8000260:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000262:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <UART2_Init+0x4c>)
 8000264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000268:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <UART2_Init+0x4c>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <UART2_Init+0x4c>)
 8000272:	2200      	movs	r2, #0
 8000274:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <UART2_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <UART2_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <UART2_Init+0x4c>)
 8000284:	2208      	movs	r2, #8
 8000286:	615a      	str	r2, [r3, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <UART2_Init+0x4c>)
 800028a:	2200      	movs	r2, #0
 800028c:	61da      	str	r2, [r3, #28]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <UART2_Init+0x4c>)
 8000290:	f001 fad4 	bl	800183c <HAL_UART_Init>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <UART2_Init+0x46>
		Error_handler();
 800029a:	f000 f897 	bl	80003cc <Error_handler>
	}

}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000070 	.word	0x20000070
 80002a8:	40004400 	.word	0x40004400

080002ac <GPIO_AnalogConfig>:

void GPIO_AnalogConfig(void){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GpioA;

	GpioA.Pin = GPIO_PIN_All ^ GPIO_PIN_2;  // All pins except pin two
 80002b2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80002b6:	603b      	str	r3, [r7, #0]
	GpioA.Mode = GPIO_MODE_ANALOG;
 80002b8:	2303      	movs	r3, #3
 80002ba:	607b      	str	r3, [r7, #4]
	GpioA.Pull = GPIO_NOPULL;
 80002bc:	2300      	movs	r3, #0
 80002be:	60bb      	str	r3, [r7, #8]
	GpioA.Speed = GPIO_SPEED_FREQ_LOW;
 80002c0:	2302      	movs	r3, #2
 80002c2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GpioA);
 80002c4:	463b      	mov	r3, r7
 80002c6:	4619      	mov	r1, r3
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <GPIO_AnalogConfig+0x2c>)
 80002ca:	f000 fac9 	bl	8000860 <HAL_GPIO_Init>
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010800 	.word	0x40010800

080002dc <SystemClock_Config_HSE>:

void SystemClock_Config_HSE(uint8_t clock_freq){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b092      	sub	sp, #72	; 0x48
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint32_t FLatency;

	// 1. Init. the oscillator
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e6:	2301      	movs	r3, #1
 80002e8:	61fb      	str	r3, [r7, #28]
	osc_init.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	627b      	str	r3, [r7, #36]	; 0x24
	osc_init.HSEState = RCC_HSE_ON;
 80002ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f2:	623b      	str	r3, [r7, #32]
	osc_init.HSIState = RCC_HSI_ON;
 80002f4:	2301      	movs	r3, #1
 80002f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.LSEState = RCC_LSE_OFF;
 80002f8:	2300      	movs	r3, #0
 80002fa:	62bb      	str	r3, [r7, #40]	; 0x28
	osc_init.LSIState = RCC_LSI_OFF;
 80002fc:	2300      	movs	r3, #0
 80002fe:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000300:	2310      	movs	r3, #16
 8000302:	633b      	str	r3, [r7, #48]	; 0x30
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800030c:	63fb      	str	r3, [r7, #60]	; 0x3c

	// 2. Init. the clock
	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |\
 800030e:	230f      	movs	r3, #15
 8000310:	60bb      	str	r3, [r7, #8]
			 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000312:	2302      	movs	r3, #2
 8000314:	60fb      	str	r3, [r7, #12]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	61bb      	str	r3, [r7, #24]

	// 3. Configurations that depend on clock_freq
	switch(clock_freq){
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b48      	cmp	r3, #72	; 0x48
 8000326:	d01e      	beq.n	8000366 <SystemClock_Config_HSE+0x8a>
 8000328:	2b48      	cmp	r3, #72	; 0x48
 800032a:	dc48      	bgt.n	80003be <SystemClock_Config_HSE+0xe2>
 800032c:	2b40      	cmp	r3, #64	; 0x40
 800032e:	d011      	beq.n	8000354 <SystemClock_Config_HSE+0x78>
 8000330:	2b40      	cmp	r3, #64	; 0x40
 8000332:	dc44      	bgt.n	80003be <SystemClock_Config_HSE+0xe2>
 8000334:	2b10      	cmp	r3, #16
 8000336:	d002      	beq.n	800033e <SystemClock_Config_HSE+0x62>
 8000338:	2b20      	cmp	r3, #32
 800033a:	d005      	beq.n	8000348 <SystemClock_Config_HSE+0x6c>
			osc_init.PLL.PLLMUL = RCC_PLL_MUL9;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
			FLatency = FLASH_LATENCY_2;
			break;
		default:
			return;
 800033c:	e03f      	b.n	80003be <SystemClock_Config_HSE+0xe2>
			osc_init.PLL.PLLMUL = RCC_PLL_MUL2;
 800033e:	2300      	movs	r3, #0
 8000340:	643b      	str	r3, [r7, #64]	; 0x40
			FLatency = FLASH_LATENCY_0;
 8000342:	2300      	movs	r3, #0
 8000344:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000346:	e017      	b.n	8000378 <SystemClock_Config_HSE+0x9c>
			osc_init.PLL.PLLMUL = RCC_PLL_MUL4;
 8000348:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800034c:	643b      	str	r3, [r7, #64]	; 0x40
			FLatency = FLASH_LATENCY_1;
 800034e:	2301      	movs	r3, #1
 8000350:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000352:	e011      	b.n	8000378 <SystemClock_Config_HSE+0x9c>
			osc_init.PLL.PLLMUL = RCC_PLL_MUL8;
 8000354:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000358:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800035a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800035e:	617b      	str	r3, [r7, #20]
			FLatency = FLASH_LATENCY_2;
 8000360:	2302      	movs	r3, #2
 8000362:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000364:	e008      	b.n	8000378 <SystemClock_Config_HSE+0x9c>
			osc_init.PLL.PLLMUL = RCC_PLL_MUL9;
 8000366:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036a:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800036c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000370:	617b      	str	r3, [r7, #20]
			FLatency = FLASH_LATENCY_2;
 8000372:	2302      	movs	r3, #2
 8000374:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000376:	bf00      	nop
	}

	// 4. Call the APIs
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8000378:	f107 031c 	add.w	r3, r7, #28
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fc01 	bl	8000b84 <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config_HSE+0xb0>
		Error_handler();
 8000388:	f000 f820 	bl	80003cc <Error_handler>
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK)
 800038c:	f107 0308 	add.w	r3, r7, #8
 8000390:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000392:	4618      	mov	r0, r3
 8000394:	f000 fe76 	bl	8001084 <HAL_RCC_ClockConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config_HSE+0xc6>
		Error_handler();
 800039e:	f000 f815 	bl	80003cc <Error_handler>

	// 5. Systick
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80003a2:	f000 ffb9 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 80003a6:	4603      	mov	r3, r0
 80003a8:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <SystemClock_Config_HSE+0xec>)
 80003aa:	fba2 2303 	umull	r2, r3, r2, r3
 80003ae:	099b      	lsrs	r3, r3, #6
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fa20 	bl	80007f6 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80003b6:	2004      	movs	r0, #4
 80003b8:	f000 fa2a 	bl	8000810 <HAL_SYSTICK_CLKSourceConfig>
 80003bc:	e000      	b.n	80003c0 <SystemClock_Config_HSE+0xe4>
			return;
 80003be:	bf00      	nop

}
 80003c0:	3748      	adds	r7, #72	; 0x48
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	10624dd3 	.word	0x10624dd3

080003cc <Error_handler>:

void Error_handler(void){
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
	while(1);
 80003d0:	e7fe      	b.n	80003d0 <Error_handler+0x4>
	...

080003d4 <HAL_MspInit>:
 */

#include "stm32f1xx.h"

/* Low Level processor Init. Called by HAL_Init()*/
void HAL_MspInit(void){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003da:	2003      	movs	r0, #3
 80003dc:	f000 f9d6 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

	// 2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x07 << 16;  // En: usg fault, memory fault and bus fault
 80003e0:	4b13      	ldr	r3, [pc, #76]	; (8000430 <HAL_MspInit+0x5c>)
 80003e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e4:	4a12      	ldr	r2, [pc, #72]	; (8000430 <HAL_MspInit+0x5c>)
 80003e6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80003ea:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2100      	movs	r1, #0
 80003f0:	f06f 000b 	mvn.w	r0, #11
 80003f4:	f000 f9d5 	bl	80007a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2100      	movs	r1, #0
 80003fc:	f06f 000a 	mvn.w	r0, #10
 8000400:	f000 f9cf 	bl	80007a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000404:	2200      	movs	r2, #0
 8000406:	2100      	movs	r1, #0
 8000408:	f06f 0009 	mvn.w	r0, #9
 800040c:	f000 f9c9 	bl	80007a2 <HAL_NVIC_SetPriority>

	__HAL_RCC_AFIO_CLK_ENABLE();
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <HAL_MspInit+0x60>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a07      	ldr	r2, [pc, #28]	; (8000434 <HAL_MspInit+0x60>)
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <HAL_MspInit+0x60>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	687b      	ldr	r3, [r7, #4]
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	e000ed00 	.word	0xe000ed00
 8000434:	40021000 	.word	0x40021000

08000438 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim){
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]

	// 1. Enable the clock for the TIM2 peripheral
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <HAL_TIM_Base_MspInit+0x38>)
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <HAL_TIM_Base_MspInit+0x38>)
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	61d3      	str	r3, [r2, #28]
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <HAL_TIM_Base_MspInit+0x38>)
 800044e:	69db      	ldr	r3, [r3, #28]
 8000450:	f003 0301 	and.w	r3, r3, #1
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]

	// 2. Enable IRQ of timer 6
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000458:	201c      	movs	r0, #28
 800045a:	f000 f9be 	bl	80007da <HAL_NVIC_EnableIRQ>

	// 3. Set up the priority
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	210f      	movs	r1, #15
 8000462:	201c      	movs	r0, #28
 8000464:	f000 f99d 	bl	80007a2 <HAL_NVIC_SetPriority>

}
 8000468:	bf00      	nop
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40021000 	.word	0x40021000

08000474 <HAL_UART_MspInit>:

/* Low level UART init. Called by HAL_UART_Init()*/
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	// 1. Enable the clock for the USART2 peripheral and GPIOA
	__HAL_RCC_USART2_CLK_ENABLE();
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <HAL_UART_MspInit+0x5c>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	4a13      	ldr	r2, [pc, #76]	; (80004d0 <HAL_UART_MspInit+0x5c>)
 8000482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000486:	61d3      	str	r3, [r2, #28]
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <HAL_UART_MspInit+0x5c>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000494:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <HAL_UART_MspInit+0x5c>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <HAL_UART_MspInit+0x5c>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <HAL_UART_MspInit+0x5c>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0304 	and.w	r3, r3, #4
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	68bb      	ldr	r3, [r7, #8]

	// 2. Do the pin muxing configurations
	GPIO_InitTypeDef gpio_uart;
	gpio_uart.Pin = GPIO_PIN_2;
 80004ac:	2304      	movs	r3, #4
 80004ae:	613b      	str	r3, [r7, #16]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80004b0:	2302      	movs	r3, #2
 80004b2:	617b      	str	r3, [r7, #20]
	gpio_uart.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
	gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b8:	2303      	movs	r3, #3
 80004ba:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio_uart);  // PA2 --> UART2 TX
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	4804      	ldr	r0, [pc, #16]	; (80004d4 <HAL_UART_MspInit+0x60>)
 80004c4:	f000 f9cc 	bl	8000860 <HAL_GPIO_Init>

}
 80004c8:	bf00      	nop
 80004ca:	3720      	adds	r7, #32
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010800 	.word	0x40010800

080004d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	; (800051c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	; (8000528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800050a:	f7ff ffe5 	bl	80004d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050e:	f001 fb4d 	bl	8001bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff fe2d 	bl	8000170 <main>
  bx lr
 8000516:	4770      	bx	lr
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000520:	08001c44 	.word	0x08001c44
  ldr r2, =_sbss
 8000524:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000528:	200000b8 	.word	0x200000b8

0800052c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC1_2_IRQHandler>
	...

08000530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_Init+0x28>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_Init+0x28>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f923 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 f808 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054c:	f7ff ff42 	bl	80003d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40022000 	.word	0x40022000

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x54>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_InitTick+0x58>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000572:	fbb3 f3f1 	udiv	r3, r3, r1
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f93b 	bl	80007f6 <HAL_SYSTICK_Config>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e00e      	b.n	80005a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d80a      	bhi.n	80005a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000598:	f000 f903 	bl	80007a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <HAL_InitTick+0x5c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000004 	.word	0x20000004

080005bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_IncTick+0x1c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_IncTick+0x20>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a03      	ldr	r2, [pc, #12]	; (80005dc <HAL_IncTick+0x20>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	20000008 	.word	0x20000008
 80005dc:	200000b4 	.word	0x200000b4

080005e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <HAL_GetTick+0x10>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	200000b4 	.word	0x200000b4

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4906      	ldr	r1, [pc, #24]	; (800068c <__NVIC_EnableIRQ+0x34>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800076c:	f7ff ff90 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff2d 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b4:	f7ff ff42 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff90 	bl	80006e4 <NVIC_EncodePriority>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5f 	bl	8000690 <__NVIC_SetPriority>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff35 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffa2 	bl	8000748 <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b04      	cmp	r3, #4
 800081c:	d106      	bne.n	800082c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800082a:	e005      	b.n	8000838 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000832:	f023 0304 	bic.w	r3, r3, #4
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800084c:	f000 f802 	bl	8000854 <HAL_SYSTICK_Callback>
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000860:	b480      	push	{r7}
 8000862:	b08b      	sub	sp, #44	; 0x2c
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000872:	e169      	b.n	8000b48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000874:	2201      	movs	r2, #1
 8000876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	69fa      	ldr	r2, [r7, #28]
 8000884:	4013      	ands	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	429a      	cmp	r2, r3
 800088e:	f040 8158 	bne.w	8000b42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	4a9a      	ldr	r2, [pc, #616]	; (8000b00 <HAL_GPIO_Init+0x2a0>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d05e      	beq.n	800095a <HAL_GPIO_Init+0xfa>
 800089c:	4a98      	ldr	r2, [pc, #608]	; (8000b00 <HAL_GPIO_Init+0x2a0>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d875      	bhi.n	800098e <HAL_GPIO_Init+0x12e>
 80008a2:	4a98      	ldr	r2, [pc, #608]	; (8000b04 <HAL_GPIO_Init+0x2a4>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d058      	beq.n	800095a <HAL_GPIO_Init+0xfa>
 80008a8:	4a96      	ldr	r2, [pc, #600]	; (8000b04 <HAL_GPIO_Init+0x2a4>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d86f      	bhi.n	800098e <HAL_GPIO_Init+0x12e>
 80008ae:	4a96      	ldr	r2, [pc, #600]	; (8000b08 <HAL_GPIO_Init+0x2a8>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d052      	beq.n	800095a <HAL_GPIO_Init+0xfa>
 80008b4:	4a94      	ldr	r2, [pc, #592]	; (8000b08 <HAL_GPIO_Init+0x2a8>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d869      	bhi.n	800098e <HAL_GPIO_Init+0x12e>
 80008ba:	4a94      	ldr	r2, [pc, #592]	; (8000b0c <HAL_GPIO_Init+0x2ac>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d04c      	beq.n	800095a <HAL_GPIO_Init+0xfa>
 80008c0:	4a92      	ldr	r2, [pc, #584]	; (8000b0c <HAL_GPIO_Init+0x2ac>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d863      	bhi.n	800098e <HAL_GPIO_Init+0x12e>
 80008c6:	4a92      	ldr	r2, [pc, #584]	; (8000b10 <HAL_GPIO_Init+0x2b0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d046      	beq.n	800095a <HAL_GPIO_Init+0xfa>
 80008cc:	4a90      	ldr	r2, [pc, #576]	; (8000b10 <HAL_GPIO_Init+0x2b0>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d85d      	bhi.n	800098e <HAL_GPIO_Init+0x12e>
 80008d2:	2b12      	cmp	r3, #18
 80008d4:	d82a      	bhi.n	800092c <HAL_GPIO_Init+0xcc>
 80008d6:	2b12      	cmp	r3, #18
 80008d8:	d859      	bhi.n	800098e <HAL_GPIO_Init+0x12e>
 80008da:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <HAL_GPIO_Init+0x80>)
 80008dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e0:	0800095b 	.word	0x0800095b
 80008e4:	08000935 	.word	0x08000935
 80008e8:	08000947 	.word	0x08000947
 80008ec:	08000989 	.word	0x08000989
 80008f0:	0800098f 	.word	0x0800098f
 80008f4:	0800098f 	.word	0x0800098f
 80008f8:	0800098f 	.word	0x0800098f
 80008fc:	0800098f 	.word	0x0800098f
 8000900:	0800098f 	.word	0x0800098f
 8000904:	0800098f 	.word	0x0800098f
 8000908:	0800098f 	.word	0x0800098f
 800090c:	0800098f 	.word	0x0800098f
 8000910:	0800098f 	.word	0x0800098f
 8000914:	0800098f 	.word	0x0800098f
 8000918:	0800098f 	.word	0x0800098f
 800091c:	0800098f 	.word	0x0800098f
 8000920:	0800098f 	.word	0x0800098f
 8000924:	0800093d 	.word	0x0800093d
 8000928:	08000951 	.word	0x08000951
 800092c:	4a79      	ldr	r2, [pc, #484]	; (8000b14 <HAL_GPIO_Init+0x2b4>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d013      	beq.n	800095a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000932:	e02c      	b.n	800098e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	623b      	str	r3, [r7, #32]
          break;
 800093a:	e029      	b.n	8000990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	3304      	adds	r3, #4
 8000942:	623b      	str	r3, [r7, #32]
          break;
 8000944:	e024      	b.n	8000990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	3308      	adds	r3, #8
 800094c:	623b      	str	r3, [r7, #32]
          break;
 800094e:	e01f      	b.n	8000990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	330c      	adds	r3, #12
 8000956:	623b      	str	r3, [r7, #32]
          break;
 8000958:	e01a      	b.n	8000990 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d102      	bne.n	8000968 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000962:	2304      	movs	r3, #4
 8000964:	623b      	str	r3, [r7, #32]
          break;
 8000966:	e013      	b.n	8000990 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d105      	bne.n	800097c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000970:	2308      	movs	r3, #8
 8000972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	611a      	str	r2, [r3, #16]
          break;
 800097a:	e009      	b.n	8000990 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800097c:	2308      	movs	r3, #8
 800097e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	615a      	str	r2, [r3, #20]
          break;
 8000986:	e003      	b.n	8000990 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	e000      	b.n	8000990 <HAL_GPIO_Init+0x130>
          break;
 800098e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	2bff      	cmp	r3, #255	; 0xff
 8000994:	d801      	bhi.n	800099a <HAL_GPIO_Init+0x13a>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	e001      	b.n	800099e <HAL_GPIO_Init+0x13e>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3304      	adds	r3, #4
 800099e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	2bff      	cmp	r3, #255	; 0xff
 80009a4:	d802      	bhi.n	80009ac <HAL_GPIO_Init+0x14c>
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	e002      	b.n	80009b2 <HAL_GPIO_Init+0x152>
 80009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ae:	3b08      	subs	r3, #8
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	210f      	movs	r1, #15
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	401a      	ands	r2, r3
 80009c4:	6a39      	ldr	r1, [r7, #32]
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	431a      	orrs	r2, r3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 80b1 	beq.w	8000b42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009e0:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <HAL_GPIO_Init+0x2b8>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a4c      	ldr	r2, [pc, #304]	; (8000b18 <HAL_GPIO_Init+0x2b8>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b4a      	ldr	r3, [pc, #296]	; (8000b18 <HAL_GPIO_Init+0x2b8>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f8:	4a48      	ldr	r2, [pc, #288]	; (8000b1c <HAL_GPIO_Init+0x2bc>)
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	3302      	adds	r3, #2
 8000a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	220f      	movs	r2, #15
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a40      	ldr	r2, [pc, #256]	; (8000b20 <HAL_GPIO_Init+0x2c0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d013      	beq.n	8000a4c <HAL_GPIO_Init+0x1ec>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a3f      	ldr	r2, [pc, #252]	; (8000b24 <HAL_GPIO_Init+0x2c4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d00d      	beq.n	8000a48 <HAL_GPIO_Init+0x1e8>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a3e      	ldr	r2, [pc, #248]	; (8000b28 <HAL_GPIO_Init+0x2c8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d007      	beq.n	8000a44 <HAL_GPIO_Init+0x1e4>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a3d      	ldr	r2, [pc, #244]	; (8000b2c <HAL_GPIO_Init+0x2cc>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d101      	bne.n	8000a40 <HAL_GPIO_Init+0x1e0>
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	e006      	b.n	8000a4e <HAL_GPIO_Init+0x1ee>
 8000a40:	2304      	movs	r3, #4
 8000a42:	e004      	b.n	8000a4e <HAL_GPIO_Init+0x1ee>
 8000a44:	2302      	movs	r3, #2
 8000a46:	e002      	b.n	8000a4e <HAL_GPIO_Init+0x1ee>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e000      	b.n	8000a4e <HAL_GPIO_Init+0x1ee>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a50:	f002 0203 	and.w	r2, r2, #3
 8000a54:	0092      	lsls	r2, r2, #2
 8000a56:	4093      	lsls	r3, r2
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a5e:	492f      	ldr	r1, [pc, #188]	; (8000b1c <HAL_GPIO_Init+0x2bc>)
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	3302      	adds	r3, #2
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d006      	beq.n	8000a86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a78:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	492c      	ldr	r1, [pc, #176]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	600b      	str	r3, [r1, #0]
 8000a84:	e006      	b.n	8000a94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4928      	ldr	r1, [pc, #160]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000a90:	4013      	ands	r3, r2
 8000a92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d006      	beq.n	8000aae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	4922      	ldr	r1, [pc, #136]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	604b      	str	r3, [r1, #4]
 8000aac:	e006      	b.n	8000abc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	491e      	ldr	r1, [pc, #120]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000ab8:	4013      	ands	r3, r2
 8000aba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	4918      	ldr	r1, [pc, #96]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	608b      	str	r3, [r1, #8]
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	4914      	ldr	r1, [pc, #80]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d021      	beq.n	8000b34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	490e      	ldr	r1, [pc, #56]	; (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	60cb      	str	r3, [r1, #12]
 8000afc:	e021      	b.n	8000b42 <HAL_GPIO_Init+0x2e2>
 8000afe:	bf00      	nop
 8000b00:	10320000 	.word	0x10320000
 8000b04:	10310000 	.word	0x10310000
 8000b08:	10220000 	.word	0x10220000
 8000b0c:	10210000 	.word	0x10210000
 8000b10:	10120000 	.word	0x10120000
 8000b14:	10110000 	.word	0x10110000
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010000 	.word	0x40010000
 8000b20:	40010800 	.word	0x40010800
 8000b24:	40010c00 	.word	0x40010c00
 8000b28:	40011000 	.word	0x40011000
 8000b2c:	40011400 	.word	0x40011400
 8000b30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_GPIO_Init+0x304>)
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	4909      	ldr	r1, [pc, #36]	; (8000b64 <HAL_GPIO_Init+0x304>)
 8000b3e:	4013      	ands	r3, r2
 8000b40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	3301      	adds	r3, #1
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f47f ae8e 	bne.w	8000874 <HAL_GPIO_Init+0x14>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	372c      	adds	r7, #44	; 0x2c
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	40010400 	.word	0x40010400

08000b68 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <HAL_PWR_EnableSleepOnExit+0x18>)
 8000b6e:	691b      	ldr	r3, [r3, #16]
 8000b70:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <HAL_PWR_EnableSleepOnExit+0x18>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	6113      	str	r3, [r2, #16]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e26c      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 8087 	beq.w	8000cb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ba4:	4b92      	ldr	r3, [pc, #584]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 030c 	and.w	r3, r3, #12
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d00c      	beq.n	8000bca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb0:	4b8f      	ldr	r3, [pc, #572]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	d112      	bne.n	8000be2 <HAL_RCC_OscConfig+0x5e>
 8000bbc:	4b8c      	ldr	r3, [pc, #560]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc8:	d10b      	bne.n	8000be2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bca:	4b89      	ldr	r3, [pc, #548]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d06c      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x12c>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d168      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e246      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bea:	d106      	bne.n	8000bfa <HAL_RCC_OscConfig+0x76>
 8000bec:	4b80      	ldr	r3, [pc, #512]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a7f      	ldr	r2, [pc, #508]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	e02e      	b.n	8000c58 <HAL_RCC_OscConfig+0xd4>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10c      	bne.n	8000c1c <HAL_RCC_OscConfig+0x98>
 8000c02:	4b7b      	ldr	r3, [pc, #492]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a7a      	ldr	r2, [pc, #488]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	4b78      	ldr	r3, [pc, #480]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a77      	ldr	r2, [pc, #476]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	e01d      	b.n	8000c58 <HAL_RCC_OscConfig+0xd4>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c24:	d10c      	bne.n	8000c40 <HAL_RCC_OscConfig+0xbc>
 8000c26:	4b72      	ldr	r3, [pc, #456]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a71      	ldr	r2, [pc, #452]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	4b6f      	ldr	r3, [pc, #444]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a6e      	ldr	r2, [pc, #440]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	e00b      	b.n	8000c58 <HAL_RCC_OscConfig+0xd4>
 8000c40:	4b6b      	ldr	r3, [pc, #428]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a6a      	ldr	r2, [pc, #424]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b68      	ldr	r3, [pc, #416]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a67      	ldr	r2, [pc, #412]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d013      	beq.n	8000c88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fcbe 	bl	80005e0 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c68:	f7ff fcba 	bl	80005e0 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b64      	cmp	r3, #100	; 0x64
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e1fa      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7a:	4b5d      	ldr	r3, [pc, #372]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0f0      	beq.n	8000c68 <HAL_RCC_OscConfig+0xe4>
 8000c86:	e014      	b.n	8000cb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fcaa 	bl	80005e0 <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c90:	f7ff fca6 	bl	80005e0 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b64      	cmp	r3, #100	; 0x64
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e1e6      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca2:	4b53      	ldr	r3, [pc, #332]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f0      	bne.n	8000c90 <HAL_RCC_OscConfig+0x10c>
 8000cae:	e000      	b.n	8000cb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d063      	beq.n	8000d86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cbe:	4b4c      	ldr	r3, [pc, #304]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00b      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cca:	4b49      	ldr	r3, [pc, #292]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 030c 	and.w	r3, r3, #12
 8000cd2:	2b08      	cmp	r3, #8
 8000cd4:	d11c      	bne.n	8000d10 <HAL_RCC_OscConfig+0x18c>
 8000cd6:	4b46      	ldr	r3, [pc, #280]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d116      	bne.n	8000d10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce2:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d005      	beq.n	8000cfa <HAL_RCC_OscConfig+0x176>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d001      	beq.n	8000cfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e1ba      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfa:	4b3d      	ldr	r3, [pc, #244]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4939      	ldr	r1, [pc, #228]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0e:	e03a      	b.n	8000d86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d020      	beq.n	8000d5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d18:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <HAL_RCC_OscConfig+0x270>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1e:	f7ff fc5f 	bl	80005e0 <HAL_GetTick>
 8000d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d24:	e008      	b.n	8000d38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d26:	f7ff fc5b 	bl	80005e0 <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d901      	bls.n	8000d38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e19b      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d38:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0f0      	beq.n	8000d26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d44:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	4927      	ldr	r1, [pc, #156]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	4313      	orrs	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
 8000d58:	e015      	b.n	8000d86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <HAL_RCC_OscConfig+0x270>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d60:	f7ff fc3e 	bl	80005e0 <HAL_GetTick>
 8000d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d66:	e008      	b.n	8000d7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d68:	f7ff fc3a 	bl	80005e0 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e17a      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f0      	bne.n	8000d68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d03a      	beq.n	8000e08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d019      	beq.n	8000dce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_RCC_OscConfig+0x274>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da0:	f7ff fc1e 	bl	80005e0 <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000da8:	f7ff fc1a 	bl	80005e0 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e15a      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f0      	beq.n	8000da8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f000 fad8 	bl	800137c <RCC_Delay>
 8000dcc:	e01c      	b.n	8000e08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_RCC_OscConfig+0x274>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd4:	f7ff fc04 	bl	80005e0 <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dda:	e00f      	b.n	8000dfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fc00 	bl	80005e0 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d908      	bls.n	8000dfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e140      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000
 8000df4:	42420000 	.word	0x42420000
 8000df8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dfc:	4b9e      	ldr	r3, [pc, #632]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1e9      	bne.n	8000ddc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 80a6 	beq.w	8000f62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e1a:	4b97      	ldr	r3, [pc, #604]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10d      	bne.n	8000e42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b94      	ldr	r3, [pc, #592]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a93      	ldr	r2, [pc, #588]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b91      	ldr	r3, [pc, #580]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e42:	4b8e      	ldr	r3, [pc, #568]	; (800107c <HAL_RCC_OscConfig+0x4f8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d118      	bne.n	8000e80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e4e:	4b8b      	ldr	r3, [pc, #556]	; (800107c <HAL_RCC_OscConfig+0x4f8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a8a      	ldr	r2, [pc, #552]	; (800107c <HAL_RCC_OscConfig+0x4f8>)
 8000e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fbc1 	bl	80005e0 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e62:	f7ff fbbd 	bl	80005e0 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b64      	cmp	r3, #100	; 0x64
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e0fd      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e74:	4b81      	ldr	r3, [pc, #516]	; (800107c <HAL_RCC_OscConfig+0x4f8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d106      	bne.n	8000e96 <HAL_RCC_OscConfig+0x312>
 8000e88:	4b7b      	ldr	r3, [pc, #492]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	4a7a      	ldr	r2, [pc, #488]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6213      	str	r3, [r2, #32]
 8000e94:	e02d      	b.n	8000ef2 <HAL_RCC_OscConfig+0x36e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10c      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x334>
 8000e9e:	4b76      	ldr	r3, [pc, #472]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000ea0:	6a1b      	ldr	r3, [r3, #32]
 8000ea2:	4a75      	ldr	r2, [pc, #468]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000ea4:	f023 0301 	bic.w	r3, r3, #1
 8000ea8:	6213      	str	r3, [r2, #32]
 8000eaa:	4b73      	ldr	r3, [pc, #460]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	4a72      	ldr	r2, [pc, #456]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000eb0:	f023 0304 	bic.w	r3, r3, #4
 8000eb4:	6213      	str	r3, [r2, #32]
 8000eb6:	e01c      	b.n	8000ef2 <HAL_RCC_OscConfig+0x36e>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	d10c      	bne.n	8000eda <HAL_RCC_OscConfig+0x356>
 8000ec0:	4b6d      	ldr	r3, [pc, #436]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4a6c      	ldr	r2, [pc, #432]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	6213      	str	r3, [r2, #32]
 8000ecc:	4b6a      	ldr	r3, [pc, #424]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	4a69      	ldr	r2, [pc, #420]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6213      	str	r3, [r2, #32]
 8000ed8:	e00b      	b.n	8000ef2 <HAL_RCC_OscConfig+0x36e>
 8000eda:	4b67      	ldr	r3, [pc, #412]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a66      	ldr	r2, [pc, #408]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	6213      	str	r3, [r2, #32]
 8000ee6:	4b64      	ldr	r3, [pc, #400]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	4a63      	ldr	r2, [pc, #396]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d015      	beq.n	8000f26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efa:	f7ff fb71 	bl	80005e0 <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f00:	e00a      	b.n	8000f18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f7ff fb6d 	bl	80005e0 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e0ab      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f18:	4b57      	ldr	r3, [pc, #348]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0ee      	beq.n	8000f02 <HAL_RCC_OscConfig+0x37e>
 8000f24:	e014      	b.n	8000f50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f26:	f7ff fb5b 	bl	80005e0 <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f2c:	e00a      	b.n	8000f44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f2e:	f7ff fb57 	bl	80005e0 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e095      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f44:	4b4c      	ldr	r3, [pc, #304]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1ee      	bne.n	8000f2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d105      	bne.n	8000f62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f56:	4b48      	ldr	r3, [pc, #288]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a47      	ldr	r2, [pc, #284]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 8081 	beq.w	800106e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f6c:	4b42      	ldr	r3, [pc, #264]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 030c 	and.w	r3, r3, #12
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d061      	beq.n	800103c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d146      	bne.n	800100e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f80:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <HAL_RCC_OscConfig+0x4fc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f86:	f7ff fb2b 	bl	80005e0 <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f8e:	f7ff fb27 	bl	80005e0 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e067      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa0:	4b35      	ldr	r3, [pc, #212]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f0      	bne.n	8000f8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb4:	d108      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fb6:	4b30      	ldr	r3, [pc, #192]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	492d      	ldr	r1, [pc, #180]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a19      	ldr	r1, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	430b      	orrs	r3, r1
 8000fda:	4927      	ldr	r1, [pc, #156]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <HAL_RCC_OscConfig+0x4fc>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fafb 	bl	80005e0 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fee:	f7ff faf7 	bl	80005e0 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e037      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0x46a>
 800100c:	e02f      	b.n	800106e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_RCC_OscConfig+0x4fc>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff fae4 	bl	80005e0 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101c:	f7ff fae0 	bl	80005e0 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e020      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x498>
 800103a:	e018      	b.n	800106e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e013      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_RCC_OscConfig+0x4f4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	429a      	cmp	r2, r3
 800105a:	d106      	bne.n	800106a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001066:	429a      	cmp	r2, r3
 8001068:	d001      	beq.n	800106e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	40007000 	.word	0x40007000
 8001080:	42420060 	.word	0x42420060

08001084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e0d0      	b.n	800123a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001098:	4b6a      	ldr	r3, [pc, #424]	; (8001244 <HAL_RCC_ClockConfig+0x1c0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d910      	bls.n	80010c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a6:	4b67      	ldr	r3, [pc, #412]	; (8001244 <HAL_RCC_ClockConfig+0x1c0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 0207 	bic.w	r2, r3, #7
 80010ae:	4965      	ldr	r1, [pc, #404]	; (8001244 <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b6:	4b63      	ldr	r3, [pc, #396]	; (8001244 <HAL_RCC_ClockConfig+0x1c0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d001      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e0b8      	b.n	800123a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d020      	beq.n	8001116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e0:	4b59      	ldr	r3, [pc, #356]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	4a58      	ldr	r2, [pc, #352]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010f8:	4b53      	ldr	r3, [pc, #332]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	4a52      	ldr	r2, [pc, #328]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 80010fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001104:	4b50      	ldr	r3, [pc, #320]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	494d      	ldr	r1, [pc, #308]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	4313      	orrs	r3, r2
 8001114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d040      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d107      	bne.n	800113a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	4b47      	ldr	r3, [pc, #284]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d115      	bne.n	8001162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e07f      	b.n	800123a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d107      	bne.n	8001152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d109      	bne.n	8001162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e073      	b.n	800123a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001152:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e06b      	b.n	800123a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001162:	4b39      	ldr	r3, [pc, #228]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f023 0203 	bic.w	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4936      	ldr	r1, [pc, #216]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001174:	f7ff fa34 	bl	80005e0 <HAL_GetTick>
 8001178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800117a:	e00a      	b.n	8001192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800117c:	f7ff fa30 	bl	80005e0 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	f241 3288 	movw	r2, #5000	; 0x1388
 800118a:	4293      	cmp	r3, r2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e053      	b.n	800123a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 020c 	and.w	r2, r3, #12
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d1eb      	bne.n	800117c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <HAL_RCC_ClockConfig+0x1c0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d210      	bcs.n	80011d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b2:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_RCC_ClockConfig+0x1c0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 0207 	bic.w	r2, r3, #7
 80011ba:	4922      	ldr	r1, [pc, #136]	; (8001244 <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	4313      	orrs	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d001      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e032      	b.n	800123a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d008      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4916      	ldr	r1, [pc, #88]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d009      	beq.n	8001212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	490e      	ldr	r1, [pc, #56]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	4313      	orrs	r3, r2
 8001210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001212:	f000 f821 	bl	8001258 <HAL_RCC_GetSysClockFreq>
 8001216:	4602      	mov	r2, r0
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	490a      	ldr	r1, [pc, #40]	; (800124c <HAL_RCC_ClockConfig+0x1c8>)
 8001224:	5ccb      	ldrb	r3, [r1, r3]
 8001226:	fa22 f303 	lsr.w	r3, r2, r3
 800122a:	4a09      	ldr	r2, [pc, #36]	; (8001250 <HAL_RCC_ClockConfig+0x1cc>)
 800122c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_RCC_ClockConfig+0x1d0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f992 	bl	800055c <HAL_InitTick>

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40022000 	.word	0x40022000
 8001248:	40021000 	.word	0x40021000
 800124c:	08001c24 	.word	0x08001c24
 8001250:	20000000 	.word	0x20000000
 8001254:	20000004 	.word	0x20000004

08001258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001258:	b490      	push	{r4, r7}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001260:	1d3c      	adds	r4, r7, #4
 8001262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001268:	f240 2301 	movw	r3, #513	; 0x201
 800126c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b04      	cmp	r3, #4
 8001290:	d002      	beq.n	8001298 <HAL_RCC_GetSysClockFreq+0x40>
 8001292:	2b08      	cmp	r3, #8
 8001294:	d003      	beq.n	800129e <HAL_RCC_GetSysClockFreq+0x46>
 8001296:	e02d      	b.n	80012f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_RCC_GetSysClockFreq+0xb8>)
 800129a:	623b      	str	r3, [r7, #32]
      break;
 800129c:	e02d      	b.n	80012fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	0c9b      	lsrs	r3, r3, #18
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012aa:	4413      	add	r3, r2
 80012ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <HAL_RCC_GetSysClockFreq+0xb4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	0c5b      	lsrs	r3, r3, #17
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012ca:	4413      	add	r3, r2
 80012cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012d6:	fb02 f203 	mul.w	r2, r2, r3
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
 80012e2:	e004      	b.n	80012ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	623b      	str	r3, [r7, #32]
      break;
 80012f2:	e002      	b.n	80012fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012f6:	623b      	str	r3, [r7, #32]
      break;
 80012f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012fa:	6a3b      	ldr	r3, [r7, #32]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bc90      	pop	{r4, r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	08001c14 	.word	0x08001c14
 800130c:	40021000 	.word	0x40021000
 8001310:	007a1200 	.word	0x007a1200
 8001314:	003d0900 	.word	0x003d0900

08001318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800131c:	4b02      	ldr	r3, [pc, #8]	; (8001328 <HAL_RCC_GetHCLKFreq+0x10>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000000 	.word	0x20000000

0800132c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001330:	f7ff fff2 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	4903      	ldr	r1, [pc, #12]	; (8001350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000
 8001350:	08001c34 	.word	0x08001c34

08001354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001358:	f7ff ffde 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 800135c:	4602      	mov	r2, r0
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	0adb      	lsrs	r3, r3, #11
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	4903      	ldr	r1, [pc, #12]	; (8001378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800136a:	5ccb      	ldrb	r3, [r1, r3]
 800136c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	08001c34 	.word	0x08001c34

0800137c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <RCC_Delay+0x34>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <RCC_Delay+0x38>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	0a5b      	lsrs	r3, r3, #9
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001398:	bf00      	nop
  }
  while (Delay --);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	60fa      	str	r2, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f9      	bne.n	8001398 <RCC_Delay+0x1c>
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000000 	.word	0x20000000
 80013b4:	10624dd3 	.word	0x10624dd3

080013b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e041      	b.n	800144e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d106      	bne.n	80013e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff f82a 	bl	8000438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2202      	movs	r2, #2
 80013e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3304      	adds	r3, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4610      	mov	r0, r2
 80013f8:	f000 f9ac 	bl	8001754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b01      	cmp	r3, #1
 800146a:	d001      	beq.n	8001470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e03a      	b.n	80014e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2202      	movs	r2, #2
 8001474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0201 	orr.w	r2, r2, #1
 8001486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <HAL_TIM_Base_Start_IT+0x98>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00e      	beq.n	80014b0 <HAL_TIM_Base_Start_IT+0x58>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800149a:	d009      	beq.n	80014b0 <HAL_TIM_Base_Start_IT+0x58>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d004      	beq.n	80014b0 <HAL_TIM_Base_Start_IT+0x58>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d111      	bne.n	80014d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d010      	beq.n	80014e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0201 	orr.w	r2, r2, #1
 80014d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014d2:	e007      	b.n	80014e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40012c00 	.word	0x40012c00
 80014f4:	40000400 	.word	0x40000400
 80014f8:	40000800 	.word	0x40000800

080014fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b02      	cmp	r3, #2
 8001510:	d122      	bne.n	8001558 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b02      	cmp	r3, #2
 800151e:	d11b      	bne.n	8001558 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f06f 0202 	mvn.w	r2, #2
 8001528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f8ed 	bl	800171e <HAL_TIM_IC_CaptureCallback>
 8001544:	e005      	b.n	8001552 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f8e0 	bl	800170c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f8ef 	bl	8001730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b04      	cmp	r3, #4
 8001564:	d122      	bne.n	80015ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b04      	cmp	r3, #4
 8001572:	d11b      	bne.n	80015ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f06f 0204 	mvn.w	r2, #4
 800157c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2202      	movs	r2, #2
 8001582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f8c3 	bl	800171e <HAL_TIM_IC_CaptureCallback>
 8001598:	e005      	b.n	80015a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f8b6 	bl	800170c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f8c5 	bl	8001730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d122      	bne.n	8001600 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d11b      	bne.n	8001600 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f06f 0208 	mvn.w	r2, #8
 80015d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2204      	movs	r2, #4
 80015d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f899 	bl	800171e <HAL_TIM_IC_CaptureCallback>
 80015ec:	e005      	b.n	80015fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f88c 	bl	800170c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f89b 	bl	8001730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b10      	cmp	r3, #16
 800160c:	d122      	bne.n	8001654 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b10      	cmp	r3, #16
 800161a:	d11b      	bne.n	8001654 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f06f 0210 	mvn.w	r2, #16
 8001624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2208      	movs	r2, #8
 800162a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f86f 	bl	800171e <HAL_TIM_IC_CaptureCallback>
 8001640:	e005      	b.n	800164e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f862 	bl	800170c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f871 	bl	8001730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b01      	cmp	r3, #1
 8001660:	d10e      	bne.n	8001680 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b01      	cmp	r3, #1
 800166e:	d107      	bne.n	8001680 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f06f 0201 	mvn.w	r2, #1
 8001678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7fe fd8e 	bl	800019c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	2b80      	cmp	r3, #128	; 0x80
 800168c:	d10e      	bne.n	80016ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001698:	2b80      	cmp	r3, #128	; 0x80
 800169a:	d107      	bne.n	80016ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f8bf 	bl	800182a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b6:	2b40      	cmp	r3, #64	; 0x40
 80016b8:	d10e      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c4:	2b40      	cmp	r3, #64	; 0x40
 80016c6:	d107      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f835 	bl	8001742 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	d10e      	bne.n	8001704 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f003 0320 	and.w	r3, r3, #32
 80016f0:	2b20      	cmp	r3, #32
 80016f2:	d107      	bne.n	8001704 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f06f 0220 	mvn.w	r2, #32
 80016fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f88a 	bl	8001818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a29      	ldr	r2, [pc, #164]	; (800180c <TIM_Base_SetConfig+0xb8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d00b      	beq.n	8001784 <TIM_Base_SetConfig+0x30>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001772:	d007      	beq.n	8001784 <TIM_Base_SetConfig+0x30>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a26      	ldr	r2, [pc, #152]	; (8001810 <TIM_Base_SetConfig+0xbc>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d003      	beq.n	8001784 <TIM_Base_SetConfig+0x30>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a25      	ldr	r2, [pc, #148]	; (8001814 <TIM_Base_SetConfig+0xc0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d108      	bne.n	8001796 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800178a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a1c      	ldr	r2, [pc, #112]	; (800180c <TIM_Base_SetConfig+0xb8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00b      	beq.n	80017b6 <TIM_Base_SetConfig+0x62>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a4:	d007      	beq.n	80017b6 <TIM_Base_SetConfig+0x62>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a19      	ldr	r2, [pc, #100]	; (8001810 <TIM_Base_SetConfig+0xbc>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d003      	beq.n	80017b6 <TIM_Base_SetConfig+0x62>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <TIM_Base_SetConfig+0xc0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d108      	bne.n	80017c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <TIM_Base_SetConfig+0xb8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d103      	bne.n	80017fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	615a      	str	r2, [r3, #20]
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40012c00 	.word	0x40012c00
 8001810:	40000400 	.word	0x40000400
 8001814:	40000800 	.word	0x40000800

08001818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e03f      	b.n	80018ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7fe fe06 	bl	8000474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2224      	movs	r2, #36	; 0x24
 800186c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800187e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f905 	bl	8001a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2220      	movs	r2, #32
 80018c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2220      	movs	r2, #32
 80018c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b08a      	sub	sp, #40	; 0x28
 80018da:	af02      	add	r7, sp, #8
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b20      	cmp	r3, #32
 80018f4:	d17c      	bne.n	80019f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <HAL_UART_Transmit+0x2c>
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e075      	b.n	80019f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_UART_Transmit+0x3e>
 8001910:	2302      	movs	r3, #2
 8001912:	e06e      	b.n	80019f2 <HAL_UART_Transmit+0x11c>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2221      	movs	r2, #33	; 0x21
 8001926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800192a:	f7fe fe59 	bl	80005e0 <HAL_GetTick>
 800192e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	88fa      	ldrh	r2, [r7, #6]
 8001934:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	88fa      	ldrh	r2, [r7, #6]
 800193a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001944:	d108      	bne.n	8001958 <HAL_UART_Transmit+0x82>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d104      	bne.n	8001958 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	e003      	b.n	8001960 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001968:	e02a      	b.n	80019c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2200      	movs	r2, #0
 8001972:	2180      	movs	r1, #128	; 0x80
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 f840 	bl	80019fa <UART_WaitOnFlagUntilTimeout>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e036      	b.n	80019f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10b      	bne.n	80019a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001998:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	3302      	adds	r3, #2
 800199e:	61bb      	str	r3, [r7, #24]
 80019a0:	e007      	b.n	80019b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	3301      	adds	r3, #1
 80019b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	3b01      	subs	r3, #1
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1cf      	bne.n	800196a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2200      	movs	r2, #0
 80019d2:	2140      	movs	r1, #64	; 0x40
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f810 	bl	80019fa <UART_WaitOnFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e006      	b.n	80019f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e000      	b.n	80019f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80019f0:	2302      	movs	r3, #2
  }
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4613      	mov	r3, r2
 8001a08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a0a:	e02c      	b.n	8001a66 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a12:	d028      	beq.n	8001a66 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d007      	beq.n	8001a2a <UART_WaitOnFlagUntilTimeout+0x30>
 8001a1a:	f7fe fde1 	bl	80005e0 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d21d      	bcs.n	8001a66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a38:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0201 	bic.w	r2, r2, #1
 8001a48:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2220      	movs	r2, #32
 8001a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e00f      	b.n	8001a86 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	bf0c      	ite	eq
 8001a76:	2301      	moveq	r3, #1
 8001a78:	2300      	movne	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d0c3      	beq.n	8001a0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001aca:	f023 030c 	bic.w	r3, r3, #12
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a2c      	ldr	r2, [pc, #176]	; (8001ba4 <UART_SetConfig+0x114>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d103      	bne.n	8001b00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001af8:	f7ff fc2c 	bl	8001354 <HAL_RCC_GetPCLK2Freq>
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	e002      	b.n	8001b06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b00:	f7ff fc14 	bl	800132c <HAL_RCC_GetPCLK1Freq>
 8001b04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009a      	lsls	r2, r3, #2
 8001b10:	441a      	add	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <UART_SetConfig+0x118>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	0119      	lsls	r1, r3, #4
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009a      	lsls	r2, r3, #2
 8001b30:	441a      	add	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <UART_SetConfig+0x118>)
 8001b3e:	fba3 0302 	umull	r0, r3, r3, r2
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2064      	movs	r0, #100	; 0x64
 8001b46:	fb00 f303 	mul.w	r3, r0, r3
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	3332      	adds	r3, #50	; 0x32
 8001b50:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <UART_SetConfig+0x118>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b5c:	4419      	add	r1, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	009a      	lsls	r2, r3, #2
 8001b68:	441a      	add	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <UART_SetConfig+0x118>)
 8001b76:	fba3 0302 	umull	r0, r3, r3, r2
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2064      	movs	r0, #100	; 0x64
 8001b7e:	fb00 f303 	mul.w	r3, r0, r3
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	3332      	adds	r3, #50	; 0x32
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <UART_SetConfig+0x118>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	f003 020f 	and.w	r2, r3, #15
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	440a      	add	r2, r1
 8001b9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	51eb851f 	.word	0x51eb851f

08001bac <__libc_init_array>:
 8001bac:	b570      	push	{r4, r5, r6, lr}
 8001bae:	2600      	movs	r6, #0
 8001bb0:	4d0c      	ldr	r5, [pc, #48]	; (8001be4 <__libc_init_array+0x38>)
 8001bb2:	4c0d      	ldr	r4, [pc, #52]	; (8001be8 <__libc_init_array+0x3c>)
 8001bb4:	1b64      	subs	r4, r4, r5
 8001bb6:	10a4      	asrs	r4, r4, #2
 8001bb8:	42a6      	cmp	r6, r4
 8001bba:	d109      	bne.n	8001bd0 <__libc_init_array+0x24>
 8001bbc:	f000 f81a 	bl	8001bf4 <_init>
 8001bc0:	2600      	movs	r6, #0
 8001bc2:	4d0a      	ldr	r5, [pc, #40]	; (8001bec <__libc_init_array+0x40>)
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	; (8001bf0 <__libc_init_array+0x44>)
 8001bc6:	1b64      	subs	r4, r4, r5
 8001bc8:	10a4      	asrs	r4, r4, #2
 8001bca:	42a6      	cmp	r6, r4
 8001bcc:	d105      	bne.n	8001bda <__libc_init_array+0x2e>
 8001bce:	bd70      	pop	{r4, r5, r6, pc}
 8001bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bd4:	4798      	blx	r3
 8001bd6:	3601      	adds	r6, #1
 8001bd8:	e7ee      	b.n	8001bb8 <__libc_init_array+0xc>
 8001bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bde:	4798      	blx	r3
 8001be0:	3601      	adds	r6, #1
 8001be2:	e7f2      	b.n	8001bca <__libc_init_array+0x1e>
 8001be4:	08001c3c 	.word	0x08001c3c
 8001be8:	08001c3c 	.word	0x08001c3c
 8001bec:	08001c3c 	.word	0x08001c3c
 8001bf0:	08001c40 	.word	0x08001c40

08001bf4 <_init>:
 8001bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf6:	bf00      	nop
 8001bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bfa:	bc08      	pop	{r3}
 8001bfc:	469e      	mov	lr, r3
 8001bfe:	4770      	bx	lr

08001c00 <_fini>:
 8001c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c02:	bf00      	nop
 8001c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c06:	bc08      	pop	{r3}
 8001c08:	469e      	mov	lr, r3
 8001c0a:	4770      	bx	lr
