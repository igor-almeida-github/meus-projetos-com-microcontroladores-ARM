
001CubeHal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eec  08004eec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004eec  08004eec  00014eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef4  08004ef4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000010  08004f0c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08004f0c  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015733  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e40  00000000  00000000  00035773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  000385b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  000396c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022305  00000000  00000000  0003a6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a3b  00000000  00000000  0005c9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc00b  00000000  00000000  00071428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013d433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004868  00000000  00000000  0013d488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004eac 	.word	0x08004eac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004eac 	.word	0x08004eac

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b598      	push	{r3, r4, r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fc3e 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f81e 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f95e 	bl	800079c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e0:	f000 f89e 	bl	8000620 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e4:	f000 f8ca 	bl	800067c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e8:	f000 f8f8 	bl	80006dc <MX_SPI1_Init>
  // MX_USB_HOST_Init();
  MX_USART2_UART_Init();
 80004ec:	f000 f92c 	bl	8000748 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, (uint8_t *)user_data, strlen(user_data), HAL_MAX_DELAY);
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <main+0x40>)
 80004f2:	681c      	ldr	r4, [r3, #0]
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <main+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff fe65 	bl	80001c8 <strlen>
 80004fe:	4603      	mov	r3, r0
 8000500:	b29a      	uxth	r2, r3
 8000502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000506:	4621      	mov	r1, r4
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <main+0x44>)
 800050a:	f003 fe23 	bl	8004154 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050e:	e7fe      	b.n	800050e <main+0x3e>
 8000510:	20000000 	.word	0x20000000
 8000514:	200000d8 	.word	0x200000d8

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b098      	sub	sp, #96	; 0x60
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f004 fcb8 	bl	8004e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 031c 	add.w	r3, r7, #28
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	4b32      	ldr	r3, [pc, #200]	; (8000618 <SystemClock_Config+0x100>)
 8000550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000552:	4a31      	ldr	r2, [pc, #196]	; (8000618 <SystemClock_Config+0x100>)
 8000554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000558:	6413      	str	r3, [r2, #64]	; 0x40
 800055a:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <SystemClock_Config+0x100>)
 800055c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b2c      	ldr	r3, [pc, #176]	; (800061c <SystemClock_Config+0x104>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a2b      	ldr	r2, [pc, #172]	; (800061c <SystemClock_Config+0x104>)
 8000570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000574:	6013      	str	r3, [r2, #0]
 8000576:	4b29      	ldr	r3, [pc, #164]	; (800061c <SystemClock_Config+0x104>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000582:	2303      	movs	r3, #3
 8000584:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000598:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059e:	2308      	movs	r3, #8
 80005a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ac:	2307      	movs	r3, #7
 80005ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 ff43 	bl	8003440 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005c0:	f000 f9ea 	bl	8000998 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 f9a6 	bl	8003930 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80005ea:	f000 f9d5 	bl	8000998 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005ee:	2301      	movs	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005f2:	23c0      	movs	r3, #192	; 0xc0
 80005f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fb92 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800060a:	f000 f9c5 	bl	8000998 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3760      	adds	r7, #96	; 0x60
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f002 f90b 	bl	8002878 <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f996 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000002c 	.word	0x2000002c
 8000674:	40005400 	.word	0x40005400
 8000678:	000186a0 	.word	0x000186a0

0800067c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_I2S3_Init+0x54>)
 8000682:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <MX_I2S3_Init+0x58>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_I2S3_Init+0x54>)
 8000688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800068c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_I2S3_Init+0x54>)
 800069c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006a4:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <MX_I2S3_Init+0x5c>)
 80006a6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_I2S3_Init+0x54>)
 80006bc:	f002 fa20 	bl	8002b00 <HAL_I2S_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006c6:	f000 f967 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000011c 	.word	0x2000011c
 80006d4:	40003c00 	.word	0x40003c00
 80006d8:	00017700 	.word	0x00017700

080006dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_SPI1_Init+0x64>)
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <MX_SPI1_Init+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_SPI1_Init+0x64>)
 8000728:	220a      	movs	r2, #10
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_SPI1_Init+0x64>)
 800072e:	f003 fc3b 	bl	8003fa8 <HAL_SPI_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000738:	f000 f92e 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000080 	.word	0x20000080
 8000744:	40013000 	.word	0x40013000

08000748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_USART2_UART_Init+0x50>)
 8000750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000780:	f003 fc9b 	bl	80040ba <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800078a:	f000 f905 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000d8 	.word	0x200000d8
 8000798:	40004400 	.word	0x40004400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	4b71      	ldr	r3, [pc, #452]	; (800097c <MX_GPIO_Init+0x1e0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a70      	ldr	r2, [pc, #448]	; (800097c <MX_GPIO_Init+0x1e0>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b6e      	ldr	r3, [pc, #440]	; (800097c <MX_GPIO_Init+0x1e0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	4b6a      	ldr	r3, [pc, #424]	; (800097c <MX_GPIO_Init+0x1e0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a69      	ldr	r2, [pc, #420]	; (800097c <MX_GPIO_Init+0x1e0>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b67      	ldr	r3, [pc, #412]	; (800097c <MX_GPIO_Init+0x1e0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b63      	ldr	r3, [pc, #396]	; (800097c <MX_GPIO_Init+0x1e0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a62      	ldr	r2, [pc, #392]	; (800097c <MX_GPIO_Init+0x1e0>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b60      	ldr	r3, [pc, #384]	; (800097c <MX_GPIO_Init+0x1e0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b5c      	ldr	r3, [pc, #368]	; (800097c <MX_GPIO_Init+0x1e0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a5b      	ldr	r2, [pc, #364]	; (800097c <MX_GPIO_Init+0x1e0>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b59      	ldr	r3, [pc, #356]	; (800097c <MX_GPIO_Init+0x1e0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b55      	ldr	r3, [pc, #340]	; (800097c <MX_GPIO_Init+0x1e0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a54      	ldr	r2, [pc, #336]	; (800097c <MX_GPIO_Init+0x1e0>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b52      	ldr	r3, [pc, #328]	; (800097c <MX_GPIO_Init+0x1e0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b4e      	ldr	r3, [pc, #312]	; (800097c <MX_GPIO_Init+0x1e0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a4d      	ldr	r2, [pc, #308]	; (800097c <MX_GPIO_Init+0x1e0>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b4b      	ldr	r3, [pc, #300]	; (800097c <MX_GPIO_Init+0x1e0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2108      	movs	r1, #8
 800085e:	4848      	ldr	r0, [pc, #288]	; (8000980 <MX_GPIO_Init+0x1e4>)
 8000860:	f000 fd6c 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2101      	movs	r1, #1
 8000868:	4846      	ldr	r0, [pc, #280]	; (8000984 <MX_GPIO_Init+0x1e8>)
 800086a:	f000 fd67 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086e:	2200      	movs	r2, #0
 8000870:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000874:	4844      	ldr	r0, [pc, #272]	; (8000988 <MX_GPIO_Init+0x1ec>)
 8000876:	f000 fd61 	bl	800133c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800087a:	2308      	movs	r3, #8
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	483b      	ldr	r0, [pc, #236]	; (8000980 <MX_GPIO_Init+0x1e4>)
 8000892:	f000 fbb7 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000896:	2301      	movs	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4835      	ldr	r0, [pc, #212]	; (8000984 <MX_GPIO_Init+0x1e8>)
 80008ae:	f000 fba9 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b2:	2308      	movs	r3, #8
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c2:	2305      	movs	r3, #5
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	482d      	ldr	r0, [pc, #180]	; (8000984 <MX_GPIO_Init+0x1e8>)
 80008ce:	f000 fb99 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008d6:	4b2d      	ldr	r3, [pc, #180]	; (800098c <MX_GPIO_Init+0x1f0>)
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	482a      	ldr	r0, [pc, #168]	; (8000990 <MX_GPIO_Init+0x1f4>)
 80008e6:	f000 fb8d 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ea:	2304      	movs	r3, #4
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4825      	ldr	r0, [pc, #148]	; (8000994 <MX_GPIO_Init+0x1f8>)
 80008fe:	f000 fb81 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000914:	2305      	movs	r3, #5
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	481d      	ldr	r0, [pc, #116]	; (8000994 <MX_GPIO_Init+0x1f8>)
 8000920:	f000 fb70 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000924:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000928:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4812      	ldr	r0, [pc, #72]	; (8000988 <MX_GPIO_Init+0x1ec>)
 800093e:	f000 fb61 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000942:	2320      	movs	r3, #32
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <MX_GPIO_Init+0x1ec>)
 8000956:	f000 fb55 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800095a:	2302      	movs	r3, #2
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_GPIO_Init+0x1f0>)
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_GPIO_Init+0x1e4>)
 800096e:	f000 fb49 	bl	8001004 <HAL_GPIO_Init>

}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40021000 	.word	0x40021000
 8000984:	40020800 	.word	0x40020800
 8000988:	40020c00 	.word	0x40020c00
 800098c:	10120000 	.word	0x10120000
 8000990:	40020000 	.word	0x40020000
 8000994:	40020400 	.word	0x40020400

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <HAL_MspInit+0x4c>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x4c>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009e2:	2007      	movs	r0, #7
 80009e4:	f000 fada 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <HAL_I2C_MspInit+0x84>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d12c      	bne.n	8000a70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a32:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a38:	2312      	movs	r3, #18
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a44:	2304      	movs	r3, #4
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <HAL_I2C_MspInit+0x8c>)
 8000a50:	f000 fad8 	bl	8001004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020400 	.word	0x40020400

08000a84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a28      	ldr	r2, [pc, #160]	; (8000b44 <HAL_I2S_MspInit+0xc0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d14a      	bne.n	8000b3c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a26      	ldr	r2, [pc, #152]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_I2S_MspInit+0xc4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000afa:	2310      	movs	r3, #16
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b0a:	2306      	movs	r3, #6
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <HAL_I2S_MspInit+0xc8>)
 8000b16:	f000 fa75 	bl	8001004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b1a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b2c:	2306      	movs	r3, #6
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4806      	ldr	r0, [pc, #24]	; (8000b50 <HAL_I2S_MspInit+0xcc>)
 8000b38:	f000 fa64 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40003c00 	.word	0x40003c00
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	40020800 	.word	0x40020800

08000b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_SPI_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12b      	bne.n	8000bce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_SPI_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bae:	23e0      	movs	r3, #224	; 0xe0
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_SPI_MspInit+0x8c>)
 8000bca:	f000 fa1b 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40013000 	.word	0x40013000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_UART_MspInit+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12b      	bne.n	8000c5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_UART_MspInit+0x8c>)
 8000c5a:	f000 f9d3 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40004400 	.word	0x40004400
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 f89a 	bl	8000df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <OTG_FS_IRQHandler+0x10>)
 8000cce:	f000 fb4e 	bl	800136e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000168 	.word	0x20000168

08000cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d06:	490e      	ldr	r1, [pc, #56]	; (8000d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d1c:	4c0b      	ldr	r4, [pc, #44]	; (8000d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d2a:	f7ff ffd7 	bl	8000cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f004 f891 	bl	8004e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d32:	f7ff fbcd 	bl	80004d0 <main>
  bx  lr    
 8000d36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d44:	08004efc 	.word	0x08004efc
  ldr r2, =_sbss
 8000d48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d4c:	2000046c 	.word	0x2000046c

08000d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <HAL_Init+0x40>)
 8000d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <HAL_Init+0x40>)
 8000d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_Init+0x40>)
 8000d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f000 f90d 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 f808 	bl	8000d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d88:	f7ff fe0c 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023c00 	.word	0x40023c00

08000d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x54>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x58>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f917 	bl	8000fea <HAL_SYSTICK_Config>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00e      	b.n	8000de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d80a      	bhi.n	8000de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd4:	f000 f8ed 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd8:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <HAL_InitTick+0x5c>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000004 	.word	0x20000004
 8000df0:	2000000c 	.word	0x2000000c
 8000df4:	20000008 	.word	0x20000008

08000df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2000000c 	.word	0x2000000c
 8000e1c:	20000164 	.word	0x20000164

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000164 	.word	0x20000164

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff47 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff5c 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffb0 	bl	8000f58 <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e16b      	b.n	80012f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 815a 	bne.w	80012f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	2b02      	cmp	r3, #2
 8001054:	d130      	bne.n	80010b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d017      	beq.n	80010f4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d123      	bne.n	8001148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0203 	and.w	r2, r3, #3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80b4 	beq.w	80012f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b60      	ldr	r3, [pc, #384]	; (8001310 <HAL_GPIO_Init+0x30c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a5f      	ldr	r2, [pc, #380]	; (8001310 <HAL_GPIO_Init+0x30c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <HAL_GPIO_Init+0x30c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a6:	4a5b      	ldr	r2, [pc, #364]	; (8001314 <HAL_GPIO_Init+0x310>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a52      	ldr	r2, [pc, #328]	; (8001318 <HAL_GPIO_Init+0x314>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d02b      	beq.n	800122a <HAL_GPIO_Init+0x226>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a51      	ldr	r2, [pc, #324]	; (800131c <HAL_GPIO_Init+0x318>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d025      	beq.n	8001226 <HAL_GPIO_Init+0x222>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a50      	ldr	r2, [pc, #320]	; (8001320 <HAL_GPIO_Init+0x31c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01f      	beq.n	8001222 <HAL_GPIO_Init+0x21e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4f      	ldr	r2, [pc, #316]	; (8001324 <HAL_GPIO_Init+0x320>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x21a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <HAL_GPIO_Init+0x324>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x216>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4d      	ldr	r2, [pc, #308]	; (800132c <HAL_GPIO_Init+0x328>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x212>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <HAL_GPIO_Init+0x32c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x20e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4b      	ldr	r2, [pc, #300]	; (8001334 <HAL_GPIO_Init+0x330>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x20a>
 800120a:	2307      	movs	r3, #7
 800120c:	e00e      	b.n	800122c <HAL_GPIO_Init+0x228>
 800120e:	2308      	movs	r3, #8
 8001210:	e00c      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001212:	2306      	movs	r3, #6
 8001214:	e00a      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001216:	2305      	movs	r3, #5
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121a:	2304      	movs	r3, #4
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x228>
 800122a:	2300      	movs	r3, #0
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4935      	ldr	r1, [pc, #212]	; (8001314 <HAL_GPIO_Init+0x310>)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <HAL_GPIO_Init+0x334>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800126e:	4a32      	ldr	r2, [pc, #200]	; (8001338 <HAL_GPIO_Init+0x334>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001274:	4b30      	ldr	r3, [pc, #192]	; (8001338 <HAL_GPIO_Init+0x334>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001298:	4a27      	ldr	r2, [pc, #156]	; (8001338 <HAL_GPIO_Init+0x334>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	f67f ae90 	bls.w	8001020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40013800 	.word	0x40013800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40021400 	.word	0x40021400
 8001330:	40021800 	.word	0x40021800
 8001334:	40021c00 	.word	0x40021c00
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fa2f 	bl	80047e8 <USB_GetMode>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	f040 80ef 	bne.w	8001570 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fa13 	bl	80047c2 <USB_ReadInterrupts>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 80e5 	beq.w	800156e <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 fa0a 	bl	80047c2 <USB_ReadInterrupts>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013b8:	d104      	bne.n	80013c4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013c2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 f9fa 	bl	80047c2 <USB_ReadInterrupts>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013d8:	d104      	bne.n	80013e4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013e2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 f9ea 	bl	80047c2 <USB_ReadInterrupts>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80013f8:	d104      	bne.n	8001404 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001402:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f003 f9da 	bl	80047c2 <USB_ReadInterrupts>
 800140e:	4603      	mov	r3, r0
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b02      	cmp	r3, #2
 8001416:	d103      	bne.n	8001420 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2202      	movs	r2, #2
 800141e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f003 f9cc 	bl	80047c2 <USB_ReadInterrupts>
 800142a:	4603      	mov	r3, r0
 800142c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001434:	d115      	bne.n	8001462 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800143e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d108      	bne.n	8001462 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f003 fc7f 	bl	8004d54 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2101      	movs	r1, #1
 800145c:	4618      	mov	r0, r3
 800145e:	f003 f9d1 	bl	8004804 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f003 f9ab 	bl	80047c2 <USB_ReadInterrupts>
 800146c:	4603      	mov	r3, r0
 800146e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001472:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001476:	d102      	bne.n	800147e <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f001 f98a 	bl	8002792 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f003 f99d 	bl	80047c2 <USB_ReadInterrupts>
 8001488:	4603      	mov	r3, r0
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b08      	cmp	r3, #8
 8001490:	d106      	bne.n	80014a0 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f003 fc42 	bl	8004d1c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2208      	movs	r2, #8
 800149e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 f98c 	bl	80047c2 <USB_ReadInterrupts>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	2b10      	cmp	r3, #16
 80014b2:	d101      	bne.n	80014b8 <HAL_HCD_IRQHandler+0x14a>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_HCD_IRQHandler+0x14c>
 80014b8:	2300      	movs	r3, #0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d012      	beq.n	80014e4 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	699a      	ldr	r2, [r3, #24]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0210 	bic.w	r2, r2, #16
 80014cc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f001 f88d 	bl	80025ee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699a      	ldr	r2, [r3, #24]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0210 	orr.w	r2, r2, #16
 80014e2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 f96a 	bl	80047c2 <USB_ReadInterrupts>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014f8:	d13a      	bne.n	8001570 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 f9ba 	bl	8004878 <USB_HC_ReadInterrupt>
 8001504:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e025      	b.n	8001558 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d018      	beq.n	8001552 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001536:	d106      	bne.n	8001546 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4619      	mov	r1, r3
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f836 	bl	80015b0 <HCD_HC_IN_IRQHandler>
 8001544:	e005      	b.n	8001552 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4619      	mov	r1, r3
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fc51 	bl	8001df4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	429a      	cmp	r2, r3
 8001560:	d3d4      	bcc.n	800150c <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	e000      	b.n	8001570 <HAL_HCD_IRQHandler+0x202>
      return;
 800156e:	bf00      	nop
    }
  }
}
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_HCD_Stop+0x16>
 8001588:	2302      	movs	r3, #2
 800158a:	e00d      	b.n	80015a8 <HAL_HCD_Stop+0x32>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f003 fa9a 	bl	8004ad2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	015a      	lsls	r2, r3, #5
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d119      	bne.n	8001614 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ec:	461a      	mov	r2, r3
 80015ee:	2304      	movs	r3, #4
 80015f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	015a      	lsls	r2, r3, #5
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	0151      	lsls	r1, r2, #5
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	440a      	add	r2, r1
 8001608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	60d3      	str	r3, [r2, #12]
 8001612:	e101      	b.n	8001818 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4413      	add	r3, r2
 800161c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800162a:	d12b      	bne.n	8001684 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	015a      	lsls	r2, r3, #5
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4413      	add	r3, r2
 8001634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001638:	461a      	mov	r2, r3
 800163a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	212c      	movs	r1, #44	; 0x2c
 8001646:	fb01 f303 	mul.w	r3, r1, r3
 800164a:	4413      	add	r3, r2
 800164c:	3361      	adds	r3, #97	; 0x61
 800164e:	2207      	movs	r2, #7
 8001650:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4413      	add	r3, r2
 800165a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	0151      	lsls	r1, r2, #5
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	440a      	add	r2, r1
 8001668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f003 f90c 	bl	800489a <USB_HC_Halt>
 8001682:	e0c9      	b.n	8001818 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	015a      	lsls	r2, r3, #5
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4413      	add	r3, r2
 800168c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	2b20      	cmp	r3, #32
 8001698:	d109      	bne.n	80016ae <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a6:	461a      	mov	r2, r3
 80016a8:	2320      	movs	r3, #32
 80016aa:	6093      	str	r3, [r2, #8]
 80016ac:	e0b4      	b.n	8001818 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d133      	bne.n	800172c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	0151      	lsls	r1, r2, #5
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	440a      	add	r2, r1
 80016da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	212c      	movs	r1, #44	; 0x2c
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	3361      	adds	r3, #97	; 0x61
 80016f2:	2205      	movs	r2, #5
 80016f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	015a      	lsls	r2, r3, #5
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001702:	461a      	mov	r2, r3
 8001704:	2310      	movs	r3, #16
 8001706:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4413      	add	r3, r2
 8001710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001714:	461a      	mov	r2, r3
 8001716:	2308      	movs	r3, #8
 8001718:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f003 f8b8 	bl	800489a <USB_HC_Halt>
 800172a:	e075      	b.n	8001818 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	015a      	lsls	r2, r3, #5
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4413      	add	r3, r2
 8001734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d134      	bne.n	80017ae <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	015a      	lsls	r2, r3, #5
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4413      	add	r3, r2
 800174c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	0151      	lsls	r1, r2, #5
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	440a      	add	r2, r1
 800175a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	212c      	movs	r1, #44	; 0x2c
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	3361      	adds	r3, #97	; 0x61
 8001772:	2208      	movs	r2, #8
 8001774:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4413      	add	r3, r2
 800177e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001782:	461a      	mov	r2, r3
 8001784:	2310      	movs	r3, #16
 8001786:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	015a      	lsls	r2, r3, #5
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4413      	add	r3, r2
 8001790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001794:	461a      	mov	r2, r3
 8001796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 f877 	bl	800489a <USB_HC_Halt>
 80017ac:	e034      	b.n	8001818 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c0:	2b80      	cmp	r3, #128	; 0x80
 80017c2:	d129      	bne.n	8001818 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	015a      	lsls	r2, r3, #5
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4413      	add	r3, r2
 80017cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	0151      	lsls	r1, r2, #5
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	440a      	add	r2, r1
 80017da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	212c      	movs	r1, #44	; 0x2c
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	3361      	adds	r3, #97	; 0x61
 80017f2:	2206      	movs	r2, #6
 80017f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f003 f84a 	bl	800489a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4413      	add	r3, r2
 800180e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001812:	461a      	mov	r2, r3
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	015a      	lsls	r2, r3, #5
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4413      	add	r3, r2
 8001820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800182a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800182e:	d122      	bne.n	8001876 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4413      	add	r3, r2
 8001838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	0151      	lsls	r1, r2, #5
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	440a      	add	r2, r1
 8001846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f003 f81d 	bl	800489a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	015a      	lsls	r2, r3, #5
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4413      	add	r3, r2
 8001868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800186c:	461a      	mov	r2, r3
 800186e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001872:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001874:	e2ba      	b.n	8001dec <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4413      	add	r3, r2
 800187e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	f040 811b 	bne.w	8001ac4 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d019      	beq.n	80018ca <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	212c      	movs	r1, #44	; 0x2c
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	3348      	adds	r3, #72	; 0x48
 80018a4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	0159      	lsls	r1, r3, #5
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	440b      	add	r3, r1
 80018ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80018b8:	1ad2      	subs	r2, r2, r3
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	202c      	movs	r0, #44	; 0x2c
 80018c0:	fb00 f303 	mul.w	r3, r0, r3
 80018c4:	440b      	add	r3, r1
 80018c6:	3350      	adds	r3, #80	; 0x50
 80018c8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3361      	adds	r3, #97	; 0x61
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	335c      	adds	r3, #92	; 0x5c
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	015a      	lsls	r2, r3, #5
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4413      	add	r3, r2
 80018f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018fa:	461a      	mov	r2, r3
 80018fc:	2301      	movs	r3, #1
 80018fe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	333f      	adds	r3, #63	; 0x3f
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d009      	beq.n	8001928 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	212c      	movs	r1, #44	; 0x2c
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	333f      	adds	r3, #63	; 0x3f
 8001922:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001924:	2b02      	cmp	r3, #2
 8001926:	d121      	bne.n	800196c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	015a      	lsls	r2, r3, #5
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4413      	add	r3, r2
 8001930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	0151      	lsls	r1, r2, #5
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	440a      	add	r2, r1
 800193e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f002 ffa1 	bl	800489a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4413      	add	r3, r2
 8001960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001964:	461a      	mov	r2, r3
 8001966:	2310      	movs	r3, #16
 8001968:	6093      	str	r3, [r2, #8]
 800196a:	e066      	b.n	8001a3a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	212c      	movs	r1, #44	; 0x2c
 8001972:	fb01 f303 	mul.w	r3, r1, r3
 8001976:	4413      	add	r3, r2
 8001978:	333f      	adds	r3, #63	; 0x3f
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d127      	bne.n	80019d0 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4413      	add	r3, r2
 8001988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	0151      	lsls	r1, r2, #5
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	440a      	add	r2, r1
 8001996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800199a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800199e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3360      	adds	r3, #96	; 0x60
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	b2d9      	uxtb	r1, r3
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	202c      	movs	r0, #44	; 0x2c
 80019bc:	fb00 f303 	mul.w	r3, r0, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	3360      	adds	r3, #96	; 0x60
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f003 f9d1 	bl	8004d70 <HAL_HCD_HC_NotifyURBChange_Callback>
 80019ce:	e034      	b.n	8001a3a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	212c      	movs	r1, #44	; 0x2c
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	333f      	adds	r3, #63	; 0x3f
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d12a      	bne.n	8001a3a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	212c      	movs	r1, #44	; 0x2c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	3360      	adds	r3, #96	; 0x60
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	212c      	movs	r1, #44	; 0x2c
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	3354      	adds	r3, #84	; 0x54
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	f083 0301 	eor.w	r3, r3, #1
 8001a0a:	b2d8      	uxtb	r0, r3
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	3354      	adds	r3, #84	; 0x54
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	b2d9      	uxtb	r1, r3
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	202c      	movs	r0, #44	; 0x2c
 8001a28:	fb00 f303 	mul.w	r3, r0, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3360      	adds	r3, #96	; 0x60
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f003 f99b 	bl	8004d70 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d12b      	bne.n	8001a9a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	212c      	movs	r1, #44	; 0x2c
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3348      	adds	r3, #72	; 0x48
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	202c      	movs	r0, #44	; 0x2c
 8001a58:	fb00 f202 	mul.w	r2, r0, r2
 8001a5c:	440a      	add	r2, r1
 8001a5e:	3240      	adds	r2, #64	; 0x40
 8001a60:	8812      	ldrh	r2, [r2, #0]
 8001a62:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 81be 	beq.w	8001dec <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	212c      	movs	r1, #44	; 0x2c
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3354      	adds	r3, #84	; 0x54
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	f083 0301 	eor.w	r3, r3, #1
 8001a84:	b2d8      	uxtb	r0, r3
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	212c      	movs	r1, #44	; 0x2c
 8001a8c:	fb01 f303 	mul.w	r3, r1, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	3354      	adds	r3, #84	; 0x54
 8001a94:	4602      	mov	r2, r0
 8001a96:	701a      	strb	r2, [r3, #0]
}
 8001a98:	e1a8      	b.n	8001dec <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	212c      	movs	r1, #44	; 0x2c
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3354      	adds	r3, #84	; 0x54
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	f083 0301 	eor.w	r3, r3, #1
 8001aae:	b2d8      	uxtb	r0, r3
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	212c      	movs	r1, #44	; 0x2c
 8001ab6:	fb01 f303 	mul.w	r3, r1, r3
 8001aba:	4413      	add	r3, r2
 8001abc:	3354      	adds	r3, #84	; 0x54
 8001abe:	4602      	mov	r2, r0
 8001ac0:	701a      	strb	r2, [r3, #0]
}
 8001ac2:	e193      	b.n	8001dec <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	015a      	lsls	r2, r3, #5
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	f040 8106 	bne.w	8001ce8 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	015a      	lsls	r2, r3, #5
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	0151      	lsls	r1, r2, #5
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	440a      	add	r2, r1
 8001af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001af6:	f023 0302 	bic.w	r3, r3, #2
 8001afa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	3361      	adds	r3, #97	; 0x61
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d109      	bne.n	8001b24 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3360      	adds	r3, #96	; 0x60
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	e0c9      	b.n	8001cb8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	3361      	adds	r3, #97	; 0x61
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d109      	bne.n	8001b4c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	212c      	movs	r1, #44	; 0x2c
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	3360      	adds	r3, #96	; 0x60
 8001b46:	2205      	movs	r2, #5
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	e0b5      	b.n	8001cb8 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	212c      	movs	r1, #44	; 0x2c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	3361      	adds	r3, #97	; 0x61
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b06      	cmp	r3, #6
 8001b5e:	d009      	beq.n	8001b74 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3361      	adds	r3, #97	; 0x61
 8001b6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d150      	bne.n	8001c16 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	212c      	movs	r1, #44	; 0x2c
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	335c      	adds	r3, #92	; 0x5c
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	202c      	movs	r0, #44	; 0x2c
 8001b8c:	fb00 f303 	mul.w	r3, r0, r3
 8001b90:	440b      	add	r3, r1
 8001b92:	335c      	adds	r3, #92	; 0x5c
 8001b94:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	212c      	movs	r1, #44	; 0x2c
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	335c      	adds	r3, #92	; 0x5c
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d912      	bls.n	8001bd0 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	212c      	movs	r1, #44	; 0x2c
 8001bb0:	fb01 f303 	mul.w	r3, r1, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	335c      	adds	r3, #92	; 0x5c
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	212c      	movs	r1, #44	; 0x2c
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3360      	adds	r3, #96	; 0x60
 8001bca:	2204      	movs	r2, #4
 8001bcc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001bce:	e073      	b.n	8001cb8 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	212c      	movs	r1, #44	; 0x2c
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3360      	adds	r3, #96	; 0x60
 8001bde:	2202      	movs	r2, #2
 8001be0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bf8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c00:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c14:	e050      	b.n	8001cb8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3361      	adds	r3, #97	; 0x61
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d122      	bne.n	8001c70 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	212c      	movs	r1, #44	; 0x2c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3360      	adds	r3, #96	; 0x60
 8001c38:	2202      	movs	r2, #2
 8001c3a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	015a      	lsls	r2, r3, #5
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4413      	add	r3, r2
 8001c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c68:	461a      	mov	r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e023      	b.n	8001cb8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	212c      	movs	r1, #44	; 0x2c
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3361      	adds	r3, #97	; 0x61
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b07      	cmp	r3, #7
 8001c82:	d119      	bne.n	8001cb8 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	212c      	movs	r1, #44	; 0x2c
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	335c      	adds	r3, #92	; 0x5c
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	202c      	movs	r0, #44	; 0x2c
 8001c9c:	fb00 f303 	mul.w	r3, r0, r3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	335c      	adds	r3, #92	; 0x5c
 8001ca4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	212c      	movs	r1, #44	; 0x2c
 8001cac:	fb01 f303 	mul.w	r3, r1, r3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3360      	adds	r3, #96	; 0x60
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	b2d9      	uxtb	r1, r3
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	202c      	movs	r0, #44	; 0x2c
 8001cd4:	fb00 f303 	mul.w	r3, r0, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	3360      	adds	r3, #96	; 0x60
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f003 f845 	bl	8004d70 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001ce6:	e081      	b.n	8001dec <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d176      	bne.n	8001dec <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	212c      	movs	r1, #44	; 0x2c
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	333f      	adds	r3, #63	; 0x3f
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d121      	bne.n	8001d56 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	212c      	movs	r1, #44	; 0x2c
 8001d18:	fb01 f303 	mul.w	r3, r1, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	335c      	adds	r3, #92	; 0x5c
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	0151      	lsls	r1, r2, #5
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	440a      	add	r2, r1
 8001d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 fda3 	bl	800489a <USB_HC_Halt>
 8001d54:	e041      	b.n	8001dda <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	212c      	movs	r1, #44	; 0x2c
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	333f      	adds	r3, #63	; 0x3f
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	212c      	movs	r1, #44	; 0x2c
 8001d70:	fb01 f303 	mul.w	r3, r1, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	333f      	adds	r3, #63	; 0x3f
 8001d78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d12d      	bne.n	8001dda <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	335c      	adds	r3, #92	; 0x5c
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d120      	bne.n	8001dda <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	212c      	movs	r1, #44	; 0x2c
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	3361      	adds	r3, #97	; 0x61
 8001da6:	2203      	movs	r2, #3
 8001da8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	0151      	lsls	r1, r2, #5
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	440a      	add	r2, r1
 8001dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 fd60 	bl	800489a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de6:	461a      	mov	r2, r3
 8001de8:	2310      	movs	r3, #16
 8001dea:	6093      	str	r3, [r2, #8]
}
 8001dec:	bf00      	nop
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d119      	bne.n	8001e58 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e30:	461a      	mov	r2, r3
 8001e32:	2304      	movs	r3, #4
 8001e34:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	0151      	lsls	r1, r2, #5
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	440a      	add	r2, r1
 8001e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001e56:	e3c6      	b.n	80025e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	d13e      	bne.n	8001eec <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	212c      	movs	r1, #44	; 0x2c
 8001e86:	fb01 f303 	mul.w	r3, r1, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	333d      	adds	r3, #61	; 0x3d
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	f040 83a8 	bne.w	80025e6 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	333d      	adds	r3, #61	; 0x3d
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	212c      	movs	r1, #44	; 0x2c
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3360      	adds	r3, #96	; 0x60
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	0151      	lsls	r1, r2, #5
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	440a      	add	r2, r1
 8001ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fcd8 	bl	800489a <USB_HC_Halt>
}
 8001eea:	e37c      	b.n	80025e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f02:	d122      	bne.n	8001f4a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	0151      	lsls	r1, r2, #5
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	440a      	add	r2, r1
 8001f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f002 fcb3 	bl	800489a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f40:	461a      	mov	r2, r3
 8001f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f46:	6093      	str	r3, [r2, #8]
}
 8001f48:	e34d      	b.n	80025e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d150      	bne.n	8002002 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	335c      	adds	r3, #92	; 0x5c
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f84:	2b40      	cmp	r3, #64	; 0x40
 8001f86:	d111      	bne.n	8001fac <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	333d      	adds	r3, #61	; 0x3d
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2340      	movs	r3, #64	; 0x40
 8001faa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	0151      	lsls	r1, r2, #5
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	440a      	add	r2, r1
 8001fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fc6:	f043 0302 	orr.w	r3, r3, #2
 8001fca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 fc5f 	bl	800489a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe8:	461a      	mov	r2, r3
 8001fea:	2301      	movs	r3, #1
 8001fec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	212c      	movs	r1, #44	; 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3361      	adds	r3, #97	; 0x61
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
}
 8002000:	e2f1      	b.n	80025e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4413      	add	r3, r2
 800200a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002014:	2b40      	cmp	r3, #64	; 0x40
 8002016:	d13c      	bne.n	8002092 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	212c      	movs	r1, #44	; 0x2c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	3361      	adds	r3, #97	; 0x61
 8002026:	2204      	movs	r2, #4
 8002028:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	333d      	adds	r3, #61	; 0x3d
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	335c      	adds	r3, #92	; 0x5c
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4413      	add	r3, r2
 8002056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	0151      	lsls	r1, r2, #5
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	440a      	add	r2, r1
 8002064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f002 fc0e 	bl	800489a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208a:	461a      	mov	r2, r3
 800208c:	2340      	movs	r3, #64	; 0x40
 800208e:	6093      	str	r3, [r2, #8]
}
 8002090:	e2a9      	b.n	80025e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d12a      	bne.n	80020fe <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	461a      	mov	r2, r3
 80020b6:	2308      	movs	r3, #8
 80020b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	0151      	lsls	r1, r2, #5
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	440a      	add	r2, r1
 80020d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 fbd8 	bl	800489a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3361      	adds	r3, #97	; 0x61
 80020f8:	2205      	movs	r2, #5
 80020fa:	701a      	strb	r2, [r3, #0]
}
 80020fc:	e273      	b.n	80025e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b10      	cmp	r3, #16
 8002112:	d150      	bne.n	80021b6 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	335c      	adds	r3, #92	; 0x5c
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	3361      	adds	r3, #97	; 0x61
 8002134:	2203      	movs	r2, #3
 8002136:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	333d      	adds	r3, #61	; 0x3d
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d112      	bne.n	8002172 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	333c      	adds	r3, #60	; 0x3c
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d108      	bne.n	8002172 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	333d      	adds	r3, #61	; 0x3d
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	0151      	lsls	r1, r2, #5
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	440a      	add	r2, r1
 8002188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f002 fb7c 	bl	800489a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	461a      	mov	r2, r3
 80021b0:	2310      	movs	r3, #16
 80021b2:	6093      	str	r3, [r2, #8]
}
 80021b4:	e217      	b.n	80025e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	2b80      	cmp	r3, #128	; 0x80
 80021ca:	d174      	bne.n	80022b6 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d121      	bne.n	8002218 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3361      	adds	r3, #97	; 0x61
 80021e2:	2206      	movs	r2, #6
 80021e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	0151      	lsls	r1, r2, #5
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	440a      	add	r2, r1
 80021fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f002 fb42 	bl	800489a <USB_HC_Halt>
 8002216:	e044      	b.n	80022a2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	335c      	adds	r3, #92	; 0x5c
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	202c      	movs	r0, #44	; 0x2c
 8002230:	fb00 f303 	mul.w	r3, r0, r3
 8002234:	440b      	add	r3, r1
 8002236:	335c      	adds	r3, #92	; 0x5c
 8002238:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	335c      	adds	r3, #92	; 0x5c
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d920      	bls.n	8002290 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	335c      	adds	r3, #92	; 0x5c
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3360      	adds	r3, #96	; 0x60
 800226e:	2204      	movs	r2, #4
 8002270:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	b2d9      	uxtb	r1, r3
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	202c      	movs	r0, #44	; 0x2c
 800227c:	fb00 f303 	mul.w	r3, r0, r3
 8002280:	4413      	add	r3, r2
 8002282:	3360      	adds	r3, #96	; 0x60
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f002 fd71 	bl	8004d70 <HAL_HCD_HC_NotifyURBChange_Callback>
 800228e:	e008      	b.n	80022a2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3360      	adds	r3, #96	; 0x60
 800229e:	2202      	movs	r2, #2
 80022a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ae:	461a      	mov	r2, r3
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	6093      	str	r3, [r2, #8]
}
 80022b4:	e197      	b.n	80025e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022cc:	d134      	bne.n	8002338 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	0151      	lsls	r1, r2, #5
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	440a      	add	r2, r1
 80022e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f002 face 	bl	800489a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	4413      	add	r3, r2
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	461a      	mov	r2, r3
 800230c:	2310      	movs	r3, #16
 800230e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	4413      	add	r3, r2
 8002318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231c:	461a      	mov	r2, r3
 800231e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002322:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	3361      	adds	r3, #97	; 0x61
 8002332:	2208      	movs	r2, #8
 8002334:	701a      	strb	r2, [r3, #0]
}
 8002336:	e156      	b.n	80025e6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b02      	cmp	r3, #2
 800234c:	f040 814b 	bne.w	80025e6 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	0151      	lsls	r1, r2, #5
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	440a      	add	r2, r1
 8002366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800236a:	f023 0302 	bic.w	r3, r3, #2
 800236e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	3361      	adds	r3, #97	; 0x61
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d179      	bne.n	8002478 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	3360      	adds	r3, #96	; 0x60
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	333f      	adds	r3, #63	; 0x3f
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d00a      	beq.n	80023c0 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	333f      	adds	r3, #63	; 0x3f
 80023b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	f040 80fc 	bne.w	80025b8 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d142      	bne.n	800244e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	334c      	adds	r3, #76	; 0x4c
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80ed 	beq.w	80025b8 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	334c      	adds	r3, #76	; 0x4c
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	202c      	movs	r0, #44	; 0x2c
 80023f4:	fb00 f202 	mul.w	r2, r0, r2
 80023f8:	440a      	add	r2, r1
 80023fa:	3240      	adds	r2, #64	; 0x40
 80023fc:	8812      	ldrh	r2, [r2, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	3b01      	subs	r3, #1
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	202c      	movs	r0, #44	; 0x2c
 8002408:	fb00 f202 	mul.w	r2, r0, r2
 800240c:	440a      	add	r2, r1
 800240e:	3240      	adds	r2, #64	; 0x40
 8002410:	8812      	ldrh	r2, [r2, #0]
 8002412:	fbb3 f3f2 	udiv	r3, r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80ca 	beq.w	80025b8 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3355      	adds	r3, #85	; 0x55
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	f083 0301 	eor.w	r3, r3, #1
 8002438:	b2d8      	uxtb	r0, r3
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	3355      	adds	r3, #85	; 0x55
 8002448:	4602      	mov	r2, r0
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	e0b4      	b.n	80025b8 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	3355      	adds	r3, #85	; 0x55
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	f083 0301 	eor.w	r3, r3, #1
 8002462:	b2d8      	uxtb	r0, r3
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3355      	adds	r3, #85	; 0x55
 8002472:	4602      	mov	r2, r0
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	e09f      	b.n	80025b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3361      	adds	r3, #97	; 0x61
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d109      	bne.n	80024a0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3360      	adds	r3, #96	; 0x60
 800249a:	2202      	movs	r2, #2
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	e08b      	b.n	80025b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	3361      	adds	r3, #97	; 0x61
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d109      	bne.n	80024c8 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3360      	adds	r3, #96	; 0x60
 80024c2:	2202      	movs	r2, #2
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	e077      	b.n	80025b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3361      	adds	r3, #97	; 0x61
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d109      	bne.n	80024f0 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3360      	adds	r3, #96	; 0x60
 80024ea:	2205      	movs	r2, #5
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e063      	b.n	80025b8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3361      	adds	r3, #97	; 0x61
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b06      	cmp	r3, #6
 8002502:	d009      	beq.n	8002518 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3361      	adds	r3, #97	; 0x61
 8002512:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002514:	2b08      	cmp	r3, #8
 8002516:	d14f      	bne.n	80025b8 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	335c      	adds	r3, #92	; 0x5c
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	202c      	movs	r0, #44	; 0x2c
 8002530:	fb00 f303 	mul.w	r3, r0, r3
 8002534:	440b      	add	r3, r1
 8002536:	335c      	adds	r3, #92	; 0x5c
 8002538:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	335c      	adds	r3, #92	; 0x5c
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d912      	bls.n	8002574 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	335c      	adds	r3, #92	; 0x5c
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3360      	adds	r3, #96	; 0x60
 800256e:	2204      	movs	r2, #4
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e021      	b.n	80025b8 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3360      	adds	r3, #96	; 0x60
 8002582:	2202      	movs	r2, #2
 8002584:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800259c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025a4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	461a      	mov	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	461a      	mov	r2, r3
 80025c6:	2302      	movs	r3, #2
 80025c8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	b2d9      	uxtb	r1, r3
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	202c      	movs	r0, #44	; 0x2c
 80025d4:	fb00 f303 	mul.w	r3, r0, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3360      	adds	r3, #96	; 0x60
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f002 fbc5 	bl	8004d70 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80025e6:	bf00      	nop
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b08a      	sub	sp, #40	; 0x28
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	0c5b      	lsrs	r3, r3, #17
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002622:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d004      	beq.n	8002634 <HCD_RXQLVL_IRQHandler+0x46>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b05      	cmp	r3, #5
 800262e:	f000 80a9 	beq.w	8002784 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002632:	e0aa      	b.n	800278a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80a6 	beq.w	8002788 <HCD_RXQLVL_IRQHandler+0x19a>
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3344      	adds	r3, #68	; 0x44
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 809b 	beq.w	8002788 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	3350      	adds	r3, #80	; 0x50
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	441a      	add	r2, r3
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	202c      	movs	r0, #44	; 0x2c
 800266c:	fb00 f303 	mul.w	r3, r0, r3
 8002670:	440b      	add	r3, r1
 8002672:	334c      	adds	r3, #76	; 0x4c
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d87a      	bhi.n	8002770 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	3344      	adds	r3, #68	; 0x44
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	b292      	uxth	r2, r2
 8002692:	4619      	mov	r1, r3
 8002694:	f002 f86c 	bl	8004770 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	3344      	adds	r3, #68	; 0x44
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	441a      	add	r2, r3
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	202c      	movs	r0, #44	; 0x2c
 80026b2:	fb00 f303 	mul.w	r3, r0, r3
 80026b6:	440b      	add	r3, r1
 80026b8:	3344      	adds	r3, #68	; 0x44
 80026ba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3350      	adds	r3, #80	; 0x50
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	441a      	add	r2, r3
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	202c      	movs	r0, #44	; 0x2c
 80026d6:	fb00 f303 	mul.w	r3, r0, r3
 80026da:	440b      	add	r3, r1
 80026dc:	3350      	adds	r3, #80	; 0x50
 80026de:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	0cdb      	lsrs	r3, r3, #19
 80026f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3340      	adds	r3, #64	; 0x40
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4293      	cmp	r3, r2
 800270c:	d13c      	bne.n	8002788 <HCD_RXQLVL_IRQHandler+0x19a>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d039      	beq.n	8002788 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800272a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002732:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002740:	461a      	mov	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3354      	adds	r3, #84	; 0x54
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	f083 0301 	eor.w	r3, r3, #1
 800275a:	b2d8      	uxtb	r0, r3
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	212c      	movs	r1, #44	; 0x2c
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	4413      	add	r3, r2
 8002768:	3354      	adds	r3, #84	; 0x54
 800276a:	4602      	mov	r2, r0
 800276c:	701a      	strb	r2, [r3, #0]
      break;
 800276e:	e00b      	b.n	8002788 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3360      	adds	r3, #96	; 0x60
 800277e:	2204      	movs	r2, #4
 8002780:	701a      	strb	r2, [r3, #0]
      break;
 8002782:	e001      	b.n	8002788 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002784:	bf00      	nop
 8002786:	e000      	b.n	800278a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002788:	bf00      	nop
  }
}
 800278a:	bf00      	nop
 800278c:	3728      	adds	r7, #40	; 0x28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80027be:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d10b      	bne.n	80027e2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d102      	bne.n	80027da <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f002 faaf 	bl	8004d38 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d132      	bne.n	8002852 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f043 0308 	orr.w	r3, r3, #8
 80027f2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d126      	bne.n	800284c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d113      	bne.n	800282e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800280c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002810:	d106      	bne.n	8002820 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2102      	movs	r1, #2
 8002818:	4618      	mov	r0, r3
 800281a:	f001 fff3 	bl	8004804 <USB_InitFSLSPClkSel>
 800281e:	e011      	b.n	8002844 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2101      	movs	r1, #1
 8002826:	4618      	mov	r0, r3
 8002828:	f001 ffec 	bl	8004804 <USB_InitFSLSPClkSel>
 800282c:	e00a      	b.n	8002844 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d106      	bne.n	8002844 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800283c:	461a      	mov	r2, r3
 800283e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002842:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f002 faa1 	bl	8004d8c <HAL_HCD_PortEnabled_Callback>
 800284a:	e002      	b.n	8002852 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f002 faab 	bl	8004da8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b20      	cmp	r3, #32
 800285a:	d103      	bne.n	8002864 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f043 0320 	orr.w	r3, r3, #32
 8002862:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800286a:	461a      	mov	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e12b      	b.n	8002ae2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe f8a8 	bl	80009f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2224      	movs	r2, #36	; 0x24
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028dc:	f001 f9fc 	bl	8003cd8 <HAL_RCC_GetPCLK1Freq>
 80028e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4a81      	ldr	r2, [pc, #516]	; (8002aec <HAL_I2C_Init+0x274>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d807      	bhi.n	80028fc <HAL_I2C_Init+0x84>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a80      	ldr	r2, [pc, #512]	; (8002af0 <HAL_I2C_Init+0x278>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	bf94      	ite	ls
 80028f4:	2301      	movls	r3, #1
 80028f6:	2300      	movhi	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	e006      	b.n	800290a <HAL_I2C_Init+0x92>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4a7d      	ldr	r2, [pc, #500]	; (8002af4 <HAL_I2C_Init+0x27c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	bf94      	ite	ls
 8002904:	2301      	movls	r3, #1
 8002906:	2300      	movhi	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e0e7      	b.n	8002ae2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4a78      	ldr	r2, [pc, #480]	; (8002af8 <HAL_I2C_Init+0x280>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	0c9b      	lsrs	r3, r3, #18
 800291c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a6a      	ldr	r2, [pc, #424]	; (8002aec <HAL_I2C_Init+0x274>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d802      	bhi.n	800294c <HAL_I2C_Init+0xd4>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	3301      	adds	r3, #1
 800294a:	e009      	b.n	8002960 <HAL_I2C_Init+0xe8>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	4a69      	ldr	r2, [pc, #420]	; (8002afc <HAL_I2C_Init+0x284>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	3301      	adds	r3, #1
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	430b      	orrs	r3, r1
 8002966:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002972:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	495c      	ldr	r1, [pc, #368]	; (8002aec <HAL_I2C_Init+0x274>)
 800297c:	428b      	cmp	r3, r1
 800297e:	d819      	bhi.n	80029b4 <HAL_I2C_Init+0x13c>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1e59      	subs	r1, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fbb1 f3f3 	udiv	r3, r1, r3
 800298e:	1c59      	adds	r1, r3, #1
 8002990:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002994:	400b      	ands	r3, r1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_I2C_Init+0x138>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1e59      	subs	r1, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ae:	e051      	b.n	8002a54 <HAL_I2C_Init+0x1dc>
 80029b0:	2304      	movs	r3, #4
 80029b2:	e04f      	b.n	8002a54 <HAL_I2C_Init+0x1dc>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d111      	bne.n	80029e0 <HAL_I2C_Init+0x168>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1e58      	subs	r0, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	440b      	add	r3, r1
 80029ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e012      	b.n	8002a06 <HAL_I2C_Init+0x18e>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1e58      	subs	r0, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	0099      	lsls	r1, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_Init+0x196>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e022      	b.n	8002a54 <HAL_I2C_Init+0x1dc>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10e      	bne.n	8002a34 <HAL_I2C_Init+0x1bc>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1e58      	subs	r0, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6859      	ldr	r1, [r3, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	440b      	add	r3, r1
 8002a24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a28:	3301      	adds	r3, #1
 8002a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a32:	e00f      	b.n	8002a54 <HAL_I2C_Init+0x1dc>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1e58      	subs	r0, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	0099      	lsls	r1, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	6809      	ldr	r1, [r1, #0]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6911      	ldr	r1, [r2, #16]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68d2      	ldr	r2, [r2, #12]
 8002a8e:	4311      	orrs	r1, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	430b      	orrs	r3, r1
 8002a96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	000186a0 	.word	0x000186a0
 8002af0:	001e847f 	.word	0x001e847f
 8002af4:	003d08ff 	.word	0x003d08ff
 8002af8:	431bde83 	.word	0x431bde83
 8002afc:	10624dd3 	.word	0x10624dd3

08002b00 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e128      	b.n	8002d64 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a90      	ldr	r2, [pc, #576]	; (8002d6c <HAL_I2S_Init+0x26c>)
 8002b2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fd ffa9 	bl	8000a84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2202      	movs	r2, #2
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b48:	f023 030f 	bic.w	r3, r3, #15
 8002b4c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2202      	movs	r2, #2
 8002b54:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d060      	beq.n	8002c20 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d102      	bne.n	8002b6c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002b66:	2310      	movs	r3, #16
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	e001      	b.n	8002b70 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d802      	bhi.n	8002b7e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f001 f9b4 	bl	8003eec <HAL_RCCEx_GetPeriphCLKFreq>
 8002b84:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b8e:	d125      	bne.n	8002bdc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	461a      	mov	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	3305      	adds	r3, #5
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	e01f      	b.n	8002bfa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	461a      	mov	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd6:	3305      	adds	r3, #5
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	e00e      	b.n	8002bfa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	461a      	mov	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf6:	3305      	adds	r3, #5
 8002bf8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4a5c      	ldr	r2, [pc, #368]	; (8002d70 <HAL_I2S_Init+0x270>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	08db      	lsrs	r3, r3, #3
 8002c04:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	085b      	lsrs	r3, r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	e003      	b.n	8002c28 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002c20:	2302      	movs	r3, #2
 8002c22:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d902      	bls.n	8002c34 <HAL_I2S_Init+0x134>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2bff      	cmp	r3, #255	; 0xff
 8002c32:	d907      	bls.n	8002c44 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	f043 0210 	orr.w	r2, r3, #16
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e08f      	b.n	8002d64 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	ea42 0103 	orr.w	r1, r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002c62:	f023 030f 	bic.w	r3, r3, #15
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6851      	ldr	r1, [r2, #4]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6892      	ldr	r2, [r2, #8]
 8002c6e:	4311      	orrs	r1, r2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	68d2      	ldr	r2, [r2, #12]
 8002c74:	4311      	orrs	r1, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6992      	ldr	r2, [r2, #24]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c86:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d161      	bne.n	8002d54 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a38      	ldr	r2, [pc, #224]	; (8002d74 <HAL_I2S_Init+0x274>)
 8002c94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a37      	ldr	r2, [pc, #220]	; (8002d78 <HAL_I2S_Init+0x278>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d101      	bne.n	8002ca4 <HAL_I2S_Init+0x1a4>
 8002ca0:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <HAL_I2S_Init+0x27c>)
 8002ca2:	e001      	b.n	8002ca8 <HAL_I2S_Init+0x1a8>
 8002ca4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	4932      	ldr	r1, [pc, #200]	; (8002d78 <HAL_I2S_Init+0x278>)
 8002cb0:	428a      	cmp	r2, r1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_I2S_Init+0x1b8>
 8002cb4:	4a31      	ldr	r2, [pc, #196]	; (8002d7c <HAL_I2S_Init+0x27c>)
 8002cb6:	e001      	b.n	8002cbc <HAL_I2S_Init+0x1bc>
 8002cb8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002cbc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002cc0:	f023 030f 	bic.w	r3, r3, #15
 8002cc4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2b      	ldr	r2, [pc, #172]	; (8002d78 <HAL_I2S_Init+0x278>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_I2S_Init+0x1d4>
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <HAL_I2S_Init+0x27c>)
 8002cd2:	e001      	b.n	8002cd8 <HAL_I2S_Init+0x1d8>
 8002cd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cd8:	2202      	movs	r2, #2
 8002cda:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a25      	ldr	r2, [pc, #148]	; (8002d78 <HAL_I2S_Init+0x278>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_I2S_Init+0x1ea>
 8002ce6:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <HAL_I2S_Init+0x27c>)
 8002ce8:	e001      	b.n	8002cee <HAL_I2S_Init+0x1ee>
 8002cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfa:	d003      	beq.n	8002d04 <HAL_I2S_Init+0x204>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d103      	bne.n	8002d0c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	e001      	b.n	8002d10 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d24:	4313      	orrs	r3, r2
 8002d26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d3c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a0d      	ldr	r2, [pc, #52]	; (8002d78 <HAL_I2S_Init+0x278>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d101      	bne.n	8002d4c <HAL_I2S_Init+0x24c>
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_I2S_Init+0x27c>)
 8002d4a:	e001      	b.n	8002d50 <HAL_I2S_Init+0x250>
 8002d4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d50:	897a      	ldrh	r2, [r7, #10]
 8002d52:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	08002e77 	.word	0x08002e77
 8002d70:	cccccccd 	.word	0xcccccccd
 8002d74:	08002f8d 	.word	0x08002f8d
 8002d78:	40003800 	.word	0x40003800
 8002d7c:	40003400 	.word	0x40003400

08002d80 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	1c9a      	adds	r2, r3, #2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10e      	bne.n	8002e10 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e00:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ffb8 	bl	8002d80 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	1c9a      	adds	r2, r3, #2
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10e      	bne.n	8002e6e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ff93 	bl	8002d94 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d13a      	bne.n	8002f08 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d109      	bne.n	8002eb0 <I2S_IRQHandler+0x3a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	d102      	bne.n	8002eb0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ffb4 	bl	8002e18 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d126      	bne.n	8002f08 <I2S_IRQHandler+0x92>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d11f      	bne.n	8002f08 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ed6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f043 0202 	orr.w	r2, r3, #2
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ff50 	bl	8002da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d136      	bne.n	8002f82 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d109      	bne.n	8002f32 <I2S_IRQHandler+0xbc>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f28:	2b80      	cmp	r3, #128	; 0x80
 8002f2a:	d102      	bne.n	8002f32 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff45 	bl	8002dbc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d122      	bne.n	8002f82 <I2S_IRQHandler+0x10c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d11b      	bne.n	8002f82 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f58:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	f043 0204 	orr.w	r2, r3, #4
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ff13 	bl	8002da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4aa2      	ldr	r2, [pc, #648]	; (800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002fa6:	4ba2      	ldr	r3, [pc, #648]	; (8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fa8:	e001      	b.n	8002fae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002faa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a9b      	ldr	r2, [pc, #620]	; (800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002fc4:	4b9a      	ldr	r3, [pc, #616]	; (8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fc6:	e001      	b.n	8002fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002fc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd8:	d004      	beq.n	8002fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f040 8099 	bne.w	8003116 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d107      	bne.n	8002ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f925 	bl	8003248 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d107      	bne.n	8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f9c8 	bl	80033a8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b40      	cmp	r3, #64	; 0x40
 8003020:	d13a      	bne.n	8003098 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d035      	beq.n	8003098 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a7e      	ldr	r2, [pc, #504]	; (800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003036:	4b7e      	ldr	r3, [pc, #504]	; (8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003038:	e001      	b.n	800303e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800303a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4979      	ldr	r1, [pc, #484]	; (800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003046:	428b      	cmp	r3, r1
 8003048:	d101      	bne.n	800304e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800304a:	4b79      	ldr	r3, [pc, #484]	; (8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800304c:	e001      	b.n	8003052 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800304e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003052:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003056:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003066:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f043 0202 	orr.w	r2, r3, #2
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fe88 	bl	8002da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b08      	cmp	r3, #8
 80030a0:	f040 80be 	bne.w	8003220 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80b8 	beq.w	8003220 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a59      	ldr	r2, [pc, #356]	; (800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80030ca:	4b59      	ldr	r3, [pc, #356]	; (8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030cc:	e001      	b.n	80030d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80030ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4954      	ldr	r1, [pc, #336]	; (800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030da:	428b      	cmp	r3, r1
 80030dc:	d101      	bne.n	80030e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80030de:	4b54      	ldr	r3, [pc, #336]	; (8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030e0:	e001      	b.n	80030e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80030e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80030ec:	2300      	movs	r3, #0
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f043 0204 	orr.w	r2, r3, #4
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fe4a 	bl	8002da8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003114:	e084      	b.n	8003220 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b02      	cmp	r3, #2
 800311e:	d107      	bne.n	8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8be 	bl	80032ac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d107      	bne.n	800314a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f8fd 	bl	8003344 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003150:	2b40      	cmp	r3, #64	; 0x40
 8003152:	d12f      	bne.n	80031b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d02a      	beq.n	80031b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800316c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2e      	ldr	r2, [pc, #184]	; (800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003178:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800317a:	e001      	b.n	8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800317c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4929      	ldr	r1, [pc, #164]	; (800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003188:	428b      	cmp	r3, r1
 800318a:	d101      	bne.n	8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800318c:	4b28      	ldr	r3, [pc, #160]	; (8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800318e:	e001      	b.n	8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003194:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003198:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	f043 0202 	orr.w	r2, r3, #2
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff fdfa 	bl	8002da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d131      	bne.n	8003222 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d02c      	beq.n	8003222 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a17      	ldr	r2, [pc, #92]	; (800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031d4:	e001      	b.n	80031da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80031d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4912      	ldr	r1, [pc, #72]	; (800322c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031e2:	428b      	cmp	r3, r1
 80031e4:	d101      	bne.n	80031ea <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031e8:	e001      	b.n	80031ee <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80031ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003202:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003210:	f043 0204 	orr.w	r2, r3, #4
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff fdc5 	bl	8002da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800321e:	e000      	b.n	8003222 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003220:	bf00      	nop
}
 8003222:	bf00      	nop
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40003800 	.word	0x40003800
 8003230:	40003400 	.word	0x40003400

08003234 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	1c99      	adds	r1, r3, #2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6251      	str	r1, [r2, #36]	; 0x24
 800325a:	881a      	ldrh	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d113      	bne.n	80032a2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003288:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d106      	bne.n	80032a2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ffc9 	bl	8003234 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	1c99      	adds	r1, r3, #2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6251      	str	r1, [r2, #36]	; 0x24
 80032be:	8819      	ldrh	r1, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1d      	ldr	r2, [pc, #116]	; (800333c <I2SEx_TxISR_I2SExt+0x90>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <I2SEx_TxISR_I2SExt+0x22>
 80032ca:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <I2SEx_TxISR_I2SExt+0x94>)
 80032cc:	e001      	b.n	80032d2 <I2SEx_TxISR_I2SExt+0x26>
 80032ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d2:	460a      	mov	r2, r1
 80032d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d121      	bne.n	8003332 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a12      	ldr	r2, [pc, #72]	; (800333c <I2SEx_TxISR_I2SExt+0x90>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <I2SEx_TxISR_I2SExt+0x50>
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <I2SEx_TxISR_I2SExt+0x94>)
 80032fa:	e001      	b.n	8003300 <I2SEx_TxISR_I2SExt+0x54>
 80032fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	490d      	ldr	r1, [pc, #52]	; (800333c <I2SEx_TxISR_I2SExt+0x90>)
 8003308:	428b      	cmp	r3, r1
 800330a:	d101      	bne.n	8003310 <I2SEx_TxISR_I2SExt+0x64>
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <I2SEx_TxISR_I2SExt+0x94>)
 800330e:	e001      	b.n	8003314 <I2SEx_TxISR_I2SExt+0x68>
 8003310:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003314:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003318:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d106      	bne.n	8003332 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff81 	bl	8003234 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40003800 	.word	0x40003800
 8003340:	40003400 	.word	0x40003400

08003344 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68d8      	ldr	r0, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	1c99      	adds	r1, r3, #2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800335c:	b282      	uxth	r2, r0
 800335e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d113      	bne.n	80033a0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003386:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ff4a 	bl	8003234 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a20      	ldr	r2, [pc, #128]	; (8003438 <I2SEx_RxISR_I2SExt+0x90>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d101      	bne.n	80033be <I2SEx_RxISR_I2SExt+0x16>
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <I2SEx_RxISR_I2SExt+0x94>)
 80033bc:	e001      	b.n	80033c2 <I2SEx_RxISR_I2SExt+0x1a>
 80033be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033c2:	68d8      	ldr	r0, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	1c99      	adds	r1, r3, #2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80033ce:	b282      	uxth	r2, r0
 80033d0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d121      	bne.n	800342e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a12      	ldr	r2, [pc, #72]	; (8003438 <I2SEx_RxISR_I2SExt+0x90>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d101      	bne.n	80033f8 <I2SEx_RxISR_I2SExt+0x50>
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <I2SEx_RxISR_I2SExt+0x94>)
 80033f6:	e001      	b.n	80033fc <I2SEx_RxISR_I2SExt+0x54>
 80033f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	490d      	ldr	r1, [pc, #52]	; (8003438 <I2SEx_RxISR_I2SExt+0x90>)
 8003404:	428b      	cmp	r3, r1
 8003406:	d101      	bne.n	800340c <I2SEx_RxISR_I2SExt+0x64>
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <I2SEx_RxISR_I2SExt+0x94>)
 800340a:	e001      	b.n	8003410 <I2SEx_RxISR_I2SExt+0x68>
 800340c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003410:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003414:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff03 	bl	8003234 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40003800 	.word	0x40003800
 800343c:	40003400 	.word	0x40003400

08003440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e264      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d075      	beq.n	800354a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800345e:	4ba3      	ldr	r3, [pc, #652]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b04      	cmp	r3, #4
 8003468:	d00c      	beq.n	8003484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346a:	4ba0      	ldr	r3, [pc, #640]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003472:	2b08      	cmp	r3, #8
 8003474:	d112      	bne.n	800349c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003476:	4b9d      	ldr	r3, [pc, #628]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003482:	d10b      	bne.n	800349c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	4b99      	ldr	r3, [pc, #612]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d05b      	beq.n	8003548 <HAL_RCC_OscConfig+0x108>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d157      	bne.n	8003548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e23f      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a4:	d106      	bne.n	80034b4 <HAL_RCC_OscConfig+0x74>
 80034a6:	4b91      	ldr	r3, [pc, #580]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a90      	ldr	r2, [pc, #576]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e01d      	b.n	80034f0 <HAL_RCC_OscConfig+0xb0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x98>
 80034be:	4b8b      	ldr	r3, [pc, #556]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a8a      	ldr	r2, [pc, #552]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	4b88      	ldr	r3, [pc, #544]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a87      	ldr	r2, [pc, #540]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e00b      	b.n	80034f0 <HAL_RCC_OscConfig+0xb0>
 80034d8:	4b84      	ldr	r3, [pc, #528]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a83      	ldr	r2, [pc, #524]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b81      	ldr	r3, [pc, #516]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a80      	ldr	r2, [pc, #512]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80034ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d013      	beq.n	8003520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fd fc92 	bl	8000e20 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003500:	f7fd fc8e 	bl	8000e20 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	; 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e204      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b76      	ldr	r3, [pc, #472]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0xc0>
 800351e:	e014      	b.n	800354a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fd fc7e 	bl	8000e20 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003528:	f7fd fc7a 	bl	8000e20 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e1f0      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353a:	4b6c      	ldr	r3, [pc, #432]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0xe8>
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d063      	beq.n	800361e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003556:	4b65      	ldr	r3, [pc, #404]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003562:	4b62      	ldr	r3, [pc, #392]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800356a:	2b08      	cmp	r3, #8
 800356c:	d11c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800356e:	4b5f      	ldr	r3, [pc, #380]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d116      	bne.n	80035a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357a:	4b5c      	ldr	r3, [pc, #368]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_RCC_OscConfig+0x152>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d001      	beq.n	8003592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e1c4      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003592:	4b56      	ldr	r3, [pc, #344]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4952      	ldr	r1, [pc, #328]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a6:	e03a      	b.n	800361e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d020      	beq.n	80035f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b0:	4b4f      	ldr	r3, [pc, #316]	; (80036f0 <HAL_RCC_OscConfig+0x2b0>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fd fc33 	bl	8000e20 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035be:	f7fd fc2f 	bl	8000e20 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e1a5      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d0:	4b46      	ldr	r3, [pc, #280]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035dc:	4b43      	ldr	r3, [pc, #268]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4940      	ldr	r1, [pc, #256]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]
 80035f0:	e015      	b.n	800361e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f2:	4b3f      	ldr	r3, [pc, #252]	; (80036f0 <HAL_RCC_OscConfig+0x2b0>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fd fc12 	bl	8000e20 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003600:	f7fd fc0e 	bl	8000e20 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e184      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003612:	4b36      	ldr	r3, [pc, #216]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d030      	beq.n	800368c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d016      	beq.n	8003660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003632:	4b30      	ldr	r3, [pc, #192]	; (80036f4 <HAL_RCC_OscConfig+0x2b4>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fd fbf2 	bl	8000e20 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003640:	f7fd fbee 	bl	8000e20 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e164      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003652:	4b26      	ldr	r3, [pc, #152]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x200>
 800365e:	e015      	b.n	800368c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003660:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <HAL_RCC_OscConfig+0x2b4>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003666:	f7fd fbdb 	bl	8000e20 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800366e:	f7fd fbd7 	bl	8000e20 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e14d      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003680:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 8003682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f0      	bne.n	800366e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a0 	beq.w	80037da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369e:	4b13      	ldr	r3, [pc, #76]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10f      	bne.n	80036ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a0e      	ldr	r2, [pc, #56]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c6:	2301      	movs	r3, #1
 80036c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_RCC_OscConfig+0x2b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d121      	bne.n	800371a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <HAL_RCC_OscConfig+0x2b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <HAL_RCC_OscConfig+0x2b8>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e2:	f7fd fb9d 	bl	8000e20 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e8:	e011      	b.n	800370e <HAL_RCC_OscConfig+0x2ce>
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800
 80036f0:	42470000 	.word	0x42470000
 80036f4:	42470e80 	.word	0x42470e80
 80036f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fc:	f7fd fb90 	bl	8000e20 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e106      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	4b85      	ldr	r3, [pc, #532]	; (8003924 <HAL_RCC_OscConfig+0x4e4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d106      	bne.n	8003730 <HAL_RCC_OscConfig+0x2f0>
 8003722:	4b81      	ldr	r3, [pc, #516]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	4a80      	ldr	r2, [pc, #512]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6713      	str	r3, [r2, #112]	; 0x70
 800372e:	e01c      	b.n	800376a <HAL_RCC_OscConfig+0x32a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b05      	cmp	r3, #5
 8003736:	d10c      	bne.n	8003752 <HAL_RCC_OscConfig+0x312>
 8003738:	4b7b      	ldr	r3, [pc, #492]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a7a      	ldr	r2, [pc, #488]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 800373e:	f043 0304 	orr.w	r3, r3, #4
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	4b78      	ldr	r3, [pc, #480]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	4a77      	ldr	r2, [pc, #476]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6713      	str	r3, [r2, #112]	; 0x70
 8003750:	e00b      	b.n	800376a <HAL_RCC_OscConfig+0x32a>
 8003752:	4b75      	ldr	r3, [pc, #468]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	4a74      	ldr	r2, [pc, #464]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	6713      	str	r3, [r2, #112]	; 0x70
 800375e:	4b72      	ldr	r3, [pc, #456]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	4a71      	ldr	r2, [pc, #452]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 8003764:	f023 0304 	bic.w	r3, r3, #4
 8003768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d015      	beq.n	800379e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fd fb55 	bl	8000e20 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003778:	e00a      	b.n	8003790 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fd fb51 	bl	8000e20 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f241 3288 	movw	r2, #5000	; 0x1388
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e0c5      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003790:	4b65      	ldr	r3, [pc, #404]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ee      	beq.n	800377a <HAL_RCC_OscConfig+0x33a>
 800379c:	e014      	b.n	80037c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379e:	f7fd fb3f 	bl	8000e20 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fd fb3b 	bl	8000e20 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0af      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037bc:	4b5a      	ldr	r3, [pc, #360]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ee      	bne.n	80037a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d105      	bne.n	80037da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ce:	4b56      	ldr	r3, [pc, #344]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	4a55      	ldr	r2, [pc, #340]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 80037d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 809b 	beq.w	800391a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037e4:	4b50      	ldr	r3, [pc, #320]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d05c      	beq.n	80038aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d141      	bne.n	800387c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f8:	4b4c      	ldr	r3, [pc, #304]	; (800392c <HAL_RCC_OscConfig+0x4ec>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fe:	f7fd fb0f 	bl	8000e20 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003806:	f7fd fb0b 	bl	8000e20 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e081      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003818:	4b43      	ldr	r3, [pc, #268]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f0      	bne.n	8003806 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	019b      	lsls	r3, r3, #6
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	3b01      	subs	r3, #1
 800383e:	041b      	lsls	r3, r3, #16
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	061b      	lsls	r3, r3, #24
 8003848:	4937      	ldr	r1, [pc, #220]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 800384a:	4313      	orrs	r3, r2
 800384c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800384e:	4b37      	ldr	r3, [pc, #220]	; (800392c <HAL_RCC_OscConfig+0x4ec>)
 8003850:	2201      	movs	r2, #1
 8003852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fd fae4 	bl	8000e20 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385c:	f7fd fae0 	bl	8000e20 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e056      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386e:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x41c>
 800387a:	e04e      	b.n	800391a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387c:	4b2b      	ldr	r3, [pc, #172]	; (800392c <HAL_RCC_OscConfig+0x4ec>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7fd facd 	bl	8000e20 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388a:	f7fd fac9 	bl	8000e20 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e03f      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389c:	4b22      	ldr	r3, [pc, #136]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0x44a>
 80038a8:	e037      	b.n	800391a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e032      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038b6:	4b1c      	ldr	r3, [pc, #112]	; (8003928 <HAL_RCC_OscConfig+0x4e8>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d028      	beq.n	8003916 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d121      	bne.n	8003916 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d11a      	bne.n	8003916 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038e6:	4013      	ands	r3, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d111      	bne.n	8003916 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	085b      	lsrs	r3, r3, #1
 80038fe:	3b01      	subs	r3, #1
 8003900:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d107      	bne.n	8003916 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40007000 	.word	0x40007000
 8003928:	40023800 	.word	0x40023800
 800392c:	42470060 	.word	0x42470060

08003930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0cc      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003944:	4b68      	ldr	r3, [pc, #416]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d90c      	bls.n	800396c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b65      	ldr	r3, [pc, #404]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b63      	ldr	r3, [pc, #396]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0b8      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d020      	beq.n	80039ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003984:	4b59      	ldr	r3, [pc, #356]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	4a58      	ldr	r2, [pc, #352]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800398e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800399c:	4b53      	ldr	r3, [pc, #332]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4a52      	ldr	r2, [pc, #328]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a8:	4b50      	ldr	r3, [pc, #320]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	494d      	ldr	r1, [pc, #308]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d044      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d119      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e07f      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d003      	beq.n	80039ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d107      	bne.n	80039fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ee:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e06f      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e067      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a0e:	4b37      	ldr	r3, [pc, #220]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f023 0203 	bic.w	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4934      	ldr	r1, [pc, #208]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a20:	f7fd f9fe 	bl	8000e20 <HAL_GetTick>
 8003a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a28:	f7fd f9fa 	bl	8000e20 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e04f      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3e:	4b2b      	ldr	r3, [pc, #172]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 020c 	and.w	r2, r3, #12
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d1eb      	bne.n	8003a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a50:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d20c      	bcs.n	8003a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e032      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4916      	ldr	r1, [pc, #88]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	490e      	ldr	r1, [pc, #56]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ab6:	f000 f821 	bl	8003afc <HAL_RCC_GetSysClockFreq>
 8003aba:	4602      	mov	r2, r0
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	490a      	ldr	r1, [pc, #40]	; (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac8:	5ccb      	ldrb	r3, [r1, r3]
 8003aca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ace:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd f95e 	bl	8000d98 <HAL_InitTick>

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023c00 	.word	0x40023c00
 8003aec:	40023800 	.word	0x40023800
 8003af0:	08004ed4 	.word	0x08004ed4
 8003af4:	20000004 	.word	0x20000004
 8003af8:	20000008 	.word	0x20000008

08003afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003afc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	607b      	str	r3, [r7, #4]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b14:	4b67      	ldr	r3, [pc, #412]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d00d      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0x40>
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	f200 80bd 	bhi.w	8003ca0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x34>
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b2e:	e0b7      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b30:	4b61      	ldr	r3, [pc, #388]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b32:	60bb      	str	r3, [r7, #8]
       break;
 8003b34:	e0b7      	b.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b36:	4b61      	ldr	r3, [pc, #388]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b38:	60bb      	str	r3, [r7, #8]
      break;
 8003b3a:	e0b4      	b.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b3c:	4b5d      	ldr	r3, [pc, #372]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b46:	4b5b      	ldr	r3, [pc, #364]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d04d      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b52:	4b58      	ldr	r3, [pc, #352]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	099b      	lsrs	r3, r3, #6
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	ea02 0800 	and.w	r8, r2, r0
 8003b6a:	ea03 0901 	and.w	r9, r3, r1
 8003b6e:	4640      	mov	r0, r8
 8003b70:	4649      	mov	r1, r9
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	014b      	lsls	r3, r1, #5
 8003b7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b80:	0142      	lsls	r2, r0, #5
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	ebb0 0008 	subs.w	r0, r0, r8
 8003b8a:	eb61 0109 	sbc.w	r1, r1, r9
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	018b      	lsls	r3, r1, #6
 8003b98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b9c:	0182      	lsls	r2, r0, #6
 8003b9e:	1a12      	subs	r2, r2, r0
 8003ba0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ba4:	f04f 0000 	mov.w	r0, #0
 8003ba8:	f04f 0100 	mov.w	r1, #0
 8003bac:	00d9      	lsls	r1, r3, #3
 8003bae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bb2:	00d0      	lsls	r0, r2, #3
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	eb12 0208 	adds.w	r2, r2, r8
 8003bbc:	eb43 0309 	adc.w	r3, r3, r9
 8003bc0:	f04f 0000 	mov.w	r0, #0
 8003bc4:	f04f 0100 	mov.w	r1, #0
 8003bc8:	0259      	lsls	r1, r3, #9
 8003bca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003bce:	0250      	lsls	r0, r2, #9
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	f7fc fafa 	bl	80001d8 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	e04a      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bee:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	099b      	lsrs	r3, r3, #6
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	ea02 0400 	and.w	r4, r2, r0
 8003c06:	ea03 0501 	and.w	r5, r3, r1
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	014b      	lsls	r3, r1, #5
 8003c18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c1c:	0142      	lsls	r2, r0, #5
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	1b00      	subs	r0, r0, r4
 8003c24:	eb61 0105 	sbc.w	r1, r1, r5
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	018b      	lsls	r3, r1, #6
 8003c32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c36:	0182      	lsls	r2, r0, #6
 8003c38:	1a12      	subs	r2, r2, r0
 8003c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c3e:	f04f 0000 	mov.w	r0, #0
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	00d9      	lsls	r1, r3, #3
 8003c48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c4c:	00d0      	lsls	r0, r2, #3
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	1912      	adds	r2, r2, r4
 8003c54:	eb45 0303 	adc.w	r3, r5, r3
 8003c58:	f04f 0000 	mov.w	r0, #0
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	0299      	lsls	r1, r3, #10
 8003c62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c66:	0290      	lsls	r0, r2, #10
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	461a      	mov	r2, r3
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	f7fc faae 	bl	80001d8 <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4613      	mov	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	0c1b      	lsrs	r3, r3, #16
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	60bb      	str	r3, [r7, #8]
      break;
 8003c9e:	e002      	b.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ca2:	60bb      	str	r3, [r7, #8]
      break;
 8003ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	00f42400 	.word	0x00f42400
 8003cbc:	007a1200 	.word	0x007a1200

08003cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc4:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	20000004 	.word	0x20000004

08003cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cdc:	f7ff fff0 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	0a9b      	lsrs	r3, r3, #10
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	4903      	ldr	r1, [pc, #12]	; (8003cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cee:	5ccb      	ldrb	r3, [r1, r3]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	08004ee4 	.word	0x08004ee4

08003d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d04:	f7ff ffdc 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	0b5b      	lsrs	r3, r3, #13
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	4903      	ldr	r1, [pc, #12]	; (8003d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d16:	5ccb      	ldrb	r3, [r1, r3]
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40023800 	.word	0x40023800
 8003d24:	08004ee4 	.word	0x08004ee4

08003d28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d035      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d50:	4b62      	ldr	r3, [pc, #392]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d56:	f7fd f863 	bl	8000e20 <HAL_GetTick>
 8003d5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d5e:	f7fd f85f 	bl	8000e20 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e0b0      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d70:	4b5b      	ldr	r3, [pc, #364]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f0      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	019a      	lsls	r2, r3, #6
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	071b      	lsls	r3, r3, #28
 8003d88:	4955      	ldr	r1, [pc, #340]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d90:	4b52      	ldr	r3, [pc, #328]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d96:	f7fd f843 	bl	8000e20 <HAL_GetTick>
 8003d9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d9e:	f7fd f83f 	bl	8000e20 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e090      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003db0:	4b4b      	ldr	r3, [pc, #300]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8083 	beq.w	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	4b44      	ldr	r3, [pc, #272]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a43      	ldr	r2, [pc, #268]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b41      	ldr	r3, [pc, #260]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003de6:	4b3f      	ldr	r3, [pc, #252]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a3e      	ldr	r2, [pc, #248]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003df2:	f7fd f815 	bl	8000e20 <HAL_GetTick>
 8003df6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7fd f811 	bl	8000e20 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e062      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e0c:	4b35      	ldr	r3, [pc, #212]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e18:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d02f      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d028      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e36:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e40:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e46:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e4c:	4a24      	ldr	r2, [pc, #144]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e52:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d114      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e5e:	f7fc ffdf 	bl	8000e20 <HAL_GetTick>
 8003e62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e64:	e00a      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e66:	f7fc ffdb 	bl	8000e20 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e02a      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7c:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ee      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e94:	d10d      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eaa:	490d      	ldr	r1, [pc, #52]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]
 8003eb0:	e005      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eb8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ebc:	6093      	str	r3, [r2, #8]
 8003ebe:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ec0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eca:	4905      	ldr	r1, [pc, #20]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	42470068 	.word	0x42470068
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40007000 	.word	0x40007000
 8003ee8:	42470e40 	.word	0x42470e40

08003eec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d13e      	bne.n	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003f0a:	4b23      	ldr	r3, [pc, #140]	; (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d12f      	bne.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f20:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f22:	617b      	str	r3, [r7, #20]
          break;
 8003f24:	e02f      	b.n	8003f86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f26:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f32:	d108      	bne.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f34:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f3c:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	e007      	b.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f46:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f4e:	4a15      	ldr	r2, [pc, #84]	; (8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5c:	099b      	lsrs	r3, r3, #6
 8003f5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	fb02 f303 	mul.w	r3, r2, r3
 8003f68:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f70:	0f1b      	lsrs	r3, r3, #28
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]
          break;
 8003f7e:	e002      	b.n	8003f86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
          break;
 8003f84:	bf00      	nop
        }
      }
      break;
 8003f86:	bf00      	nop
    }
  }
  return frequency;
 8003f88:	697b      	ldr	r3, [r7, #20]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	00bb8000 	.word	0x00bb8000
 8003fa0:	007a1200 	.word	0x007a1200
 8003fa4:	00f42400 	.word	0x00f42400

08003fa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e07b      	b.n	80040b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d108      	bne.n	8003fd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fca:	d009      	beq.n	8003fe0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	61da      	str	r2, [r3, #28]
 8003fd2:	e005      	b.n	8003fe0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fc fdaa 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004016:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	ea42 0103 	orr.w	r1, r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	0c1b      	lsrs	r3, r3, #16
 800407e:	f003 0104 	and.w	r1, r3, #4
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	f003 0210 	and.w	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e03f      	b.n	800414c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d106      	bne.n	80040e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7fc fd7f 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2224      	movs	r2, #36	; 0x24
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f904 	bl	800430c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004112:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004122:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004132:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	; 0x28
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	4613      	mov	r3, r2
 8004162:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b20      	cmp	r3, #32
 8004172:	d17c      	bne.n	800426e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_UART_Transmit+0x2c>
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e075      	b.n	8004270 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_UART_Transmit+0x3e>
 800418e:	2302      	movs	r3, #2
 8004190:	e06e      	b.n	8004270 <HAL_UART_Transmit+0x11c>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2221      	movs	r2, #33	; 0x21
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041a8:	f7fc fe3a 	bl	8000e20 <HAL_GetTick>
 80041ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	88fa      	ldrh	r2, [r7, #6]
 80041b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c2:	d108      	bne.n	80041d6 <HAL_UART_Transmit+0x82>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d104      	bne.n	80041d6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	e003      	b.n	80041de <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041e6:	e02a      	b.n	800423e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2200      	movs	r2, #0
 80041f0:	2180      	movs	r1, #128	; 0x80
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f840 	bl	8004278 <UART_WaitOnFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e036      	b.n	8004270 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10b      	bne.n	8004220 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004216:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	3302      	adds	r3, #2
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	e007      	b.n	8004230 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	781a      	ldrb	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	3301      	adds	r3, #1
 800422e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1cf      	bne.n	80041e8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2200      	movs	r2, #0
 8004250:	2140      	movs	r1, #64	; 0x40
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f810 	bl	8004278 <UART_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e006      	b.n	8004270 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800426e:	2302      	movs	r3, #2
  }
}
 8004270:	4618      	mov	r0, r3
 8004272:	3720      	adds	r7, #32
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	4613      	mov	r3, r2
 8004286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004288:	e02c      	b.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004290:	d028      	beq.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004298:	f7fc fdc2 	bl	8000e20 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d21d      	bcs.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e00f      	b.n	8004304 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4013      	ands	r3, r2
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d0c3      	beq.n	800428a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800430c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004310:	b09f      	sub	sp, #124	; 0x7c
 8004312:	af00      	add	r7, sp, #0
 8004314:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004322:	68d9      	ldr	r1, [r3, #12]
 8004324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	ea40 0301 	orr.w	r3, r0, r1
 800432c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800432e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	431a      	orrs	r2, r3
 8004338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	431a      	orrs	r2, r3
 800433e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	4313      	orrs	r3, r2
 8004344:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004350:	f021 010c 	bic.w	r1, r1, #12
 8004354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800435a:	430b      	orrs	r3, r1
 800435c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800435e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436a:	6999      	ldr	r1, [r3, #24]
 800436c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	ea40 0301 	orr.w	r3, r0, r1
 8004374:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4bc5      	ldr	r3, [pc, #788]	; (8004690 <UART_SetConfig+0x384>)
 800437c:	429a      	cmp	r2, r3
 800437e:	d004      	beq.n	800438a <UART_SetConfig+0x7e>
 8004380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4bc3      	ldr	r3, [pc, #780]	; (8004694 <UART_SetConfig+0x388>)
 8004386:	429a      	cmp	r2, r3
 8004388:	d103      	bne.n	8004392 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800438a:	f7ff fcb9 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 800438e:	6778      	str	r0, [r7, #116]	; 0x74
 8004390:	e002      	b.n	8004398 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004392:	f7ff fca1 	bl	8003cd8 <HAL_RCC_GetPCLK1Freq>
 8004396:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a0:	f040 80b6 	bne.w	8004510 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043a6:	461c      	mov	r4, r3
 80043a8:	f04f 0500 	mov.w	r5, #0
 80043ac:	4622      	mov	r2, r4
 80043ae:	462b      	mov	r3, r5
 80043b0:	1891      	adds	r1, r2, r2
 80043b2:	6439      	str	r1, [r7, #64]	; 0x40
 80043b4:	415b      	adcs	r3, r3
 80043b6:	647b      	str	r3, [r7, #68]	; 0x44
 80043b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043bc:	1912      	adds	r2, r2, r4
 80043be:	eb45 0303 	adc.w	r3, r5, r3
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	00d9      	lsls	r1, r3, #3
 80043cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043d0:	00d0      	lsls	r0, r2, #3
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	1911      	adds	r1, r2, r4
 80043d8:	6639      	str	r1, [r7, #96]	; 0x60
 80043da:	416b      	adcs	r3, r5
 80043dc:	667b      	str	r3, [r7, #100]	; 0x64
 80043de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	1891      	adds	r1, r2, r2
 80043ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80043ec:	415b      	adcs	r3, r3
 80043ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80043f8:	f7fb feee 	bl	80001d8 <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4ba5      	ldr	r3, [pc, #660]	; (8004698 <UART_SetConfig+0x38c>)
 8004402:	fba3 2302 	umull	r2, r3, r3, r2
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	011e      	lsls	r6, r3, #4
 800440a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800440c:	461c      	mov	r4, r3
 800440e:	f04f 0500 	mov.w	r5, #0
 8004412:	4622      	mov	r2, r4
 8004414:	462b      	mov	r3, r5
 8004416:	1891      	adds	r1, r2, r2
 8004418:	6339      	str	r1, [r7, #48]	; 0x30
 800441a:	415b      	adcs	r3, r3
 800441c:	637b      	str	r3, [r7, #52]	; 0x34
 800441e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004422:	1912      	adds	r2, r2, r4
 8004424:	eb45 0303 	adc.w	r3, r5, r3
 8004428:	f04f 0000 	mov.w	r0, #0
 800442c:	f04f 0100 	mov.w	r1, #0
 8004430:	00d9      	lsls	r1, r3, #3
 8004432:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004436:	00d0      	lsls	r0, r2, #3
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	1911      	adds	r1, r2, r4
 800443e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004440:	416b      	adcs	r3, r5
 8004442:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	461a      	mov	r2, r3
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	1891      	adds	r1, r2, r2
 8004450:	62b9      	str	r1, [r7, #40]	; 0x28
 8004452:	415b      	adcs	r3, r3
 8004454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004456:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800445a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800445e:	f7fb febb 	bl	80001d8 <__aeabi_uldivmod>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4b8c      	ldr	r3, [pc, #560]	; (8004698 <UART_SetConfig+0x38c>)
 8004468:	fba3 1302 	umull	r1, r3, r3, r2
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	2164      	movs	r1, #100	; 0x64
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	3332      	adds	r3, #50	; 0x32
 800447a:	4a87      	ldr	r2, [pc, #540]	; (8004698 <UART_SetConfig+0x38c>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004488:	441e      	add	r6, r3
 800448a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800448c:	4618      	mov	r0, r3
 800448e:	f04f 0100 	mov.w	r1, #0
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	1894      	adds	r4, r2, r2
 8004498:	623c      	str	r4, [r7, #32]
 800449a:	415b      	adcs	r3, r3
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
 800449e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044a2:	1812      	adds	r2, r2, r0
 80044a4:	eb41 0303 	adc.w	r3, r1, r3
 80044a8:	f04f 0400 	mov.w	r4, #0
 80044ac:	f04f 0500 	mov.w	r5, #0
 80044b0:	00dd      	lsls	r5, r3, #3
 80044b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044b6:	00d4      	lsls	r4, r2, #3
 80044b8:	4622      	mov	r2, r4
 80044ba:	462b      	mov	r3, r5
 80044bc:	1814      	adds	r4, r2, r0
 80044be:	653c      	str	r4, [r7, #80]	; 0x50
 80044c0:	414b      	adcs	r3, r1
 80044c2:	657b      	str	r3, [r7, #84]	; 0x54
 80044c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	461a      	mov	r2, r3
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	1891      	adds	r1, r2, r2
 80044d0:	61b9      	str	r1, [r7, #24]
 80044d2:	415b      	adcs	r3, r3
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80044de:	f7fb fe7b 	bl	80001d8 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4b6c      	ldr	r3, [pc, #432]	; (8004698 <UART_SetConfig+0x38c>)
 80044e8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	2164      	movs	r1, #100	; 0x64
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	3332      	adds	r3, #50	; 0x32
 80044fa:	4a67      	ldr	r2, [pc, #412]	; (8004698 <UART_SetConfig+0x38c>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	f003 0207 	and.w	r2, r3, #7
 8004506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4432      	add	r2, r6
 800450c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800450e:	e0b9      	b.n	8004684 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004512:	461c      	mov	r4, r3
 8004514:	f04f 0500 	mov.w	r5, #0
 8004518:	4622      	mov	r2, r4
 800451a:	462b      	mov	r3, r5
 800451c:	1891      	adds	r1, r2, r2
 800451e:	6139      	str	r1, [r7, #16]
 8004520:	415b      	adcs	r3, r3
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004528:	1912      	adds	r2, r2, r4
 800452a:	eb45 0303 	adc.w	r3, r5, r3
 800452e:	f04f 0000 	mov.w	r0, #0
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	00d9      	lsls	r1, r3, #3
 8004538:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800453c:	00d0      	lsls	r0, r2, #3
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	eb12 0804 	adds.w	r8, r2, r4
 8004546:	eb43 0905 	adc.w	r9, r3, r5
 800454a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4618      	mov	r0, r3
 8004550:	f04f 0100 	mov.w	r1, #0
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	008b      	lsls	r3, r1, #2
 800455e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004562:	0082      	lsls	r2, r0, #2
 8004564:	4640      	mov	r0, r8
 8004566:	4649      	mov	r1, r9
 8004568:	f7fb fe36 	bl	80001d8 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4b49      	ldr	r3, [pc, #292]	; (8004698 <UART_SetConfig+0x38c>)
 8004572:	fba3 2302 	umull	r2, r3, r3, r2
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	011e      	lsls	r6, r3, #4
 800457a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800457c:	4618      	mov	r0, r3
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	1894      	adds	r4, r2, r2
 8004588:	60bc      	str	r4, [r7, #8]
 800458a:	415b      	adcs	r3, r3
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004592:	1812      	adds	r2, r2, r0
 8004594:	eb41 0303 	adc.w	r3, r1, r3
 8004598:	f04f 0400 	mov.w	r4, #0
 800459c:	f04f 0500 	mov.w	r5, #0
 80045a0:	00dd      	lsls	r5, r3, #3
 80045a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045a6:	00d4      	lsls	r4, r2, #3
 80045a8:	4622      	mov	r2, r4
 80045aa:	462b      	mov	r3, r5
 80045ac:	1814      	adds	r4, r2, r0
 80045ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80045b0:	414b      	adcs	r3, r1
 80045b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f04f 0100 	mov.w	r1, #0
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	008b      	lsls	r3, r1, #2
 80045c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045cc:	0082      	lsls	r2, r0, #2
 80045ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80045d2:	f7fb fe01 	bl	80001d8 <__aeabi_uldivmod>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4b2f      	ldr	r3, [pc, #188]	; (8004698 <UART_SetConfig+0x38c>)
 80045dc:	fba3 1302 	umull	r1, r3, r3, r2
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	2164      	movs	r1, #100	; 0x64
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	3332      	adds	r3, #50	; 0x32
 80045ee:	4a2a      	ldr	r2, [pc, #168]	; (8004698 <UART_SetConfig+0x38c>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045fa:	441e      	add	r6, r3
 80045fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045fe:	4618      	mov	r0, r3
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	1894      	adds	r4, r2, r2
 800460a:	603c      	str	r4, [r7, #0]
 800460c:	415b      	adcs	r3, r3
 800460e:	607b      	str	r3, [r7, #4]
 8004610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004614:	1812      	adds	r2, r2, r0
 8004616:	eb41 0303 	adc.w	r3, r1, r3
 800461a:	f04f 0400 	mov.w	r4, #0
 800461e:	f04f 0500 	mov.w	r5, #0
 8004622:	00dd      	lsls	r5, r3, #3
 8004624:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004628:	00d4      	lsls	r4, r2, #3
 800462a:	4622      	mov	r2, r4
 800462c:	462b      	mov	r3, r5
 800462e:	eb12 0a00 	adds.w	sl, r2, r0
 8004632:	eb43 0b01 	adc.w	fp, r3, r1
 8004636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	4618      	mov	r0, r3
 800463c:	f04f 0100 	mov.w	r1, #0
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	008b      	lsls	r3, r1, #2
 800464a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800464e:	0082      	lsls	r2, r0, #2
 8004650:	4650      	mov	r0, sl
 8004652:	4659      	mov	r1, fp
 8004654:	f7fb fdc0 	bl	80001d8 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <UART_SetConfig+0x38c>)
 800465e:	fba3 1302 	umull	r1, r3, r3, r2
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	2164      	movs	r1, #100	; 0x64
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	3332      	adds	r3, #50	; 0x32
 8004670:	4a09      	ldr	r2, [pc, #36]	; (8004698 <UART_SetConfig+0x38c>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	f003 020f 	and.w	r2, r3, #15
 800467c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4432      	add	r2, r6
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	377c      	adds	r7, #124	; 0x7c
 8004688:	46bd      	mov	sp, r7
 800468a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800468e:	bf00      	nop
 8004690:	40011000 	.word	0x40011000
 8004694:	40011400 	.word	0x40011400
 8004698:	51eb851f 	.word	0x51eb851f

0800469c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f043 0201 	orr.w	r2, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f023 0201 	bic.w	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	019b      	lsls	r3, r3, #6
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3301      	adds	r3, #1
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4a09      	ldr	r2, [pc, #36]	; (8004728 <USB_FlushTxFifo+0x48>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d901      	bls.n	800470c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e006      	b.n	800471a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b20      	cmp	r3, #32
 8004716:	d0f0      	beq.n	80046fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	00030d40 	.word	0x00030d40

0800472c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2210      	movs	r2, #16
 800473c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3301      	adds	r3, #1
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a09      	ldr	r2, [pc, #36]	; (800476c <USB_FlushRxFifo+0x40>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d901      	bls.n	8004750 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e006      	b.n	800475e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b10      	cmp	r3, #16
 800475a:	d0f0      	beq.n	800473e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	00030d40 	.word	0x00030d40

08004770 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004770:	b480      	push	{r7}
 8004772:	b089      	sub	sp, #36	; 0x24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	4613      	mov	r3, r2
 800477c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	3303      	adds	r3, #3
 800478a:	089b      	lsrs	r3, r3, #2
 800478c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	e00b      	b.n	80047ac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	601a      	str	r2, [r3, #0]
    pDest++;
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	3304      	adds	r3, #4
 80047a4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	3301      	adds	r3, #1
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d3ef      	bcc.n	8004794 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80047b4:	69fb      	ldr	r3, [r7, #28]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3724      	adds	r7, #36	; 0x24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4013      	ands	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047da:	68fb      	ldr	r3, [r7, #12]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f003 0301 	and.w	r3, r3, #1
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	68f9      	ldr	r1, [r7, #12]
 8004838:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800483c:	4313      	orrs	r3, r2
 800483e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d107      	bne.n	8004856 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800484c:	461a      	mov	r2, r3
 800484e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004852:	6053      	str	r3, [r2, #4]
 8004854:	e009      	b.n	800486a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004856:	78fb      	ldrb	r3, [r7, #3]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d106      	bne.n	800486a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004862:	461a      	mov	r2, r3
 8004864:	f241 7370 	movw	r3, #6000	; 0x1770
 8004868:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	b29b      	uxth	r3, r3
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800489a:	b480      	push	{r7}
 800489c:	b089      	sub	sp, #36	; 0x24
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	460b      	mov	r3, r1
 80048a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	0c9b      	lsrs	r3, r3, #18
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	0fdb      	lsrs	r3, r3, #31
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d104      	bne.n	80048f4 <USB_HC_Halt+0x5a>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e0e8      	b.n	8004ac6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <USB_HC_Halt+0x66>
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d173      	bne.n	80049e8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	4413      	add	r3, r2
 8004908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	440a      	add	r2, r1
 8004916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800491a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800491e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	f040 80cb 	bne.w	8004ac4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d143      	bne.n	80049c2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	4413      	add	r3, r2
 8004942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	0151      	lsls	r1, r2, #5
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	440a      	add	r2, r1
 8004950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004958:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	4413      	add	r3, r2
 8004962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	440a      	add	r2, r1
 8004970:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004974:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004978:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	4413      	add	r3, r2
 8004982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	440a      	add	r2, r1
 8004990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004994:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004998:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3301      	adds	r3, #1
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049a6:	d81d      	bhi.n	80049e4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049be:	d0ec      	beq.n	800499a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80049c0:	e080      	b.n	8004ac4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80049e2:	e06f      	b.n	8004ac4 <USB_HC_Halt+0x22a>
            break;
 80049e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80049e6:	e06d      	b.n	8004ac4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	0151      	lsls	r1, r2, #5
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	440a      	add	r2, r1
 80049fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a06:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d143      	bne.n	8004aa0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a36:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	0151      	lsls	r1, r2, #5
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a56:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a76:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a84:	d81d      	bhi.n	8004ac2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a9c:	d0ec      	beq.n	8004a78 <USB_HC_Halt+0x1de>
 8004a9e:	e011      	b.n	8004ac4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	0151      	lsls	r1, r2, #5
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	e000      	b.n	8004ac4 <USB_HC_Halt+0x22a>
          break;
 8004ac2:	bf00      	nop
    }
  }

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3724      	adds	r7, #36	; 0x24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b086      	sub	sp, #24
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff fdeb 	bl	80046be <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004ae8:	2110      	movs	r1, #16
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff fdf8 	bl	80046e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff fe1b 	bl	800472c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	e01f      	b.n	8004b3c <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b12:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b1a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b22:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b30:	461a      	mov	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b0f      	cmp	r3, #15
 8004b40:	d9dc      	bls.n	8004afc <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004b42:	2300      	movs	r3, #0
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	e034      	b.n	8004bb2 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b5e:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b66:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b6e:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	3301      	adds	r3, #1
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b8e:	d80c      	bhi.n	8004baa <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ba6:	d0ec      	beq.n	8004b82 <USB_StopHost+0xb0>
 8004ba8:	e000      	b.n	8004bac <USB_StopHost+0xda>
        break;
 8004baa:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b0f      	cmp	r3, #15
 8004bb6:	d9c7      	bls.n	8004b48 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bc4:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bcc:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff fd64 	bl	800469c <USB_EnableGlobalInt>

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f804 	bl	8004c02 <USBH_HandleSof>
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b0b      	cmp	r3, #11
 8004c12:	d10a      	bne.n	8004c2a <USBH_HandleSof+0x28>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	4798      	blx	r3
  }
}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8004c42:	bf00      	nop
}
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8004c5e:	bf00      	nop
}
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f883 	bl	8004dc4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	791b      	ldrb	r3, [r3, #4]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f80b 	bl	8004ce0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	795b      	ldrb	r3, [r3, #5]
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f805 	bl	8004ce0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	2b0a      	cmp	r3, #10
 8004cf0:	d80d      	bhi.n	8004d0e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	33e0      	adds	r3, #224	; 0xe0
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	33e0      	adds	r3, #224	; 0xe0
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff ff57 	bl	8004bde <USBH_LL_IncTimer>
}
 8004d30:	bf00      	nop
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ff8f 	bl	8004c6a <USBH_LL_Connect>
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff ff98 	bl	8004c98 <USBH_LL_Disconnect>
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff ff49 	bl	8004c32 <USBH_LL_PortEnabled>
}
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff ff49 	bl	8004c4e <USBH_LL_PortDisabled>
}
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fc fbcb 	bl	8001576 <HAL_HCD_Stop>
 8004de0:	4603      	mov	r3, r0
 8004de2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f808 	bl	8004dfc <USBH_Get_USB_Status>
 8004dec:	4603      	mov	r3, r0
 8004dee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004df0:	7bbb      	ldrb	r3, [r7, #14]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d817      	bhi.n	8004e40 <USBH_Get_USB_Status+0x44>
 8004e10:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <USBH_Get_USB_Status+0x1c>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004e29 	.word	0x08004e29
 8004e1c:	08004e2f 	.word	0x08004e2f
 8004e20:	08004e35 	.word	0x08004e35
 8004e24:	08004e3b 	.word	0x08004e3b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8004e2c:	e00b      	b.n	8004e46 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004e2e:	2302      	movs	r3, #2
 8004e30:	73fb      	strb	r3, [r7, #15]
    break;
 8004e32:	e008      	b.n	8004e46 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
    break;
 8004e38:	e005      	b.n	8004e46 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8004e3e:	e002      	b.n	8004e46 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004e40:	2302      	movs	r3, #2
 8004e42:	73fb      	strb	r3, [r7, #15]
    break;
 8004e44:	bf00      	nop
  }
  return usb_status;
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <__libc_init_array>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	4d0d      	ldr	r5, [pc, #52]	; (8004e8c <__libc_init_array+0x38>)
 8004e58:	4c0d      	ldr	r4, [pc, #52]	; (8004e90 <__libc_init_array+0x3c>)
 8004e5a:	1b64      	subs	r4, r4, r5
 8004e5c:	10a4      	asrs	r4, r4, #2
 8004e5e:	2600      	movs	r6, #0
 8004e60:	42a6      	cmp	r6, r4
 8004e62:	d109      	bne.n	8004e78 <__libc_init_array+0x24>
 8004e64:	4d0b      	ldr	r5, [pc, #44]	; (8004e94 <__libc_init_array+0x40>)
 8004e66:	4c0c      	ldr	r4, [pc, #48]	; (8004e98 <__libc_init_array+0x44>)
 8004e68:	f000 f820 	bl	8004eac <_init>
 8004e6c:	1b64      	subs	r4, r4, r5
 8004e6e:	10a4      	asrs	r4, r4, #2
 8004e70:	2600      	movs	r6, #0
 8004e72:	42a6      	cmp	r6, r4
 8004e74:	d105      	bne.n	8004e82 <__libc_init_array+0x2e>
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7c:	4798      	blx	r3
 8004e7e:	3601      	adds	r6, #1
 8004e80:	e7ee      	b.n	8004e60 <__libc_init_array+0xc>
 8004e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e86:	4798      	blx	r3
 8004e88:	3601      	adds	r6, #1
 8004e8a:	e7f2      	b.n	8004e72 <__libc_init_array+0x1e>
 8004e8c:	08004ef4 	.word	0x08004ef4
 8004e90:	08004ef4 	.word	0x08004ef4
 8004e94:	08004ef4 	.word	0x08004ef4
 8004e98:	08004ef8 	.word	0x08004ef8

08004e9c <memset>:
 8004e9c:	4402      	add	r2, r0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d100      	bne.n	8004ea6 <memset+0xa>
 8004ea4:	4770      	bx	lr
 8004ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eaa:	e7f9      	b.n	8004ea0 <memset+0x4>

08004eac <_init>:
 8004eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eae:	bf00      	nop
 8004eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb2:	bc08      	pop	{r3}
 8004eb4:	469e      	mov	lr, r3
 8004eb6:	4770      	bx	lr

08004eb8 <_fini>:
 8004eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eba:	bf00      	nop
 8004ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ebe:	bc08      	pop	{r3}
 8004ec0:	469e      	mov	lr, r3
 8004ec2:	4770      	bx	lr
