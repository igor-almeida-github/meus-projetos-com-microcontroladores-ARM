
013TaskScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001860  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08001a10  08001a10  00011a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bd0  08001bd0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08001bd0  08001bd0  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bd0  08001bd0  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bd0  08001bd0  00011bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bd4  08001bd4  00011bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08001bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  200000b4  08001c8c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08001c8c  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002876  00000000  00000000  000200de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000817  00000000  00000000  00022954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00023170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d0  00000000  00000000  00023370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d30  00000000  00000000  00023540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a3c  00000000  00000000  00026270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009d38  00000000  00000000  00027cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000319e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ec0  00000000  00000000  00031a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080019f8 	.word	0x080019f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	080019f8 	.word	0x080019f8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 8000296:	4b19      	ldr	r3, [pc, #100]	; (80002fc <led_init_all+0x6c>)
 8000298:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800029a:	4b19      	ldr	r3, [pc, #100]	; (8000300 <led_init_all+0x70>)
 800029c:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f043 0208 	orr.w	r2, r3, #8
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 80002da:	200c      	movs	r0, #12
 80002dc:	f000 f82a 	bl	8000334 <led_off>
    led_off(LED_ORANGE);
 80002e0:	200d      	movs	r0, #13
 80002e2:	f000 f827 	bl	8000334 <led_off>
    led_off(LED_RED);
 80002e6:	200e      	movs	r0, #14
 80002e8:	f000 f824 	bl	8000334 <led_off>
    led_off(LED_BLUE);
 80002ec:	200f      	movs	r0, #15
 80002ee:	f000 f821 	bl	8000334 <led_off>



}
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40023830 	.word	0x40023830
 8000300:	40020c00 	.word	0x40020c00

08000304 <led_on>:

void led_on(uint8_t led_no)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <led_on+0x2c>)
 8000310:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	79fa      	ldrb	r2, [r7, #7]
 8000318:	2101      	movs	r1, #1
 800031a:	fa01 f202 	lsl.w	r2, r1, r2
 800031e:	431a      	orrs	r2, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	601a      	str	r2, [r3, #0]

}
 8000324:	bf00      	nop
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40020c14 	.word	0x40020c14

08000334 <led_off>:

void led_off(uint8_t led_no)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <led_off+0x2c>)
 8000340:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	79fa      	ldrb	r2, [r7, #7]
 8000348:	2101      	movs	r1, #1
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	43d2      	mvns	r2, r2
 8000350:	401a      	ands	r2, r3
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	601a      	str	r2, [r3, #0]

}
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40020c14 	.word	0x40020c14

08000364 <main>:
 * LR - EXC_RETURN 0xFFFFFFFD Retorna para o threadmode usando PSP
 */


int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	enable_processor_faults();
 8000368:	f000 f9bc 	bl	80006e4 <enable_processor_faults>
	init_scheduler_stack(SCHED_STACK_START);
 800036c:	4807      	ldr	r0, [pc, #28]	; (800038c <main+0x28>)
 800036e:	f000 f883 	bl	8000478 <init_scheduler_stack>
	init_tasks_stack();
 8000372:	f000 f885 	bl	8000480 <init_tasks_stack>
	led_init_all();
 8000376:	f7ff ff8b 	bl	8000290 <led_init_all>
	init_systick_timer(TICK_HZ);
 800037a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800037e:	f000 f8c9 	bl	8000514 <init_systick_timer>

	switch_sp_to_psp();
 8000382:	f000 f979 	bl	8000678 <switch_sp_to_psp>
	task0();
 8000386:	f000 f803 	bl	8000390 <task0>

	for(;;);
 800038a:	e7fe      	b.n	800038a <main+0x26>
 800038c:	2001ec00 	.word	0x2001ec00

08000390 <task0>:
}

void task0(void){
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	for(;;){
		led_on(LED_GREEN);
 8000394:	200c      	movs	r0, #12
 8000396:	f7ff ffb5 	bl	8000304 <led_on>
		task_delay(1000);
 800039a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039e:	f000 f83b 	bl	8000418 <task_delay>
		led_off(LED_GREEN);
 80003a2:	200c      	movs	r0, #12
 80003a4:	f7ff ffc6 	bl	8000334 <led_off>
		task_delay(1000);
 80003a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ac:	f000 f834 	bl	8000418 <task_delay>
		led_on(LED_GREEN);
 80003b0:	e7f0      	b.n	8000394 <task0+0x4>

080003b2 <task1>:
	}
}

void task1(void){
 80003b2:	b580      	push	{r7, lr}
 80003b4:	af00      	add	r7, sp, #0
	for(;;){
		led_on(LED_ORANGE);
 80003b6:	200d      	movs	r0, #13
 80003b8:	f7ff ffa4 	bl	8000304 <led_on>
		task_delay(500);
 80003bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c0:	f000 f82a 	bl	8000418 <task_delay>
		led_off(LED_ORANGE);
 80003c4:	200d      	movs	r0, #13
 80003c6:	f7ff ffb5 	bl	8000334 <led_off>
		task_delay(500);
 80003ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ce:	f000 f823 	bl	8000418 <task_delay>
		led_on(LED_ORANGE);
 80003d2:	e7f0      	b.n	80003b6 <task1+0x4>

080003d4 <task2>:
	}
}

void task2(void){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	for(;;){
		led_on(LED_BLUE);
 80003d8:	200f      	movs	r0, #15
 80003da:	f7ff ff93 	bl	8000304 <led_on>
		task_delay(250);
 80003de:	20fa      	movs	r0, #250	; 0xfa
 80003e0:	f000 f81a 	bl	8000418 <task_delay>
		led_off(LED_BLUE);
 80003e4:	200f      	movs	r0, #15
 80003e6:	f7ff ffa5 	bl	8000334 <led_off>
		task_delay(250);
 80003ea:	20fa      	movs	r0, #250	; 0xfa
 80003ec:	f000 f814 	bl	8000418 <task_delay>
		led_on(LED_BLUE);
 80003f0:	e7f2      	b.n	80003d8 <task2+0x4>

080003f2 <task3>:
	}
}

void task3(void){
 80003f2:	b580      	push	{r7, lr}
 80003f4:	af00      	add	r7, sp, #0
	for(;;){
		led_on(LED_RED);
 80003f6:	200e      	movs	r0, #14
 80003f8:	f7ff ff84 	bl	8000304 <led_on>
		task_delay(125);
 80003fc:	207d      	movs	r0, #125	; 0x7d
 80003fe:	f000 f80b 	bl	8000418 <task_delay>
		led_off(LED_RED);
 8000402:	200e      	movs	r0, #14
 8000404:	f7ff ff96 	bl	8000334 <led_off>
		task_delay(125);
 8000408:	207d      	movs	r0, #125	; 0x7d
 800040a:	f000 f805 	bl	8000418 <task_delay>
		led_on(LED_RED);
 800040e:	e7f2      	b.n	80003f6 <task3+0x4>

08000410 <idle_task>:
	}
}

void idle_task(void){
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	for(;;);
 8000414:	e7fe      	b.n	8000414 <idle_task+0x4>
	...

08000418 <task_delay>:
}

void task_delay(uint32_t tick_count){
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	/* Info:
	 * É uma boa prática desativar as interrupções quando modificamos variáveis
	 * globais compartilhadas entre interrupções e thread mode
	 */
	// Desativa as interrupções
	INTERRUPT_DISABLE();
 8000420:	f04f 0001 	mov.w	r0, #1
 8000424:	f380 8810 	msr	PRIMASK, r0

	user_tasks[current_task].block_count = tick_count;
 8000428:	4b10      	ldr	r3, [pc, #64]	; (800046c <task_delay+0x54>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	4a10      	ldr	r2, [pc, #64]	; (8000470 <task_delay+0x58>)
 800042e:	011b      	lsls	r3, r3, #4
 8000430:	4413      	add	r3, r2
 8000432:	3304      	adds	r3, #4
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	601a      	str	r2, [r3, #0]
	user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <task_delay+0x54>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	4a0c      	ldr	r2, [pc, #48]	; (8000470 <task_delay+0x58>)
 800043e:	011b      	lsls	r3, r3, #4
 8000440:	4413      	add	r3, r2
 8000442:	3308      	adds	r3, #8
 8000444:	22ff      	movs	r2, #255	; 0xff
 8000446:	601a      	str	r2, [r3, #0]
	// Pend the pendSV
	uint32_t *pICSR = (uint32_t *)0xE000ED04;
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <task_delay+0x5c>)
 800044a:	60fb      	str	r3, [r7, #12]
	*pICSR |= 1 << 28;
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	601a      	str	r2, [r3, #0]

	// Ativa as interrupções
	INTERRUPT_ENABLE();
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	f380 8810 	msr	PRIMASK, r0
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	200000d0 	.word	0x200000d0
 8000470:	20000000 	.word	0x20000000
 8000474:	e000ed04 	.word	0xe000ed04

08000478 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){
	__asm volatile("MSR MSP,R0");
 8000478:	f380 8808 	msr	MSP, r0
	__asm volatile("BX LR");  // Retorna para main
 800047c:	4770      	bx	lr
}
 800047e:	bf00      	nop

08000480 <init_tasks_stack>:

void init_tasks_stack(void){
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0

	uint32_t *pPSP;
	for(int i = 1; i < MAX_TASKS; i++){
 8000486:	2301      	movs	r3, #1
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	e037      	b.n	80004fc <init_tasks_stack+0x7c>
		pPSP = (uint32_t *)user_tasks[i].psp_value;
 800048c:	4a20      	ldr	r2, [pc, #128]	; (8000510 <init_tasks_stack+0x90>)
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	4413      	add	r3, r2
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	60fb      	str	r3, [r7, #12]
		pPSP--;
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3b04      	subs	r3, #4
 800049c:	60fb      	str	r3, [r7, #12]
		*pPSP = 0x01000000;  // xPSR
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004a4:	601a      	str	r2, [r3, #0]
		pPSP--;
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	3b04      	subs	r3, #4
 80004aa:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)user_tasks[i].task;  // PC
 80004ac:	4a18      	ldr	r2, [pc, #96]	; (8000510 <init_tasks_stack+0x90>)
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	011b      	lsls	r3, r3, #4
 80004b2:	4413      	add	r3, r2
 80004b4:	330c      	adds	r3, #12
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	461a      	mov	r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	601a      	str	r2, [r3, #0]
		pPSP--;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3b04      	subs	r3, #4
 80004c2:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;  // LR
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f06f 0202 	mvn.w	r2, #2
 80004ca:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++){
 80004cc:	2300      	movs	r3, #0
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	e008      	b.n	80004e4 <init_tasks_stack+0x64>
			pPSP--;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3b04      	subs	r3, #4
 80004d6:	60fb      	str	r3, [r7, #12]
			*pPSP = 0; // Coloca 0 em R0 a R12
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++){
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3301      	adds	r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b0c      	cmp	r3, #12
 80004e8:	ddf3      	ble.n	80004d2 <init_tasks_stack+0x52>
		}
		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	4908      	ldr	r1, [pc, #32]	; (8000510 <init_tasks_stack+0x90>)
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	011b      	lsls	r3, r3, #4
 80004f2:	440b      	add	r3, r1
 80004f4:	601a      	str	r2, [r3, #0]
	for(int i = 1; i < MAX_TASKS; i++){
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	3301      	adds	r3, #1
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	2b04      	cmp	r3, #4
 8000500:	ddc4      	ble.n	800048c <init_tasks_stack+0xc>
	}
}
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000000 	.word	0x20000000

08000514 <init_systick_timer>:

void init_systick_timer(uint32_t tick_hz){
 8000514:	b480      	push	{r7}
 8000516:	b087      	sub	sp, #28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	 * ex: count_value = 99   ->   count_value + 1 = 100   ->   freq tick = clock principal / 100
	 *
	 */

	// Inicializando o valor do SysTick Reload Value Register (funciona como um divisor do clock)
	uint32_t *pSRVR = (uint32_t *)0xE000E014;
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <init_systick_timer+0x38>)
 800051e:	617b      	str	r3, [r7, #20]
	uint32_t count_value = SYSTICK_TIM_CLK / tick_hz - 1;  // -> freq tick = clock principal / (count_value + 1) -> freq tick = tick_hz
 8000520:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <init_systick_timer+0x3c>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	fbb2 f3f3 	udiv	r3, r2, r3
 8000528:	3b01      	subs	r3, #1
 800052a:	613b      	str	r3, [r7, #16]
	*pSRVR = count_value;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	601a      	str	r2, [r3, #0]

	// Configurações
	uint32_t *pSCSR = (uint32_t *)0xE000E010;  // SysTick Control and Status Register
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <init_systick_timer+0x40>)
 8000534:	60fb      	str	r3, [r7, #12]
	*pSCSR |= 0x07;  // Processor clock source / SysTick excpetion enabled / Counter Enable
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f043 0207 	orr.w	r2, r3, #7
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	601a      	str	r2, [r3, #0]
}
 8000542:	bf00      	nop
 8000544:	371c      	adds	r7, #28
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	e000e014 	.word	0xe000e014
 8000550:	00f42400 	.word	0x00f42400
 8000554:	e000e010 	.word	0xe000e010

08000558 <get_psp_value>:

uint32_t get_psp_value(void){
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <get_psp_value+0x18>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <get_psp_value+0x1c>)
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	4413      	add	r3, r2
 8000566:	681b      	ldr	r3, [r3, #0]
}
 8000568:	4618      	mov	r0, r3
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	200000d0 	.word	0x200000d0
 8000574:	20000000 	.word	0x20000000

08000578 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <save_psp_value+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4a05      	ldr	r2, [pc, #20]	; (800059c <save_psp_value+0x24>)
 8000586:	011b      	lsls	r3, r3, #4
 8000588:	4413      	add	r3, r2
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	200000d0 	.word	0x200000d0
 800059c:	20000000 	.word	0x20000000

080005a0 <update_next_task>:

void update_next_task(void){
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < (MAX_TASKS - 1); i++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	e01e      	b.n	80005ea <update_next_task+0x4a>
		current_task++;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <update_next_task+0x60>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <update_next_task+0x60>)
 80005b6:	701a      	strb	r2, [r3, #0]
		current_task %= (MAX_TASKS - 1);
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <update_next_task+0x60>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	f003 0303 	and.w	r3, r3, #3
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <update_next_task+0x60>)
 80005c4:	701a      	strb	r2, [r3, #0]
		if (user_tasks[current_task].current_state == TASK_RUNNING_STATE)
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <update_next_task+0x60>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <update_next_task+0x64>)
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	4413      	add	r3, r2
 80005d0:	3308      	adds	r3, #8
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00c      	beq.n	80005f2 <update_next_task+0x52>
			break;
		if (i == (MAX_TASKS - 2)){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b03      	cmp	r3, #3
 80005dc:	d102      	bne.n	80005e4 <update_next_task+0x44>
			current_task = (MAX_TASKS - 1);
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <update_next_task+0x60>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < (MAX_TASKS - 1); i++){
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3301      	adds	r3, #1
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	dddd      	ble.n	80005ac <update_next_task+0xc>
		}
	}
}
 80005f0:	e000      	b.n	80005f4 <update_next_task+0x54>
			break;
 80005f2:	bf00      	nop
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	200000d0 	.word	0x200000d0
 8000604:	20000000 	.word	0x20000000

08000608 <update_block_count_ticks>:

void update_block_count_ticks(void){
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
	for(int i = 0; i < (MAX_TASKS - 1); i++){
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	e026      	b.n	8000662 <update_block_count_ticks+0x5a>
		if(user_tasks[i].current_state == TASK_BLOCKED_STATE){
 8000614:	4a17      	ldr	r2, [pc, #92]	; (8000674 <update_block_count_ticks+0x6c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	4413      	add	r3, r2
 800061c:	3308      	adds	r3, #8
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2bff      	cmp	r3, #255	; 0xff
 8000622:	d11b      	bne.n	800065c <update_block_count_ticks+0x54>
			user_tasks[i].block_count--;
 8000624:	4a13      	ldr	r2, [pc, #76]	; (8000674 <update_block_count_ticks+0x6c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	011b      	lsls	r3, r3, #4
 800062a:	4413      	add	r3, r2
 800062c:	3304      	adds	r3, #4
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	1e5a      	subs	r2, r3, #1
 8000632:	4910      	ldr	r1, [pc, #64]	; (8000674 <update_block_count_ticks+0x6c>)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	011b      	lsls	r3, r3, #4
 8000638:	440b      	add	r3, r1
 800063a:	3304      	adds	r3, #4
 800063c:	601a      	str	r2, [r3, #0]
			if(user_tasks[i].block_count == 0)
 800063e:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <update_block_count_ticks+0x6c>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	011b      	lsls	r3, r3, #4
 8000644:	4413      	add	r3, r2
 8000646:	3304      	adds	r3, #4
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d106      	bne.n	800065c <update_block_count_ticks+0x54>
				user_tasks[i].current_state = TASK_RUNNING_STATE;
 800064e:	4a09      	ldr	r2, [pc, #36]	; (8000674 <update_block_count_ticks+0x6c>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	011b      	lsls	r3, r3, #4
 8000654:	4413      	add	r3, r2
 8000656:	3308      	adds	r3, #8
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < (MAX_TASKS - 1); i++){
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b03      	cmp	r3, #3
 8000666:	ddd5      	ble.n	8000614 <update_block_count_ticks+0xc>
		}
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	20000000 	.word	0x20000000

08000678 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	// 1. initialize the PSP with TASK0 stack start
	__asm volatile ("PUSH {LR}");  // Preserva LR no MSP, que conecta de volta a main
 8000678:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 800067a:	f7ff ff6d 	bl	8000558 <get_psp_value>
	__asm volatile ("MSR PSP,R0");
 800067e:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");
 8000682:	f85d eb04 	ldr.w	lr, [sp], #4
	// 2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0x02");
 8000686:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 800068a:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800068e:	4770      	bx	lr

}
 8000690:	bf00      	nop
	...

08000694 <SysTick_Handler>:

void SysTick_Handler(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t *)0xE000ED04;
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <SysTick_Handler+0x24>)
 800069c:	607b      	str	r3, [r7, #4]
	update_block_count_ticks();
 800069e:	f7ff ffb3 	bl	8000608 <update_block_count_ticks>
	*pICSR |= 1 << 28;  // Set PendSV
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	601a      	str	r2, [r3, #0]
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	e000ed04 	.word	0xe000ed04

080006bc <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void){
	// Save the context of current task

	// 1. Get current running task's PSP value
	__asm volatile ("MRS R0,PSP");
 80006bc:	f3ef 8009 	mrs	r0, PSP
	// 2. Using that PSP value store SF2 (R4 to R11)
	__asm volatile ("STMDB R0!,{R4-R11}");  // decrementa primeiro, armazena depois.
 80006c0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// 3. Save the current value of PSP
	__asm volatile ("PUSH {LR}");  // Preserva LR no MSP, que conecta de volta a main
 80006c4:	b500      	push	{lr}
	__asm volatile ("BL save_psp_value");
 80006c6:	f7ff ff57 	bl	8000578 <save_psp_value>


	// Retrieve the context of next task
	// 1. Decide next task to run
	__asm volatile ("BL update_next_task");
 80006ca:	f7ff ff69 	bl	80005a0 <update_next_task>
	// 2. Get its past PSP value
	__asm volatile ("BL get_psp_value");
 80006ce:	f7ff ff43 	bl	8000558 <get_psp_value>
	// 3. Using that PSP value retrieve SF2 (R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");  // armazena primeiro, incrementa depois.
 80006d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// 4. Update PSP and exit
	__asm volatile ("MSR PSP, R0");
 80006d6:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  // Recupera LR
 80006da:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile ("BX LR");
 80006de:	4770      	bx	lr
}
 80006e0:	bf00      	nop
	...

080006e4 <enable_processor_faults>:

void enable_processor_faults(void){
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
	//1. Enable all configurable exceptions like usage fault, mem manage fault and bus fault
	uint32_t *pSHCSR = (uint32_t *)0xE000ED24;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <enable_processor_faults+0x38>)
 80006ec:	607b      	str	r3, [r7, #4]
	*pSHCSR |= 1 << 16;  // MEMFAULTENA
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]
	*pSHCSR |= 1 << 17;  // BUSFAULTENA
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	601a      	str	r2, [r3, #0]
	*pSHCSR |= 1 << 18;  // USGFAULTENA
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	e000ed24 	.word	0xe000ed24

08000720 <HardFault_Handler>:

void HardFault_Handler(void){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000724:	4801      	ldr	r0, [pc, #4]	; (800072c <HardFault_Handler+0xc>)
 8000726:	f000 fa25 	bl	8000b74 <puts>
	while(1);
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0xa>
 800072c:	08001a10 	.word	0x08001a10

08000730 <MemManage_Handler>:
}

void MemManage_Handler(void){
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000734:	4801      	ldr	r0, [pc, #4]	; (800073c <MemManage_Handler+0xc>)
 8000736:	f000 fa1d 	bl	8000b74 <puts>
	while(1);
 800073a:	e7fe      	b.n	800073a <MemManage_Handler+0xa>
 800073c:	08001a28 	.word	0x08001a28

08000740 <BusFault_Handler>:
}

void BusFault_Handler(void){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000744:	4801      	ldr	r0, [pc, #4]	; (800074c <BusFault_Handler+0xc>)
 8000746:	f000 fa15 	bl	8000b74 <puts>
	while(1);
 800074a:	e7fe      	b.n	800074a <BusFault_Handler+0xa>
 800074c:	08001a40 	.word	0x08001a40

08000750 <UsageFault_Handler>:
}

__attribute__ ((naked)) void UsageFault_Handler(void){
	// Extraimos o endereço do MSP que é o endereço base do stack frame do thread mode
	__asm ("MRS r0,MSP");
 8000750:	f3ef 8008 	mrs	r0, MSP
	__asm ("B UsageFault_Handler_c");  // r0 é o argumento da função chamada, assim como é padrão em todas as funções
 8000754:	f000 b802 	b.w	800075c <UsageFault_Handler_c>
}
 8000758:	bf00      	nop
	...

0800075c <UsageFault_Handler_c>:

void UsageFault_Handler_c(uint32_t *pBaseStackFrame){
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

	uint32_t *pUFSR = (uint32_t *)0xE000ED2A;
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <UsageFault_Handler_c+0x98>)
 8000766:	60fb      	str	r3, [r7, #12]
	printf("Exception : UsageFault\n");
 8000768:	4823      	ldr	r0, [pc, #140]	; (80007f8 <UsageFault_Handler_c+0x9c>)
 800076a:	f000 fa03 	bl	8000b74 <puts>
	printf("UFSR = %lX\n", *pUFSR);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4619      	mov	r1, r3
 8000774:	4821      	ldr	r0, [pc, #132]	; (80007fc <UsageFault_Handler_c+0xa0>)
 8000776:	f000 f977 	bl	8000a68 <iprintf>
	printf("BaseStackFrame = %p\n", pBaseStackFrame);
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	4820      	ldr	r0, [pc, #128]	; (8000800 <UsageFault_Handler_c+0xa4>)
 800077e:	f000 f973 	bl	8000a68 <iprintf>
	printf("Value of R0 = %lX\n", pBaseStackFrame[0]);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4619      	mov	r1, r3
 8000788:	481e      	ldr	r0, [pc, #120]	; (8000804 <UsageFault_Handler_c+0xa8>)
 800078a:	f000 f96d 	bl	8000a68 <iprintf>
	printf("Value of R1 = %lX\n", pBaseStackFrame[1]);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3304      	adds	r3, #4
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	481c      	ldr	r0, [pc, #112]	; (8000808 <UsageFault_Handler_c+0xac>)
 8000798:	f000 f966 	bl	8000a68 <iprintf>
	printf("Value of R2 = %lX\n", pBaseStackFrame[2]);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3308      	adds	r3, #8
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4819      	ldr	r0, [pc, #100]	; (800080c <UsageFault_Handler_c+0xb0>)
 80007a6:	f000 f95f 	bl	8000a68 <iprintf>
	printf("Value of R3 = %lX\n", pBaseStackFrame[3]);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	330c      	adds	r3, #12
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4619      	mov	r1, r3
 80007b2:	4817      	ldr	r0, [pc, #92]	; (8000810 <UsageFault_Handler_c+0xb4>)
 80007b4:	f000 f958 	bl	8000a68 <iprintf>
	printf("Value of R12 = %lX\n", pBaseStackFrame[4]);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3310      	adds	r3, #16
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4814      	ldr	r0, [pc, #80]	; (8000814 <UsageFault_Handler_c+0xb8>)
 80007c2:	f000 f951 	bl	8000a68 <iprintf>
	printf("Value of LR = %lX\n", pBaseStackFrame[5]);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3314      	adds	r3, #20
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4812      	ldr	r0, [pc, #72]	; (8000818 <UsageFault_Handler_c+0xbc>)
 80007d0:	f000 f94a 	bl	8000a68 <iprintf>
	printf("Value of PC = %lX\n", pBaseStackFrame[6]);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3318      	adds	r3, #24
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	480f      	ldr	r0, [pc, #60]	; (800081c <UsageFault_Handler_c+0xc0>)
 80007de:	f000 f943 	bl	8000a68 <iprintf>
	printf("Value of XPSR = %lX\n", pBaseStackFrame[7]);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	331c      	adds	r3, #28
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	480d      	ldr	r0, [pc, #52]	; (8000820 <UsageFault_Handler_c+0xc4>)
 80007ec:	f000 f93c 	bl	8000a68 <iprintf>

	while(1);
 80007f0:	e7fe      	b.n	80007f0 <UsageFault_Handler_c+0x94>
 80007f2:	bf00      	nop
 80007f4:	e000ed2a 	.word	0xe000ed2a
 80007f8:	08001a58 	.word	0x08001a58
 80007fc:	08001a70 	.word	0x08001a70
 8000800:	08001a7c 	.word	0x08001a7c
 8000804:	08001a94 	.word	0x08001a94
 8000808:	08001aa8 	.word	0x08001aa8
 800080c:	08001abc 	.word	0x08001abc
 8000810:	08001ad0 	.word	0x08001ad0
 8000814:	08001ae4 	.word	0x08001ae4
 8000818:	08001af8 	.word	0x08001af8
 800081c:	08001b0c 	.word	0x08001b0c
 8000820:	08001b20 	.word	0x08001b20

08000824 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <ITM_SendChar+0x44>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <ITM_SendChar+0x44>)
 8000834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000838:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <ITM_SendChar+0x48>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a0b      	ldr	r2, [pc, #44]	; (800086c <ITM_SendChar+0x48>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000846:	bf00      	nop
 8000848:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f8      	beq.n	8000848 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000856:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	6013      	str	r3, [r2, #0]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	e000edfc 	.word	0xe000edfc
 800086c:	e0000e00 	.word	0xe0000e00

08000870 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	e00a      	b.n	8000898 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000882:	f3af 8000 	nop.w
 8000886:	4601      	mov	r1, r0
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	60ba      	str	r2, [r7, #8]
 800088e:	b2ca      	uxtb	r2, r1
 8000890:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3301      	adds	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	429a      	cmp	r2, r3
 800089e:	dbf0      	blt.n	8000882 <_read+0x12>
	}

return len;
 80008a0:	687b      	ldr	r3, [r7, #4]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	e009      	b.n	80008d0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	60ba      	str	r2, [r7, #8]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ffad 	bl	8000824 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dbf1      	blt.n	80008bc <_write+0x12>
	}
	return len;
 80008d8:	687b      	ldr	r3, [r7, #4]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <_close>:

int _close(int file)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
	return -1;
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000908:	605a      	str	r2, [r3, #4]
	return 0;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <_isatty>:

int _isatty(int file)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
	return 1;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800092a:	b480      	push	{r7}
 800092c:	b085      	sub	sp, #20
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
	return 0;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
	...

08000944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <_sbrk+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <_sbrk+0x60>)
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <_sbrk+0x64>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <_sbrk+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	429a      	cmp	r2, r3
 8000972:	d207      	bcs.n	8000984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000974:	f000 f846 	bl	8000a04 <__errno>
 8000978:	4603      	mov	r3, r0
 800097a:	220c      	movs	r2, #12
 800097c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000982:	e009      	b.n	8000998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <_sbrk+0x64>)
 8000994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20020000 	.word	0x20020000
 80009a4:	00000400 	.word	0x00000400
 80009a8:	200000d4 	.word	0x200000d4
 80009ac:	200000f0 	.word	0x200000f0

080009b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <LoopForever+0x6>)
  ldr r1, =_edata
 80009ba:	490d      	ldr	r1, [pc, #52]	; (80009f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <LoopForever+0xe>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d0:	4c0a      	ldr	r4, [pc, #40]	; (80009fc <LoopForever+0x16>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009de:	f000 f817 	bl	8000a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e2:	f7ff fcbf 	bl	8000364 <main>

080009e6 <LoopForever>:

LoopForever:
    b LoopForever
 80009e6:	e7fe      	b.n	80009e6 <LoopForever>
  ldr   r0, =_estack
 80009e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80009f4:	08001bd8 	.word	0x08001bd8
  ldr r2, =_sbss
 80009f8:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80009fc:	200000f0 	.word	0x200000f0

08000a00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC_IRQHandler>
	...

08000a04 <__errno>:
 8000a04:	4b01      	ldr	r3, [pc, #4]	; (8000a0c <__errno+0x8>)
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000050 	.word	0x20000050

08000a10 <__libc_init_array>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	4d0d      	ldr	r5, [pc, #52]	; (8000a48 <__libc_init_array+0x38>)
 8000a14:	4c0d      	ldr	r4, [pc, #52]	; (8000a4c <__libc_init_array+0x3c>)
 8000a16:	1b64      	subs	r4, r4, r5
 8000a18:	10a4      	asrs	r4, r4, #2
 8000a1a:	2600      	movs	r6, #0
 8000a1c:	42a6      	cmp	r6, r4
 8000a1e:	d109      	bne.n	8000a34 <__libc_init_array+0x24>
 8000a20:	4d0b      	ldr	r5, [pc, #44]	; (8000a50 <__libc_init_array+0x40>)
 8000a22:	4c0c      	ldr	r4, [pc, #48]	; (8000a54 <__libc_init_array+0x44>)
 8000a24:	f000 ffe8 	bl	80019f8 <_init>
 8000a28:	1b64      	subs	r4, r4, r5
 8000a2a:	10a4      	asrs	r4, r4, #2
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	42a6      	cmp	r6, r4
 8000a30:	d105      	bne.n	8000a3e <__libc_init_array+0x2e>
 8000a32:	bd70      	pop	{r4, r5, r6, pc}
 8000a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a38:	4798      	blx	r3
 8000a3a:	3601      	adds	r6, #1
 8000a3c:	e7ee      	b.n	8000a1c <__libc_init_array+0xc>
 8000a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a42:	4798      	blx	r3
 8000a44:	3601      	adds	r6, #1
 8000a46:	e7f2      	b.n	8000a2e <__libc_init_array+0x1e>
 8000a48:	08001bd0 	.word	0x08001bd0
 8000a4c:	08001bd0 	.word	0x08001bd0
 8000a50:	08001bd0 	.word	0x08001bd0
 8000a54:	08001bd4 	.word	0x08001bd4

08000a58 <memset>:
 8000a58:	4402      	add	r2, r0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d100      	bne.n	8000a62 <memset+0xa>
 8000a60:	4770      	bx	lr
 8000a62:	f803 1b01 	strb.w	r1, [r3], #1
 8000a66:	e7f9      	b.n	8000a5c <memset+0x4>

08000a68 <iprintf>:
 8000a68:	b40f      	push	{r0, r1, r2, r3}
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <iprintf+0x2c>)
 8000a6c:	b513      	push	{r0, r1, r4, lr}
 8000a6e:	681c      	ldr	r4, [r3, #0]
 8000a70:	b124      	cbz	r4, 8000a7c <iprintf+0x14>
 8000a72:	69a3      	ldr	r3, [r4, #24]
 8000a74:	b913      	cbnz	r3, 8000a7c <iprintf+0x14>
 8000a76:	4620      	mov	r0, r4
 8000a78:	f000 fa5e 	bl	8000f38 <__sinit>
 8000a7c:	ab05      	add	r3, sp, #20
 8000a7e:	9a04      	ldr	r2, [sp, #16]
 8000a80:	68a1      	ldr	r1, [r4, #8]
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	4620      	mov	r0, r4
 8000a86:	f000 fc2b 	bl	80012e0 <_vfiprintf_r>
 8000a8a:	b002      	add	sp, #8
 8000a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr
 8000a94:	20000050 	.word	0x20000050

08000a98 <_puts_r>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	460e      	mov	r6, r1
 8000a9c:	4605      	mov	r5, r0
 8000a9e:	b118      	cbz	r0, 8000aa8 <_puts_r+0x10>
 8000aa0:	6983      	ldr	r3, [r0, #24]
 8000aa2:	b90b      	cbnz	r3, 8000aa8 <_puts_r+0x10>
 8000aa4:	f000 fa48 	bl	8000f38 <__sinit>
 8000aa8:	69ab      	ldr	r3, [r5, #24]
 8000aaa:	68ac      	ldr	r4, [r5, #8]
 8000aac:	b913      	cbnz	r3, 8000ab4 <_puts_r+0x1c>
 8000aae:	4628      	mov	r0, r5
 8000ab0:	f000 fa42 	bl	8000f38 <__sinit>
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <_puts_r+0xd0>)
 8000ab6:	429c      	cmp	r4, r3
 8000ab8:	d120      	bne.n	8000afc <_puts_r+0x64>
 8000aba:	686c      	ldr	r4, [r5, #4]
 8000abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000abe:	07db      	lsls	r3, r3, #31
 8000ac0:	d405      	bmi.n	8000ace <_puts_r+0x36>
 8000ac2:	89a3      	ldrh	r3, [r4, #12]
 8000ac4:	0598      	lsls	r0, r3, #22
 8000ac6:	d402      	bmi.n	8000ace <_puts_r+0x36>
 8000ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000aca:	f000 fad3 	bl	8001074 <__retarget_lock_acquire_recursive>
 8000ace:	89a3      	ldrh	r3, [r4, #12]
 8000ad0:	0719      	lsls	r1, r3, #28
 8000ad2:	d51d      	bpl.n	8000b10 <_puts_r+0x78>
 8000ad4:	6923      	ldr	r3, [r4, #16]
 8000ad6:	b1db      	cbz	r3, 8000b10 <_puts_r+0x78>
 8000ad8:	3e01      	subs	r6, #1
 8000ada:	68a3      	ldr	r3, [r4, #8]
 8000adc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	60a3      	str	r3, [r4, #8]
 8000ae4:	bb39      	cbnz	r1, 8000b36 <_puts_r+0x9e>
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da38      	bge.n	8000b5c <_puts_r+0xc4>
 8000aea:	4622      	mov	r2, r4
 8000aec:	210a      	movs	r1, #10
 8000aee:	4628      	mov	r0, r5
 8000af0:	f000 f848 	bl	8000b84 <__swbuf_r>
 8000af4:	3001      	adds	r0, #1
 8000af6:	d011      	beq.n	8000b1c <_puts_r+0x84>
 8000af8:	250a      	movs	r5, #10
 8000afa:	e011      	b.n	8000b20 <_puts_r+0x88>
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <_puts_r+0xd4>)
 8000afe:	429c      	cmp	r4, r3
 8000b00:	d101      	bne.n	8000b06 <_puts_r+0x6e>
 8000b02:	68ac      	ldr	r4, [r5, #8]
 8000b04:	e7da      	b.n	8000abc <_puts_r+0x24>
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <_puts_r+0xd8>)
 8000b08:	429c      	cmp	r4, r3
 8000b0a:	bf08      	it	eq
 8000b0c:	68ec      	ldreq	r4, [r5, #12]
 8000b0e:	e7d5      	b.n	8000abc <_puts_r+0x24>
 8000b10:	4621      	mov	r1, r4
 8000b12:	4628      	mov	r0, r5
 8000b14:	f000 f888 	bl	8000c28 <__swsetup_r>
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d0dd      	beq.n	8000ad8 <_puts_r+0x40>
 8000b1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b22:	07da      	lsls	r2, r3, #31
 8000b24:	d405      	bmi.n	8000b32 <_puts_r+0x9a>
 8000b26:	89a3      	ldrh	r3, [r4, #12]
 8000b28:	059b      	lsls	r3, r3, #22
 8000b2a:	d402      	bmi.n	8000b32 <_puts_r+0x9a>
 8000b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b2e:	f000 faa2 	bl	8001076 <__retarget_lock_release_recursive>
 8000b32:	4628      	mov	r0, r5
 8000b34:	bd70      	pop	{r4, r5, r6, pc}
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	da04      	bge.n	8000b44 <_puts_r+0xac>
 8000b3a:	69a2      	ldr	r2, [r4, #24]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dc06      	bgt.n	8000b4e <_puts_r+0xb6>
 8000b40:	290a      	cmp	r1, #10
 8000b42:	d004      	beq.n	8000b4e <_puts_r+0xb6>
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	6022      	str	r2, [r4, #0]
 8000b4a:	7019      	strb	r1, [r3, #0]
 8000b4c:	e7c5      	b.n	8000ada <_puts_r+0x42>
 8000b4e:	4622      	mov	r2, r4
 8000b50:	4628      	mov	r0, r5
 8000b52:	f000 f817 	bl	8000b84 <__swbuf_r>
 8000b56:	3001      	adds	r0, #1
 8000b58:	d1bf      	bne.n	8000ada <_puts_r+0x42>
 8000b5a:	e7df      	b.n	8000b1c <_puts_r+0x84>
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	250a      	movs	r5, #10
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	6022      	str	r2, [r4, #0]
 8000b64:	701d      	strb	r5, [r3, #0]
 8000b66:	e7db      	b.n	8000b20 <_puts_r+0x88>
 8000b68:	08001b5c 	.word	0x08001b5c
 8000b6c:	08001b7c 	.word	0x08001b7c
 8000b70:	08001b3c 	.word	0x08001b3c

08000b74 <puts>:
 8000b74:	4b02      	ldr	r3, [pc, #8]	; (8000b80 <puts+0xc>)
 8000b76:	4601      	mov	r1, r0
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	f7ff bf8d 	b.w	8000a98 <_puts_r>
 8000b7e:	bf00      	nop
 8000b80:	20000050 	.word	0x20000050

08000b84 <__swbuf_r>:
 8000b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b86:	460e      	mov	r6, r1
 8000b88:	4614      	mov	r4, r2
 8000b8a:	4605      	mov	r5, r0
 8000b8c:	b118      	cbz	r0, 8000b96 <__swbuf_r+0x12>
 8000b8e:	6983      	ldr	r3, [r0, #24]
 8000b90:	b90b      	cbnz	r3, 8000b96 <__swbuf_r+0x12>
 8000b92:	f000 f9d1 	bl	8000f38 <__sinit>
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <__swbuf_r+0x98>)
 8000b98:	429c      	cmp	r4, r3
 8000b9a:	d12b      	bne.n	8000bf4 <__swbuf_r+0x70>
 8000b9c:	686c      	ldr	r4, [r5, #4]
 8000b9e:	69a3      	ldr	r3, [r4, #24]
 8000ba0:	60a3      	str	r3, [r4, #8]
 8000ba2:	89a3      	ldrh	r3, [r4, #12]
 8000ba4:	071a      	lsls	r2, r3, #28
 8000ba6:	d52f      	bpl.n	8000c08 <__swbuf_r+0x84>
 8000ba8:	6923      	ldr	r3, [r4, #16]
 8000baa:	b36b      	cbz	r3, 8000c08 <__swbuf_r+0x84>
 8000bac:	6923      	ldr	r3, [r4, #16]
 8000bae:	6820      	ldr	r0, [r4, #0]
 8000bb0:	1ac0      	subs	r0, r0, r3
 8000bb2:	6963      	ldr	r3, [r4, #20]
 8000bb4:	b2f6      	uxtb	r6, r6
 8000bb6:	4283      	cmp	r3, r0
 8000bb8:	4637      	mov	r7, r6
 8000bba:	dc04      	bgt.n	8000bc6 <__swbuf_r+0x42>
 8000bbc:	4621      	mov	r1, r4
 8000bbe:	4628      	mov	r0, r5
 8000bc0:	f000 f926 	bl	8000e10 <_fflush_r>
 8000bc4:	bb30      	cbnz	r0, 8000c14 <__swbuf_r+0x90>
 8000bc6:	68a3      	ldr	r3, [r4, #8]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	60a3      	str	r3, [r4, #8]
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	6022      	str	r2, [r4, #0]
 8000bd2:	701e      	strb	r6, [r3, #0]
 8000bd4:	6963      	ldr	r3, [r4, #20]
 8000bd6:	3001      	adds	r0, #1
 8000bd8:	4283      	cmp	r3, r0
 8000bda:	d004      	beq.n	8000be6 <__swbuf_r+0x62>
 8000bdc:	89a3      	ldrh	r3, [r4, #12]
 8000bde:	07db      	lsls	r3, r3, #31
 8000be0:	d506      	bpl.n	8000bf0 <__swbuf_r+0x6c>
 8000be2:	2e0a      	cmp	r6, #10
 8000be4:	d104      	bne.n	8000bf0 <__swbuf_r+0x6c>
 8000be6:	4621      	mov	r1, r4
 8000be8:	4628      	mov	r0, r5
 8000bea:	f000 f911 	bl	8000e10 <_fflush_r>
 8000bee:	b988      	cbnz	r0, 8000c14 <__swbuf_r+0x90>
 8000bf0:	4638      	mov	r0, r7
 8000bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <__swbuf_r+0x9c>)
 8000bf6:	429c      	cmp	r4, r3
 8000bf8:	d101      	bne.n	8000bfe <__swbuf_r+0x7a>
 8000bfa:	68ac      	ldr	r4, [r5, #8]
 8000bfc:	e7cf      	b.n	8000b9e <__swbuf_r+0x1a>
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <__swbuf_r+0xa0>)
 8000c00:	429c      	cmp	r4, r3
 8000c02:	bf08      	it	eq
 8000c04:	68ec      	ldreq	r4, [r5, #12]
 8000c06:	e7ca      	b.n	8000b9e <__swbuf_r+0x1a>
 8000c08:	4621      	mov	r1, r4
 8000c0a:	4628      	mov	r0, r5
 8000c0c:	f000 f80c 	bl	8000c28 <__swsetup_r>
 8000c10:	2800      	cmp	r0, #0
 8000c12:	d0cb      	beq.n	8000bac <__swbuf_r+0x28>
 8000c14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000c18:	e7ea      	b.n	8000bf0 <__swbuf_r+0x6c>
 8000c1a:	bf00      	nop
 8000c1c:	08001b5c 	.word	0x08001b5c
 8000c20:	08001b7c 	.word	0x08001b7c
 8000c24:	08001b3c 	.word	0x08001b3c

08000c28 <__swsetup_r>:
 8000c28:	4b32      	ldr	r3, [pc, #200]	; (8000cf4 <__swsetup_r+0xcc>)
 8000c2a:	b570      	push	{r4, r5, r6, lr}
 8000c2c:	681d      	ldr	r5, [r3, #0]
 8000c2e:	4606      	mov	r6, r0
 8000c30:	460c      	mov	r4, r1
 8000c32:	b125      	cbz	r5, 8000c3e <__swsetup_r+0x16>
 8000c34:	69ab      	ldr	r3, [r5, #24]
 8000c36:	b913      	cbnz	r3, 8000c3e <__swsetup_r+0x16>
 8000c38:	4628      	mov	r0, r5
 8000c3a:	f000 f97d 	bl	8000f38 <__sinit>
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <__swsetup_r+0xd0>)
 8000c40:	429c      	cmp	r4, r3
 8000c42:	d10f      	bne.n	8000c64 <__swsetup_r+0x3c>
 8000c44:	686c      	ldr	r4, [r5, #4]
 8000c46:	89a3      	ldrh	r3, [r4, #12]
 8000c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c4c:	0719      	lsls	r1, r3, #28
 8000c4e:	d42c      	bmi.n	8000caa <__swsetup_r+0x82>
 8000c50:	06dd      	lsls	r5, r3, #27
 8000c52:	d411      	bmi.n	8000c78 <__swsetup_r+0x50>
 8000c54:	2309      	movs	r3, #9
 8000c56:	6033      	str	r3, [r6, #0]
 8000c58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000c5c:	81a3      	strh	r3, [r4, #12]
 8000c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c62:	e03e      	b.n	8000ce2 <__swsetup_r+0xba>
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <__swsetup_r+0xd4>)
 8000c66:	429c      	cmp	r4, r3
 8000c68:	d101      	bne.n	8000c6e <__swsetup_r+0x46>
 8000c6a:	68ac      	ldr	r4, [r5, #8]
 8000c6c:	e7eb      	b.n	8000c46 <__swsetup_r+0x1e>
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <__swsetup_r+0xd8>)
 8000c70:	429c      	cmp	r4, r3
 8000c72:	bf08      	it	eq
 8000c74:	68ec      	ldreq	r4, [r5, #12]
 8000c76:	e7e6      	b.n	8000c46 <__swsetup_r+0x1e>
 8000c78:	0758      	lsls	r0, r3, #29
 8000c7a:	d512      	bpl.n	8000ca2 <__swsetup_r+0x7a>
 8000c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c7e:	b141      	cbz	r1, 8000c92 <__swsetup_r+0x6a>
 8000c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d002      	beq.n	8000c8e <__swsetup_r+0x66>
 8000c88:	4630      	mov	r0, r6
 8000c8a:	f000 fa59 	bl	8001140 <_free_r>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	6363      	str	r3, [r4, #52]	; 0x34
 8000c92:	89a3      	ldrh	r3, [r4, #12]
 8000c94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000c98:	81a3      	strh	r3, [r4, #12]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	6063      	str	r3, [r4, #4]
 8000c9e:	6923      	ldr	r3, [r4, #16]
 8000ca0:	6023      	str	r3, [r4, #0]
 8000ca2:	89a3      	ldrh	r3, [r4, #12]
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	81a3      	strh	r3, [r4, #12]
 8000caa:	6923      	ldr	r3, [r4, #16]
 8000cac:	b94b      	cbnz	r3, 8000cc2 <__swsetup_r+0x9a>
 8000cae:	89a3      	ldrh	r3, [r4, #12]
 8000cb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cb8:	d003      	beq.n	8000cc2 <__swsetup_r+0x9a>
 8000cba:	4621      	mov	r1, r4
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	f000 f9ff 	bl	80010c0 <__smakebuf_r>
 8000cc2:	89a0      	ldrh	r0, [r4, #12]
 8000cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000cc8:	f010 0301 	ands.w	r3, r0, #1
 8000ccc:	d00a      	beq.n	8000ce4 <__swsetup_r+0xbc>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60a3      	str	r3, [r4, #8]
 8000cd2:	6963      	ldr	r3, [r4, #20]
 8000cd4:	425b      	negs	r3, r3
 8000cd6:	61a3      	str	r3, [r4, #24]
 8000cd8:	6923      	ldr	r3, [r4, #16]
 8000cda:	b943      	cbnz	r3, 8000cee <__swsetup_r+0xc6>
 8000cdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000ce0:	d1ba      	bne.n	8000c58 <__swsetup_r+0x30>
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}
 8000ce4:	0781      	lsls	r1, r0, #30
 8000ce6:	bf58      	it	pl
 8000ce8:	6963      	ldrpl	r3, [r4, #20]
 8000cea:	60a3      	str	r3, [r4, #8]
 8000cec:	e7f4      	b.n	8000cd8 <__swsetup_r+0xb0>
 8000cee:	2000      	movs	r0, #0
 8000cf0:	e7f7      	b.n	8000ce2 <__swsetup_r+0xba>
 8000cf2:	bf00      	nop
 8000cf4:	20000050 	.word	0x20000050
 8000cf8:	08001b5c 	.word	0x08001b5c
 8000cfc:	08001b7c 	.word	0x08001b7c
 8000d00:	08001b3c 	.word	0x08001b3c

08000d04 <__sflush_r>:
 8000d04:	898a      	ldrh	r2, [r1, #12]
 8000d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d0a:	4605      	mov	r5, r0
 8000d0c:	0710      	lsls	r0, r2, #28
 8000d0e:	460c      	mov	r4, r1
 8000d10:	d458      	bmi.n	8000dc4 <__sflush_r+0xc0>
 8000d12:	684b      	ldr	r3, [r1, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	dc05      	bgt.n	8000d24 <__sflush_r+0x20>
 8000d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	dc02      	bgt.n	8000d24 <__sflush_r+0x20>
 8000d1e:	2000      	movs	r0, #0
 8000d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d0f9      	beq.n	8000d1e <__sflush_r+0x1a>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000d30:	682f      	ldr	r7, [r5, #0]
 8000d32:	602b      	str	r3, [r5, #0]
 8000d34:	d032      	beq.n	8000d9c <__sflush_r+0x98>
 8000d36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d38:	89a3      	ldrh	r3, [r4, #12]
 8000d3a:	075a      	lsls	r2, r3, #29
 8000d3c:	d505      	bpl.n	8000d4a <__sflush_r+0x46>
 8000d3e:	6863      	ldr	r3, [r4, #4]
 8000d40:	1ac0      	subs	r0, r0, r3
 8000d42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d44:	b10b      	cbz	r3, 8000d4a <__sflush_r+0x46>
 8000d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d48:	1ac0      	subs	r0, r0, r3
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d50:	6a21      	ldr	r1, [r4, #32]
 8000d52:	4628      	mov	r0, r5
 8000d54:	47b0      	blx	r6
 8000d56:	1c43      	adds	r3, r0, #1
 8000d58:	89a3      	ldrh	r3, [r4, #12]
 8000d5a:	d106      	bne.n	8000d6a <__sflush_r+0x66>
 8000d5c:	6829      	ldr	r1, [r5, #0]
 8000d5e:	291d      	cmp	r1, #29
 8000d60:	d82c      	bhi.n	8000dbc <__sflush_r+0xb8>
 8000d62:	4a2a      	ldr	r2, [pc, #168]	; (8000e0c <__sflush_r+0x108>)
 8000d64:	40ca      	lsrs	r2, r1
 8000d66:	07d6      	lsls	r6, r2, #31
 8000d68:	d528      	bpl.n	8000dbc <__sflush_r+0xb8>
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	6062      	str	r2, [r4, #4]
 8000d6e:	04d9      	lsls	r1, r3, #19
 8000d70:	6922      	ldr	r2, [r4, #16]
 8000d72:	6022      	str	r2, [r4, #0]
 8000d74:	d504      	bpl.n	8000d80 <__sflush_r+0x7c>
 8000d76:	1c42      	adds	r2, r0, #1
 8000d78:	d101      	bne.n	8000d7e <__sflush_r+0x7a>
 8000d7a:	682b      	ldr	r3, [r5, #0]
 8000d7c:	b903      	cbnz	r3, 8000d80 <__sflush_r+0x7c>
 8000d7e:	6560      	str	r0, [r4, #84]	; 0x54
 8000d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d82:	602f      	str	r7, [r5, #0]
 8000d84:	2900      	cmp	r1, #0
 8000d86:	d0ca      	beq.n	8000d1e <__sflush_r+0x1a>
 8000d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d002      	beq.n	8000d96 <__sflush_r+0x92>
 8000d90:	4628      	mov	r0, r5
 8000d92:	f000 f9d5 	bl	8001140 <_free_r>
 8000d96:	2000      	movs	r0, #0
 8000d98:	6360      	str	r0, [r4, #52]	; 0x34
 8000d9a:	e7c1      	b.n	8000d20 <__sflush_r+0x1c>
 8000d9c:	6a21      	ldr	r1, [r4, #32]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	4628      	mov	r0, r5
 8000da2:	47b0      	blx	r6
 8000da4:	1c41      	adds	r1, r0, #1
 8000da6:	d1c7      	bne.n	8000d38 <__sflush_r+0x34>
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0c4      	beq.n	8000d38 <__sflush_r+0x34>
 8000dae:	2b1d      	cmp	r3, #29
 8000db0:	d001      	beq.n	8000db6 <__sflush_r+0xb2>
 8000db2:	2b16      	cmp	r3, #22
 8000db4:	d101      	bne.n	8000dba <__sflush_r+0xb6>
 8000db6:	602f      	str	r7, [r5, #0]
 8000db8:	e7b1      	b.n	8000d1e <__sflush_r+0x1a>
 8000dba:	89a3      	ldrh	r3, [r4, #12]
 8000dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc0:	81a3      	strh	r3, [r4, #12]
 8000dc2:	e7ad      	b.n	8000d20 <__sflush_r+0x1c>
 8000dc4:	690f      	ldr	r7, [r1, #16]
 8000dc6:	2f00      	cmp	r7, #0
 8000dc8:	d0a9      	beq.n	8000d1e <__sflush_r+0x1a>
 8000dca:	0793      	lsls	r3, r2, #30
 8000dcc:	680e      	ldr	r6, [r1, #0]
 8000dce:	bf08      	it	eq
 8000dd0:	694b      	ldreq	r3, [r1, #20]
 8000dd2:	600f      	str	r7, [r1, #0]
 8000dd4:	bf18      	it	ne
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	eba6 0807 	sub.w	r8, r6, r7
 8000ddc:	608b      	str	r3, [r1, #8]
 8000dde:	f1b8 0f00 	cmp.w	r8, #0
 8000de2:	dd9c      	ble.n	8000d1e <__sflush_r+0x1a>
 8000de4:	6a21      	ldr	r1, [r4, #32]
 8000de6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000de8:	4643      	mov	r3, r8
 8000dea:	463a      	mov	r2, r7
 8000dec:	4628      	mov	r0, r5
 8000dee:	47b0      	blx	r6
 8000df0:	2800      	cmp	r0, #0
 8000df2:	dc06      	bgt.n	8000e02 <__sflush_r+0xfe>
 8000df4:	89a3      	ldrh	r3, [r4, #12]
 8000df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfa:	81a3      	strh	r3, [r4, #12]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e00:	e78e      	b.n	8000d20 <__sflush_r+0x1c>
 8000e02:	4407      	add	r7, r0
 8000e04:	eba8 0800 	sub.w	r8, r8, r0
 8000e08:	e7e9      	b.n	8000dde <__sflush_r+0xda>
 8000e0a:	bf00      	nop
 8000e0c:	20400001 	.word	0x20400001

08000e10 <_fflush_r>:
 8000e10:	b538      	push	{r3, r4, r5, lr}
 8000e12:	690b      	ldr	r3, [r1, #16]
 8000e14:	4605      	mov	r5, r0
 8000e16:	460c      	mov	r4, r1
 8000e18:	b913      	cbnz	r3, 8000e20 <_fflush_r+0x10>
 8000e1a:	2500      	movs	r5, #0
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	bd38      	pop	{r3, r4, r5, pc}
 8000e20:	b118      	cbz	r0, 8000e2a <_fflush_r+0x1a>
 8000e22:	6983      	ldr	r3, [r0, #24]
 8000e24:	b90b      	cbnz	r3, 8000e2a <_fflush_r+0x1a>
 8000e26:	f000 f887 	bl	8000f38 <__sinit>
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <_fflush_r+0x6c>)
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	d11b      	bne.n	8000e68 <_fflush_r+0x58>
 8000e30:	686c      	ldr	r4, [r5, #4]
 8000e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0ef      	beq.n	8000e1a <_fflush_r+0xa>
 8000e3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000e3c:	07d0      	lsls	r0, r2, #31
 8000e3e:	d404      	bmi.n	8000e4a <_fflush_r+0x3a>
 8000e40:	0599      	lsls	r1, r3, #22
 8000e42:	d402      	bmi.n	8000e4a <_fflush_r+0x3a>
 8000e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e46:	f000 f915 	bl	8001074 <__retarget_lock_acquire_recursive>
 8000e4a:	4628      	mov	r0, r5
 8000e4c:	4621      	mov	r1, r4
 8000e4e:	f7ff ff59 	bl	8000d04 <__sflush_r>
 8000e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e54:	07da      	lsls	r2, r3, #31
 8000e56:	4605      	mov	r5, r0
 8000e58:	d4e0      	bmi.n	8000e1c <_fflush_r+0xc>
 8000e5a:	89a3      	ldrh	r3, [r4, #12]
 8000e5c:	059b      	lsls	r3, r3, #22
 8000e5e:	d4dd      	bmi.n	8000e1c <_fflush_r+0xc>
 8000e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e62:	f000 f908 	bl	8001076 <__retarget_lock_release_recursive>
 8000e66:	e7d9      	b.n	8000e1c <_fflush_r+0xc>
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <_fflush_r+0x70>)
 8000e6a:	429c      	cmp	r4, r3
 8000e6c:	d101      	bne.n	8000e72 <_fflush_r+0x62>
 8000e6e:	68ac      	ldr	r4, [r5, #8]
 8000e70:	e7df      	b.n	8000e32 <_fflush_r+0x22>
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <_fflush_r+0x74>)
 8000e74:	429c      	cmp	r4, r3
 8000e76:	bf08      	it	eq
 8000e78:	68ec      	ldreq	r4, [r5, #12]
 8000e7a:	e7da      	b.n	8000e32 <_fflush_r+0x22>
 8000e7c:	08001b5c 	.word	0x08001b5c
 8000e80:	08001b7c 	.word	0x08001b7c
 8000e84:	08001b3c 	.word	0x08001b3c

08000e88 <std>:
 8000e88:	2300      	movs	r3, #0
 8000e8a:	b510      	push	{r4, lr}
 8000e8c:	4604      	mov	r4, r0
 8000e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8000e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e96:	6083      	str	r3, [r0, #8]
 8000e98:	8181      	strh	r1, [r0, #12]
 8000e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8000e9c:	81c2      	strh	r2, [r0, #14]
 8000e9e:	6183      	str	r3, [r0, #24]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	305c      	adds	r0, #92	; 0x5c
 8000ea6:	f7ff fdd7 	bl	8000a58 <memset>
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <std+0x38>)
 8000eac:	6263      	str	r3, [r4, #36]	; 0x24
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <std+0x3c>)
 8000eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <std+0x40>)
 8000eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <std+0x44>)
 8000eb8:	6224      	str	r4, [r4, #32]
 8000eba:	6323      	str	r3, [r4, #48]	; 0x30
 8000ebc:	bd10      	pop	{r4, pc}
 8000ebe:	bf00      	nop
 8000ec0:	08001889 	.word	0x08001889
 8000ec4:	080018ab 	.word	0x080018ab
 8000ec8:	080018e3 	.word	0x080018e3
 8000ecc:	08001907 	.word	0x08001907

08000ed0 <_cleanup_r>:
 8000ed0:	4901      	ldr	r1, [pc, #4]	; (8000ed8 <_cleanup_r+0x8>)
 8000ed2:	f000 b8af 	b.w	8001034 <_fwalk_reent>
 8000ed6:	bf00      	nop
 8000ed8:	08000e11 	.word	0x08000e11

08000edc <__sfmoreglue>:
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	1e4a      	subs	r2, r1, #1
 8000ee0:	2568      	movs	r5, #104	; 0x68
 8000ee2:	4355      	muls	r5, r2
 8000ee4:	460e      	mov	r6, r1
 8000ee6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000eea:	f000 f977 	bl	80011dc <_malloc_r>
 8000eee:	4604      	mov	r4, r0
 8000ef0:	b140      	cbz	r0, 8000f04 <__sfmoreglue+0x28>
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e9c0 1600 	strd	r1, r6, [r0]
 8000ef8:	300c      	adds	r0, #12
 8000efa:	60a0      	str	r0, [r4, #8]
 8000efc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000f00:	f7ff fdaa 	bl	8000a58 <memset>
 8000f04:	4620      	mov	r0, r4
 8000f06:	bd70      	pop	{r4, r5, r6, pc}

08000f08 <__sfp_lock_acquire>:
 8000f08:	4801      	ldr	r0, [pc, #4]	; (8000f10 <__sfp_lock_acquire+0x8>)
 8000f0a:	f000 b8b3 	b.w	8001074 <__retarget_lock_acquire_recursive>
 8000f0e:	bf00      	nop
 8000f10:	200000e8 	.word	0x200000e8

08000f14 <__sfp_lock_release>:
 8000f14:	4801      	ldr	r0, [pc, #4]	; (8000f1c <__sfp_lock_release+0x8>)
 8000f16:	f000 b8ae 	b.w	8001076 <__retarget_lock_release_recursive>
 8000f1a:	bf00      	nop
 8000f1c:	200000e8 	.word	0x200000e8

08000f20 <__sinit_lock_acquire>:
 8000f20:	4801      	ldr	r0, [pc, #4]	; (8000f28 <__sinit_lock_acquire+0x8>)
 8000f22:	f000 b8a7 	b.w	8001074 <__retarget_lock_acquire_recursive>
 8000f26:	bf00      	nop
 8000f28:	200000e3 	.word	0x200000e3

08000f2c <__sinit_lock_release>:
 8000f2c:	4801      	ldr	r0, [pc, #4]	; (8000f34 <__sinit_lock_release+0x8>)
 8000f2e:	f000 b8a2 	b.w	8001076 <__retarget_lock_release_recursive>
 8000f32:	bf00      	nop
 8000f34:	200000e3 	.word	0x200000e3

08000f38 <__sinit>:
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	f7ff fff0 	bl	8000f20 <__sinit_lock_acquire>
 8000f40:	69a3      	ldr	r3, [r4, #24]
 8000f42:	b11b      	cbz	r3, 8000f4c <__sinit+0x14>
 8000f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f48:	f7ff bff0 	b.w	8000f2c <__sinit_lock_release>
 8000f4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000f50:	6523      	str	r3, [r4, #80]	; 0x50
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <__sinit+0x68>)
 8000f54:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <__sinit+0x6c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	62a2      	str	r2, [r4, #40]	; 0x28
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	bf04      	itt	eq
 8000f5e:	2301      	moveq	r3, #1
 8000f60:	61a3      	streq	r3, [r4, #24]
 8000f62:	4620      	mov	r0, r4
 8000f64:	f000 f820 	bl	8000fa8 <__sfp>
 8000f68:	6060      	str	r0, [r4, #4]
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	f000 f81c 	bl	8000fa8 <__sfp>
 8000f70:	60a0      	str	r0, [r4, #8]
 8000f72:	4620      	mov	r0, r4
 8000f74:	f000 f818 	bl	8000fa8 <__sfp>
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60e0      	str	r0, [r4, #12]
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	6860      	ldr	r0, [r4, #4]
 8000f80:	f7ff ff82 	bl	8000e88 <std>
 8000f84:	68a0      	ldr	r0, [r4, #8]
 8000f86:	2201      	movs	r2, #1
 8000f88:	2109      	movs	r1, #9
 8000f8a:	f7ff ff7d 	bl	8000e88 <std>
 8000f8e:	68e0      	ldr	r0, [r4, #12]
 8000f90:	2202      	movs	r2, #2
 8000f92:	2112      	movs	r1, #18
 8000f94:	f7ff ff78 	bl	8000e88 <std>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61a3      	str	r3, [r4, #24]
 8000f9c:	e7d2      	b.n	8000f44 <__sinit+0xc>
 8000f9e:	bf00      	nop
 8000fa0:	08001b38 	.word	0x08001b38
 8000fa4:	08000ed1 	.word	0x08000ed1

08000fa8 <__sfp>:
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000faa:	4607      	mov	r7, r0
 8000fac:	f7ff ffac 	bl	8000f08 <__sfp_lock_acquire>
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <__sfp+0x84>)
 8000fb2:	681e      	ldr	r6, [r3, #0]
 8000fb4:	69b3      	ldr	r3, [r6, #24]
 8000fb6:	b913      	cbnz	r3, 8000fbe <__sfp+0x16>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	f7ff ffbd 	bl	8000f38 <__sinit>
 8000fbe:	3648      	adds	r6, #72	; 0x48
 8000fc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	d503      	bpl.n	8000fd0 <__sfp+0x28>
 8000fc8:	6833      	ldr	r3, [r6, #0]
 8000fca:	b30b      	cbz	r3, 8001010 <__sfp+0x68>
 8000fcc:	6836      	ldr	r6, [r6, #0]
 8000fce:	e7f7      	b.n	8000fc0 <__sfp+0x18>
 8000fd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000fd4:	b9d5      	cbnz	r5, 800100c <__sfp+0x64>
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <__sfp+0x88>)
 8000fd8:	60e3      	str	r3, [r4, #12]
 8000fda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000fde:	6665      	str	r5, [r4, #100]	; 0x64
 8000fe0:	f000 f847 	bl	8001072 <__retarget_lock_init_recursive>
 8000fe4:	f7ff ff96 	bl	8000f14 <__sfp_lock_release>
 8000fe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000fec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ff0:	6025      	str	r5, [r4, #0]
 8000ff2:	61a5      	str	r5, [r4, #24]
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ffc:	f7ff fd2c 	bl	8000a58 <memset>
 8001000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001008:	4620      	mov	r0, r4
 800100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800100c:	3468      	adds	r4, #104	; 0x68
 800100e:	e7d9      	b.n	8000fc4 <__sfp+0x1c>
 8001010:	2104      	movs	r1, #4
 8001012:	4638      	mov	r0, r7
 8001014:	f7ff ff62 	bl	8000edc <__sfmoreglue>
 8001018:	4604      	mov	r4, r0
 800101a:	6030      	str	r0, [r6, #0]
 800101c:	2800      	cmp	r0, #0
 800101e:	d1d5      	bne.n	8000fcc <__sfp+0x24>
 8001020:	f7ff ff78 	bl	8000f14 <__sfp_lock_release>
 8001024:	230c      	movs	r3, #12
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	e7ee      	b.n	8001008 <__sfp+0x60>
 800102a:	bf00      	nop
 800102c:	08001b38 	.word	0x08001b38
 8001030:	ffff0001 	.word	0xffff0001

08001034 <_fwalk_reent>:
 8001034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001038:	4606      	mov	r6, r0
 800103a:	4688      	mov	r8, r1
 800103c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001040:	2700      	movs	r7, #0
 8001042:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001046:	f1b9 0901 	subs.w	r9, r9, #1
 800104a:	d505      	bpl.n	8001058 <_fwalk_reent+0x24>
 800104c:	6824      	ldr	r4, [r4, #0]
 800104e:	2c00      	cmp	r4, #0
 8001050:	d1f7      	bne.n	8001042 <_fwalk_reent+0xe>
 8001052:	4638      	mov	r0, r7
 8001054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001058:	89ab      	ldrh	r3, [r5, #12]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d907      	bls.n	800106e <_fwalk_reent+0x3a>
 800105e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001062:	3301      	adds	r3, #1
 8001064:	d003      	beq.n	800106e <_fwalk_reent+0x3a>
 8001066:	4629      	mov	r1, r5
 8001068:	4630      	mov	r0, r6
 800106a:	47c0      	blx	r8
 800106c:	4307      	orrs	r7, r0
 800106e:	3568      	adds	r5, #104	; 0x68
 8001070:	e7e9      	b.n	8001046 <_fwalk_reent+0x12>

08001072 <__retarget_lock_init_recursive>:
 8001072:	4770      	bx	lr

08001074 <__retarget_lock_acquire_recursive>:
 8001074:	4770      	bx	lr

08001076 <__retarget_lock_release_recursive>:
 8001076:	4770      	bx	lr

08001078 <__swhatbuf_r>:
 8001078:	b570      	push	{r4, r5, r6, lr}
 800107a:	460e      	mov	r6, r1
 800107c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001080:	2900      	cmp	r1, #0
 8001082:	b096      	sub	sp, #88	; 0x58
 8001084:	4614      	mov	r4, r2
 8001086:	461d      	mov	r5, r3
 8001088:	da07      	bge.n	800109a <__swhatbuf_r+0x22>
 800108a:	2300      	movs	r3, #0
 800108c:	602b      	str	r3, [r5, #0]
 800108e:	89b3      	ldrh	r3, [r6, #12]
 8001090:	061a      	lsls	r2, r3, #24
 8001092:	d410      	bmi.n	80010b6 <__swhatbuf_r+0x3e>
 8001094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001098:	e00e      	b.n	80010b8 <__swhatbuf_r+0x40>
 800109a:	466a      	mov	r2, sp
 800109c:	f000 fc5a 	bl	8001954 <_fstat_r>
 80010a0:	2800      	cmp	r0, #0
 80010a2:	dbf2      	blt.n	800108a <__swhatbuf_r+0x12>
 80010a4:	9a01      	ldr	r2, [sp, #4]
 80010a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80010aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80010ae:	425a      	negs	r2, r3
 80010b0:	415a      	adcs	r2, r3
 80010b2:	602a      	str	r2, [r5, #0]
 80010b4:	e7ee      	b.n	8001094 <__swhatbuf_r+0x1c>
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	2000      	movs	r0, #0
 80010ba:	6023      	str	r3, [r4, #0]
 80010bc:	b016      	add	sp, #88	; 0x58
 80010be:	bd70      	pop	{r4, r5, r6, pc}

080010c0 <__smakebuf_r>:
 80010c0:	898b      	ldrh	r3, [r1, #12]
 80010c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80010c4:	079d      	lsls	r5, r3, #30
 80010c6:	4606      	mov	r6, r0
 80010c8:	460c      	mov	r4, r1
 80010ca:	d507      	bpl.n	80010dc <__smakebuf_r+0x1c>
 80010cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80010d0:	6023      	str	r3, [r4, #0]
 80010d2:	6123      	str	r3, [r4, #16]
 80010d4:	2301      	movs	r3, #1
 80010d6:	6163      	str	r3, [r4, #20]
 80010d8:	b002      	add	sp, #8
 80010da:	bd70      	pop	{r4, r5, r6, pc}
 80010dc:	ab01      	add	r3, sp, #4
 80010de:	466a      	mov	r2, sp
 80010e0:	f7ff ffca 	bl	8001078 <__swhatbuf_r>
 80010e4:	9900      	ldr	r1, [sp, #0]
 80010e6:	4605      	mov	r5, r0
 80010e8:	4630      	mov	r0, r6
 80010ea:	f000 f877 	bl	80011dc <_malloc_r>
 80010ee:	b948      	cbnz	r0, 8001104 <__smakebuf_r+0x44>
 80010f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010f4:	059a      	lsls	r2, r3, #22
 80010f6:	d4ef      	bmi.n	80010d8 <__smakebuf_r+0x18>
 80010f8:	f023 0303 	bic.w	r3, r3, #3
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	81a3      	strh	r3, [r4, #12]
 8001102:	e7e3      	b.n	80010cc <__smakebuf_r+0xc>
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <__smakebuf_r+0x7c>)
 8001106:	62b3      	str	r3, [r6, #40]	; 0x28
 8001108:	89a3      	ldrh	r3, [r4, #12]
 800110a:	6020      	str	r0, [r4, #0]
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	81a3      	strh	r3, [r4, #12]
 8001112:	9b00      	ldr	r3, [sp, #0]
 8001114:	6163      	str	r3, [r4, #20]
 8001116:	9b01      	ldr	r3, [sp, #4]
 8001118:	6120      	str	r0, [r4, #16]
 800111a:	b15b      	cbz	r3, 8001134 <__smakebuf_r+0x74>
 800111c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001120:	4630      	mov	r0, r6
 8001122:	f000 fc29 	bl	8001978 <_isatty_r>
 8001126:	b128      	cbz	r0, 8001134 <__smakebuf_r+0x74>
 8001128:	89a3      	ldrh	r3, [r4, #12]
 800112a:	f023 0303 	bic.w	r3, r3, #3
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	81a3      	strh	r3, [r4, #12]
 8001134:	89a0      	ldrh	r0, [r4, #12]
 8001136:	4305      	orrs	r5, r0
 8001138:	81a5      	strh	r5, [r4, #12]
 800113a:	e7cd      	b.n	80010d8 <__smakebuf_r+0x18>
 800113c:	08000ed1 	.word	0x08000ed1

08001140 <_free_r>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	4605      	mov	r5, r0
 8001144:	2900      	cmp	r1, #0
 8001146:	d045      	beq.n	80011d4 <_free_r+0x94>
 8001148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800114c:	1f0c      	subs	r4, r1, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	bfb8      	it	lt
 8001152:	18e4      	addlt	r4, r4, r3
 8001154:	f000 fc32 	bl	80019bc <__malloc_lock>
 8001158:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <_free_r+0x98>)
 800115a:	6813      	ldr	r3, [r2, #0]
 800115c:	4610      	mov	r0, r2
 800115e:	b933      	cbnz	r3, 800116e <_free_r+0x2e>
 8001160:	6063      	str	r3, [r4, #4]
 8001162:	6014      	str	r4, [r2, #0]
 8001164:	4628      	mov	r0, r5
 8001166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800116a:	f000 bc2d 	b.w	80019c8 <__malloc_unlock>
 800116e:	42a3      	cmp	r3, r4
 8001170:	d90b      	bls.n	800118a <_free_r+0x4a>
 8001172:	6821      	ldr	r1, [r4, #0]
 8001174:	1862      	adds	r2, r4, r1
 8001176:	4293      	cmp	r3, r2
 8001178:	bf04      	itt	eq
 800117a:	681a      	ldreq	r2, [r3, #0]
 800117c:	685b      	ldreq	r3, [r3, #4]
 800117e:	6063      	str	r3, [r4, #4]
 8001180:	bf04      	itt	eq
 8001182:	1852      	addeq	r2, r2, r1
 8001184:	6022      	streq	r2, [r4, #0]
 8001186:	6004      	str	r4, [r0, #0]
 8001188:	e7ec      	b.n	8001164 <_free_r+0x24>
 800118a:	461a      	mov	r2, r3
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	b10b      	cbz	r3, 8001194 <_free_r+0x54>
 8001190:	42a3      	cmp	r3, r4
 8001192:	d9fa      	bls.n	800118a <_free_r+0x4a>
 8001194:	6811      	ldr	r1, [r2, #0]
 8001196:	1850      	adds	r0, r2, r1
 8001198:	42a0      	cmp	r0, r4
 800119a:	d10b      	bne.n	80011b4 <_free_r+0x74>
 800119c:	6820      	ldr	r0, [r4, #0]
 800119e:	4401      	add	r1, r0
 80011a0:	1850      	adds	r0, r2, r1
 80011a2:	4283      	cmp	r3, r0
 80011a4:	6011      	str	r1, [r2, #0]
 80011a6:	d1dd      	bne.n	8001164 <_free_r+0x24>
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	6053      	str	r3, [r2, #4]
 80011ae:	4401      	add	r1, r0
 80011b0:	6011      	str	r1, [r2, #0]
 80011b2:	e7d7      	b.n	8001164 <_free_r+0x24>
 80011b4:	d902      	bls.n	80011bc <_free_r+0x7c>
 80011b6:	230c      	movs	r3, #12
 80011b8:	602b      	str	r3, [r5, #0]
 80011ba:	e7d3      	b.n	8001164 <_free_r+0x24>
 80011bc:	6820      	ldr	r0, [r4, #0]
 80011be:	1821      	adds	r1, r4, r0
 80011c0:	428b      	cmp	r3, r1
 80011c2:	bf04      	itt	eq
 80011c4:	6819      	ldreq	r1, [r3, #0]
 80011c6:	685b      	ldreq	r3, [r3, #4]
 80011c8:	6063      	str	r3, [r4, #4]
 80011ca:	bf04      	itt	eq
 80011cc:	1809      	addeq	r1, r1, r0
 80011ce:	6021      	streq	r1, [r4, #0]
 80011d0:	6054      	str	r4, [r2, #4]
 80011d2:	e7c7      	b.n	8001164 <_free_r+0x24>
 80011d4:	bd38      	pop	{r3, r4, r5, pc}
 80011d6:	bf00      	nop
 80011d8:	200000d8 	.word	0x200000d8

080011dc <_malloc_r>:
 80011dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011de:	1ccd      	adds	r5, r1, #3
 80011e0:	f025 0503 	bic.w	r5, r5, #3
 80011e4:	3508      	adds	r5, #8
 80011e6:	2d0c      	cmp	r5, #12
 80011e8:	bf38      	it	cc
 80011ea:	250c      	movcc	r5, #12
 80011ec:	2d00      	cmp	r5, #0
 80011ee:	4606      	mov	r6, r0
 80011f0:	db01      	blt.n	80011f6 <_malloc_r+0x1a>
 80011f2:	42a9      	cmp	r1, r5
 80011f4:	d903      	bls.n	80011fe <_malloc_r+0x22>
 80011f6:	230c      	movs	r3, #12
 80011f8:	6033      	str	r3, [r6, #0]
 80011fa:	2000      	movs	r0, #0
 80011fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011fe:	f000 fbdd 	bl	80019bc <__malloc_lock>
 8001202:	4921      	ldr	r1, [pc, #132]	; (8001288 <_malloc_r+0xac>)
 8001204:	680a      	ldr	r2, [r1, #0]
 8001206:	4614      	mov	r4, r2
 8001208:	b99c      	cbnz	r4, 8001232 <_malloc_r+0x56>
 800120a:	4f20      	ldr	r7, [pc, #128]	; (800128c <_malloc_r+0xb0>)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b923      	cbnz	r3, 800121a <_malloc_r+0x3e>
 8001210:	4621      	mov	r1, r4
 8001212:	4630      	mov	r0, r6
 8001214:	f000 fb28 	bl	8001868 <_sbrk_r>
 8001218:	6038      	str	r0, [r7, #0]
 800121a:	4629      	mov	r1, r5
 800121c:	4630      	mov	r0, r6
 800121e:	f000 fb23 	bl	8001868 <_sbrk_r>
 8001222:	1c43      	adds	r3, r0, #1
 8001224:	d123      	bne.n	800126e <_malloc_r+0x92>
 8001226:	230c      	movs	r3, #12
 8001228:	6033      	str	r3, [r6, #0]
 800122a:	4630      	mov	r0, r6
 800122c:	f000 fbcc 	bl	80019c8 <__malloc_unlock>
 8001230:	e7e3      	b.n	80011fa <_malloc_r+0x1e>
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	1b5b      	subs	r3, r3, r5
 8001236:	d417      	bmi.n	8001268 <_malloc_r+0x8c>
 8001238:	2b0b      	cmp	r3, #11
 800123a:	d903      	bls.n	8001244 <_malloc_r+0x68>
 800123c:	6023      	str	r3, [r4, #0]
 800123e:	441c      	add	r4, r3
 8001240:	6025      	str	r5, [r4, #0]
 8001242:	e004      	b.n	800124e <_malloc_r+0x72>
 8001244:	6863      	ldr	r3, [r4, #4]
 8001246:	42a2      	cmp	r2, r4
 8001248:	bf0c      	ite	eq
 800124a:	600b      	streq	r3, [r1, #0]
 800124c:	6053      	strne	r3, [r2, #4]
 800124e:	4630      	mov	r0, r6
 8001250:	f000 fbba 	bl	80019c8 <__malloc_unlock>
 8001254:	f104 000b 	add.w	r0, r4, #11
 8001258:	1d23      	adds	r3, r4, #4
 800125a:	f020 0007 	bic.w	r0, r0, #7
 800125e:	1ac2      	subs	r2, r0, r3
 8001260:	d0cc      	beq.n	80011fc <_malloc_r+0x20>
 8001262:	1a1b      	subs	r3, r3, r0
 8001264:	50a3      	str	r3, [r4, r2]
 8001266:	e7c9      	b.n	80011fc <_malloc_r+0x20>
 8001268:	4622      	mov	r2, r4
 800126a:	6864      	ldr	r4, [r4, #4]
 800126c:	e7cc      	b.n	8001208 <_malloc_r+0x2c>
 800126e:	1cc4      	adds	r4, r0, #3
 8001270:	f024 0403 	bic.w	r4, r4, #3
 8001274:	42a0      	cmp	r0, r4
 8001276:	d0e3      	beq.n	8001240 <_malloc_r+0x64>
 8001278:	1a21      	subs	r1, r4, r0
 800127a:	4630      	mov	r0, r6
 800127c:	f000 faf4 	bl	8001868 <_sbrk_r>
 8001280:	3001      	adds	r0, #1
 8001282:	d1dd      	bne.n	8001240 <_malloc_r+0x64>
 8001284:	e7cf      	b.n	8001226 <_malloc_r+0x4a>
 8001286:	bf00      	nop
 8001288:	200000d8 	.word	0x200000d8
 800128c:	200000dc 	.word	0x200000dc

08001290 <__sfputc_r>:
 8001290:	6893      	ldr	r3, [r2, #8]
 8001292:	3b01      	subs	r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	b410      	push	{r4}
 8001298:	6093      	str	r3, [r2, #8]
 800129a:	da07      	bge.n	80012ac <__sfputc_r+0x1c>
 800129c:	6994      	ldr	r4, [r2, #24]
 800129e:	42a3      	cmp	r3, r4
 80012a0:	db01      	blt.n	80012a6 <__sfputc_r+0x16>
 80012a2:	290a      	cmp	r1, #10
 80012a4:	d102      	bne.n	80012ac <__sfputc_r+0x1c>
 80012a6:	bc10      	pop	{r4}
 80012a8:	f7ff bc6c 	b.w	8000b84 <__swbuf_r>
 80012ac:	6813      	ldr	r3, [r2, #0]
 80012ae:	1c58      	adds	r0, r3, #1
 80012b0:	6010      	str	r0, [r2, #0]
 80012b2:	7019      	strb	r1, [r3, #0]
 80012b4:	4608      	mov	r0, r1
 80012b6:	bc10      	pop	{r4}
 80012b8:	4770      	bx	lr

080012ba <__sfputs_r>:
 80012ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012bc:	4606      	mov	r6, r0
 80012be:	460f      	mov	r7, r1
 80012c0:	4614      	mov	r4, r2
 80012c2:	18d5      	adds	r5, r2, r3
 80012c4:	42ac      	cmp	r4, r5
 80012c6:	d101      	bne.n	80012cc <__sfputs_r+0x12>
 80012c8:	2000      	movs	r0, #0
 80012ca:	e007      	b.n	80012dc <__sfputs_r+0x22>
 80012cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012d0:	463a      	mov	r2, r7
 80012d2:	4630      	mov	r0, r6
 80012d4:	f7ff ffdc 	bl	8001290 <__sfputc_r>
 80012d8:	1c43      	adds	r3, r0, #1
 80012da:	d1f3      	bne.n	80012c4 <__sfputs_r+0xa>
 80012dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080012e0 <_vfiprintf_r>:
 80012e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012e4:	460d      	mov	r5, r1
 80012e6:	b09d      	sub	sp, #116	; 0x74
 80012e8:	4614      	mov	r4, r2
 80012ea:	4698      	mov	r8, r3
 80012ec:	4606      	mov	r6, r0
 80012ee:	b118      	cbz	r0, 80012f8 <_vfiprintf_r+0x18>
 80012f0:	6983      	ldr	r3, [r0, #24]
 80012f2:	b90b      	cbnz	r3, 80012f8 <_vfiprintf_r+0x18>
 80012f4:	f7ff fe20 	bl	8000f38 <__sinit>
 80012f8:	4b89      	ldr	r3, [pc, #548]	; (8001520 <_vfiprintf_r+0x240>)
 80012fa:	429d      	cmp	r5, r3
 80012fc:	d11b      	bne.n	8001336 <_vfiprintf_r+0x56>
 80012fe:	6875      	ldr	r5, [r6, #4]
 8001300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001302:	07d9      	lsls	r1, r3, #31
 8001304:	d405      	bmi.n	8001312 <_vfiprintf_r+0x32>
 8001306:	89ab      	ldrh	r3, [r5, #12]
 8001308:	059a      	lsls	r2, r3, #22
 800130a:	d402      	bmi.n	8001312 <_vfiprintf_r+0x32>
 800130c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800130e:	f7ff feb1 	bl	8001074 <__retarget_lock_acquire_recursive>
 8001312:	89ab      	ldrh	r3, [r5, #12]
 8001314:	071b      	lsls	r3, r3, #28
 8001316:	d501      	bpl.n	800131c <_vfiprintf_r+0x3c>
 8001318:	692b      	ldr	r3, [r5, #16]
 800131a:	b9eb      	cbnz	r3, 8001358 <_vfiprintf_r+0x78>
 800131c:	4629      	mov	r1, r5
 800131e:	4630      	mov	r0, r6
 8001320:	f7ff fc82 	bl	8000c28 <__swsetup_r>
 8001324:	b1c0      	cbz	r0, 8001358 <_vfiprintf_r+0x78>
 8001326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001328:	07dc      	lsls	r4, r3, #31
 800132a:	d50e      	bpl.n	800134a <_vfiprintf_r+0x6a>
 800132c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001330:	b01d      	add	sp, #116	; 0x74
 8001332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001336:	4b7b      	ldr	r3, [pc, #492]	; (8001524 <_vfiprintf_r+0x244>)
 8001338:	429d      	cmp	r5, r3
 800133a:	d101      	bne.n	8001340 <_vfiprintf_r+0x60>
 800133c:	68b5      	ldr	r5, [r6, #8]
 800133e:	e7df      	b.n	8001300 <_vfiprintf_r+0x20>
 8001340:	4b79      	ldr	r3, [pc, #484]	; (8001528 <_vfiprintf_r+0x248>)
 8001342:	429d      	cmp	r5, r3
 8001344:	bf08      	it	eq
 8001346:	68f5      	ldreq	r5, [r6, #12]
 8001348:	e7da      	b.n	8001300 <_vfiprintf_r+0x20>
 800134a:	89ab      	ldrh	r3, [r5, #12]
 800134c:	0598      	lsls	r0, r3, #22
 800134e:	d4ed      	bmi.n	800132c <_vfiprintf_r+0x4c>
 8001350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001352:	f7ff fe90 	bl	8001076 <__retarget_lock_release_recursive>
 8001356:	e7e9      	b.n	800132c <_vfiprintf_r+0x4c>
 8001358:	2300      	movs	r3, #0
 800135a:	9309      	str	r3, [sp, #36]	; 0x24
 800135c:	2320      	movs	r3, #32
 800135e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001362:	f8cd 800c 	str.w	r8, [sp, #12]
 8001366:	2330      	movs	r3, #48	; 0x30
 8001368:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800152c <_vfiprintf_r+0x24c>
 800136c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001370:	f04f 0901 	mov.w	r9, #1
 8001374:	4623      	mov	r3, r4
 8001376:	469a      	mov	sl, r3
 8001378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800137c:	b10a      	cbz	r2, 8001382 <_vfiprintf_r+0xa2>
 800137e:	2a25      	cmp	r2, #37	; 0x25
 8001380:	d1f9      	bne.n	8001376 <_vfiprintf_r+0x96>
 8001382:	ebba 0b04 	subs.w	fp, sl, r4
 8001386:	d00b      	beq.n	80013a0 <_vfiprintf_r+0xc0>
 8001388:	465b      	mov	r3, fp
 800138a:	4622      	mov	r2, r4
 800138c:	4629      	mov	r1, r5
 800138e:	4630      	mov	r0, r6
 8001390:	f7ff ff93 	bl	80012ba <__sfputs_r>
 8001394:	3001      	adds	r0, #1
 8001396:	f000 80aa 	beq.w	80014ee <_vfiprintf_r+0x20e>
 800139a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800139c:	445a      	add	r2, fp
 800139e:	9209      	str	r2, [sp, #36]	; 0x24
 80013a0:	f89a 3000 	ldrb.w	r3, [sl]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80a2 	beq.w	80014ee <_vfiprintf_r+0x20e>
 80013aa:	2300      	movs	r3, #0
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013b4:	f10a 0a01 	add.w	sl, sl, #1
 80013b8:	9304      	str	r3, [sp, #16]
 80013ba:	9307      	str	r3, [sp, #28]
 80013bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80013c0:	931a      	str	r3, [sp, #104]	; 0x68
 80013c2:	4654      	mov	r4, sl
 80013c4:	2205      	movs	r2, #5
 80013c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013ca:	4858      	ldr	r0, [pc, #352]	; (800152c <_vfiprintf_r+0x24c>)
 80013cc:	f7fe ff10 	bl	80001f0 <memchr>
 80013d0:	9a04      	ldr	r2, [sp, #16]
 80013d2:	b9d8      	cbnz	r0, 800140c <_vfiprintf_r+0x12c>
 80013d4:	06d1      	lsls	r1, r2, #27
 80013d6:	bf44      	itt	mi
 80013d8:	2320      	movmi	r3, #32
 80013da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80013de:	0713      	lsls	r3, r2, #28
 80013e0:	bf44      	itt	mi
 80013e2:	232b      	movmi	r3, #43	; 0x2b
 80013e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80013e8:	f89a 3000 	ldrb.w	r3, [sl]
 80013ec:	2b2a      	cmp	r3, #42	; 0x2a
 80013ee:	d015      	beq.n	800141c <_vfiprintf_r+0x13c>
 80013f0:	9a07      	ldr	r2, [sp, #28]
 80013f2:	4654      	mov	r4, sl
 80013f4:	2000      	movs	r0, #0
 80013f6:	f04f 0c0a 	mov.w	ip, #10
 80013fa:	4621      	mov	r1, r4
 80013fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001400:	3b30      	subs	r3, #48	; 0x30
 8001402:	2b09      	cmp	r3, #9
 8001404:	d94e      	bls.n	80014a4 <_vfiprintf_r+0x1c4>
 8001406:	b1b0      	cbz	r0, 8001436 <_vfiprintf_r+0x156>
 8001408:	9207      	str	r2, [sp, #28]
 800140a:	e014      	b.n	8001436 <_vfiprintf_r+0x156>
 800140c:	eba0 0308 	sub.w	r3, r0, r8
 8001410:	fa09 f303 	lsl.w	r3, r9, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	9304      	str	r3, [sp, #16]
 8001418:	46a2      	mov	sl, r4
 800141a:	e7d2      	b.n	80013c2 <_vfiprintf_r+0xe2>
 800141c:	9b03      	ldr	r3, [sp, #12]
 800141e:	1d19      	adds	r1, r3, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	9103      	str	r1, [sp, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	bfbb      	ittet	lt
 8001428:	425b      	neglt	r3, r3
 800142a:	f042 0202 	orrlt.w	r2, r2, #2
 800142e:	9307      	strge	r3, [sp, #28]
 8001430:	9307      	strlt	r3, [sp, #28]
 8001432:	bfb8      	it	lt
 8001434:	9204      	strlt	r2, [sp, #16]
 8001436:	7823      	ldrb	r3, [r4, #0]
 8001438:	2b2e      	cmp	r3, #46	; 0x2e
 800143a:	d10c      	bne.n	8001456 <_vfiprintf_r+0x176>
 800143c:	7863      	ldrb	r3, [r4, #1]
 800143e:	2b2a      	cmp	r3, #42	; 0x2a
 8001440:	d135      	bne.n	80014ae <_vfiprintf_r+0x1ce>
 8001442:	9b03      	ldr	r3, [sp, #12]
 8001444:	1d1a      	adds	r2, r3, #4
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	9203      	str	r2, [sp, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	bfb8      	it	lt
 800144e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001452:	3402      	adds	r4, #2
 8001454:	9305      	str	r3, [sp, #20]
 8001456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800153c <_vfiprintf_r+0x25c>
 800145a:	7821      	ldrb	r1, [r4, #0]
 800145c:	2203      	movs	r2, #3
 800145e:	4650      	mov	r0, sl
 8001460:	f7fe fec6 	bl	80001f0 <memchr>
 8001464:	b140      	cbz	r0, 8001478 <_vfiprintf_r+0x198>
 8001466:	2340      	movs	r3, #64	; 0x40
 8001468:	eba0 000a 	sub.w	r0, r0, sl
 800146c:	fa03 f000 	lsl.w	r0, r3, r0
 8001470:	9b04      	ldr	r3, [sp, #16]
 8001472:	4303      	orrs	r3, r0
 8001474:	3401      	adds	r4, #1
 8001476:	9304      	str	r3, [sp, #16]
 8001478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800147c:	482c      	ldr	r0, [pc, #176]	; (8001530 <_vfiprintf_r+0x250>)
 800147e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001482:	2206      	movs	r2, #6
 8001484:	f7fe feb4 	bl	80001f0 <memchr>
 8001488:	2800      	cmp	r0, #0
 800148a:	d03f      	beq.n	800150c <_vfiprintf_r+0x22c>
 800148c:	4b29      	ldr	r3, [pc, #164]	; (8001534 <_vfiprintf_r+0x254>)
 800148e:	bb1b      	cbnz	r3, 80014d8 <_vfiprintf_r+0x1f8>
 8001490:	9b03      	ldr	r3, [sp, #12]
 8001492:	3307      	adds	r3, #7
 8001494:	f023 0307 	bic.w	r3, r3, #7
 8001498:	3308      	adds	r3, #8
 800149a:	9303      	str	r3, [sp, #12]
 800149c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800149e:	443b      	add	r3, r7
 80014a0:	9309      	str	r3, [sp, #36]	; 0x24
 80014a2:	e767      	b.n	8001374 <_vfiprintf_r+0x94>
 80014a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80014a8:	460c      	mov	r4, r1
 80014aa:	2001      	movs	r0, #1
 80014ac:	e7a5      	b.n	80013fa <_vfiprintf_r+0x11a>
 80014ae:	2300      	movs	r3, #0
 80014b0:	3401      	adds	r4, #1
 80014b2:	9305      	str	r3, [sp, #20]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f04f 0c0a 	mov.w	ip, #10
 80014ba:	4620      	mov	r0, r4
 80014bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014c0:	3a30      	subs	r2, #48	; 0x30
 80014c2:	2a09      	cmp	r2, #9
 80014c4:	d903      	bls.n	80014ce <_vfiprintf_r+0x1ee>
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0c5      	beq.n	8001456 <_vfiprintf_r+0x176>
 80014ca:	9105      	str	r1, [sp, #20]
 80014cc:	e7c3      	b.n	8001456 <_vfiprintf_r+0x176>
 80014ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80014d2:	4604      	mov	r4, r0
 80014d4:	2301      	movs	r3, #1
 80014d6:	e7f0      	b.n	80014ba <_vfiprintf_r+0x1da>
 80014d8:	ab03      	add	r3, sp, #12
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	462a      	mov	r2, r5
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <_vfiprintf_r+0x258>)
 80014e0:	a904      	add	r1, sp, #16
 80014e2:	4630      	mov	r0, r6
 80014e4:	f3af 8000 	nop.w
 80014e8:	4607      	mov	r7, r0
 80014ea:	1c78      	adds	r0, r7, #1
 80014ec:	d1d6      	bne.n	800149c <_vfiprintf_r+0x1bc>
 80014ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014f0:	07d9      	lsls	r1, r3, #31
 80014f2:	d405      	bmi.n	8001500 <_vfiprintf_r+0x220>
 80014f4:	89ab      	ldrh	r3, [r5, #12]
 80014f6:	059a      	lsls	r2, r3, #22
 80014f8:	d402      	bmi.n	8001500 <_vfiprintf_r+0x220>
 80014fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80014fc:	f7ff fdbb 	bl	8001076 <__retarget_lock_release_recursive>
 8001500:	89ab      	ldrh	r3, [r5, #12]
 8001502:	065b      	lsls	r3, r3, #25
 8001504:	f53f af12 	bmi.w	800132c <_vfiprintf_r+0x4c>
 8001508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800150a:	e711      	b.n	8001330 <_vfiprintf_r+0x50>
 800150c:	ab03      	add	r3, sp, #12
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	462a      	mov	r2, r5
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <_vfiprintf_r+0x258>)
 8001514:	a904      	add	r1, sp, #16
 8001516:	4630      	mov	r0, r6
 8001518:	f000 f880 	bl	800161c <_printf_i>
 800151c:	e7e4      	b.n	80014e8 <_vfiprintf_r+0x208>
 800151e:	bf00      	nop
 8001520:	08001b5c 	.word	0x08001b5c
 8001524:	08001b7c 	.word	0x08001b7c
 8001528:	08001b3c 	.word	0x08001b3c
 800152c:	08001b9c 	.word	0x08001b9c
 8001530:	08001ba6 	.word	0x08001ba6
 8001534:	00000000 	.word	0x00000000
 8001538:	080012bb 	.word	0x080012bb
 800153c:	08001ba2 	.word	0x08001ba2

08001540 <_printf_common>:
 8001540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001544:	4616      	mov	r6, r2
 8001546:	4699      	mov	r9, r3
 8001548:	688a      	ldr	r2, [r1, #8]
 800154a:	690b      	ldr	r3, [r1, #16]
 800154c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001550:	4293      	cmp	r3, r2
 8001552:	bfb8      	it	lt
 8001554:	4613      	movlt	r3, r2
 8001556:	6033      	str	r3, [r6, #0]
 8001558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800155c:	4607      	mov	r7, r0
 800155e:	460c      	mov	r4, r1
 8001560:	b10a      	cbz	r2, 8001566 <_printf_common+0x26>
 8001562:	3301      	adds	r3, #1
 8001564:	6033      	str	r3, [r6, #0]
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	0699      	lsls	r1, r3, #26
 800156a:	bf42      	ittt	mi
 800156c:	6833      	ldrmi	r3, [r6, #0]
 800156e:	3302      	addmi	r3, #2
 8001570:	6033      	strmi	r3, [r6, #0]
 8001572:	6825      	ldr	r5, [r4, #0]
 8001574:	f015 0506 	ands.w	r5, r5, #6
 8001578:	d106      	bne.n	8001588 <_printf_common+0x48>
 800157a:	f104 0a19 	add.w	sl, r4, #25
 800157e:	68e3      	ldr	r3, [r4, #12]
 8001580:	6832      	ldr	r2, [r6, #0]
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	42ab      	cmp	r3, r5
 8001586:	dc26      	bgt.n	80015d6 <_printf_common+0x96>
 8001588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800158c:	1e13      	subs	r3, r2, #0
 800158e:	6822      	ldr	r2, [r4, #0]
 8001590:	bf18      	it	ne
 8001592:	2301      	movne	r3, #1
 8001594:	0692      	lsls	r2, r2, #26
 8001596:	d42b      	bmi.n	80015f0 <_printf_common+0xb0>
 8001598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800159c:	4649      	mov	r1, r9
 800159e:	4638      	mov	r0, r7
 80015a0:	47c0      	blx	r8
 80015a2:	3001      	adds	r0, #1
 80015a4:	d01e      	beq.n	80015e4 <_printf_common+0xa4>
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	68e5      	ldr	r5, [r4, #12]
 80015aa:	6832      	ldr	r2, [r6, #0]
 80015ac:	f003 0306 	and.w	r3, r3, #6
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	bf08      	it	eq
 80015b4:	1aad      	subeq	r5, r5, r2
 80015b6:	68a3      	ldr	r3, [r4, #8]
 80015b8:	6922      	ldr	r2, [r4, #16]
 80015ba:	bf0c      	ite	eq
 80015bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015c0:	2500      	movne	r5, #0
 80015c2:	4293      	cmp	r3, r2
 80015c4:	bfc4      	itt	gt
 80015c6:	1a9b      	subgt	r3, r3, r2
 80015c8:	18ed      	addgt	r5, r5, r3
 80015ca:	2600      	movs	r6, #0
 80015cc:	341a      	adds	r4, #26
 80015ce:	42b5      	cmp	r5, r6
 80015d0:	d11a      	bne.n	8001608 <_printf_common+0xc8>
 80015d2:	2000      	movs	r0, #0
 80015d4:	e008      	b.n	80015e8 <_printf_common+0xa8>
 80015d6:	2301      	movs	r3, #1
 80015d8:	4652      	mov	r2, sl
 80015da:	4649      	mov	r1, r9
 80015dc:	4638      	mov	r0, r7
 80015de:	47c0      	blx	r8
 80015e0:	3001      	adds	r0, #1
 80015e2:	d103      	bne.n	80015ec <_printf_common+0xac>
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015ec:	3501      	adds	r5, #1
 80015ee:	e7c6      	b.n	800157e <_printf_common+0x3e>
 80015f0:	18e1      	adds	r1, r4, r3
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	2030      	movs	r0, #48	; 0x30
 80015f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80015fa:	4422      	add	r2, r4
 80015fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001604:	3302      	adds	r3, #2
 8001606:	e7c7      	b.n	8001598 <_printf_common+0x58>
 8001608:	2301      	movs	r3, #1
 800160a:	4622      	mov	r2, r4
 800160c:	4649      	mov	r1, r9
 800160e:	4638      	mov	r0, r7
 8001610:	47c0      	blx	r8
 8001612:	3001      	adds	r0, #1
 8001614:	d0e6      	beq.n	80015e4 <_printf_common+0xa4>
 8001616:	3601      	adds	r6, #1
 8001618:	e7d9      	b.n	80015ce <_printf_common+0x8e>
	...

0800161c <_printf_i>:
 800161c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001620:	460c      	mov	r4, r1
 8001622:	4691      	mov	r9, r2
 8001624:	7e27      	ldrb	r7, [r4, #24]
 8001626:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001628:	2f78      	cmp	r7, #120	; 0x78
 800162a:	4680      	mov	r8, r0
 800162c:	469a      	mov	sl, r3
 800162e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001632:	d807      	bhi.n	8001644 <_printf_i+0x28>
 8001634:	2f62      	cmp	r7, #98	; 0x62
 8001636:	d80a      	bhi.n	800164e <_printf_i+0x32>
 8001638:	2f00      	cmp	r7, #0
 800163a:	f000 80d8 	beq.w	80017ee <_printf_i+0x1d2>
 800163e:	2f58      	cmp	r7, #88	; 0x58
 8001640:	f000 80a3 	beq.w	800178a <_printf_i+0x16e>
 8001644:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800164c:	e03a      	b.n	80016c4 <_printf_i+0xa8>
 800164e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001652:	2b15      	cmp	r3, #21
 8001654:	d8f6      	bhi.n	8001644 <_printf_i+0x28>
 8001656:	a001      	add	r0, pc, #4	; (adr r0, 800165c <_printf_i+0x40>)
 8001658:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800165c:	080016b5 	.word	0x080016b5
 8001660:	080016c9 	.word	0x080016c9
 8001664:	08001645 	.word	0x08001645
 8001668:	08001645 	.word	0x08001645
 800166c:	08001645 	.word	0x08001645
 8001670:	08001645 	.word	0x08001645
 8001674:	080016c9 	.word	0x080016c9
 8001678:	08001645 	.word	0x08001645
 800167c:	08001645 	.word	0x08001645
 8001680:	08001645 	.word	0x08001645
 8001684:	08001645 	.word	0x08001645
 8001688:	080017d5 	.word	0x080017d5
 800168c:	080016f9 	.word	0x080016f9
 8001690:	080017b7 	.word	0x080017b7
 8001694:	08001645 	.word	0x08001645
 8001698:	08001645 	.word	0x08001645
 800169c:	080017f7 	.word	0x080017f7
 80016a0:	08001645 	.word	0x08001645
 80016a4:	080016f9 	.word	0x080016f9
 80016a8:	08001645 	.word	0x08001645
 80016ac:	08001645 	.word	0x08001645
 80016b0:	080017bf 	.word	0x080017bf
 80016b4:	680b      	ldr	r3, [r1, #0]
 80016b6:	1d1a      	adds	r2, r3, #4
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	600a      	str	r2, [r1, #0]
 80016bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80016c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0a3      	b.n	8001810 <_printf_i+0x1f4>
 80016c8:	6825      	ldr	r5, [r4, #0]
 80016ca:	6808      	ldr	r0, [r1, #0]
 80016cc:	062e      	lsls	r6, r5, #24
 80016ce:	f100 0304 	add.w	r3, r0, #4
 80016d2:	d50a      	bpl.n	80016ea <_printf_i+0xce>
 80016d4:	6805      	ldr	r5, [r0, #0]
 80016d6:	600b      	str	r3, [r1, #0]
 80016d8:	2d00      	cmp	r5, #0
 80016da:	da03      	bge.n	80016e4 <_printf_i+0xc8>
 80016dc:	232d      	movs	r3, #45	; 0x2d
 80016de:	426d      	negs	r5, r5
 80016e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80016e4:	485e      	ldr	r0, [pc, #376]	; (8001860 <_printf_i+0x244>)
 80016e6:	230a      	movs	r3, #10
 80016e8:	e019      	b.n	800171e <_printf_i+0x102>
 80016ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80016ee:	6805      	ldr	r5, [r0, #0]
 80016f0:	600b      	str	r3, [r1, #0]
 80016f2:	bf18      	it	ne
 80016f4:	b22d      	sxthne	r5, r5
 80016f6:	e7ef      	b.n	80016d8 <_printf_i+0xbc>
 80016f8:	680b      	ldr	r3, [r1, #0]
 80016fa:	6825      	ldr	r5, [r4, #0]
 80016fc:	1d18      	adds	r0, r3, #4
 80016fe:	6008      	str	r0, [r1, #0]
 8001700:	0628      	lsls	r0, r5, #24
 8001702:	d501      	bpl.n	8001708 <_printf_i+0xec>
 8001704:	681d      	ldr	r5, [r3, #0]
 8001706:	e002      	b.n	800170e <_printf_i+0xf2>
 8001708:	0669      	lsls	r1, r5, #25
 800170a:	d5fb      	bpl.n	8001704 <_printf_i+0xe8>
 800170c:	881d      	ldrh	r5, [r3, #0]
 800170e:	4854      	ldr	r0, [pc, #336]	; (8001860 <_printf_i+0x244>)
 8001710:	2f6f      	cmp	r7, #111	; 0x6f
 8001712:	bf0c      	ite	eq
 8001714:	2308      	moveq	r3, #8
 8001716:	230a      	movne	r3, #10
 8001718:	2100      	movs	r1, #0
 800171a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800171e:	6866      	ldr	r6, [r4, #4]
 8001720:	60a6      	str	r6, [r4, #8]
 8001722:	2e00      	cmp	r6, #0
 8001724:	bfa2      	ittt	ge
 8001726:	6821      	ldrge	r1, [r4, #0]
 8001728:	f021 0104 	bicge.w	r1, r1, #4
 800172c:	6021      	strge	r1, [r4, #0]
 800172e:	b90d      	cbnz	r5, 8001734 <_printf_i+0x118>
 8001730:	2e00      	cmp	r6, #0
 8001732:	d04d      	beq.n	80017d0 <_printf_i+0x1b4>
 8001734:	4616      	mov	r6, r2
 8001736:	fbb5 f1f3 	udiv	r1, r5, r3
 800173a:	fb03 5711 	mls	r7, r3, r1, r5
 800173e:	5dc7      	ldrb	r7, [r0, r7]
 8001740:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001744:	462f      	mov	r7, r5
 8001746:	42bb      	cmp	r3, r7
 8001748:	460d      	mov	r5, r1
 800174a:	d9f4      	bls.n	8001736 <_printf_i+0x11a>
 800174c:	2b08      	cmp	r3, #8
 800174e:	d10b      	bne.n	8001768 <_printf_i+0x14c>
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	07df      	lsls	r7, r3, #31
 8001754:	d508      	bpl.n	8001768 <_printf_i+0x14c>
 8001756:	6923      	ldr	r3, [r4, #16]
 8001758:	6861      	ldr	r1, [r4, #4]
 800175a:	4299      	cmp	r1, r3
 800175c:	bfde      	ittt	le
 800175e:	2330      	movle	r3, #48	; 0x30
 8001760:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001764:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8001768:	1b92      	subs	r2, r2, r6
 800176a:	6122      	str	r2, [r4, #16]
 800176c:	f8cd a000 	str.w	sl, [sp]
 8001770:	464b      	mov	r3, r9
 8001772:	aa03      	add	r2, sp, #12
 8001774:	4621      	mov	r1, r4
 8001776:	4640      	mov	r0, r8
 8001778:	f7ff fee2 	bl	8001540 <_printf_common>
 800177c:	3001      	adds	r0, #1
 800177e:	d14c      	bne.n	800181a <_printf_i+0x1fe>
 8001780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001784:	b004      	add	sp, #16
 8001786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800178a:	4835      	ldr	r0, [pc, #212]	; (8001860 <_printf_i+0x244>)
 800178c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	680e      	ldr	r6, [r1, #0]
 8001794:	061f      	lsls	r7, r3, #24
 8001796:	f856 5b04 	ldr.w	r5, [r6], #4
 800179a:	600e      	str	r6, [r1, #0]
 800179c:	d514      	bpl.n	80017c8 <_printf_i+0x1ac>
 800179e:	07d9      	lsls	r1, r3, #31
 80017a0:	bf44      	itt	mi
 80017a2:	f043 0320 	orrmi.w	r3, r3, #32
 80017a6:	6023      	strmi	r3, [r4, #0]
 80017a8:	b91d      	cbnz	r5, 80017b2 <_printf_i+0x196>
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	f023 0320 	bic.w	r3, r3, #32
 80017b0:	6023      	str	r3, [r4, #0]
 80017b2:	2310      	movs	r3, #16
 80017b4:	e7b0      	b.n	8001718 <_printf_i+0xfc>
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	f043 0320 	orr.w	r3, r3, #32
 80017bc:	6023      	str	r3, [r4, #0]
 80017be:	2378      	movs	r3, #120	; 0x78
 80017c0:	4828      	ldr	r0, [pc, #160]	; (8001864 <_printf_i+0x248>)
 80017c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80017c6:	e7e3      	b.n	8001790 <_printf_i+0x174>
 80017c8:	065e      	lsls	r6, r3, #25
 80017ca:	bf48      	it	mi
 80017cc:	b2ad      	uxthmi	r5, r5
 80017ce:	e7e6      	b.n	800179e <_printf_i+0x182>
 80017d0:	4616      	mov	r6, r2
 80017d2:	e7bb      	b.n	800174c <_printf_i+0x130>
 80017d4:	680b      	ldr	r3, [r1, #0]
 80017d6:	6826      	ldr	r6, [r4, #0]
 80017d8:	6960      	ldr	r0, [r4, #20]
 80017da:	1d1d      	adds	r5, r3, #4
 80017dc:	600d      	str	r5, [r1, #0]
 80017de:	0635      	lsls	r5, r6, #24
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	d501      	bpl.n	80017e8 <_printf_i+0x1cc>
 80017e4:	6018      	str	r0, [r3, #0]
 80017e6:	e002      	b.n	80017ee <_printf_i+0x1d2>
 80017e8:	0671      	lsls	r1, r6, #25
 80017ea:	d5fb      	bpl.n	80017e4 <_printf_i+0x1c8>
 80017ec:	8018      	strh	r0, [r3, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	6123      	str	r3, [r4, #16]
 80017f2:	4616      	mov	r6, r2
 80017f4:	e7ba      	b.n	800176c <_printf_i+0x150>
 80017f6:	680b      	ldr	r3, [r1, #0]
 80017f8:	1d1a      	adds	r2, r3, #4
 80017fa:	600a      	str	r2, [r1, #0]
 80017fc:	681e      	ldr	r6, [r3, #0]
 80017fe:	6862      	ldr	r2, [r4, #4]
 8001800:	2100      	movs	r1, #0
 8001802:	4630      	mov	r0, r6
 8001804:	f7fe fcf4 	bl	80001f0 <memchr>
 8001808:	b108      	cbz	r0, 800180e <_printf_i+0x1f2>
 800180a:	1b80      	subs	r0, r0, r6
 800180c:	6060      	str	r0, [r4, #4]
 800180e:	6863      	ldr	r3, [r4, #4]
 8001810:	6123      	str	r3, [r4, #16]
 8001812:	2300      	movs	r3, #0
 8001814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001818:	e7a8      	b.n	800176c <_printf_i+0x150>
 800181a:	6923      	ldr	r3, [r4, #16]
 800181c:	4632      	mov	r2, r6
 800181e:	4649      	mov	r1, r9
 8001820:	4640      	mov	r0, r8
 8001822:	47d0      	blx	sl
 8001824:	3001      	adds	r0, #1
 8001826:	d0ab      	beq.n	8001780 <_printf_i+0x164>
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	079b      	lsls	r3, r3, #30
 800182c:	d413      	bmi.n	8001856 <_printf_i+0x23a>
 800182e:	68e0      	ldr	r0, [r4, #12]
 8001830:	9b03      	ldr	r3, [sp, #12]
 8001832:	4298      	cmp	r0, r3
 8001834:	bfb8      	it	lt
 8001836:	4618      	movlt	r0, r3
 8001838:	e7a4      	b.n	8001784 <_printf_i+0x168>
 800183a:	2301      	movs	r3, #1
 800183c:	4632      	mov	r2, r6
 800183e:	4649      	mov	r1, r9
 8001840:	4640      	mov	r0, r8
 8001842:	47d0      	blx	sl
 8001844:	3001      	adds	r0, #1
 8001846:	d09b      	beq.n	8001780 <_printf_i+0x164>
 8001848:	3501      	adds	r5, #1
 800184a:	68e3      	ldr	r3, [r4, #12]
 800184c:	9903      	ldr	r1, [sp, #12]
 800184e:	1a5b      	subs	r3, r3, r1
 8001850:	42ab      	cmp	r3, r5
 8001852:	dcf2      	bgt.n	800183a <_printf_i+0x21e>
 8001854:	e7eb      	b.n	800182e <_printf_i+0x212>
 8001856:	2500      	movs	r5, #0
 8001858:	f104 0619 	add.w	r6, r4, #25
 800185c:	e7f5      	b.n	800184a <_printf_i+0x22e>
 800185e:	bf00      	nop
 8001860:	08001bad 	.word	0x08001bad
 8001864:	08001bbe 	.word	0x08001bbe

08001868 <_sbrk_r>:
 8001868:	b538      	push	{r3, r4, r5, lr}
 800186a:	4d06      	ldr	r5, [pc, #24]	; (8001884 <_sbrk_r+0x1c>)
 800186c:	2300      	movs	r3, #0
 800186e:	4604      	mov	r4, r0
 8001870:	4608      	mov	r0, r1
 8001872:	602b      	str	r3, [r5, #0]
 8001874:	f7ff f866 	bl	8000944 <_sbrk>
 8001878:	1c43      	adds	r3, r0, #1
 800187a:	d102      	bne.n	8001882 <_sbrk_r+0x1a>
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	b103      	cbz	r3, 8001882 <_sbrk_r+0x1a>
 8001880:	6023      	str	r3, [r4, #0]
 8001882:	bd38      	pop	{r3, r4, r5, pc}
 8001884:	200000ec 	.word	0x200000ec

08001888 <__sread>:
 8001888:	b510      	push	{r4, lr}
 800188a:	460c      	mov	r4, r1
 800188c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001890:	f000 f8a0 	bl	80019d4 <_read_r>
 8001894:	2800      	cmp	r0, #0
 8001896:	bfab      	itete	ge
 8001898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800189a:	89a3      	ldrhlt	r3, [r4, #12]
 800189c:	181b      	addge	r3, r3, r0
 800189e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80018a2:	bfac      	ite	ge
 80018a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80018a6:	81a3      	strhlt	r3, [r4, #12]
 80018a8:	bd10      	pop	{r4, pc}

080018aa <__swrite>:
 80018aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ae:	461f      	mov	r7, r3
 80018b0:	898b      	ldrh	r3, [r1, #12]
 80018b2:	05db      	lsls	r3, r3, #23
 80018b4:	4605      	mov	r5, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	4616      	mov	r6, r2
 80018ba:	d505      	bpl.n	80018c8 <__swrite+0x1e>
 80018bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018c0:	2302      	movs	r3, #2
 80018c2:	2200      	movs	r2, #0
 80018c4:	f000 f868 	bl	8001998 <_lseek_r>
 80018c8:	89a3      	ldrh	r3, [r4, #12]
 80018ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018d2:	81a3      	strh	r3, [r4, #12]
 80018d4:	4632      	mov	r2, r6
 80018d6:	463b      	mov	r3, r7
 80018d8:	4628      	mov	r0, r5
 80018da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018de:	f000 b817 	b.w	8001910 <_write_r>

080018e2 <__sseek>:
 80018e2:	b510      	push	{r4, lr}
 80018e4:	460c      	mov	r4, r1
 80018e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ea:	f000 f855 	bl	8001998 <_lseek_r>
 80018ee:	1c43      	adds	r3, r0, #1
 80018f0:	89a3      	ldrh	r3, [r4, #12]
 80018f2:	bf15      	itete	ne
 80018f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80018f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80018fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80018fe:	81a3      	strheq	r3, [r4, #12]
 8001900:	bf18      	it	ne
 8001902:	81a3      	strhne	r3, [r4, #12]
 8001904:	bd10      	pop	{r4, pc}

08001906 <__sclose>:
 8001906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800190a:	f000 b813 	b.w	8001934 <_close_r>
	...

08001910 <_write_r>:
 8001910:	b538      	push	{r3, r4, r5, lr}
 8001912:	4d07      	ldr	r5, [pc, #28]	; (8001930 <_write_r+0x20>)
 8001914:	4604      	mov	r4, r0
 8001916:	4608      	mov	r0, r1
 8001918:	4611      	mov	r1, r2
 800191a:	2200      	movs	r2, #0
 800191c:	602a      	str	r2, [r5, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	f7fe ffc3 	bl	80008aa <_write>
 8001924:	1c43      	adds	r3, r0, #1
 8001926:	d102      	bne.n	800192e <_write_r+0x1e>
 8001928:	682b      	ldr	r3, [r5, #0]
 800192a:	b103      	cbz	r3, 800192e <_write_r+0x1e>
 800192c:	6023      	str	r3, [r4, #0]
 800192e:	bd38      	pop	{r3, r4, r5, pc}
 8001930:	200000ec 	.word	0x200000ec

08001934 <_close_r>:
 8001934:	b538      	push	{r3, r4, r5, lr}
 8001936:	4d06      	ldr	r5, [pc, #24]	; (8001950 <_close_r+0x1c>)
 8001938:	2300      	movs	r3, #0
 800193a:	4604      	mov	r4, r0
 800193c:	4608      	mov	r0, r1
 800193e:	602b      	str	r3, [r5, #0]
 8001940:	f7fe ffcf 	bl	80008e2 <_close>
 8001944:	1c43      	adds	r3, r0, #1
 8001946:	d102      	bne.n	800194e <_close_r+0x1a>
 8001948:	682b      	ldr	r3, [r5, #0]
 800194a:	b103      	cbz	r3, 800194e <_close_r+0x1a>
 800194c:	6023      	str	r3, [r4, #0]
 800194e:	bd38      	pop	{r3, r4, r5, pc}
 8001950:	200000ec 	.word	0x200000ec

08001954 <_fstat_r>:
 8001954:	b538      	push	{r3, r4, r5, lr}
 8001956:	4d07      	ldr	r5, [pc, #28]	; (8001974 <_fstat_r+0x20>)
 8001958:	2300      	movs	r3, #0
 800195a:	4604      	mov	r4, r0
 800195c:	4608      	mov	r0, r1
 800195e:	4611      	mov	r1, r2
 8001960:	602b      	str	r3, [r5, #0]
 8001962:	f7fe ffc9 	bl	80008f8 <_fstat>
 8001966:	1c43      	adds	r3, r0, #1
 8001968:	d102      	bne.n	8001970 <_fstat_r+0x1c>
 800196a:	682b      	ldr	r3, [r5, #0]
 800196c:	b103      	cbz	r3, 8001970 <_fstat_r+0x1c>
 800196e:	6023      	str	r3, [r4, #0]
 8001970:	bd38      	pop	{r3, r4, r5, pc}
 8001972:	bf00      	nop
 8001974:	200000ec 	.word	0x200000ec

08001978 <_isatty_r>:
 8001978:	b538      	push	{r3, r4, r5, lr}
 800197a:	4d06      	ldr	r5, [pc, #24]	; (8001994 <_isatty_r+0x1c>)
 800197c:	2300      	movs	r3, #0
 800197e:	4604      	mov	r4, r0
 8001980:	4608      	mov	r0, r1
 8001982:	602b      	str	r3, [r5, #0]
 8001984:	f7fe ffc7 	bl	8000916 <_isatty>
 8001988:	1c43      	adds	r3, r0, #1
 800198a:	d102      	bne.n	8001992 <_isatty_r+0x1a>
 800198c:	682b      	ldr	r3, [r5, #0]
 800198e:	b103      	cbz	r3, 8001992 <_isatty_r+0x1a>
 8001990:	6023      	str	r3, [r4, #0]
 8001992:	bd38      	pop	{r3, r4, r5, pc}
 8001994:	200000ec 	.word	0x200000ec

08001998 <_lseek_r>:
 8001998:	b538      	push	{r3, r4, r5, lr}
 800199a:	4d07      	ldr	r5, [pc, #28]	; (80019b8 <_lseek_r+0x20>)
 800199c:	4604      	mov	r4, r0
 800199e:	4608      	mov	r0, r1
 80019a0:	4611      	mov	r1, r2
 80019a2:	2200      	movs	r2, #0
 80019a4:	602a      	str	r2, [r5, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	f7fe ffbf 	bl	800092a <_lseek>
 80019ac:	1c43      	adds	r3, r0, #1
 80019ae:	d102      	bne.n	80019b6 <_lseek_r+0x1e>
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	b103      	cbz	r3, 80019b6 <_lseek_r+0x1e>
 80019b4:	6023      	str	r3, [r4, #0]
 80019b6:	bd38      	pop	{r3, r4, r5, pc}
 80019b8:	200000ec 	.word	0x200000ec

080019bc <__malloc_lock>:
 80019bc:	4801      	ldr	r0, [pc, #4]	; (80019c4 <__malloc_lock+0x8>)
 80019be:	f7ff bb59 	b.w	8001074 <__retarget_lock_acquire_recursive>
 80019c2:	bf00      	nop
 80019c4:	200000e4 	.word	0x200000e4

080019c8 <__malloc_unlock>:
 80019c8:	4801      	ldr	r0, [pc, #4]	; (80019d0 <__malloc_unlock+0x8>)
 80019ca:	f7ff bb54 	b.w	8001076 <__retarget_lock_release_recursive>
 80019ce:	bf00      	nop
 80019d0:	200000e4 	.word	0x200000e4

080019d4 <_read_r>:
 80019d4:	b538      	push	{r3, r4, r5, lr}
 80019d6:	4d07      	ldr	r5, [pc, #28]	; (80019f4 <_read_r+0x20>)
 80019d8:	4604      	mov	r4, r0
 80019da:	4608      	mov	r0, r1
 80019dc:	4611      	mov	r1, r2
 80019de:	2200      	movs	r2, #0
 80019e0:	602a      	str	r2, [r5, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	f7fe ff44 	bl	8000870 <_read>
 80019e8:	1c43      	adds	r3, r0, #1
 80019ea:	d102      	bne.n	80019f2 <_read_r+0x1e>
 80019ec:	682b      	ldr	r3, [r5, #0]
 80019ee:	b103      	cbz	r3, 80019f2 <_read_r+0x1e>
 80019f0:	6023      	str	r3, [r4, #0]
 80019f2:	bd38      	pop	{r3, r4, r5, pc}
 80019f4:	200000ec 	.word	0x200000ec

080019f8 <_init>:
 80019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fa:	bf00      	nop
 80019fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fe:	bc08      	pop	{r3}
 8001a00:	469e      	mov	lr, r3
 8001a02:	4770      	bx	lr

08001a04 <_fini>:
 8001a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a06:	bf00      	nop
 8001a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0a:	bc08      	pop	{r3}
 8001a0c:	469e      	mov	lr, r3
 8001a0e:	4770      	bx	lr
