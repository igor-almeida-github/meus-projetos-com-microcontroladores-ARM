
007Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005678  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005914  08005914  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005914  08005914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800591c  0800591c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005920  08005920  00015920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a81c  2000001c  08005940  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a838  08005940  0002a838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a8a  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3e  00000000  00000000  00036ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00039918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  0003aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002122b  00000000  00000000  0003ba50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001339e  00000000  00000000  0005cc7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6988  00000000  00000000  00070019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001469a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d4  00000000  00000000  001469f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057f0 	.word	0x080057f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080057f0 	.word	0x080057f0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001a73c 	.word	0x2001a73c

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b96e 	b.w	8000568 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468c      	mov	ip, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8083 	bne.w	80003ba <__udivmoddi4+0x116>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d947      	bls.n	800034a <__udivmoddi4+0xa6>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	fa24 f000 	lsr.w	r0, r4, r0
 80002c8:	4091      	lsls	r1, r2
 80002ca:	4097      	lsls	r7, r2
 80002cc:	ea40 0c01 	orr.w	ip, r0, r1
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbbc f6f8 	udiv	r6, ip, r8
 80002dc:	fa1f fe87 	uxth.w	lr, r7
 80002e0:	fb08 c116 	mls	r1, r8, r6, ip
 80002e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 8119 	bcs.w	800052c <__udivmoddi4+0x288>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8116 	bls.w	800052c <__udivmoddi4+0x288>
 8000300:	3e02      	subs	r6, #2
 8000302:	443b      	add	r3, r7
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fe0e 	mul.w	lr, r0, lr
 8000318:	45a6      	cmp	lr, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	f080 8105 	bcs.w	8000530 <__udivmoddi4+0x28c>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f240 8102 	bls.w	8000530 <__udivmoddi4+0x28c>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000334:	eba4 040e 	sub.w	r4, r4, lr
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xaa>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	2a00      	cmp	r2, #0
 8000354:	d150      	bne.n	80003f8 <__udivmoddi4+0x154>
 8000356:	1bcb      	subs	r3, r1, r7
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa1f f887 	uxth.w	r8, r7
 8000360:	2601      	movs	r6, #1
 8000362:	fbb3 fcfe 	udiv	ip, r3, lr
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000370:	fb08 f30c 	mul.w	r3, r8, ip
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000378:	1879      	adds	r1, r7, r1
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0xe2>
 8000380:	428b      	cmp	r3, r1
 8000382:	f200 80e9 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 8000386:	4684      	mov	ip, r0
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1110 	mls	r1, lr, r0, r1
 8000394:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x10c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x10a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80d9 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e7bf      	b.n	800033a <__udivmoddi4+0x96>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x12e>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80b1 	beq.w	8000526 <__udivmoddi4+0x282>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x1cc>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0x140>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80b8 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	468c      	mov	ip, r1
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0a8      	beq.n	8000344 <__udivmoddi4+0xa0>
 80003f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0xa0>
 80003f8:	f1c2 0320 	rsb	r3, r2, #32
 80003fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000400:	4097      	lsls	r7, r2
 8000402:	fa01 f002 	lsl.w	r0, r1, r2
 8000406:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040a:	40d9      	lsrs	r1, r3
 800040c:	4330      	orrs	r0, r6
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	fbb1 f6fe 	udiv	r6, r1, lr
 8000414:	fa1f f887 	uxth.w	r8, r7
 8000418:	fb0e 1116 	mls	r1, lr, r6, r1
 800041c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000420:	fb06 f108 	mul.w	r1, r6, r8
 8000424:	4299      	cmp	r1, r3
 8000426:	fa04 f402 	lsl.w	r4, r4, r2
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x19c>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000432:	f080 808d 	bcs.w	8000550 <__udivmoddi4+0x2ac>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 808a 	bls.w	8000550 <__udivmoddi4+0x2ac>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b281      	uxth	r1, r0
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000450:	fb00 f308 	mul.w	r3, r0, r8
 8000454:	428b      	cmp	r3, r1
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x1c4>
 8000458:	1879      	adds	r1, r7, r1
 800045a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045e:	d273      	bcs.n	8000548 <__udivmoddi4+0x2a4>
 8000460:	428b      	cmp	r3, r1
 8000462:	d971      	bls.n	8000548 <__udivmoddi4+0x2a4>
 8000464:	3802      	subs	r0, #2
 8000466:	4439      	add	r1, r7
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046e:	e778      	b.n	8000362 <__udivmoddi4+0xbe>
 8000470:	f1c6 0c20 	rsb	ip, r6, #32
 8000474:	fa03 f406 	lsl.w	r4, r3, r6
 8000478:	fa22 f30c 	lsr.w	r3, r2, ip
 800047c:	431c      	orrs	r4, r3
 800047e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800048a:	fa21 f10c 	lsr.w	r1, r1, ip
 800048e:	431f      	orrs	r7, r3
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fa1f f884 	uxth.w	r8, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a2:	fb09 fa08 	mul.w	sl, r9, r8
 80004a6:	458a      	cmp	sl, r1
 80004a8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ac:	fa00 f306 	lsl.w	r3, r0, r6
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x220>
 80004b2:	1861      	adds	r1, r4, r1
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b8:	d248      	bcs.n	800054c <__udivmoddi4+0x2a8>
 80004ba:	458a      	cmp	sl, r1
 80004bc:	d946      	bls.n	800054c <__udivmoddi4+0x2a8>
 80004be:	f1a9 0902 	sub.w	r9, r9, #2
 80004c2:	4421      	add	r1, r4
 80004c4:	eba1 010a 	sub.w	r1, r1, sl
 80004c8:	b2bf      	uxth	r7, r7
 80004ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d6:	fb00 f808 	mul.w	r8, r0, r8
 80004da:	45b8      	cmp	r8, r7
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x24a>
 80004de:	19e7      	adds	r7, r4, r7
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e4:	d22e      	bcs.n	8000544 <__udivmoddi4+0x2a0>
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d92c      	bls.n	8000544 <__udivmoddi4+0x2a0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4427      	add	r7, r4
 80004ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f2:	eba7 0708 	sub.w	r7, r7, r8
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	454f      	cmp	r7, r9
 80004fc:	46c6      	mov	lr, r8
 80004fe:	4649      	mov	r1, r9
 8000500:	d31a      	bcc.n	8000538 <__udivmoddi4+0x294>
 8000502:	d017      	beq.n	8000534 <__udivmoddi4+0x290>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x27a>
 8000506:	ebb3 020e 	subs.w	r2, r3, lr
 800050a:	eb67 0701 	sbc.w	r7, r7, r1
 800050e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000512:	40f2      	lsrs	r2, r6
 8000514:	ea4c 0202 	orr.w	r2, ip, r2
 8000518:	40f7      	lsrs	r7, r6
 800051a:	e9c5 2700 	strd	r2, r7, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e70b      	b.n	8000344 <__udivmoddi4+0xa0>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fd      	b.n	8000330 <__udivmoddi4+0x8c>
 8000534:	4543      	cmp	r3, r8
 8000536:	d2e5      	bcs.n	8000504 <__udivmoddi4+0x260>
 8000538:	ebb8 0e02 	subs.w	lr, r8, r2
 800053c:	eb69 0104 	sbc.w	r1, r9, r4
 8000540:	3801      	subs	r0, #1
 8000542:	e7df      	b.n	8000504 <__udivmoddi4+0x260>
 8000544:	4608      	mov	r0, r1
 8000546:	e7d2      	b.n	80004ee <__udivmoddi4+0x24a>
 8000548:	4660      	mov	r0, ip
 800054a:	e78d      	b.n	8000468 <__udivmoddi4+0x1c4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7b9      	b.n	80004c4 <__udivmoddi4+0x220>
 8000550:	4666      	mov	r6, ip
 8000552:	e775      	b.n	8000440 <__udivmoddi4+0x19c>
 8000554:	4630      	mov	r0, r6
 8000556:	e74a      	b.n	80003ee <__udivmoddi4+0x14a>
 8000558:	f1ac 0c02 	sub.w	ip, ip, #2
 800055c:	4439      	add	r1, r7
 800055e:	e713      	b.n	8000388 <__udivmoddi4+0xe4>
 8000560:	3802      	subs	r0, #2
 8000562:	443c      	add	r4, r7
 8000564:	e724      	b.n	80003b0 <__udivmoddi4+0x10c>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f103 0208 	add.w	r2, r3, #8
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000584:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f103 0208 	add.w	r2, r3, #8
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f103 0208 	add.w	r2, r3, #8
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005c6:	b480      	push	{r7}
 80005c8:	b085      	sub	sp, #20
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	683a      	ldr	r2, [r7, #0]
 80005ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	1c5a      	adds	r2, r3, #1
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800060e:	b480      	push	{r7}
 8000610:	b085      	sub	sp, #20
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	691b      	ldr	r3, [r3, #16]
 800061a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	6892      	ldr	r2, [r2, #8]
 8000624:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	6852      	ldr	r2, [r2, #4]
 800062e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	429a      	cmp	r2, r3
 8000638:	d103      	bne.n	8000642 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	1e5a      	subs	r2, r3, #1
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	681b      	ldr	r3, [r3, #0]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000662:	b580      	push	{r7, lr}
 8000664:	b08c      	sub	sp, #48	; 0x30
 8000666:	af04      	add	r7, sp, #16
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4613      	mov	r3, r2
 8000670:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4618      	mov	r0, r3
 8000678:	f001 f8e0 	bl	800183c <pvPortMalloc>
 800067c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00e      	beq.n	80006a2 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000684:	2058      	movs	r0, #88	; 0x58
 8000686:	f001 f8d9 	bl	800183c <pvPortMalloc>
 800068a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d003      	beq.n	800069a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	631a      	str	r2, [r3, #48]	; 0x30
 8000698:	e005      	b.n	80006a6 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800069a:	6978      	ldr	r0, [r7, #20]
 800069c:	f001 f9ae 	bl	80019fc <vPortFree>
 80006a0:	e001      	b.n	80006a6 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d013      	beq.n	80006d4 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80006ac:	88fa      	ldrh	r2, [r7, #6]
 80006ae:	2300      	movs	r3, #0
 80006b0:	9303      	str	r3, [sp, #12]
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	9302      	str	r3, [sp, #8]
 80006b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	68b9      	ldr	r1, [r7, #8]
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f000 f80e 	bl	80006e4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80006c8:	69f8      	ldr	r0, [r7, #28]
 80006ca:	f000 f8a1 	bl	8000810 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61bb      	str	r3, [r7, #24]
 80006d2:	e002      	b.n	80006da <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006d8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80006da:	69bb      	ldr	r3, [r7, #24]
    }
 80006dc:	4618      	mov	r0, r3
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80006f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	461a      	mov	r2, r3
 80006fc:	21a5      	movs	r1, #165	; 0xa5
 80006fe:	f005 f86f 	bl	80057e0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800070c:	3b01      	subs	r3, #1
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	f023 0307 	bic.w	r3, r3, #7
 800071a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	2b00      	cmp	r3, #0
 8000724:	d00a      	beq.n	800073c <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800072a:	f383 8811 	msr	BASEPRI, r3
 800072e:	f3bf 8f6f 	isb	sy
 8000732:	f3bf 8f4f 	dsb	sy
 8000736:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000738:	bf00      	nop
 800073a:	e7fe      	b.n	800073a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d01f      	beq.n	8000782 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
 8000746:	e012      	b.n	800076e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	4413      	add	r3, r2
 800074e:	7819      	ldrb	r1, [r3, #0]
 8000750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	4413      	add	r3, r2
 8000756:	3334      	adds	r3, #52	; 0x34
 8000758:	460a      	mov	r2, r1
 800075a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d006      	beq.n	8000776 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	3301      	adds	r3, #1
 800076c:	61fb      	str	r3, [r7, #28]
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	2b09      	cmp	r3, #9
 8000772:	d9e9      	bls.n	8000748 <prvInitialiseNewTask+0x64>
 8000774:	e000      	b.n	8000778 <prvInitialiseNewTask+0x94>
            {
                break;
 8000776:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800077a:	2200      	movs	r2, #0
 800077c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000780:	e003      	b.n	800078a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800078a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078c:	2b04      	cmp	r3, #4
 800078e:	d901      	bls.n	8000794 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000790:	2304      	movs	r3, #4
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800079a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800079c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800079e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80007a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a2:	2200      	movs	r2, #0
 80007a4:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80007a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a8:	3304      	adds	r3, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fefe 	bl	80005ac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80007b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b2:	3318      	adds	r3, #24
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fef9 	bl	80005ac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80007ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007be:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c2:	f1c3 0205 	rsb	r2, r3, #5
 80007c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80007ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80007d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d2:	3350      	adds	r3, #80	; 0x50
 80007d4:	2204      	movs	r2, #4
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f005 f801 	bl	80057e0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80007de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e0:	3354      	adds	r3, #84	; 0x54
 80007e2:	2201      	movs	r2, #1
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fffa 	bl	80057e0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	68f9      	ldr	r1, [r7, #12]
 80007f0:	69b8      	ldr	r0, [r7, #24]
 80007f2:	f000 fd4b 	bl	800128c <pxPortInitialiseStack>
 80007f6:	4602      	mov	r2, r0
 80007f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007fa:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80007fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000806:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000810:	b5b0      	push	{r4, r5, r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af02      	add	r7, sp, #8
 8000816:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000818:	f000 fee4 	bl	80015e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800081c:	4b3b      	ldr	r3, [pc, #236]	; (800090c <prvAddNewTaskToReadyList+0xfc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	4a3a      	ldr	r2, [pc, #232]	; (800090c <prvAddNewTaskToReadyList+0xfc>)
 8000824:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000826:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <prvAddNewTaskToReadyList+0x100>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d109      	bne.n	8000842 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800082e:	4a38      	ldr	r2, [pc, #224]	; (8000910 <prvAddNewTaskToReadyList+0x100>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000834:	4b35      	ldr	r3, [pc, #212]	; (800090c <prvAddNewTaskToReadyList+0xfc>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d110      	bne.n	800085e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800083c:	f000 fc7c 	bl	8001138 <prvInitialiseTaskLists>
 8000840:	e00d      	b.n	800085e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000842:	4b34      	ldr	r3, [pc, #208]	; (8000914 <prvAddNewTaskToReadyList+0x104>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d109      	bne.n	800085e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800084a:	4b31      	ldr	r3, [pc, #196]	; (8000910 <prvAddNewTaskToReadyList+0x100>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000854:	429a      	cmp	r2, r3
 8000856:	d802      	bhi.n	800085e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000858:	4a2d      	ldr	r2, [pc, #180]	; (8000910 <prvAddNewTaskToReadyList+0x100>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800085e:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <prvAddNewTaskToReadyList+0x108>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	4a2c      	ldr	r2, [pc, #176]	; (8000918 <prvAddNewTaskToReadyList+0x108>)
 8000866:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <prvAddNewTaskToReadyList+0x108>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d016      	beq.n	80008a4 <prvAddNewTaskToReadyList+0x94>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4618      	mov	r0, r3
 800087a:	f002 ff13 	bl	80036a4 <SEGGER_SYSVIEW_OnTaskCreate>
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	461d      	mov	r5, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	461c      	mov	r4, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	1ae3      	subs	r3, r4, r3
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	462b      	mov	r3, r5
 80008a0:	f001 fa72 	bl	8001d88 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 ff80 	bl	80037ac <SEGGER_SYSVIEW_OnTaskStartReady>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b0:	2201      	movs	r2, #1
 80008b2:	409a      	lsls	r2, r3
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <prvAddNewTaskToReadyList+0x10c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <prvAddNewTaskToReadyList+0x10c>)
 80008bc:	6013      	str	r3, [r2, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c2:	4613      	mov	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4a15      	ldr	r2, [pc, #84]	; (8000920 <prvAddNewTaskToReadyList+0x110>)
 80008cc:	441a      	add	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3304      	adds	r3, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4610      	mov	r0, r2
 80008d6:	f7ff fe76 	bl	80005c6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80008da:	f000 feb3 	bl	8001644 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <prvAddNewTaskToReadyList+0x104>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00e      	beq.n	8000904 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <prvAddNewTaskToReadyList+0x100>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <prvAddNewTaskToReadyList+0x114>)
 80008f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	f3bf 8f4f 	dsb	sy
 8000900:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bdb0      	pop	{r4, r5, r7, pc}
 800090c:	20000110 	.word	0x20000110
 8000910:	20000038 	.word	0x20000038
 8000914:	2000011c 	.word	0x2000011c
 8000918:	2000012c 	.word	0x2000012c
 800091c:	20000118 	.word	0x20000118
 8000920:	2000003c 	.word	0x2000003c
 8000924:	e000ed04 	.word	0xe000ed04

08000928 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8000930:	f000 fe58 	bl	80015e4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d102      	bne.n	8000940 <uxTaskPriorityGet+0x18>
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <uxTaskPriorityGet+0x30>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	e000      	b.n	8000942 <uxTaskPriorityGet+0x1a>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000948:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800094a:	f000 fe7b 	bl	8001644 <vPortExitCritical>

        return uxReturn;
 800094e:	68bb      	ldr	r3, [r7, #8]
    }
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000038 	.word	0x20000038

0800095c <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af02      	add	r7, sp, #8
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	2b04      	cmp	r3, #4
 800096e:	d90a      	bls.n	8000986 <vTaskPrioritySet+0x2a>
        __asm volatile
 8000970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000974:	f383 8811 	msr	BASEPRI, r3
 8000978:	f3bf 8f6f 	isb	sy
 800097c:	f3bf 8f4f 	dsb	sy
 8000980:	60fb      	str	r3, [r7, #12]
    }
 8000982:	bf00      	nop
 8000984:	e7fe      	b.n	8000984 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	2b04      	cmp	r3, #4
 800098a:	d901      	bls.n	8000990 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800098c:	2304      	movs	r3, #4
 800098e:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8000990:	f000 fe28 	bl	80015e4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d102      	bne.n	80009a0 <vTaskPrioritySet+0x44>
 800099a:	4b4c      	ldr	r3, [pc, #304]	; (8000acc <vTaskPrioritySet+0x170>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	e000      	b.n	80009a2 <vTaskPrioritySet+0x46>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 ff42 	bl	8003830 <SEGGER_SYSVIEW_ShrinkId>
 80009ac:	4603      	mov	r3, r0
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	2028      	movs	r0, #40	; 0x28
 80009b4:	f002 fabc 	bl	8002f30 <SEGGER_SYSVIEW_RecordU32x2>
 80009b8:	69b8      	ldr	r0, [r7, #24]
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c4:	461a      	mov	r2, r3
 80009c6:	2300      	movs	r3, #0
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	4613      	mov	r3, r2
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	f001 fa43 	bl	8001e58 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d6:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d06f      	beq.n	8000ac0 <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d90d      	bls.n	8000a04 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 80009e8:	4b38      	ldr	r3, [pc, #224]	; (8000acc <vTaskPrioritySet+0x170>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d00f      	beq.n	8000a12 <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80009f2:	4b36      	ldr	r3, [pc, #216]	; (8000acc <vTaskPrioritySet+0x170>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d309      	bcc.n	8000a12 <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61fb      	str	r3, [r7, #28]
 8000a02:	e006      	b.n	8000a12 <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8000a04:	4b31      	ldr	r3, [pc, #196]	; (8000acc <vTaskPrioritySet+0x170>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d101      	bne.n	8000a12 <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a16:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d102      	bne.n	8000a2a <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	db04      	blt.n	8000a42 <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	f1c3 0205 	rsb	r2, r3, #5
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	6959      	ldr	r1, [r3, #20]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4a1f      	ldr	r2, [pc, #124]	; (8000ad0 <vTaskPrioritySet+0x174>)
 8000a52:	4413      	add	r3, r2
 8000a54:	4299      	cmp	r1, r3
 8000a56:	d128      	bne.n	8000aaa <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fdd6 	bl	800060e <uxListRemove>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d109      	bne.n	8000a7c <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8000a68:	2201      	movs	r2, #1
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43da      	mvns	r2, r3
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <vTaskPrioritySet+0x178>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4013      	ands	r3, r2
 8000a78:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <vTaskPrioritySet+0x178>)
 8000a7a:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a80:	2201      	movs	r2, #1
 8000a82:	409a      	lsls	r2, r3
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <vTaskPrioritySet+0x178>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <vTaskPrioritySet+0x178>)
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a92:	4613      	mov	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <vTaskPrioritySet+0x174>)
 8000a9c:	441a      	add	r2, r3
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4610      	mov	r0, r2
 8000aa6:	f7ff fd8e 	bl	80005c6 <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d007      	beq.n	8000ac0 <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <vTaskPrioritySet+0x17c>)
 8000ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	f3bf 8f4f 	dsb	sy
 8000abc:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8000ac0:	f000 fdc0 	bl	8001644 <vPortExitCritical>
    }
 8000ac4:	bf00      	nop
 8000ac6:	3720      	adds	r7, #32
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000038 	.word	0x20000038
 8000ad0:	2000003c 	.word	0x2000003c
 8000ad4:	20000118 	.word	0x20000118
 8000ad8:	e000ed04 	.word	0xe000ed04

08000adc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000ae2:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <vTaskStartScheduler+0x98>)
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2300      	movs	r3, #0
 8000aec:	2282      	movs	r2, #130	; 0x82
 8000aee:	4922      	ldr	r1, [pc, #136]	; (8000b78 <vTaskStartScheduler+0x9c>)
 8000af0:	4822      	ldr	r0, [pc, #136]	; (8000b7c <vTaskStartScheduler+0xa0>)
 8000af2:	f7ff fdb6 	bl	8000662 <xTaskCreate>
 8000af6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d124      	bne.n	8000b48 <vTaskStartScheduler+0x6c>
        __asm volatile
 8000afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b02:	f383 8811 	msr	BASEPRI, r3
 8000b06:	f3bf 8f6f 	isb	sy
 8000b0a:	f3bf 8f4f 	dsb	sy
 8000b0e:	60bb      	str	r3, [r7, #8]
    }
 8000b10:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000b12:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <vTaskStartScheduler+0xa4>)
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b18:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <vTaskStartScheduler+0xa8>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <vTaskStartScheduler+0xac>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <vTaskStartScheduler+0xb0>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <vTaskStartScheduler+0x98>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d102      	bne.n	8000b38 <vTaskStartScheduler+0x5c>
 8000b32:	f002 fd9b 	bl	800366c <SEGGER_SYSVIEW_OnIdle>
 8000b36:	e004      	b.n	8000b42 <vTaskStartScheduler+0x66>
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <vTaskStartScheduler+0xb0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 fdf3 	bl	8003728 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000b42:	f000 fc2f 	bl	80013a4 <xPortStartScheduler>
 8000b46:	e00e      	b.n	8000b66 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b4e:	d10a      	bne.n	8000b66 <vTaskStartScheduler+0x8a>
        __asm volatile
 8000b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b54:	f383 8811 	msr	BASEPRI, r3
 8000b58:	f3bf 8f6f 	isb	sy
 8000b5c:	f3bf 8f4f 	dsb	sy
 8000b60:	607b      	str	r3, [r7, #4]
    }
 8000b62:	bf00      	nop
 8000b64:	e7fe      	b.n	8000b64 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <vTaskStartScheduler+0xb4>)
 8000b68:	681b      	ldr	r3, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000134 	.word	0x20000134
 8000b78:	08005808 	.word	0x08005808
 8000b7c:	08001109 	.word	0x08001109
 8000b80:	20000130 	.word	0x20000130
 8000b84:	2000011c 	.word	0x2000011c
 8000b88:	20000114 	.word	0x20000114
 8000b8c:	20000038 	.word	0x20000038
 8000b90:	20000000 	.word	0x20000000

08000b94 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <vTaskSuspendAll+0x18>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	4a03      	ldr	r2, [pc, #12]	; (8000bac <vTaskSuspendAll+0x18>)
 8000ba0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	20000138 	.word	0x20000138

08000bb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000bbe:	4b43      	ldr	r3, [pc, #268]	; (8000ccc <xTaskResumeAll+0x11c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10a      	bne.n	8000bdc <xTaskResumeAll+0x2c>
        __asm volatile
 8000bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bca:	f383 8811 	msr	BASEPRI, r3
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	f3bf 8f4f 	dsb	sy
 8000bd6:	603b      	str	r3, [r7, #0]
    }
 8000bd8:	bf00      	nop
 8000bda:	e7fe      	b.n	8000bda <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000bdc:	f000 fd02 	bl	80015e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000be0:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <xTaskResumeAll+0x11c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	4a39      	ldr	r2, [pc, #228]	; (8000ccc <xTaskResumeAll+0x11c>)
 8000be8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000bea:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <xTaskResumeAll+0x11c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d165      	bne.n	8000cbe <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000bf2:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <xTaskResumeAll+0x120>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d061      	beq.n	8000cbe <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000bfa:	e032      	b.n	8000c62 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bfc:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <xTaskResumeAll+0x124>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	3318      	adds	r3, #24
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fd00 	bl	800060e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3304      	adds	r3, #4
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fcfb 	bl	800060e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fdc6 	bl	80037ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c24:	2201      	movs	r2, #1
 8000c26:	409a      	lsls	r2, r3
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <xTaskResumeAll+0x128>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	4a2a      	ldr	r2, [pc, #168]	; (8000cd8 <xTaskResumeAll+0x128>)
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4a27      	ldr	r2, [pc, #156]	; (8000cdc <xTaskResumeAll+0x12c>)
 8000c40:	441a      	add	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3304      	adds	r3, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4610      	mov	r0, r2
 8000c4a:	f7ff fcbc 	bl	80005c6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c52:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <xTaskResumeAll+0x130>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d302      	bcc.n	8000c62 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8000c5c:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <xTaskResumeAll+0x134>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <xTaskResumeAll+0x124>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1c8      	bne.n	8000bfc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000c70:	f000 fae0 	bl	8001234 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000c74:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <xTaskResumeAll+0x138>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d010      	beq.n	8000ca2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000c80:	f000 f91c 	bl	8000ebc <xTaskIncrementTick>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <xTaskResumeAll+0x134>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1f1      	bne.n	8000c80 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <xTaskResumeAll+0x138>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <xTaskResumeAll+0x134>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d009      	beq.n	8000cbe <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000caa:	2301      	movs	r3, #1
 8000cac:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <xTaskResumeAll+0x13c>)
 8000cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	f3bf 8f4f 	dsb	sy
 8000cba:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000cbe:	f000 fcc1 	bl	8001644 <vPortExitCritical>

    return xAlreadyYielded;
 8000cc2:	68bb      	ldr	r3, [r7, #8]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000138 	.word	0x20000138
 8000cd0:	20000110 	.word	0x20000110
 8000cd4:	200000d0 	.word	0x200000d0
 8000cd8:	20000118 	.word	0x20000118
 8000cdc:	2000003c 	.word	0x2000003c
 8000ce0:	20000038 	.word	0x20000038
 8000ce4:	20000124 	.word	0x20000124
 8000ce8:	20000120 	.word	0x20000120
 8000cec:	e000ed04 	.word	0xe000ed04

08000cf0 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000cf6:	f000 fd61 	bl	80017bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <xTaskGetTickCountFromISR+0x20>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000d04:	683b      	ldr	r3, [r7, #0]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000114 	.word	0x20000114

08000d14 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8000d14:	b480      	push	{r7}
 8000d16:	b08b      	sub	sp, #44	; 0x2c
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d05b      	beq.n	8000de2 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	3308      	adds	r3, #8
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d104      	bne.n	8000d4e <prvSearchForNameWithinSingleList+0x3a>
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	3308      	adds	r3, #8
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d104      	bne.n	8000d7a <prvSearchForNameWithinSingleList+0x66>
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
 8000d8a:	e01c      	b.n	8000dc6 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	4413      	add	r3, r2
 8000d92:	3334      	adds	r3, #52	; 0x34
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	7afa      	ldrb	r2, [r7, #11]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d002      	beq.n	8000dac <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 8000da6:	2301      	movs	r3, #1
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	e006      	b.n	8000dba <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d103      	bne.n	8000dba <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d106      	bne.n	8000dce <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	623b      	str	r3, [r7, #32]
 8000dc6:	6a3b      	ldr	r3, [r7, #32]
 8000dc8:	2b09      	cmp	r3, #9
 8000dca:	d9df      	bls.n	8000d8c <prvSearchForNameWithinSingleList+0x78>
 8000dcc:	e000      	b.n	8000dd0 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8000dce:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d104      	bne.n	8000de0 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d1bb      	bne.n	8000d56 <prvSearchForNameWithinSingleList+0x42>
 8000dde:	e000      	b.n	8000de2 <prvSearchForNameWithinSingleList+0xce>
                    break;
 8000de0:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000de4:	4618      	mov	r0, r3
 8000de6:	372c      	adds	r7, #44	; 0x2c
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fa31 	bl	8000264 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b09      	cmp	r3, #9
 8000e06:	d90a      	bls.n	8000e1e <xTaskGetHandle+0x2e>
        __asm volatile
 8000e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e0c:	f383 8811 	msr	BASEPRI, r3
 8000e10:	f3bf 8f6f 	isb	sy
 8000e14:	f3bf 8f4f 	dsb	sy
 8000e18:	60fb      	str	r3, [r7, #12]
    }
 8000e1a:	bf00      	nop
 8000e1c:	e7fe      	b.n	8000e1c <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 8000e1e:	f7ff feb9 	bl	8000b94 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <xTaskGetHandle+0xb8>)
 8000e34:	4413      	add	r3, r2
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff6b 	bl	8000d14 <prvSearchForNameWithinSingleList>
 8000e3e:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d103      	bne.n	8000e4e <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1ea      	bne.n	8000e22 <xTaskGetHandle+0x32>
 8000e4c:	e000      	b.n	8000e50 <xTaskGetHandle+0x60>
                    break;
 8000e4e:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d106      	bne.n	8000e64 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <xTaskGetHandle+0xbc>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff59 	bl	8000d14 <prvSearchForNameWithinSingleList>
 8000e62:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d106      	bne.n	8000e78 <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <xTaskGetHandle+0xc0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff4f 	bl	8000d14 <prvSearchForNameWithinSingleList>
 8000e76:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d104      	bne.n	8000e88 <xTaskGetHandle+0x98>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <xTaskGetHandle+0xc4>)
 8000e82:	f7ff ff47 	bl	8000d14 <prvSearchForNameWithinSingleList>
 8000e86:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d104      	bne.n	8000e98 <xTaskGetHandle+0xa8>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <xTaskGetHandle+0xc8>)
 8000e92:	f7ff ff3f 	bl	8000d14 <prvSearchForNameWithinSingleList>
 8000e96:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 8000e98:	f7ff fe8a 	bl	8000bb0 <xTaskResumeAll>

        return pxTCB;
 8000e9c:	693b      	ldr	r3, [r7, #16]
    }
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000003c 	.word	0x2000003c
 8000eac:	200000c8 	.word	0x200000c8
 8000eb0:	200000cc 	.word	0x200000cc
 8000eb4:	200000fc 	.word	0x200000fc
 8000eb8:	200000e4 	.word	0x200000e4

08000ebc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ec6:	4b50      	ldr	r3, [pc, #320]	; (8001008 <xTaskIncrementTick+0x14c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f040 8092 	bne.w	8000ff4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000ed0:	4b4e      	ldr	r3, [pc, #312]	; (800100c <xTaskIncrementTick+0x150>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000ed8:	4a4c      	ldr	r2, [pc, #304]	; (800100c <xTaskIncrementTick+0x150>)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d120      	bne.n	8000f26 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000ee4:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <xTaskIncrementTick+0x154>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00a      	beq.n	8000f04 <xTaskIncrementTick+0x48>
        __asm volatile
 8000eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ef2:	f383 8811 	msr	BASEPRI, r3
 8000ef6:	f3bf 8f6f 	isb	sy
 8000efa:	f3bf 8f4f 	dsb	sy
 8000efe:	603b      	str	r3, [r7, #0]
    }
 8000f00:	bf00      	nop
 8000f02:	e7fe      	b.n	8000f02 <xTaskIncrementTick+0x46>
 8000f04:	4b42      	ldr	r3, [pc, #264]	; (8001010 <xTaskIncrementTick+0x154>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b42      	ldr	r3, [pc, #264]	; (8001014 <xTaskIncrementTick+0x158>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a40      	ldr	r2, [pc, #256]	; (8001010 <xTaskIncrementTick+0x154>)
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4a40      	ldr	r2, [pc, #256]	; (8001014 <xTaskIncrementTick+0x158>)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b3f      	ldr	r3, [pc, #252]	; (8001018 <xTaskIncrementTick+0x15c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	4a3e      	ldr	r2, [pc, #248]	; (8001018 <xTaskIncrementTick+0x15c>)
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	f000 f987 	bl	8001234 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000f26:	4b3d      	ldr	r3, [pc, #244]	; (800101c <xTaskIncrementTick+0x160>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d34c      	bcc.n	8000fca <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f30:	4b37      	ldr	r3, [pc, #220]	; (8001010 <xTaskIncrementTick+0x154>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d104      	bne.n	8000f44 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <xTaskIncrementTick+0x160>)
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f40:	601a      	str	r2, [r3, #0]
                    break;
 8000f42:	e042      	b.n	8000fca <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f44:	4b32      	ldr	r3, [pc, #200]	; (8001010 <xTaskIncrementTick+0x154>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d203      	bcs.n	8000f64 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000f5c:	4a2f      	ldr	r2, [pc, #188]	; (800101c <xTaskIncrementTick+0x160>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000f62:	e032      	b.n	8000fca <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	3304      	adds	r3, #4
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fb50 	bl	800060e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d004      	beq.n	8000f80 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3318      	adds	r3, #24
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fb47 	bl	800060e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 fc12 	bl	80037ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <xTaskIncrementTick+0x164>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	4a22      	ldr	r2, [pc, #136]	; (8001020 <xTaskIncrementTick+0x164>)
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4a1f      	ldr	r2, [pc, #124]	; (8001024 <xTaskIncrementTick+0x168>)
 8000fa8:	441a      	add	r2, r3
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3304      	adds	r3, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	f7ff fb08 	bl	80005c6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <xTaskIncrementTick+0x16c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3b5      	bcc.n	8000f30 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000fc8:	e7b2      	b.n	8000f30 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <xTaskIncrementTick+0x16c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd0:	4914      	ldr	r1, [pc, #80]	; (8001024 <xTaskIncrementTick+0x168>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d901      	bls.n	8000fe6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <xTaskIncrementTick+0x170>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	e004      	b.n	8000ffe <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <xTaskIncrementTick+0x174>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <xTaskIncrementTick+0x174>)
 8000ffc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000ffe:	697b      	ldr	r3, [r7, #20]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000138 	.word	0x20000138
 800100c:	20000114 	.word	0x20000114
 8001010:	200000c8 	.word	0x200000c8
 8001014:	200000cc 	.word	0x200000cc
 8001018:	20000128 	.word	0x20000128
 800101c:	20000130 	.word	0x20000130
 8001020:	20000118 	.word	0x20000118
 8001024:	2000003c 	.word	0x2000003c
 8001028:	20000038 	.word	0x20000038
 800102c:	20000124 	.word	0x20000124
 8001030:	20000120 	.word	0x20000120

08001034 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <vTaskSwitchContext+0xbc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001042:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <vTaskSwitchContext+0xc0>)
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001048:	e04d      	b.n	80010e6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <vTaskSwitchContext+0xc0>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <vTaskSwitchContext+0xc4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	fab3 f383 	clz	r3, r3
 800105c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	f1c3 031f 	rsb	r3, r3, #31
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	4925      	ldr	r1, [pc, #148]	; (80010fc <vTaskSwitchContext+0xc8>)
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10a      	bne.n	8001090 <vTaskSwitchContext+0x5c>
        __asm volatile
 800107a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800107e:	f383 8811 	msr	BASEPRI, r3
 8001082:	f3bf 8f6f 	isb	sy
 8001086:	f3bf 8f4f 	dsb	sy
 800108a:	607b      	str	r3, [r7, #4]
    }
 800108c:	bf00      	nop
 800108e:	e7fe      	b.n	800108e <vTaskSwitchContext+0x5a>
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4a18      	ldr	r2, [pc, #96]	; (80010fc <vTaskSwitchContext+0xc8>)
 800109c:	4413      	add	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	3308      	adds	r3, #8
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d104      	bne.n	80010c0 <vTaskSwitchContext+0x8c>
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <vTaskSwitchContext+0xcc>)
 80010c8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <vTaskSwitchContext+0xcc>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <vTaskSwitchContext+0xd0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d102      	bne.n	80010dc <vTaskSwitchContext+0xa8>
 80010d6:	f002 fac9 	bl	800366c <SEGGER_SYSVIEW_OnIdle>
}
 80010da:	e004      	b.n	80010e6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <vTaskSwitchContext+0xcc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fb21 	bl	8003728 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000138 	.word	0x20000138
 80010f4:	20000124 	.word	0x20000124
 80010f8:	20000118 	.word	0x20000118
 80010fc:	2000003c 	.word	0x2000003c
 8001100:	20000038 	.word	0x20000038
 8001104:	20000134 	.word	0x20000134

08001108 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001110:	f000 f852 	bl	80011b8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <prvIdleTask+0x28>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d9f9      	bls.n	8001110 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <prvIdleTask+0x2c>)
 800111e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800112c:	e7f0      	b.n	8001110 <prvIdleTask+0x8>
 800112e:	bf00      	nop
 8001130:	2000003c 	.word	0x2000003c
 8001134:	e000ed04 	.word	0xe000ed04

08001138 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	e00c      	b.n	800115e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <prvInitialiseTaskLists+0x60>)
 8001150:	4413      	add	r3, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fa0a 	bl	800056c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3301      	adds	r3, #1
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b04      	cmp	r3, #4
 8001162:	d9ef      	bls.n	8001144 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <prvInitialiseTaskLists+0x64>)
 8001166:	f7ff fa01 	bl	800056c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <prvInitialiseTaskLists+0x68>)
 800116c:	f7ff f9fe 	bl	800056c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <prvInitialiseTaskLists+0x6c>)
 8001172:	f7ff f9fb 	bl	800056c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001176:	480c      	ldr	r0, [pc, #48]	; (80011a8 <prvInitialiseTaskLists+0x70>)
 8001178:	f7ff f9f8 	bl	800056c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <prvInitialiseTaskLists+0x74>)
 800117e:	f7ff f9f5 	bl	800056c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <prvInitialiseTaskLists+0x78>)
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <prvInitialiseTaskLists+0x64>)
 8001186:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <prvInitialiseTaskLists+0x7c>)
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <prvInitialiseTaskLists+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000003c 	.word	0x2000003c
 800119c:	200000a0 	.word	0x200000a0
 80011a0:	200000b4 	.word	0x200000b4
 80011a4:	200000d0 	.word	0x200000d0
 80011a8:	200000e4 	.word	0x200000e4
 80011ac:	200000fc 	.word	0x200000fc
 80011b0:	200000c8 	.word	0x200000c8
 80011b4:	200000cc 	.word	0x200000cc

080011b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80011be:	e019      	b.n	80011f4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80011c0:	f000 fa10 	bl	80015e4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <prvCheckTasksWaitingTermination+0x50>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3304      	adds	r3, #4
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fa1c 	bl	800060e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <prvCheckTasksWaitingTermination+0x54>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3b01      	subs	r3, #1
 80011dc:	4a0b      	ldr	r2, [pc, #44]	; (800120c <prvCheckTasksWaitingTermination+0x54>)
 80011de:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <prvCheckTasksWaitingTermination+0x58>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <prvCheckTasksWaitingTermination+0x58>)
 80011e8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80011ea:	f000 fa2b 	bl	8001644 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f810 	bl	8001214 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <prvCheckTasksWaitingTermination+0x58>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1e1      	bne.n	80011c0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200000e4 	.word	0x200000e4
 800120c:	20000110 	.word	0x20000110
 8001210:	200000f8 	.word	0x200000f8

08001214 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fbeb 	bl	80019fc <vPortFree>
                vPortFree( pxTCB );
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 fbe8 	bl	80019fc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <prvResetNextTaskUnblockTime+0x30>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d104      	bne.n	800124c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <prvResetNextTaskUnblockTime+0x34>)
 8001244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001248:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800124a:	e005      	b.n	8001258 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <prvResetNextTaskUnblockTime+0x30>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <prvResetNextTaskUnblockTime+0x34>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200000c8 	.word	0x200000c8
 8001268:	20000130 	.word	0x20000130

0800126c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <xTaskGetCurrentTaskHandle+0x1c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	607b      	str	r3, [r7, #4]

        return xReturn;
 8001278:	687b      	ldr	r3, [r7, #4]
    }
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000038 	.word	0x20000038

0800128c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3b04      	subs	r3, #4
 800129c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3b04      	subs	r3, #4
 80012aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f023 0201 	bic.w	r2, r3, #1
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3b04      	subs	r3, #4
 80012ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80012bc:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <pxPortInitialiseStack+0x64>)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3b14      	subs	r3, #20
 80012c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3b04      	subs	r3, #4
 80012d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f06f 0202 	mvn.w	r2, #2
 80012da:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3b20      	subs	r3, #32
 80012e0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	080012f5 	.word	0x080012f5

080012f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <prvTaskExitError+0x54>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001306:	d00a      	beq.n	800131e <prvTaskExitError+0x2a>
        __asm volatile
 8001308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800130c:	f383 8811 	msr	BASEPRI, r3
 8001310:	f3bf 8f6f 	isb	sy
 8001314:	f3bf 8f4f 	dsb	sy
 8001318:	60fb      	str	r3, [r7, #12]
    }
 800131a:	bf00      	nop
 800131c:	e7fe      	b.n	800131c <prvTaskExitError+0x28>
        __asm volatile
 800131e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001322:	f383 8811 	msr	BASEPRI, r3
 8001326:	f3bf 8f6f 	isb	sy
 800132a:	f3bf 8f4f 	dsb	sy
 800132e:	60bb      	str	r3, [r7, #8]
    }
 8001330:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001332:	bf00      	nop
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0fc      	beq.n	8001334 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800133a:	bf00      	nop
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	20000004 	.word	0x20000004
 800134c:	00000000 	.word	0x00000000

08001350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <pxCurrentTCBConst2>)
 8001352:	6819      	ldr	r1, [r3, #0]
 8001354:	6808      	ldr	r0, [r1, #0]
 8001356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800135a:	f380 8809 	msr	PSP, r0
 800135e:	f3bf 8f6f 	isb	sy
 8001362:	f04f 0000 	mov.w	r0, #0
 8001366:	f380 8811 	msr	BASEPRI, r0
 800136a:	4770      	bx	lr
 800136c:	f3af 8000 	nop.w

08001370 <pxCurrentTCBConst2>:
 8001370:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop

08001378 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001378:	4808      	ldr	r0, [pc, #32]	; (800139c <prvPortStartFirstTask+0x24>)
 800137a:	6800      	ldr	r0, [r0, #0]
 800137c:	6800      	ldr	r0, [r0, #0]
 800137e:	f380 8808 	msr	MSP, r0
 8001382:	f04f 0000 	mov.w	r0, #0
 8001386:	f380 8814 	msr	CONTROL, r0
 800138a:	b662      	cpsie	i
 800138c:	b661      	cpsie	f
 800138e:	f3bf 8f4f 	dsb	sy
 8001392:	f3bf 8f6f 	isb	sy
 8001396:	df00      	svc	0
 8001398:	bf00      	nop
 800139a:	0000      	.short	0x0000
 800139c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop

080013a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80013aa:	4b46      	ldr	r3, [pc, #280]	; (80014c4 <xPortStartScheduler+0x120>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a46      	ldr	r2, [pc, #280]	; (80014c8 <xPortStartScheduler+0x124>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d10a      	bne.n	80013ca <xPortStartScheduler+0x26>
        __asm volatile
 80013b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b8:	f383 8811 	msr	BASEPRI, r3
 80013bc:	f3bf 8f6f 	isb	sy
 80013c0:	f3bf 8f4f 	dsb	sy
 80013c4:	613b      	str	r3, [r7, #16]
    }
 80013c6:	bf00      	nop
 80013c8:	e7fe      	b.n	80013c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80013ca:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <xPortStartScheduler+0x120>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a3f      	ldr	r2, [pc, #252]	; (80014cc <xPortStartScheduler+0x128>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d10a      	bne.n	80013ea <xPortStartScheduler+0x46>
        __asm volatile
 80013d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d8:	f383 8811 	msr	BASEPRI, r3
 80013dc:	f3bf 8f6f 	isb	sy
 80013e0:	f3bf 8f4f 	dsb	sy
 80013e4:	60fb      	str	r3, [r7, #12]
    }
 80013e6:	bf00      	nop
 80013e8:	e7fe      	b.n	80013e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80013ea:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <xPortStartScheduler+0x12c>)
 80013ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	22ff      	movs	r2, #255	; 0xff
 80013fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <xPortStartScheduler+0x130>)
 8001410:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <xPortStartScheduler+0x134>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001418:	e009      	b.n	800142e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <xPortStartScheduler+0x134>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3b01      	subs	r3, #1
 8001420:	4a2d      	ldr	r2, [pc, #180]	; (80014d8 <xPortStartScheduler+0x134>)
 8001422:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	2b80      	cmp	r3, #128	; 0x80
 8001438:	d0ef      	beq.n	800141a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <xPortStartScheduler+0x134>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f1c3 0307 	rsb	r3, r3, #7
 8001442:	2b04      	cmp	r3, #4
 8001444:	d00a      	beq.n	800145c <xPortStartScheduler+0xb8>
        __asm volatile
 8001446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800144a:	f383 8811 	msr	BASEPRI, r3
 800144e:	f3bf 8f6f 	isb	sy
 8001452:	f3bf 8f4f 	dsb	sy
 8001456:	60bb      	str	r3, [r7, #8]
    }
 8001458:	bf00      	nop
 800145a:	e7fe      	b.n	800145a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800145c:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <xPortStartScheduler+0x134>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <xPortStartScheduler+0x134>)
 8001464:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <xPortStartScheduler+0x134>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800146e:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <xPortStartScheduler+0x134>)
 8001470:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <xPortStartScheduler+0x138>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a17      	ldr	r2, [pc, #92]	; (80014dc <xPortStartScheduler+0x138>)
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001484:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <xPortStartScheduler+0x138>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <xPortStartScheduler+0x138>)
 800148c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001490:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001492:	f000 f963 	bl	800175c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <xPortStartScheduler+0x13c>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800149c:	f000 f982 	bl	80017a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <xPortStartScheduler+0x140>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <xPortStartScheduler+0x140>)
 80014a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80014aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80014ac:	f7ff ff64 	bl	8001378 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80014b0:	f7ff fdc0 	bl	8001034 <vTaskSwitchContext>
    prvTaskExitError();
 80014b4:	f7ff ff1e 	bl	80012f4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00
 80014c8:	410fc271 	.word	0x410fc271
 80014cc:	410fc270 	.word	0x410fc270
 80014d0:	e000e400 	.word	0xe000e400
 80014d4:	2000013c 	.word	0x2000013c
 80014d8:	20000140 	.word	0x20000140
 80014dc:	e000ed20 	.word	0xe000ed20
 80014e0:	20000004 	.word	0x20000004
 80014e4:	e000ef34 	.word	0xe000ef34

080014e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80014ee:	4b37      	ldr	r3, [pc, #220]	; (80015cc <vInitPrioGroupValue+0xe4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a37      	ldr	r2, [pc, #220]	; (80015d0 <vInitPrioGroupValue+0xe8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d10a      	bne.n	800150e <vInitPrioGroupValue+0x26>
        __asm volatile
 80014f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014fc:	f383 8811 	msr	BASEPRI, r3
 8001500:	f3bf 8f6f 	isb	sy
 8001504:	f3bf 8f4f 	dsb	sy
 8001508:	613b      	str	r3, [r7, #16]
    }
 800150a:	bf00      	nop
 800150c:	e7fe      	b.n	800150c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800150e:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <vInitPrioGroupValue+0xe4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a30      	ldr	r2, [pc, #192]	; (80015d4 <vInitPrioGroupValue+0xec>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d10a      	bne.n	800152e <vInitPrioGroupValue+0x46>
        __asm volatile
 8001518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151c:	f383 8811 	msr	BASEPRI, r3
 8001520:	f3bf 8f6f 	isb	sy
 8001524:	f3bf 8f4f 	dsb	sy
 8001528:	60fb      	str	r3, [r7, #12]
    }
 800152a:	bf00      	nop
 800152c:	e7fe      	b.n	800152c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <vInitPrioGroupValue+0xf0>)
 8001530:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	22ff      	movs	r2, #255	; 0xff
 800153e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <vInitPrioGroupValue+0xf4>)
 8001554:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <vInitPrioGroupValue+0xf8>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800155c:	e009      	b.n	8001572 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <vInitPrioGroupValue+0xf8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3b01      	subs	r3, #1
 8001564:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <vInitPrioGroupValue+0xf8>)
 8001566:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	b2db      	uxtb	r3, r3
 8001570:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157a:	2b80      	cmp	r3, #128	; 0x80
 800157c:	d0ef      	beq.n	800155e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <vInitPrioGroupValue+0xf8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	d00a      	beq.n	80015a0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800158a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158e:	f383 8811 	msr	BASEPRI, r3
 8001592:	f3bf 8f6f 	isb	sy
 8001596:	f3bf 8f4f 	dsb	sy
 800159a:	60bb      	str	r3, [r7, #8]
    }
 800159c:	bf00      	nop
 800159e:	e7fe      	b.n	800159e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <vInitPrioGroupValue+0xf8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	021b      	lsls	r3, r3, #8
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <vInitPrioGroupValue+0xf8>)
 80015a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <vInitPrioGroupValue+0xf8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <vInitPrioGroupValue+0xf8>)
 80015b4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80015be:	bf00      	nop
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00
 80015d0:	410fc271 	.word	0x410fc271
 80015d4:	410fc270 	.word	0x410fc270
 80015d8:	e000e400 	.word	0xe000e400
 80015dc:	2000013c 	.word	0x2000013c
 80015e0:	20000140 	.word	0x20000140

080015e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
        __asm volatile
 80015ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ee:	f383 8811 	msr	BASEPRI, r3
 80015f2:	f3bf 8f6f 	isb	sy
 80015f6:	f3bf 8f4f 	dsb	sy
 80015fa:	607b      	str	r3, [r7, #4]
    }
 80015fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <vPortEnterCritical+0x58>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <vPortEnterCritical+0x58>)
 8001606:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <vPortEnterCritical+0x58>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d10f      	bne.n	8001630 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <vPortEnterCritical+0x5c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00a      	beq.n	8001630 <vPortEnterCritical+0x4c>
        __asm volatile
 800161a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800161e:	f383 8811 	msr	BASEPRI, r3
 8001622:	f3bf 8f6f 	isb	sy
 8001626:	f3bf 8f4f 	dsb	sy
 800162a:	603b      	str	r3, [r7, #0]
    }
 800162c:	bf00      	nop
 800162e:	e7fe      	b.n	800162e <vPortEnterCritical+0x4a>
    }
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	20000004 	.word	0x20000004
 8001640:	e000ed04 	.word	0xe000ed04

08001644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <vPortExitCritical+0x50>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10a      	bne.n	8001668 <vPortExitCritical+0x24>
        __asm volatile
 8001652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001656:	f383 8811 	msr	BASEPRI, r3
 800165a:	f3bf 8f6f 	isb	sy
 800165e:	f3bf 8f4f 	dsb	sy
 8001662:	607b      	str	r3, [r7, #4]
    }
 8001664:	bf00      	nop
 8001666:	e7fe      	b.n	8001666 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <vPortExitCritical+0x50>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3b01      	subs	r3, #1
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <vPortExitCritical+0x50>)
 8001670:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <vPortExitCritical+0x50>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d105      	bne.n	8001686 <vPortExitCritical+0x42>
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001684:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000004 	.word	0x20000004
	...

080016a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80016a0:	f3ef 8009 	mrs	r0, PSP
 80016a4:	f3bf 8f6f 	isb	sy
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <pxCurrentTCBConst>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	f01e 0f10 	tst.w	lr, #16
 80016b0:	bf08      	it	eq
 80016b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80016b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ba:	6010      	str	r0, [r2, #0]
 80016bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80016c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80016c4:	f380 8811 	msr	BASEPRI, r0
 80016c8:	f3bf 8f4f 	dsb	sy
 80016cc:	f3bf 8f6f 	isb	sy
 80016d0:	f7ff fcb0 	bl	8001034 <vTaskSwitchContext>
 80016d4:	f04f 0000 	mov.w	r0, #0
 80016d8:	f380 8811 	msr	BASEPRI, r0
 80016dc:	bc09      	pop	{r0, r3}
 80016de:	6819      	ldr	r1, [r3, #0]
 80016e0:	6808      	ldr	r0, [r1, #0]
 80016e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e6:	f01e 0f10 	tst.w	lr, #16
 80016ea:	bf08      	it	eq
 80016ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80016f0:	f380 8809 	msr	PSP, r0
 80016f4:	f3bf 8f6f 	isb	sy
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	f3af 8000 	nop.w

08001700 <pxCurrentTCBConst>:
 8001700:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop

08001708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
        __asm volatile
 800170e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001712:	f383 8811 	msr	BASEPRI, r3
 8001716:	f3bf 8f6f 	isb	sy
 800171a:	f3bf 8f4f 	dsb	sy
 800171e:	607b      	str	r3, [r7, #4]
    }
 8001720:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001722:	f001 ff29 	bl	8003578 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001726:	f7ff fbc9 	bl	8000ebc <xTaskIncrementTick>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001730:	f001 ff80 	bl	8003634 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <SysTick_Handler+0x50>)
 8001736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e001      	b.n	8001742 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800173e:	f001 ff5d 	bl	80035fc <SEGGER_SYSVIEW_RecordExitISR>
 8001742:	2300      	movs	r3, #0
 8001744:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f383 8811 	msr	BASEPRI, r3
    }
 800174c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	e000ed04 	.word	0xe000ed04

0800175c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <vPortSetupTimerInterrupt+0x34>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <vPortSetupTimerInterrupt+0x38>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <vPortSetupTimerInterrupt+0x3c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <vPortSetupTimerInterrupt+0x40>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <vPortSetupTimerInterrupt+0x44>)
 800177a:	3b01      	subs	r3, #1
 800177c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <vPortSetupTimerInterrupt+0x34>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010
 8001794:	e000e018 	.word	0xe000e018
 8001798:	20000010 	.word	0x20000010
 800179c:	10624dd3 	.word	0x10624dd3
 80017a0:	e000e014 	.word	0xe000e014

080017a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80017a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80017b4 <vPortEnableVFP+0x10>
 80017a8:	6801      	ldr	r1, [r0, #0]
 80017aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80017ae:	6001      	str	r1, [r0, #0]
 80017b0:	4770      	bx	lr
 80017b2:	0000      	.short	0x0000
 80017b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop

080017bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80017c2:	f3ef 8305 	mrs	r3, IPSR
 80017c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	d914      	bls.n	80017f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <vPortValidateInterruptPriority+0x70>)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <vPortValidateInterruptPriority+0x74>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	7afa      	ldrb	r2, [r7, #11]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d20a      	bcs.n	80017f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80017e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e6:	f383 8811 	msr	BASEPRI, r3
 80017ea:	f3bf 8f6f 	isb	sy
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	607b      	str	r3, [r7, #4]
    }
 80017f4:	bf00      	nop
 80017f6:	e7fe      	b.n	80017f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <vPortValidateInterruptPriority+0x78>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001800:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <vPortValidateInterruptPriority+0x7c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d90a      	bls.n	800181e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180c:	f383 8811 	msr	BASEPRI, r3
 8001810:	f3bf 8f6f 	isb	sy
 8001814:	f3bf 8f4f 	dsb	sy
 8001818:	603b      	str	r3, [r7, #0]
    }
 800181a:	bf00      	nop
 800181c:	e7fe      	b.n	800181c <vPortValidateInterruptPriority+0x60>
    }
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e3f0 	.word	0xe000e3f0
 8001830:	2000013c 	.word	0x2000013c
 8001834:	e000ed0c 	.word	0xe000ed0c
 8001838:	20000140 	.word	0x20000140

0800183c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001848:	f7ff f9a4 	bl	8000b94 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800184c:	4b65      	ldr	r3, [pc, #404]	; (80019e4 <pvPortMalloc+0x1a8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001854:	f000 f934 	bl	8001ac0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001858:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <pvPortMalloc+0x1ac>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	f040 80a7 	bne.w	80019b4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d02d      	beq.n	80018c8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800186c:	2208      	movs	r2, #8
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	d227      	bcs.n	80018c8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8001878:	2208      	movs	r2, #8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	2b00      	cmp	r3, #0
 8001888:	d021      	beq.n	80018ce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f023 0307 	bic.w	r3, r3, #7
 8001890:	3308      	adds	r3, #8
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	d214      	bcs.n	80018c2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f023 0307 	bic.w	r3, r3, #7
 800189e:	3308      	adds	r3, #8
 80018a0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d010      	beq.n	80018ce <pvPortMalloc+0x92>
        __asm volatile
 80018ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b0:	f383 8811 	msr	BASEPRI, r3
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	f3bf 8f4f 	dsb	sy
 80018bc:	617b      	str	r3, [r7, #20]
    }
 80018be:	bf00      	nop
 80018c0:	e7fe      	b.n	80018c0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80018c6:	e002      	b.n	80018ce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	e000      	b.n	80018d0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80018ce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d06e      	beq.n	80019b4 <pvPortMalloc+0x178>
 80018d6:	4b45      	ldr	r3, [pc, #276]	; (80019ec <pvPortMalloc+0x1b0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d869      	bhi.n	80019b4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80018e0:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <pvPortMalloc+0x1b4>)
 80018e2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80018e4:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <pvPortMalloc+0x1b4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018ea:	e004      	b.n	80018f6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d903      	bls.n	8001908 <pvPortMalloc+0xcc>
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f1      	bne.n	80018ec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <pvPortMalloc+0x1a8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190e:	429a      	cmp	r2, r3
 8001910:	d050      	beq.n	80019b4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2208      	movs	r2, #8
 8001918:	4413      	add	r3, r2
 800191a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	1ad2      	subs	r2, r2, r3
 800192c:	2308      	movs	r3, #8
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	429a      	cmp	r2, r3
 8001932:	d91f      	bls.n	8001974 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00a      	beq.n	800195c <pvPortMalloc+0x120>
        __asm volatile
 8001946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194a:	f383 8811 	msr	BASEPRI, r3
 800194e:	f3bf 8f6f 	isb	sy
 8001952:	f3bf 8f4f 	dsb	sy
 8001956:	613b      	str	r3, [r7, #16]
    }
 8001958:	bf00      	nop
 800195a:	e7fe      	b.n	800195a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	1ad2      	subs	r2, r2, r3
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800196e:	69b8      	ldr	r0, [r7, #24]
 8001970:	f000 f908 	bl	8001b84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <pvPortMalloc+0x1b0>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <pvPortMalloc+0x1b0>)
 8001980:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <pvPortMalloc+0x1b0>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <pvPortMalloc+0x1b8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d203      	bcs.n	8001996 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <pvPortMalloc+0x1b0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <pvPortMalloc+0x1b8>)
 8001994:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <pvPortMalloc+0x1ac>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	431a      	orrs	r2, r3
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <pvPortMalloc+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <pvPortMalloc+0x1bc>)
 80019b2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80019b4:	f7ff f8fc 	bl	8000bb0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00a      	beq.n	80019d8 <pvPortMalloc+0x19c>
        __asm volatile
 80019c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c6:	f383 8811 	msr	BASEPRI, r3
 80019ca:	f3bf 8f6f 	isb	sy
 80019ce:	f3bf 8f4f 	dsb	sy
 80019d2:	60fb      	str	r3, [r7, #12]
    }
 80019d4:	bf00      	nop
 80019d6:	e7fe      	b.n	80019d6 <pvPortMalloc+0x19a>
    return pvReturn;
 80019d8:	69fb      	ldr	r3, [r7, #28]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3728      	adds	r7, #40	; 0x28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2001914c 	.word	0x2001914c
 80019e8:	20019160 	.word	0x20019160
 80019ec:	20019150 	.word	0x20019150
 80019f0:	20019144 	.word	0x20019144
 80019f4:	20019154 	.word	0x20019154
 80019f8:	20019158 	.word	0x20019158

080019fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d04d      	beq.n	8001aaa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001a0e:	2308      	movs	r3, #8
 8001a10:	425b      	negs	r3, r3
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4413      	add	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <vPortFree+0xb8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10a      	bne.n	8001a40 <vPortFree+0x44>
        __asm volatile
 8001a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2e:	f383 8811 	msr	BASEPRI, r3
 8001a32:	f3bf 8f6f 	isb	sy
 8001a36:	f3bf 8f4f 	dsb	sy
 8001a3a:	60fb      	str	r3, [r7, #12]
    }
 8001a3c:	bf00      	nop
 8001a3e:	e7fe      	b.n	8001a3e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00a      	beq.n	8001a5e <vPortFree+0x62>
        __asm volatile
 8001a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4c:	f383 8811 	msr	BASEPRI, r3
 8001a50:	f3bf 8f6f 	isb	sy
 8001a54:	f3bf 8f4f 	dsb	sy
 8001a58:	60bb      	str	r3, [r7, #8]
    }
 8001a5a:	bf00      	nop
 8001a5c:	e7fe      	b.n	8001a5c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <vPortFree+0xb8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d01e      	beq.n	8001aaa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11a      	bne.n	8001aaa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <vPortFree+0xb8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	401a      	ands	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001a84:	f7ff f886 	bl	8000b94 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <vPortFree+0xbc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <vPortFree+0xbc>)
 8001a94:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001a96:	6938      	ldr	r0, [r7, #16]
 8001a98:	f000 f874 	bl	8001b84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <vPortFree+0xc0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	4a06      	ldr	r2, [pc, #24]	; (8001abc <vPortFree+0xc0>)
 8001aa4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001aa6:	f7ff f883 	bl	8000bb0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20019160 	.word	0x20019160
 8001ab8:	20019150 	.word	0x20019150
 8001abc:	2001915c 	.word	0x2001915c

08001ac0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001ac6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8001aca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <prvHeapInit+0xac>)
 8001ace:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00c      	beq.n	8001af4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3307      	adds	r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f023 0307 	bic.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <prvHeapInit+0xac>)
 8001af0:	4413      	add	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001af8:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <prvHeapInit+0xb0>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <prvHeapInit+0xb0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	4413      	add	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f023 0307 	bic.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <prvHeapInit+0xb4>)
 8001b20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <prvHeapInit+0xb4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <prvHeapInit+0xb4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	1ad2      	subs	r2, r2, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <prvHeapInit+0xb4>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <prvHeapInit+0xb8>)
 8001b4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <prvHeapInit+0xbc>)
 8001b56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <prvHeapInit+0xc0>)
 8001b5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	20000144 	.word	0x20000144
 8001b70:	20019144 	.word	0x20019144
 8001b74:	2001914c 	.word	0x2001914c
 8001b78:	20019154 	.word	0x20019154
 8001b7c:	20019150 	.word	0x20019150
 8001b80:	20019160 	.word	0x20019160

08001b84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <prvInsertBlockIntoFreeList+0xac>)
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e002      	b.n	8001b98 <prvInsertBlockIntoFreeList+0x14>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d8f7      	bhi.n	8001b92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	4413      	add	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d108      	bne.n	8001bc6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	441a      	add	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	441a      	add	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d118      	bne.n	8001c0c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <prvInsertBlockIntoFreeList+0xb0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d00d      	beq.n	8001c02 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e008      	b.n	8001c14 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <prvInsertBlockIntoFreeList+0xb0>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e003      	b.n	8001c14 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d002      	beq.n	8001c22 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20019144 	.word	0x20019144
 8001c34:	2001914c 	.word	0x2001914c

08001c38 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <_cbSendSystemDesc+0x14>)
 8001c3e:	f001 fc45 	bl	80034cc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001c42:	4803      	ldr	r0, [pc, #12]	; (8001c50 <_cbSendSystemDesc+0x18>)
 8001c44:	f001 fc42 	bl	80034cc <SEGGER_SYSVIEW_SendSysDesc>
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	08005810 	.word	0x08005810
 8001c50:	08005854 	.word	0x08005854

08001c54 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <SEGGER_SYSVIEW_Conf+0x20>)
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <SEGGER_SYSVIEW_Conf+0x20>)
 8001c5e:	6819      	ldr	r1, [r3, #0]
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SEGGER_SYSVIEW_Conf+0x24>)
 8001c62:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <SEGGER_SYSVIEW_Conf+0x28>)
 8001c64:	f001 f8b6 	bl	8002dd4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001c68:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001c6c:	f001 f8f6 	bl	8002e5c <SEGGER_SYSVIEW_SetRAMBase>
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000010 	.word	0x20000010
 8001c78:	08001c39 	.word	0x08001c39
 8001c7c:	080058e4 	.word	0x080058e4

08001c80 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	e033      	b.n	8001cf4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001c8c:	491e      	ldr	r1, [pc, #120]	; (8001d08 <_cbSendTaskList+0x88>)
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	491a      	ldr	r1, [pc, #104]	; (8001d08 <_cbSendTaskList+0x88>)
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	3304      	adds	r3, #4
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	4c16      	ldr	r4, [pc, #88]	; (8001d08 <_cbSendTaskList+0x88>)
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4423      	add	r3, r4
 8001cbc:	3308      	adds	r3, #8
 8001cbe:	681c      	ldr	r4, [r3, #0]
 8001cc0:	4d11      	ldr	r5, [pc, #68]	; (8001d08 <_cbSendTaskList+0x88>)
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	442b      	add	r3, r5
 8001cce:	330c      	adds	r3, #12
 8001cd0:	681d      	ldr	r5, [r3, #0]
 8001cd2:	4e0d      	ldr	r6, [pc, #52]	; (8001d08 <_cbSendTaskList+0x88>)
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4433      	add	r3, r6
 8001ce0:	3310      	adds	r3, #16
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	462b      	mov	r3, r5
 8001ce8:	4622      	mov	r2, r4
 8001cea:	f000 f925 	bl	8001f38 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <_cbSendTaskList+0x8c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d3c6      	bcc.n	8001c8c <_cbSendTaskList+0xc>
  }
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d08:	20019164 	.word	0x20019164
 8001d0c:	20019204 	.word	0x20019204

08001d10 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001d16:	f7fe ffeb 	bl	8000cf0 <xTaskGetTickCountFromISR>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	f04f 0400 	mov.w	r4, #0
 8001d32:	f04f 0500 	mov.w	r5, #0
 8001d36:	015d      	lsls	r5, r3, #5
 8001d38:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001d3c:	0154      	lsls	r4, r2, #5
 8001d3e:	4622      	mov	r2, r4
 8001d40:	462b      	mov	r3, r5
 8001d42:	1a12      	subs	r2, r2, r0
 8001d44:	eb63 0301 	sbc.w	r3, r3, r1
 8001d48:	f04f 0400 	mov.w	r4, #0
 8001d4c:	f04f 0500 	mov.w	r5, #0
 8001d50:	009d      	lsls	r5, r3, #2
 8001d52:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8001d56:	0094      	lsls	r4, r2, #2
 8001d58:	4622      	mov	r2, r4
 8001d5a:	462b      	mov	r3, r5
 8001d5c:	1812      	adds	r2, r2, r0
 8001d5e:	eb41 0303 	adc.w	r3, r1, r3
 8001d62:	f04f 0000 	mov.w	r0, #0
 8001d66:	f04f 0100 	mov.w	r1, #0
 8001d6a:	00d9      	lsls	r1, r3, #3
 8001d6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d70:	00d0      	lsls	r0, r2, #3
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8001d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bdb0      	pop	{r4, r5, r7, pc}

08001d88 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001d96:	2205      	movs	r2, #5
 8001d98:	492b      	ldr	r1, [pc, #172]	; (8001e48 <SYSVIEW_AddTask+0xc0>)
 8001d9a:	68b8      	ldr	r0, [r7, #8]
 8001d9c:	f003 fd04 	bl	80057a8 <memcmp>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d04b      	beq.n	8001e3e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <SYSVIEW_AddTask+0xc4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b07      	cmp	r3, #7
 8001dac:	d903      	bls.n	8001db6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001dae:	4828      	ldr	r0, [pc, #160]	; (8001e50 <SYSVIEW_AddTask+0xc8>)
 8001db0:	f001 fe2a 	bl	8003a08 <SEGGER_SYSVIEW_Warn>
    return;
 8001db4:	e044      	b.n	8001e40 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <SYSVIEW_AddTask+0xc4>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4926      	ldr	r1, [pc, #152]	; (8001e54 <SYSVIEW_AddTask+0xcc>)
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <SYSVIEW_AddTask+0xc4>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4921      	ldr	r1, [pc, #132]	; (8001e54 <SYSVIEW_AddTask+0xcc>)
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	3304      	adds	r3, #4
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <SYSVIEW_AddTask+0xc4>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	491b      	ldr	r1, [pc, #108]	; (8001e54 <SYSVIEW_AddTask+0xcc>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	3308      	adds	r3, #8
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <SYSVIEW_AddTask+0xc4>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4916      	ldr	r1, [pc, #88]	; (8001e54 <SYSVIEW_AddTask+0xcc>)
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	330c      	adds	r3, #12
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <SYSVIEW_AddTask+0xc4>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4910      	ldr	r1, [pc, #64]	; (8001e54 <SYSVIEW_AddTask+0xcc>)
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	3310      	adds	r3, #16
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <SYSVIEW_AddTask+0xc4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <SYSVIEW_AddTask+0xc4>)
 8001e2a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f87e 	bl	8001f38 <SYSVIEW_SendTaskInfo>
 8001e3c:	e000      	b.n	8001e40 <SYSVIEW_AddTask+0xb8>
    return;
 8001e3e:	bf00      	nop

}
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	08005864 	.word	0x08005864
 8001e4c:	20019204 	.word	0x20019204
 8001e50:	0800586c 	.word	0x0800586c
 8001e54:	20019164 	.word	0x20019164

08001e58 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001e66:	2205      	movs	r2, #5
 8001e68:	4930      	ldr	r1, [pc, #192]	; (8001f2c <SYSVIEW_UpdateTask+0xd4>)
 8001e6a:	68b8      	ldr	r0, [r7, #8]
 8001e6c:	f003 fc9c 	bl	80057a8 <memcmp>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d056      	beq.n	8001f24 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e00d      	b.n	8001e98 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8001e7c:	492c      	ldr	r1, [pc, #176]	; (8001f30 <SYSVIEW_UpdateTask+0xd8>)
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d008      	beq.n	8001ea4 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3301      	adds	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <SYSVIEW_UpdateTask+0xdc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d3ec      	bcc.n	8001e7c <SYSVIEW_UpdateTask+0x24>
 8001ea2:	e000      	b.n	8001ea6 <SYSVIEW_UpdateTask+0x4e>
      break;
 8001ea4:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <SYSVIEW_UpdateTask+0xdc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d230      	bcs.n	8001f12 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8001eb0:	491f      	ldr	r1, [pc, #124]	; (8001f30 <SYSVIEW_UpdateTask+0xd8>)
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8001ec4:	491a      	ldr	r1, [pc, #104]	; (8001f30 <SYSVIEW_UpdateTask+0xd8>)
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3308      	adds	r3, #8
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8001ed8:	4915      	ldr	r1, [pc, #84]	; (8001f30 <SYSVIEW_UpdateTask+0xd8>)
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	330c      	adds	r3, #12
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8001eec:	4910      	ldr	r1, [pc, #64]	; (8001f30 <SYSVIEW_UpdateTask+0xd8>)
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	3310      	adds	r3, #16
 8001efc:	6a3a      	ldr	r2, [r7, #32]
 8001efe:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f814 	bl	8001f38 <SYSVIEW_SendTaskInfo>
 8001f10:	e009      	b.n	8001f26 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7ff ff33 	bl	8001d88 <SYSVIEW_AddTask>
 8001f22:	e000      	b.n	8001f26 <SYSVIEW_UpdateTask+0xce>
    return;
 8001f24:	bf00      	nop
  }
}
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	08005864 	.word	0x08005864
 8001f30:	20019164 	.word	0x20019164
 8001f34:	20019204 	.word	0x20019204

08001f38 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	2214      	movs	r2, #20
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 fc46 	bl	80057e0 <memset>
  TaskInfo.TaskID     = TaskID;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 f9b5 	bl	80032dc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	; 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <__NVIC_EnableIRQ+0x38>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8002012:	f001 fd55 	bl	8003ac0 <SEGGER_SYSVIEW_IsStarted>
 8002016:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800201e:	f000 ffe1 	bl	8002fe4 <SEGGER_SYSVIEW_Start>
  }
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <_cbOnUARTRx+0x3c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d806      	bhi.n	800204c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <_cbOnUARTRx+0x3c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <_cbOnUARTRx+0x3c>)
 8002048:	701a      	strb	r2, [r3, #0]
    goto Done;
 800204a:	e009      	b.n	8002060 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800204c:	f7ff ffde 	bl	800200c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <_cbOnUARTRx+0x3c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4618      	mov	r0, r3
 8002056:	1dfb      	adds	r3, r7, #7
 8002058:	2201      	movs	r2, #1
 800205a:	4619      	mov	r1, r3
 800205c:	f000 fb9a 	bl	8002794 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8002060:	bf00      	nop
}
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000008 	.word	0x20000008

0800206c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <_cbOnUARTTx+0x5c>)
 8002076:	785b      	ldrb	r3, [r3, #1]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d80f      	bhi.n	800209c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <_cbOnUARTTx+0x5c>)
 800207e:	785b      	ldrb	r3, [r3, #1]
 8002080:	461a      	mov	r2, r3
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <_cbOnUARTTx+0x60>)
 8002084:	5c9a      	ldrb	r2, [r3, r2]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <_cbOnUARTTx+0x5c>)
 800208c:	785b      	ldrb	r3, [r3, #1]
 800208e:	3301      	adds	r3, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <_cbOnUARTTx+0x5c>)
 8002094:	705a      	strb	r2, [r3, #1]
    r = 1;
 8002096:	2301      	movs	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
    goto Done;
 800209a:	e00f      	b.n	80020bc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <_cbOnUARTTx+0x5c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 fa19 	bl	80024dc <SEGGER_RTT_ReadUpBufferNoLock>
 80020aa:	4603      	mov	r3, r0
 80020ac:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	da02      	bge.n	80020ba <_cbOnUARTTx+0x4e>
    r = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e000      	b.n	80020bc <_cbOnUARTTx+0x50>
  }
Done:
 80020ba:	bf00      	nop
  return r;
 80020bc:	68fb      	ldr	r3, [r7, #12]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000008 	.word	0x20000008
 80020cc:	080058ec 	.word	0x080058ec

080020d0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <SEGGER_UART_init+0x1c>)
 80020da:	4905      	ldr	r1, [pc, #20]	; (80020f0 <SEGGER_UART_init+0x20>)
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f863 	bl	80021a8 <HIF_UART_Init>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	0800202d 	.word	0x0800202d
 80020f0:	0800206d 	.word	0x0800206d

080020f4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <USART2_IRQHandler+0x80>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b00      	cmp	r3, #0
 8002108:	d011      	beq.n	800212e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <USART2_IRQHandler+0x84>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 030b 	and.w	r3, r3, #11
 8002118:	2b00      	cmp	r3, #0
 800211a:	d108      	bne.n	800212e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <USART2_IRQHandler+0x88>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <USART2_IRQHandler+0x88>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	79fa      	ldrb	r2, [r7, #7]
 800212a:	4610      	mov	r0, r2
 800212c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01a      	beq.n	800216e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <USART2_IRQHandler+0x8c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <USART2_IRQHandler+0x8c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	1dfa      	adds	r2, r7, #7
 8002146:	4610      	mov	r0, r2
 8002148:	4798      	blx	r3
 800214a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <USART2_IRQHandler+0x90>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <USART2_IRQHandler+0x90>)
 8002158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e006      	b.n	800216e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <USART2_IRQHandler+0x80>)
 8002162:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8002164:	79fa      	ldrb	r2, [r7, #7]
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <USART2_IRQHandler+0x84>)
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e000      	b.n	800216e <USART2_IRQHandler+0x7a>
      return;
 800216c:	bf00      	nop
    }
  }
}
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40004400 	.word	0x40004400
 8002178:	40004404 	.word	0x40004404
 800217c:	20019208 	.word	0x20019208
 8002180:	2001920c 	.word	0x2001920c
 8002184:	4000440c 	.word	0x4000440c

08002188 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002196:	6013      	str	r3, [r2, #0]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	4000440c 	.word	0x4000440c

080021a8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80021b4:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HIF_UART_Init+0xc8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a2d      	ldr	r2, [pc, #180]	; (8002270 <HIF_UART_Init+0xc8>)
 80021ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021be:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80021c0:	4b2c      	ldr	r3, [pc, #176]	; (8002274 <HIF_UART_Init+0xcc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <HIF_UART_Init+0xcc>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80021cc:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <HIF_UART_Init+0xd0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021d8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80021e0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80021e2:	4a25      	ldr	r2, [pc, #148]	; (8002278 <HIF_UART_Init+0xd0>)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80021e8:	4b24      	ldr	r3, [pc, #144]	; (800227c <HIF_UART_Init+0xd4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021f4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80021fc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80021fe:	4a1f      	ldr	r2, [pc, #124]	; (800227c <HIF_UART_Init+0xd4>)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HIF_UART_Init+0xd8>)
 8002206:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800220a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HIF_UART_Init+0xdc>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HIF_UART_Init+0xe0>)
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800221e:	4a1b      	ldr	r2, [pc, #108]	; (800228c <HIF_UART_Init+0xe4>)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002236:	d302      	bcc.n	800223e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8002238:	f640 73ff 	movw	r3, #4095	; 0xfff
 800223c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d004      	beq.n	800224e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	4a11      	ldr	r2, [pc, #68]	; (8002290 <HIF_UART_Init+0xe8>)
 800224a:	b29b      	uxth	r3, r3
 800224c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800224e:	4a11      	ldr	r2, [pc, #68]	; (8002294 <HIF_UART_Init+0xec>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8002254:	4a10      	ldr	r2, [pc, #64]	; (8002298 <HIF_UART_Init+0xf0>)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800225a:	2106      	movs	r1, #6
 800225c:	2026      	movs	r0, #38	; 0x26
 800225e:	f7ff feab 	bl	8001fb8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8002262:	2026      	movs	r0, #38	; 0x26
 8002264:	f7ff fe8a 	bl	8001f7c <__NVIC_EnableIRQ>
}
 8002268:	bf00      	nop
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023840 	.word	0x40023840
 8002274:	40023830 	.word	0x40023830
 8002278:	40020020 	.word	0x40020020
 800227c:	40020000 	.word	0x40020000
 8002280:	4000440c 	.word	0x4000440c
 8002284:	40004410 	.word	0x40004410
 8002288:	40004414 	.word	0x40004414
 800228c:	0501bd00 	.word	0x0501bd00
 8002290:	40004408 	.word	0x40004408
 8002294:	20019208 	.word	0x20019208
 8002298:	2001920c 	.word	0x2001920c

0800229c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <_DoInit+0x98>)
 80022a4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2203      	movs	r2, #3
 80022aa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2203      	movs	r2, #3
 80022b0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a20      	ldr	r2, [pc, #128]	; (8002338 <_DoInit+0x9c>)
 80022b6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a20      	ldr	r2, [pc, #128]	; (800233c <_DoInit+0xa0>)
 80022bc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a17      	ldr	r2, [pc, #92]	; (8002338 <_DoInit+0x9c>)
 80022dc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a17      	ldr	r2, [pc, #92]	; (8002340 <_DoInit+0xa4>)
 80022e2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2210      	movs	r2, #16
 80022e8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3307      	adds	r3, #7
 8002300:	4a10      	ldr	r2, [pc, #64]	; (8002344 <_DoInit+0xa8>)
 8002302:	6810      	ldr	r0, [r2, #0]
 8002304:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002306:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <_DoInit+0xac>)
 800230e:	6810      	ldr	r0, [r2, #0]
 8002310:	6018      	str	r0, [r3, #0]
 8002312:	8891      	ldrh	r1, [r2, #4]
 8002314:	7992      	ldrb	r2, [r2, #6]
 8002316:	8099      	strh	r1, [r3, #4]
 8002318:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800231a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002324:	f3bf 8f5f 	dmb	sy
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	2001a73c 	.word	0x2001a73c
 8002338:	080058bc 	.word	0x080058bc
 800233c:	20019210 	.word	0x20019210
 8002340:	20019610 	.word	0x20019610
 8002344:	080058c8 	.word	0x080058c8
 8002348:	080058cc 	.word	0x080058cc

0800234c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	429a      	cmp	r2, r3
 800236e:	d905      	bls.n	800237c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
 800237a:	e007      	b.n	800238c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	69b9      	ldr	r1, [r7, #24]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	1acb      	subs	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3b01      	subs	r3, #1
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002396:	4293      	cmp	r3, r2
 8002398:	bf28      	it	cs
 800239a:	4613      	movcs	r3, r2
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800239e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4293      	cmp	r3, r2
 80023a4:	bf28      	it	cs
 80023a6:	4613      	movcs	r3, r2
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80023b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	6978      	ldr	r0, [r7, #20]
 80023ba:	f003 fa03 	bl	80057c4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80023be:	6a3a      	ldr	r2, [r7, #32]
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	4413      	add	r3, r2
 80023c4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	4413      	add	r3, r2
 80023cc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	4413      	add	r3, r2
 80023dc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d101      	bne.n	80023ec <_WriteBlocking+0xa0>
      WrOff = 0u;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80023ec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1b2      	bne.n	8002362 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80023fc:	6a3b      	ldr	r3, [r7, #32]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3728      	adds	r7, #40	; 0x28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002406:	b580      	push	{r7, lr}
 8002408:	b088      	sub	sp, #32
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	429a      	cmp	r2, r3
 8002428:	d911      	bls.n	800244e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4413      	add	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	6938      	ldr	r0, [r7, #16]
 800243a:	f003 f9c3 	bl	80057c4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800243e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	441a      	add	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800244c:	e01f      	b.n	800248e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	4413      	add	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	6938      	ldr	r0, [r7, #16]
 8002462:	f003 f9af 	bl	80057c4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4413      	add	r3, r2
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4619      	mov	r1, r3
 800247e:	6938      	ldr	r0, [r7, #16]
 8002480:	f003 f9a0 	bl	80057c4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002484:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	60da      	str	r2, [r3, #12]
}
 800248e:	bf00      	nop
 8002490:	3720      	adds	r7, #32
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002496:	b480      	push	{r7}
 8002498:	b087      	sub	sp, #28
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d808      	bhi.n	80024c4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad2      	subs	r2, r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	3b01      	subs	r3, #1
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e004      	b.n	80024ce <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80024ce:	697b      	ldr	r3, [r7, #20]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	; 0x30
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80024e8:	4b3e      	ldr	r3, [pc, #248]	; (80025e4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80024ea:	623b      	str	r3, [r7, #32]
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80024f6:	f7ff fed1 	bl	800229c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	4613      	mov	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4413      	add	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4a37      	ldr	r2, [pc, #220]	; (80025e4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002508:	4413      	add	r3, r2
 800250a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	429a      	cmp	r2, r3
 8002526:	d92b      	bls.n	8002580 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4293      	cmp	r3, r2
 8002538:	bf28      	it	cs
 800253a:	4613      	movcs	r3, r2
 800253c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	4413      	add	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	6939      	ldr	r1, [r7, #16]
 800254c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800254e:	f003 f939 	bl	80057c4 <memcpy>
    NumBytesRead += NumBytesRem;
 8002552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	4413      	add	r3, r2
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800255a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	4413      	add	r3, r2
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800256a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	4413      	add	r3, r2
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002578:	429a      	cmp	r2, r3
 800257a:	d101      	bne.n	8002580 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800257c:	2300      	movs	r3, #0
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4293      	cmp	r3, r2
 800258e:	bf28      	it	cs
 8002590:	4613      	movcs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d019      	beq.n	80025ce <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	4413      	add	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	6939      	ldr	r1, [r7, #16]
 80025a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025aa:	f003 f90b 	bl	80057c4 <memcpy>
    NumBytesRead += NumBytesRem;
 80025ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	4413      	add	r3, r2
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80025b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	4413      	add	r3, r2
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80025c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	4413      	add	r3, r2
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3730      	adds	r7, #48	; 0x30
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2001a73c 	.word	0x2001a73c

080025e8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08c      	sub	sp, #48	; 0x30
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80025f4:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <SEGGER_RTT_ReadNoLock+0x108>)
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <SEGGER_RTT_ReadNoLock+0x1e>
 8002602:	f7ff fe4b 	bl	800229c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	3360      	adds	r3, #96	; 0x60
 8002612:	4a37      	ldr	r2, [pc, #220]	; (80026f0 <SEGGER_RTT_ReadNoLock+0x108>)
 8002614:	4413      	add	r3, r2
 8002616:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002628:	2300      	movs	r3, #0
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800262c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	429a      	cmp	r2, r3
 8002632:	d92b      	bls.n	800268c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4293      	cmp	r3, r2
 8002644:	bf28      	it	cs
 8002646:	4613      	movcs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	4413      	add	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	6939      	ldr	r1, [r7, #16]
 8002658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800265a:	f003 f8b3 	bl	80057c4 <memcpy>
    NumBytesRead += NumBytesRem;
 800265e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	4413      	add	r3, r2
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	4413      	add	r3, r2
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	4413      	add	r3, r2
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002684:	429a      	cmp	r2, r3
 8002686:	d101      	bne.n	800268c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002688:	2300      	movs	r3, #0
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4293      	cmp	r3, r2
 800269a:	bf28      	it	cs
 800269c:	4613      	movcs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d019      	beq.n	80026da <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	4413      	add	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	6939      	ldr	r1, [r7, #16]
 80026b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026b6:	f003 f885 	bl	80057c4 <memcpy>
    NumBytesRead += NumBytesRem;
 80026ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	4413      	add	r3, r2
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80026c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	4413      	add	r3, r2
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80026d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	4413      	add	r3, r2
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026e4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3730      	adds	r7, #48	; 0x30
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	2001a73c 	.word	0x2001a73c

080026f4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	3360      	adds	r3, #96	; 0x60
 8002710:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8002712:	4413      	add	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d029      	beq.n	8002772 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800271e:	2b02      	cmp	r3, #2
 8002720:	d82e      	bhi.n	8002780 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8002726:	2b01      	cmp	r3, #1
 8002728:	d013      	beq.n	8002752 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800272a:	e029      	b.n	8002780 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800272c:	6978      	ldr	r0, [r7, #20]
 800272e:	f7ff feb2 	bl	8002496 <_GetAvailWriteSpace>
 8002732:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	d202      	bcs.n	8002742 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002740:	e021      	b.n	8002786 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff fe5b 	bl	8002406 <_WriteNoCheck>
    break;
 8002750:	e019      	b.n	8002786 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002752:	6978      	ldr	r0, [r7, #20]
 8002754:	f7ff fe9f 	bl	8002496 <_GetAvailWriteSpace>
 8002758:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4293      	cmp	r3, r2
 8002760:	bf28      	it	cs
 8002762:	4613      	movcs	r3, r2
 8002764:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	69b9      	ldr	r1, [r7, #24]
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7ff fe4b 	bl	8002406 <_WriteNoCheck>
    break;
 8002770:	e009      	b.n	8002786 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	69b9      	ldr	r1, [r7, #24]
 8002776:	6978      	ldr	r0, [r7, #20]
 8002778:	f7ff fde8 	bl	800234c <_WriteBlocking>
 800277c:	61f8      	str	r0, [r7, #28]
    break;
 800277e:	e002      	b.n	8002786 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
    break;
 8002784:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002786:	69fb      	ldr	r3, [r7, #28]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3720      	adds	r7, #32
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	2001a73c 	.word	0x2001a73c

08002794 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <SEGGER_RTT_WriteDownBuffer+0x48>)
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80027ae:	f7ff fd75 	bl	800229c <_DoInit>
  SEGGER_RTT_LOCK();
 80027b2:	f3ef 8311 	mrs	r3, BASEPRI
 80027b6:	f04f 0120 	mov.w	r1, #32
 80027ba:	f381 8811 	msr	BASEPRI, r1
 80027be:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff ff95 	bl	80026f4 <SEGGER_RTT_WriteDownBufferNoLock>
 80027ca:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80027d2:	697b      	ldr	r3, [r7, #20]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	2001a73c 	.word	0x2001a73c

080027e0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80027ee:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <SEGGER_RTT_AllocUpBuffer+0x20>
 80027fc:	f7ff fd4e 	bl	800229c <_DoInit>
  SEGGER_RTT_LOCK();
 8002800:	f3ef 8311 	mrs	r3, BASEPRI
 8002804:	f04f 0120 	mov.w	r1, #32
 8002808:	f381 8811 	msr	BASEPRI, r1
 800280c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800280e:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002810:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002816:	6939      	ldr	r1, [r7, #16]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	3304      	adds	r3, #4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3301      	adds	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	429a      	cmp	r2, r3
 800283c:	dbeb      	blt.n	8002816 <SEGGER_RTT_AllocUpBuffer+0x36>
 800283e:	e000      	b.n	8002842 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002840:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	429a      	cmp	r2, r3
 800284a:	da3f      	bge.n	80028cc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800284c:	6939      	ldr	r1, [r7, #16]
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002860:	6939      	ldr	r1, [r7, #16]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	3304      	adds	r3, #4
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002876:	6939      	ldr	r1, [r7, #16]
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	440b      	add	r3, r1
 8002884:	3320      	adds	r3, #32
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800288a:	6939      	ldr	r1, [r7, #16]
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	440b      	add	r3, r1
 8002898:	3328      	adds	r3, #40	; 0x28
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800289e:	6939      	ldr	r1, [r7, #16]
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	440b      	add	r3, r1
 80028ac:	3324      	adds	r3, #36	; 0x24
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80028b2:	6939      	ldr	r1, [r7, #16]
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	440b      	add	r3, r1
 80028c0:	332c      	adds	r3, #44	; 0x2c
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80028c6:	f3bf 8f5f 	dmb	sy
 80028ca:	e002      	b.n	80028d2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80028cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028d0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80028d8:	69fb      	ldr	r3, [r7, #28]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3720      	adds	r7, #32
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	2001a73c 	.word	0x2001a73c

080028e8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80028f6:	4b21      	ldr	r3, [pc, #132]	; (800297c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80028f8:	623b      	str	r3, [r7, #32]
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002904:	f7ff fcca 	bl	800229c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002908:	4b1c      	ldr	r3, [pc, #112]	; (800297c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800290a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d82c      	bhi.n	800296c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8002912:	f3ef 8311 	mrs	r3, BASEPRI
 8002916:	f04f 0120 	mov.w	r1, #32
 800291a:	f381 8811 	msr	BASEPRI, r1
 800291e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	3360      	adds	r3, #96	; 0x60
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	4413      	add	r3, r2
 8002930:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00e      	beq.n	8002956 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2200      	movs	r2, #0
 8002954:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800295a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800295c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002966:	2300      	movs	r3, #0
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	e002      	b.n	8002972 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800296c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002974:	4618      	mov	r0, r3
 8002976:	3728      	adds	r7, #40	; 0x28
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	2001a73c 	.word	0x2001a73c

08002980 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00f      	beq.n	80029b6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8002996:	e002      	b.n	800299e <_EncodeStr+0x1e>
      Len++;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	3301      	adds	r3, #1
 800299c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f6      	bne.n	8002998 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d901      	bls.n	80029b6 <_EncodeStr+0x36>
      Len = Limit;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2bfe      	cmp	r3, #254	; 0xfe
 80029ba:	d806      	bhi.n	80029ca <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	60fa      	str	r2, [r7, #12]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e011      	b.n	80029ee <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	60fa      	str	r2, [r7, #12]
 80029d0:	22ff      	movs	r2, #255	; 0xff
 80029d2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	60fa      	str	r2, [r7, #12]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	0a19      	lsrs	r1, r3, #8
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	60fa      	str	r2, [r7, #12]
 80029ea:	b2ca      	uxtb	r2, r1
 80029ec:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80029f2:	e00a      	b.n	8002a0a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	1c53      	adds	r3, r2, #1
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1c59      	adds	r1, r3, #1
 80029fe:	60f9      	str	r1, [r7, #12]
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	701a      	strb	r2, [r3, #0]
    n++;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3301      	adds	r3, #1
 8002a08:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d3f0      	bcc.n	80029f4 <_EncodeStr+0x74>
  }
  return pPayload;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3304      	adds	r3, #4
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002a3e:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <_HandleIncomingPacket+0xe0>)
 8002a40:	7e1b      	ldrb	r3, [r3, #24]
 8002a42:	4618      	mov	r0, r3
 8002a44:	1cfb      	adds	r3, r7, #3
 8002a46:	2201      	movs	r2, #1
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f7ff fdcd 	bl	80025e8 <SEGGER_RTT_ReadNoLock>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	dd54      	ble.n	8002b02 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	2b80      	cmp	r3, #128	; 0x80
 8002a5c:	d032      	beq.n	8002ac4 <_HandleIncomingPacket+0x8c>
 8002a5e:	2b80      	cmp	r3, #128	; 0x80
 8002a60:	dc42      	bgt.n	8002ae8 <_HandleIncomingPacket+0xb0>
 8002a62:	2b07      	cmp	r3, #7
 8002a64:	dc16      	bgt.n	8002a94 <_HandleIncomingPacket+0x5c>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	dd3e      	ble.n	8002ae8 <_HandleIncomingPacket+0xb0>
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d83b      	bhi.n	8002ae8 <_HandleIncomingPacket+0xb0>
 8002a70:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <_HandleIncomingPacket+0x40>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002a9b 	.word	0x08002a9b
 8002a7c:	08002aa1 	.word	0x08002aa1
 8002a80:	08002aa7 	.word	0x08002aa7
 8002a84:	08002aad 	.word	0x08002aad
 8002a88:	08002ab3 	.word	0x08002ab3
 8002a8c:	08002ab9 	.word	0x08002ab9
 8002a90:	08002abf 	.word	0x08002abf
 8002a94:	2b7f      	cmp	r3, #127	; 0x7f
 8002a96:	d036      	beq.n	8002b06 <_HandleIncomingPacket+0xce>
 8002a98:	e026      	b.n	8002ae8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002a9a:	f000 faa3 	bl	8002fe4 <SEGGER_SYSVIEW_Start>
      break;
 8002a9e:	e037      	b.n	8002b10 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002aa0:	f000 fb5c 	bl	800315c <SEGGER_SYSVIEW_Stop>
      break;
 8002aa4:	e034      	b.n	8002b10 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002aa6:	f000 fd35 	bl	8003514 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002aaa:	e031      	b.n	8002b10 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002aac:	f000 fcfa 	bl	80034a4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002ab0:	e02e      	b.n	8002b10 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002ab2:	f000 fb79 	bl	80031a8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002ab6:	e02b      	b.n	8002b10 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002ab8:	f000 ff68 	bl	800398c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002abc:	e028      	b.n	8002b10 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002abe:	f000 ff47 	bl	8003950 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002ac2:	e025      	b.n	8002b10 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <_HandleIncomingPacket+0xe0>)
 8002ac6:	7e1b      	ldrb	r3, [r3, #24]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	1cfb      	adds	r3, r7, #3
 8002acc:	2201      	movs	r2, #1
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f7ff fd8a 	bl	80025e8 <SEGGER_RTT_ReadNoLock>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	dd15      	ble.n	8002b0a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 feb5 	bl	8003850 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002ae6:	e010      	b.n	8002b0a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	da0e      	bge.n	8002b0e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <_HandleIncomingPacket+0xe0>)
 8002af2:	7e1b      	ldrb	r3, [r3, #24]
 8002af4:	4618      	mov	r0, r3
 8002af6:	1cfb      	adds	r3, r7, #3
 8002af8:	2201      	movs	r2, #1
 8002afa:	4619      	mov	r1, r3
 8002afc:	f7ff fd74 	bl	80025e8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002b00:	e005      	b.n	8002b0e <_HandleIncomingPacket+0xd6>
    }
  }
 8002b02:	bf00      	nop
 8002b04:	e004      	b.n	8002b10 <_HandleIncomingPacket+0xd8>
      break;
 8002b06:	bf00      	nop
 8002b08:	e002      	b.n	8002b10 <_HandleIncomingPacket+0xd8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e000      	b.n	8002b10 <_HandleIncomingPacket+0xd8>
      break;
 8002b0e:	bf00      	nop
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	2001a628 	.word	0x2001a628

08002b1c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08c      	sub	sp, #48	; 0x30
 8002b20:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002b22:	2301      	movs	r3, #1
 8002b24:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	3301      	adds	r3, #1
 8002b2a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b30:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <_TrySendOverflowPacket+0xe0>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b36:	e00b      	b.n	8002b50 <_TrySendOverflowPacket+0x34>
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	1c59      	adds	r1, r3, #1
 8002b40:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	09db      	lsrs	r3, r3, #7
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	2b7f      	cmp	r3, #127	; 0x7f
 8002b54:	d8f0      	bhi.n	8002b38 <_TrySendOverflowPacket+0x1c>
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002b66:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <_TrySendOverflowPacket+0xe4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002b6c:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <_TrySendOverflowPacket+0xe0>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	623b      	str	r3, [r7, #32]
 8002b7e:	e00b      	b.n	8002b98 <_TrySendOverflowPacket+0x7c>
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	1c59      	adds	r1, r3, #1
 8002b88:	6279      	str	r1, [r7, #36]	; 0x24
 8002b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	09db      	lsrs	r3, r3, #7
 8002b96:	623b      	str	r3, [r7, #32]
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b9c:	d8f0      	bhi.n	8002b80 <_TrySendOverflowPacket+0x64>
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	627a      	str	r2, [r7, #36]	; 0x24
 8002ba4:	6a3a      	ldr	r2, [r7, #32]
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <_TrySendOverflowPacket+0xe0>)
 8002bb0:	785b      	ldrb	r3, [r3, #1]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f7fd fb06 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002bc8:	f7ff fade 	bl	8002188 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <_TrySendOverflowPacket+0xe0>)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <_TrySendOverflowPacket+0xe0>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <_TrySendOverflowPacket+0xe0>)
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	e004      	b.n	8002bf0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <_TrySendOverflowPacket+0xe0>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	3301      	adds	r3, #1
 8002bec:	4a03      	ldr	r2, [pc, #12]	; (8002bfc <_TrySendOverflowPacket+0xe0>)
 8002bee:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002bf0:	693b      	ldr	r3, [r7, #16]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3730      	adds	r7, #48	; 0x30
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	2001a628 	.word	0x2001a628
 8002c00:	e0001004 	.word	0xe0001004

08002c04 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002c10:	4b6d      	ldr	r3, [pc, #436]	; (8002dc8 <_SendPacket+0x1c4>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d010      	beq.n	8002c3a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002c18:	4b6b      	ldr	r3, [pc, #428]	; (8002dc8 <_SendPacket+0x1c4>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80a5 	beq.w	8002d6c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002c22:	4b69      	ldr	r3, [pc, #420]	; (8002dc8 <_SendPacket+0x1c4>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d109      	bne.n	8002c3e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002c2a:	f7ff ff77 	bl	8002b1c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002c2e:	4b66      	ldr	r3, [pc, #408]	; (8002dc8 <_SendPacket+0x1c4>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	f040 809c 	bne.w	8002d70 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8002c38:	e001      	b.n	8002c3e <_SendPacket+0x3a>
    goto Send;
 8002c3a:	bf00      	nop
 8002c3c:	e000      	b.n	8002c40 <_SendPacket+0x3c>
Send:
 8002c3e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b1f      	cmp	r3, #31
 8002c44:	d809      	bhi.n	8002c5a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002c46:	4b60      	ldr	r3, [pc, #384]	; (8002dc8 <_SendPacket+0x1c4>)
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 808d 	bne.w	8002d74 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b17      	cmp	r3, #23
 8002c5e:	d807      	bhi.n	8002c70 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	e03d      	b.n	8002cec <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c7c:	d912      	bls.n	8002ca4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	09da      	lsrs	r2, r3, #7
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	3a01      	subs	r2, #1
 8002c96:	60fa      	str	r2, [r7, #12]
 8002c98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e006      	b.n	8002cb2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8002cb6:	d912      	bls.n	8002cde <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	09da      	lsrs	r2, r3, #7
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	3a01      	subs	r2, #1
 8002cd0:	60fa      	str	r2, [r7, #12]
 8002cd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	e006      	b.n	8002cec <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002cec:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <_SendPacket+0x1c8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002cf2:	4b35      	ldr	r3, [pc, #212]	; (8002dc8 <_SendPacket+0x1c4>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	623b      	str	r3, [r7, #32]
 8002d04:	e00b      	b.n	8002d1e <_SendPacket+0x11a>
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	1c59      	adds	r1, r3, #1
 8002d0e:	6279      	str	r1, [r7, #36]	; 0x24
 8002d10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	09db      	lsrs	r3, r3, #7
 8002d1c:	623b      	str	r3, [r7, #32]
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2b7f      	cmp	r3, #127	; 0x7f
 8002d22:	d8f0      	bhi.n	8002d06 <_SendPacket+0x102>
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	627a      	str	r2, [r7, #36]	; 0x24
 8002d2a:	6a3a      	ldr	r2, [r7, #32]
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002d34:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <_SendPacket+0x1c4>)
 8002d36:	785b      	ldrb	r3, [r3, #1]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	68f9      	ldr	r1, [r7, #12]
 8002d44:	f7fd fa44 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8002d4c:	f7ff fa1c 	bl	8002188 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002d56:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <_SendPacket+0x1c4>)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	60d3      	str	r3, [r2, #12]
 8002d5c:	e00b      	b.n	8002d76 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <_SendPacket+0x1c4>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <_SendPacket+0x1c4>)
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	e004      	b.n	8002d76 <_SendPacket+0x172>
    goto SendDone;
 8002d6c:	bf00      	nop
 8002d6e:	e002      	b.n	8002d76 <_SendPacket+0x172>
      goto SendDone;
 8002d70:	bf00      	nop
 8002d72:	e000      	b.n	8002d76 <_SendPacket+0x172>
      goto SendDone;
 8002d74:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <_SendPacket+0x1c4>)
 8002d78:	7e1b      	ldrb	r3, [r3, #24]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <_SendPacket+0x1cc>)
 8002d7e:	460b      	mov	r3, r1
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	440b      	add	r3, r1
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	336c      	adds	r3, #108	; 0x6c
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <_SendPacket+0x1c4>)
 8002d8e:	7e1b      	ldrb	r3, [r3, #24]
 8002d90:	4618      	mov	r0, r3
 8002d92:	490f      	ldr	r1, [pc, #60]	; (8002dd0 <_SendPacket+0x1cc>)
 8002d94:	4603      	mov	r3, r0
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4403      	add	r3, r0
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3370      	adds	r3, #112	; 0x70
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d00b      	beq.n	8002dbe <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <_SendPacket+0x1c4>)
 8002da8:	789b      	ldrb	r3, [r3, #2]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d107      	bne.n	8002dbe <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <_SendPacket+0x1c4>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002db4:	f7ff fe40 	bl	8002a38 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <_SendPacket+0x1c4>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002dbe:	bf00      	nop
 8002dc0:	3728      	adds	r7, #40	; 0x28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	2001a628 	.word	0x2001a628
 8002dcc:	e0001004 	.word	0xe0001004
 8002dd0:	2001a73c 	.word	0x2001a73c

08002dd4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002de2:	2300      	movs	r3, #0
 8002de4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002de8:	4917      	ldr	r1, [pc, #92]	; (8002e48 <SEGGER_SYSVIEW_Init+0x74>)
 8002dea:	4818      	ldr	r0, [pc, #96]	; (8002e4c <SEGGER_SYSVIEW_Init+0x78>)
 8002dec:	f7ff fcf8 	bl	80027e0 <SEGGER_RTT_AllocUpBuffer>
 8002df0:	4603      	mov	r3, r0
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <SEGGER_SYSVIEW_Init+0x7c>)
 8002df6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8002df8:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <SEGGER_SYSVIEW_Init+0x7c>)
 8002dfa:	785a      	ldrb	r2, [r3, #1]
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <SEGGER_SYSVIEW_Init+0x7c>)
 8002dfe:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002e00:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <SEGGER_SYSVIEW_Init+0x7c>)
 8002e02:	7e1b      	ldrb	r3, [r3, #24]
 8002e04:	4618      	mov	r0, r3
 8002e06:	2300      	movs	r3, #0
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	4a11      	ldr	r2, [pc, #68]	; (8002e54 <SEGGER_SYSVIEW_Init+0x80>)
 8002e0e:	490f      	ldr	r1, [pc, #60]	; (8002e4c <SEGGER_SYSVIEW_Init+0x78>)
 8002e10:	f7ff fd6a 	bl	80028e8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <SEGGER_SYSVIEW_Init+0x7c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <SEGGER_SYSVIEW_Init+0x84>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <SEGGER_SYSVIEW_Init+0x7c>)
 8002e20:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002e22:	4a0b      	ldr	r2, [pc, #44]	; (8002e50 <SEGGER_SYSVIEW_Init+0x7c>)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002e28:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <SEGGER_SYSVIEW_Init+0x7c>)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002e2e:	4a08      	ldr	r2, [pc, #32]	; (8002e50 <SEGGER_SYSVIEW_Init+0x7c>)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002e34:	4a06      	ldr	r2, [pc, #24]	; (8002e50 <SEGGER_SYSVIEW_Init+0x7c>)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <SEGGER_SYSVIEW_Init+0x7c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20019620 	.word	0x20019620
 8002e4c:	080058d4 	.word	0x080058d4
 8002e50:	2001a628 	.word	0x2001a628
 8002e54:	2001a620 	.word	0x2001a620
 8002e58:	e0001004 	.word	0xe0001004

08002e5c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002e64:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6113      	str	r3, [r2, #16]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	2001a628 	.word	0x2001a628

08002e7c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002e84:	f3ef 8311 	mrs	r3, BASEPRI
 8002e88:	f04f 0120 	mov.w	r1, #32
 8002e8c:	f381 8811 	msr	BASEPRI, r1
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4808      	ldr	r0, [pc, #32]	; (8002eb4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002e94:	f7ff fdc4 	bl	8002a20 <_PreparePacket>
 8002e98:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68b8      	ldr	r0, [r7, #8]
 8002ea0:	f7ff feb0 	bl	8002c04 <_SendPacket>
  RECORD_END();
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f383 8811 	msr	BASEPRI, r3
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	2001a658 	.word	0x2001a658

08002eb8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002ec2:	f3ef 8311 	mrs	r3, BASEPRI
 8002ec6:	f04f 0120 	mov.w	r1, #32
 8002eca:	f381 8811 	msr	BASEPRI, r1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	4816      	ldr	r0, [pc, #88]	; (8002f2c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002ed2:	f7ff fda5 	bl	8002a20 <_PreparePacket>
 8002ed6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	61fb      	str	r3, [r7, #28]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	e00b      	b.n	8002efe <SEGGER_SYSVIEW_RecordU32+0x46>
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	1c59      	adds	r1, r3, #1
 8002eee:	61f9      	str	r1, [r7, #28]
 8002ef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	09db      	lsrs	r3, r3, #7
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b7f      	cmp	r3, #127	; 0x7f
 8002f02:	d8f0      	bhi.n	8002ee6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	61fa      	str	r2, [r7, #28]
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68f9      	ldr	r1, [r7, #12]
 8002f18:	6938      	ldr	r0, [r7, #16]
 8002f1a:	f7ff fe73 	bl	8002c04 <_SendPacket>
  RECORD_END();
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f383 8811 	msr	BASEPRI, r3
}
 8002f24:	bf00      	nop
 8002f26:	3720      	adds	r7, #32
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	2001a658 	.word	0x2001a658

08002f30 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08c      	sub	sp, #48	; 0x30
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8002f40:	f04f 0120 	mov.w	r1, #32
 8002f44:	f381 8811 	msr	BASEPRI, r1
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	4825      	ldr	r0, [pc, #148]	; (8002fe0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002f4c:	f7ff fd68 	bl	8002a20 <_PreparePacket>
 8002f50:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f5e:	e00b      	b.n	8002f78 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f66:	1c59      	adds	r1, r3, #1
 8002f68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002f6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	09db      	lsrs	r3, r3, #7
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f7c:	d8f0      	bhi.n	8002f60 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	623b      	str	r3, [r7, #32]
 8002f96:	e00b      	b.n	8002fb0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	1c59      	adds	r1, r3, #1
 8002fa0:	6279      	str	r1, [r7, #36]	; 0x24
 8002fa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	09db      	lsrs	r3, r3, #7
 8002fae:	623b      	str	r3, [r7, #32]
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8002fb4:	d8f0      	bhi.n	8002f98 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	627a      	str	r2, [r7, #36]	; 0x24
 8002fbc:	6a3a      	ldr	r2, [r7, #32]
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	6979      	ldr	r1, [r7, #20]
 8002fca:	69b8      	ldr	r0, [r7, #24]
 8002fcc:	f7ff fe1a 	bl	8002c04 <_SendPacket>
  RECORD_END();
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f383 8811 	msr	BASEPRI, r3
}
 8002fd6:	bf00      	nop
 8002fd8:	3730      	adds	r7, #48	; 0x30
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	2001a658 	.word	0x2001a658

08002fe4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08c      	sub	sp, #48	; 0x30
 8002fe8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8002fea:	4b59      	ldr	r3, [pc, #356]	; (8003150 <SEGGER_SYSVIEW_Start+0x16c>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002ff0:	f3ef 8311 	mrs	r3, BASEPRI
 8002ff4:	f04f 0120 	mov.w	r1, #32
 8002ff8:	f381 8811 	msr	BASEPRI, r1
 8002ffc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002ffe:	4b54      	ldr	r3, [pc, #336]	; (8003150 <SEGGER_SYSVIEW_Start+0x16c>)
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	220a      	movs	r2, #10
 8003004:	4953      	ldr	r1, [pc, #332]	; (8003154 <SEGGER_SYSVIEW_Start+0x170>)
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd f8e2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003012:	f7ff f8b9 	bl	8002188 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003016:	200a      	movs	r0, #10
 8003018:	f7ff ff30 	bl	8002e7c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800301c:	f3ef 8311 	mrs	r3, BASEPRI
 8003020:	f04f 0120 	mov.w	r1, #32
 8003024:	f381 8811 	msr	BASEPRI, r1
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	484b      	ldr	r0, [pc, #300]	; (8003158 <SEGGER_SYSVIEW_Start+0x174>)
 800302c:	f7ff fcf8 	bl	8002a20 <_PreparePacket>
 8003030:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303a:	4b45      	ldr	r3, [pc, #276]	; (8003150 <SEGGER_SYSVIEW_Start+0x16c>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003040:	e00b      	b.n	800305a <SEGGER_SYSVIEW_Start+0x76>
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	b2da      	uxtb	r2, r3
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	1c59      	adds	r1, r3, #1
 800304a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800304c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	09db      	lsrs	r3, r3, #7
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	2b7f      	cmp	r3, #127	; 0x7f
 800305e:	d8f0      	bhi.n	8003042 <SEGGER_SYSVIEW_Start+0x5e>
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
 8003074:	4b36      	ldr	r3, [pc, #216]	; (8003150 <SEGGER_SYSVIEW_Start+0x16c>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	623b      	str	r3, [r7, #32]
 800307a:	e00b      	b.n	8003094 <SEGGER_SYSVIEW_Start+0xb0>
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	1c59      	adds	r1, r3, #1
 8003084:	6279      	str	r1, [r7, #36]	; 0x24
 8003086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	09db      	lsrs	r3, r3, #7
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	2b7f      	cmp	r3, #127	; 0x7f
 8003098:	d8f0      	bhi.n	800307c <SEGGER_SYSVIEW_Start+0x98>
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	627a      	str	r2, [r7, #36]	; 0x24
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	4b28      	ldr	r3, [pc, #160]	; (8003150 <SEGGER_SYSVIEW_Start+0x16c>)
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	e00b      	b.n	80030ce <SEGGER_SYSVIEW_Start+0xea>
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	61f9      	str	r1, [r7, #28]
 80030c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	09db      	lsrs	r3, r3, #7
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	2b7f      	cmp	r3, #127	; 0x7f
 80030d2:	d8f0      	bhi.n	80030b6 <SEGGER_SYSVIEW_Start+0xd2>
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	61fa      	str	r2, [r7, #28]
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	e00b      	b.n	8003106 <SEGGER_SYSVIEW_Start+0x122>
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	1c59      	adds	r1, r3, #1
 80030f6:	6179      	str	r1, [r7, #20]
 80030f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	09db      	lsrs	r3, r3, #7
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b7f      	cmp	r3, #127	; 0x7f
 800310a:	d8f0      	bhi.n	80030ee <SEGGER_SYSVIEW_Start+0x10a>
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	617a      	str	r2, [r7, #20]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800311c:	2218      	movs	r2, #24
 800311e:	6839      	ldr	r1, [r7, #0]
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff fd6f 	bl	8002c04 <_SendPacket>
      RECORD_END();
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <SEGGER_SYSVIEW_Start+0x16c>)
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <SEGGER_SYSVIEW_Start+0x16c>)
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800313a:	f000 f9eb 	bl	8003514 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800313e:	f000 f9b1 	bl	80034a4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003142:	f000 fc23 	bl	800398c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003146:	bf00      	nop
 8003148:	3730      	adds	r7, #48	; 0x30
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	2001a628 	.word	0x2001a628
 8003154:	080058f0 	.word	0x080058f0
 8003158:	2001a658 	.word	0x2001a658

0800315c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003162:	f3ef 8311 	mrs	r3, BASEPRI
 8003166:	f04f 0120 	mov.w	r1, #32
 800316a:	f381 8811 	msr	BASEPRI, r1
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	480b      	ldr	r0, [pc, #44]	; (80031a0 <SEGGER_SYSVIEW_Stop+0x44>)
 8003172:	f7ff fc55 	bl	8002a20 <_PreparePacket>
 8003176:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003180:	220b      	movs	r2, #11
 8003182:	6839      	ldr	r1, [r7, #0]
 8003184:	6838      	ldr	r0, [r7, #0]
 8003186:	f7ff fd3d 	bl	8002c04 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f383 8811 	msr	BASEPRI, r3
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	2001a658 	.word	0x2001a658
 80031a4:	2001a628 	.word	0x2001a628

080031a8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	; 0x30
 80031ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80031ae:	f3ef 8311 	mrs	r3, BASEPRI
 80031b2:	f04f 0120 	mov.w	r1, #32
 80031b6:	f381 8811 	msr	BASEPRI, r1
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	4845      	ldr	r0, [pc, #276]	; (80032d4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80031be:	f7ff fc2f 	bl	8002a20 <_PreparePacket>
 80031c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031cc:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d2:	e00b      	b.n	80031ec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80031de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	09db      	lsrs	r3, r3, #7
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	2b7f      	cmp	r3, #127	; 0x7f
 80031f0:	d8f0      	bhi.n	80031d4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
 8003206:	4b34      	ldr	r3, [pc, #208]	; (80032d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	623b      	str	r3, [r7, #32]
 800320c:	e00b      	b.n	8003226 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	1c59      	adds	r1, r3, #1
 8003216:	6279      	str	r1, [r7, #36]	; 0x24
 8003218:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	09db      	lsrs	r3, r3, #7
 8003224:	623b      	str	r3, [r7, #32]
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	2b7f      	cmp	r3, #127	; 0x7f
 800322a:	d8f0      	bhi.n	800320e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	627a      	str	r2, [r7, #36]	; 0x24
 8003232:	6a3a      	ldr	r2, [r7, #32]
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e00b      	b.n	8003260 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	b2da      	uxtb	r2, r3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	1c59      	adds	r1, r3, #1
 8003250:	61f9      	str	r1, [r7, #28]
 8003252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	09db      	lsrs	r3, r3, #7
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b7f      	cmp	r3, #127	; 0x7f
 8003264:	d8f0      	bhi.n	8003248 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	61fa      	str	r2, [r7, #28]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	e00b      	b.n	8003298 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	1c59      	adds	r1, r3, #1
 8003288:	6179      	str	r1, [r7, #20]
 800328a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	09db      	lsrs	r3, r3, #7
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	2b7f      	cmp	r3, #127	; 0x7f
 800329c:	d8f0      	bhi.n	8003280 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	617a      	str	r2, [r7, #20]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80032ae:	2218      	movs	r2, #24
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	68b8      	ldr	r0, [r7, #8]
 80032b4:	f7ff fca6 	bl	8002c04 <_SendPacket>
  RECORD_END();
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	4798      	blx	r3
  }
}
 80032cc:	bf00      	nop
 80032ce:	3730      	adds	r7, #48	; 0x30
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	2001a658 	.word	0x2001a658
 80032d8:	2001a628 	.word	0x2001a628

080032dc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b092      	sub	sp, #72	; 0x48
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80032e4:	f3ef 8311 	mrs	r3, BASEPRI
 80032e8:	f04f 0120 	mov.w	r1, #32
 80032ec:	f381 8811 	msr	BASEPRI, r1
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	486a      	ldr	r0, [pc, #424]	; (800349c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80032f4:	f7ff fb94 	bl	8002a20 <_PreparePacket>
 80032f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	647b      	str	r3, [r7, #68]	; 0x44
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b66      	ldr	r3, [pc, #408]	; (80034a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	643b      	str	r3, [r7, #64]	; 0x40
 800330e:	e00b      	b.n	8003328 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003312:	b2da      	uxtb	r2, r3
 8003314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003316:	1c59      	adds	r1, r3, #1
 8003318:	6479      	str	r1, [r7, #68]	; 0x44
 800331a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003324:	09db      	lsrs	r3, r3, #7
 8003326:	643b      	str	r3, [r7, #64]	; 0x40
 8003328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332a:	2b7f      	cmp	r3, #127	; 0x7f
 800332c:	d8f0      	bhi.n	8003310 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800332e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	647a      	str	r2, [r7, #68]	; 0x44
 8003334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	63bb      	str	r3, [r7, #56]	; 0x38
 8003348:	e00b      	b.n	8003362 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	b2da      	uxtb	r2, r3
 800334e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003350:	1c59      	adds	r1, r3, #1
 8003352:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	09db      	lsrs	r3, r3, #7
 8003360:	63bb      	str	r3, [r7, #56]	; 0x38
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	2b7f      	cmp	r3, #127	; 0x7f
 8003366:	d8f0      	bhi.n	800334a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800336e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003376:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	4619      	mov	r1, r3
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7ff fafd 	bl	8002980 <_EncodeStr>
 8003386:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003388:	2209      	movs	r2, #9
 800338a:	68f9      	ldr	r1, [r7, #12]
 800338c:	6938      	ldr	r0, [r7, #16]
 800338e:	f7ff fc39 	bl	8002c04 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	637b      	str	r3, [r7, #52]	; 0x34
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b40      	ldr	r3, [pc, #256]	; (80034a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	633b      	str	r3, [r7, #48]	; 0x30
 80033a6:	e00b      	b.n	80033c0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ae:	1c59      	adds	r1, r3, #1
 80033b0:	6379      	str	r1, [r7, #52]	; 0x34
 80033b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	09db      	lsrs	r3, r3, #7
 80033be:	633b      	str	r3, [r7, #48]	; 0x30
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	2b7f      	cmp	r3, #127	; 0x7f
 80033c4:	d8f0      	bhi.n	80033a8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80033c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	637a      	str	r2, [r7, #52]	; 0x34
 80033cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e0:	e00b      	b.n	80033fa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	1c59      	adds	r1, r3, #1
 80033ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80033ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	09db      	lsrs	r3, r3, #7
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	2b7f      	cmp	r3, #127	; 0x7f
 80033fe:	d8f0      	bhi.n	80033e2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	623b      	str	r3, [r7, #32]
 800341a:	e00b      	b.n	8003434 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	6279      	str	r1, [r7, #36]	; 0x24
 8003426:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	09db      	lsrs	r3, r3, #7
 8003432:	623b      	str	r3, [r7, #32]
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	2b7f      	cmp	r3, #127	; 0x7f
 8003438:	d8f0      	bhi.n	800341c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	627a      	str	r2, [r7, #36]	; 0x24
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	e00b      	b.n	800346c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	b2da      	uxtb	r2, r3
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	1c59      	adds	r1, r3, #1
 800345c:	61f9      	str	r1, [r7, #28]
 800345e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	09db      	lsrs	r3, r3, #7
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b7f      	cmp	r3, #127	; 0x7f
 8003470:	d8f0      	bhi.n	8003454 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	61fa      	str	r2, [r7, #28]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003482:	2215      	movs	r2, #21
 8003484:	68f9      	ldr	r1, [r7, #12]
 8003486:	6938      	ldr	r0, [r7, #16]
 8003488:	f7ff fbbc 	bl	8002c04 <_SendPacket>
  RECORD_END();
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f383 8811 	msr	BASEPRI, r3
}
 8003492:	bf00      	nop
 8003494:	3748      	adds	r7, #72	; 0x48
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2001a658 	.word	0x2001a658
 80034a0:	2001a628 	.word	0x2001a628

080034a4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80034a8:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80034ba:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4798      	blx	r3
  }
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	2001a628 	.word	0x2001a628

080034cc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80034d4:	f3ef 8311 	mrs	r3, BASEPRI
 80034d8:	f04f 0120 	mov.w	r1, #32
 80034dc:	f381 8811 	msr	BASEPRI, r1
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	480b      	ldr	r0, [pc, #44]	; (8003510 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80034e4:	f7ff fa9c 	bl	8002a20 <_PreparePacket>
 80034e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80034ea:	2280      	movs	r2, #128	; 0x80
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	6938      	ldr	r0, [r7, #16]
 80034f0:	f7ff fa46 	bl	8002980 <_EncodeStr>
 80034f4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80034f6:	220e      	movs	r2, #14
 80034f8:	68f9      	ldr	r1, [r7, #12]
 80034fa:	6938      	ldr	r0, [r7, #16]
 80034fc:	f7ff fb82 	bl	8002c04 <_SendPacket>
  RECORD_END();
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f383 8811 	msr	BASEPRI, r3
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	2001a658 	.word	0x2001a658

08003514 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01a      	beq.n	8003558 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d015      	beq.n	8003558 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800352c:	4b10      	ldr	r3, [pc, #64]	; (8003570 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4798      	blx	r3
 8003534:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003538:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800353a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	000a      	movs	r2, r1
 8003548:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800354a:	4613      	mov	r3, r2
 800354c:	461a      	mov	r2, r3
 800354e:	4621      	mov	r1, r4
 8003550:	200d      	movs	r0, #13
 8003552:	f7ff fced 	bl	8002f30 <SEGGER_SYSVIEW_RecordU32x2>
 8003556:	e006      	b.n	8003566 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4619      	mov	r1, r3
 800355e:	200c      	movs	r0, #12
 8003560:	f7ff fcaa 	bl	8002eb8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bd90      	pop	{r4, r7, pc}
 800356e:	bf00      	nop
 8003570:	2001a628 	.word	0x2001a628
 8003574:	e0001004 	.word	0xe0001004

08003578 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800357e:	f3ef 8311 	mrs	r3, BASEPRI
 8003582:	f04f 0120 	mov.w	r1, #32
 8003586:	f381 8811 	msr	BASEPRI, r1
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	4819      	ldr	r0, [pc, #100]	; (80035f4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800358e:	f7ff fa47 	bl	8002a20 <_PreparePacket>
 8003592:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003598:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	e00b      	b.n	80035c4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	6179      	str	r1, [r7, #20]
 80035b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	09db      	lsrs	r3, r3, #7
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2b7f      	cmp	r3, #127	; 0x7f
 80035c8:	d8f0      	bhi.n	80035ac <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	617a      	str	r2, [r7, #20]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80035da:	2202      	movs	r2, #2
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	68b8      	ldr	r0, [r7, #8]
 80035e0:	f7ff fb10 	bl	8002c04 <_SendPacket>
  RECORD_END();
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f383 8811 	msr	BASEPRI, r3
}
 80035ea:	bf00      	nop
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	2001a658 	.word	0x2001a658
 80035f8:	e000ed04 	.word	0xe000ed04

080035fc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003602:	f3ef 8311 	mrs	r3, BASEPRI
 8003606:	f04f 0120 	mov.w	r1, #32
 800360a:	f381 8811 	msr	BASEPRI, r1
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	4807      	ldr	r0, [pc, #28]	; (8003630 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003612:	f7ff fa05 	bl	8002a20 <_PreparePacket>
 8003616:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003618:	2203      	movs	r2, #3
 800361a:	6839      	ldr	r1, [r7, #0]
 800361c:	6838      	ldr	r0, [r7, #0]
 800361e:	f7ff faf1 	bl	8002c04 <_SendPacket>
  RECORD_END();
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f383 8811 	msr	BASEPRI, r3
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	2001a658 	.word	0x2001a658

08003634 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800363a:	f3ef 8311 	mrs	r3, BASEPRI
 800363e:	f04f 0120 	mov.w	r1, #32
 8003642:	f381 8811 	msr	BASEPRI, r1
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	4807      	ldr	r0, [pc, #28]	; (8003668 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800364a:	f7ff f9e9 	bl	8002a20 <_PreparePacket>
 800364e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003650:	2212      	movs	r2, #18
 8003652:	6839      	ldr	r1, [r7, #0]
 8003654:	6838      	ldr	r0, [r7, #0]
 8003656:	f7ff fad5 	bl	8002c04 <_SendPacket>
  RECORD_END();
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f383 8811 	msr	BASEPRI, r3
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	2001a658 	.word	0x2001a658

0800366c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003672:	f3ef 8311 	mrs	r3, BASEPRI
 8003676:	f04f 0120 	mov.w	r1, #32
 800367a:	f381 8811 	msr	BASEPRI, r1
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	4807      	ldr	r0, [pc, #28]	; (80036a0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003682:	f7ff f9cd 	bl	8002a20 <_PreparePacket>
 8003686:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003688:	2211      	movs	r2, #17
 800368a:	6839      	ldr	r1, [r7, #0]
 800368c:	6838      	ldr	r0, [r7, #0]
 800368e:	f7ff fab9 	bl	8002c04 <_SendPacket>
  RECORD_END();
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f383 8811 	msr	BASEPRI, r3
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	2001a658 	.word	0x2001a658

080036a4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80036ac:	f3ef 8311 	mrs	r3, BASEPRI
 80036b0:	f04f 0120 	mov.w	r1, #32
 80036b4:	f381 8811 	msr	BASEPRI, r1
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	4819      	ldr	r0, [pc, #100]	; (8003720 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80036bc:	f7ff f9b0 	bl	8002a20 <_PreparePacket>
 80036c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	e00b      	b.n	80036f2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	1c59      	adds	r1, r3, #1
 80036e2:	61f9      	str	r1, [r7, #28]
 80036e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	09db      	lsrs	r3, r3, #7
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2b7f      	cmp	r3, #127	; 0x7f
 80036f6:	d8f0      	bhi.n	80036da <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	61fa      	str	r2, [r7, #28]
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003708:	2208      	movs	r2, #8
 800370a:	68f9      	ldr	r1, [r7, #12]
 800370c:	6938      	ldr	r0, [r7, #16]
 800370e:	f7ff fa79 	bl	8002c04 <_SendPacket>
  RECORD_END();
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f383 8811 	msr	BASEPRI, r3
}
 8003718:	bf00      	nop
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	2001a658 	.word	0x2001a658
 8003724:	2001a628 	.word	0x2001a628

08003728 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003730:	f3ef 8311 	mrs	r3, BASEPRI
 8003734:	f04f 0120 	mov.w	r1, #32
 8003738:	f381 8811 	msr	BASEPRI, r1
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	4819      	ldr	r0, [pc, #100]	; (80037a4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003740:	f7ff f96e 	bl	8002a20 <_PreparePacket>
 8003744:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	e00b      	b.n	8003776 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	b2da      	uxtb	r2, r3
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	1c59      	adds	r1, r3, #1
 8003766:	61f9      	str	r1, [r7, #28]
 8003768:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	09db      	lsrs	r3, r3, #7
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b7f      	cmp	r3, #127	; 0x7f
 800377a:	d8f0      	bhi.n	800375e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	61fa      	str	r2, [r7, #28]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	701a      	strb	r2, [r3, #0]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800378c:	2204      	movs	r2, #4
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	6938      	ldr	r0, [r7, #16]
 8003792:	f7ff fa37 	bl	8002c04 <_SendPacket>
  RECORD_END();
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f383 8811 	msr	BASEPRI, r3
}
 800379c:	bf00      	nop
 800379e:	3720      	adds	r7, #32
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	2001a658 	.word	0x2001a658
 80037a8:	2001a628 	.word	0x2001a628

080037ac <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80037b4:	f3ef 8311 	mrs	r3, BASEPRI
 80037b8:	f04f 0120 	mov.w	r1, #32
 80037bc:	f381 8811 	msr	BASEPRI, r1
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	4819      	ldr	r0, [pc, #100]	; (8003828 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80037c4:	f7ff f92c 	bl	8002a20 <_PreparePacket>
 80037c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80037ce:	4b17      	ldr	r3, [pc, #92]	; (800382c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	e00b      	b.n	80037fa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	1c59      	adds	r1, r3, #1
 80037ea:	61f9      	str	r1, [r7, #28]
 80037ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	09db      	lsrs	r3, r3, #7
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b7f      	cmp	r3, #127	; 0x7f
 80037fe:	d8f0      	bhi.n	80037e2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	61fa      	str	r2, [r7, #28]
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003810:	2206      	movs	r2, #6
 8003812:	68f9      	ldr	r1, [r7, #12]
 8003814:	6938      	ldr	r0, [r7, #16]
 8003816:	f7ff f9f5 	bl	8002c04 <_SendPacket>
  RECORD_END();
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f383 8811 	msr	BASEPRI, r3
}
 8003820:	bf00      	nop
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	2001a658 	.word	0x2001a658
 800382c:	2001a628 	.word	0x2001a628

08003830 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	1ad3      	subs	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	2001a628 	.word	0x2001a628

08003850 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b08c      	sub	sp, #48	; 0x30
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d06d      	beq.n	800393e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003862:	4b39      	ldr	r3, [pc, #228]	; (8003948 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003868:	2300      	movs	r3, #0
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
 800386c:	e008      	b.n	8003880 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387c:	3301      	adds	r3, #1
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003884:	429a      	cmp	r2, r3
 8003886:	d3f2      	bcc.n	800386e <SEGGER_SYSVIEW_SendModule+0x1e>
 8003888:	e000      	b.n	800388c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800388a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d055      	beq.n	800393e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003892:	f3ef 8311 	mrs	r3, BASEPRI
 8003896:	f04f 0120 	mov.w	r1, #32
 800389a:	f381 8811 	msr	BASEPRI, r1
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	482a      	ldr	r0, [pc, #168]	; (800394c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80038a2:	f7ff f8bd 	bl	8002a20 <_PreparePacket>
 80038a6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	623b      	str	r3, [r7, #32]
 80038b4:	e00b      	b.n	80038ce <SEGGER_SYSVIEW_SendModule+0x7e>
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	1c59      	adds	r1, r3, #1
 80038be:	6279      	str	r1, [r7, #36]	; 0x24
 80038c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	701a      	strb	r2, [r3, #0]
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	09db      	lsrs	r3, r3, #7
 80038cc:	623b      	str	r3, [r7, #32]
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	2b7f      	cmp	r3, #127	; 0x7f
 80038d2:	d8f0      	bhi.n	80038b6 <SEGGER_SYSVIEW_SendModule+0x66>
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	627a      	str	r2, [r7, #36]	; 0x24
 80038da:	6a3a      	ldr	r2, [r7, #32]
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	e00b      	b.n	8003908 <SEGGER_SYSVIEW_SendModule+0xb8>
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	1c59      	adds	r1, r3, #1
 80038f8:	61f9      	str	r1, [r7, #28]
 80038fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	09db      	lsrs	r3, r3, #7
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b7f      	cmp	r3, #127	; 0x7f
 800390c:	d8f0      	bhi.n	80038f0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	61fa      	str	r2, [r7, #28]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2280      	movs	r2, #128	; 0x80
 8003924:	4619      	mov	r1, r3
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7ff f82a 	bl	8002980 <_EncodeStr>
 800392c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800392e:	2216      	movs	r2, #22
 8003930:	68f9      	ldr	r1, [r7, #12]
 8003932:	6938      	ldr	r0, [r7, #16]
 8003934:	f7ff f966 	bl	8002c04 <_SendPacket>
      RECORD_END();
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800393e:	bf00      	nop
 8003940:	3730      	adds	r7, #48	; 0x30
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	2001a650 	.word	0x2001a650
 800394c:	2001a658 	.word	0x2001a658

08003950 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00f      	beq.n	800397e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f2      	bne.n	8003964 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	2001a650 	.word	0x2001a650

0800398c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003992:	f3ef 8311 	mrs	r3, BASEPRI
 8003996:	f04f 0120 	mov.w	r1, #32
 800399a:	f381 8811 	msr	BASEPRI, r1
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	4817      	ldr	r0, [pc, #92]	; (8003a00 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80039a2:	f7ff f83d 	bl	8002a20 <_PreparePacket>
 80039a6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	e00b      	b.n	80039d0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	1c59      	adds	r1, r3, #1
 80039c0:	6179      	str	r1, [r7, #20]
 80039c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	09db      	lsrs	r3, r3, #7
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b7f      	cmp	r3, #127	; 0x7f
 80039d4:	d8f0      	bhi.n	80039b8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	617a      	str	r2, [r7, #20]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80039e6:	221b      	movs	r2, #27
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	68b8      	ldr	r0, [r7, #8]
 80039ec:	f7ff f90a 	bl	8002c04 <_SendPacket>
  RECORD_END();
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f383 8811 	msr	BASEPRI, r3
}
 80039f6:	bf00      	nop
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	2001a658 	.word	0x2001a658
 8003a04:	2001a654 	.word	0x2001a654

08003a08 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003a10:	f3ef 8311 	mrs	r3, BASEPRI
 8003a14:	f04f 0120 	mov.w	r1, #32
 8003a18:	f381 8811 	msr	BASEPRI, r1
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	4827      	ldr	r0, [pc, #156]	; (8003abc <SEGGER_SYSVIEW_Warn+0xb4>)
 8003a20:	f7fe fffe 	bl	8002a20 <_PreparePacket>
 8003a24:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	6938      	ldr	r0, [r7, #16]
 8003a2c:	f7fe ffa8 	bl	8002980 <_EncodeStr>
 8003a30:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
 8003a36:	2301      	movs	r3, #1
 8003a38:	623b      	str	r3, [r7, #32]
 8003a3a:	e00b      	b.n	8003a54 <SEGGER_SYSVIEW_Warn+0x4c>
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	1c59      	adds	r1, r3, #1
 8003a44:	6279      	str	r1, [r7, #36]	; 0x24
 8003a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	09db      	lsrs	r3, r3, #7
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	2b7f      	cmp	r3, #127	; 0x7f
 8003a58:	d8f0      	bhi.n	8003a3c <SEGGER_SYSVIEW_Warn+0x34>
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	627a      	str	r2, [r7, #36]	; 0x24
 8003a60:	6a3a      	ldr	r2, [r7, #32]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	e00b      	b.n	8003a8c <SEGGER_SYSVIEW_Warn+0x84>
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	1c59      	adds	r1, r3, #1
 8003a7c:	61f9      	str	r1, [r7, #28]
 8003a7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	09db      	lsrs	r3, r3, #7
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a90:	d8f0      	bhi.n	8003a74 <SEGGER_SYSVIEW_Warn+0x6c>
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	61fa      	str	r2, [r7, #28]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003aa2:	221a      	movs	r2, #26
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	6938      	ldr	r0, [r7, #16]
 8003aa8:	f7ff f8ac 	bl	8002c04 <_SendPacket>
  RECORD_END();
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f383 8811 	msr	BASEPRI, r3
}
 8003ab2:	bf00      	nop
 8003ab4:	3728      	adds	r7, #40	; 0x28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	2001a658 	.word	0x2001a658

08003ac0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003ac6:	7e1b      	ldrb	r3, [r3, #24]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4a13      	ldr	r2, [pc, #76]	; (8003b18 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8003acc:	460b      	mov	r3, r1
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	440b      	add	r3, r1
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	336c      	adds	r3, #108	; 0x6c
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003adc:	7e1b      	ldrb	r3, [r3, #24]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	490d      	ldr	r1, [pc, #52]	; (8003b18 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	4403      	add	r3, r0
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	440b      	add	r3, r1
 8003aec:	3370      	adds	r3, #112	; 0x70
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d00b      	beq.n	8003b0c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003af6:	789b      	ldrb	r3, [r3, #2]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003b02:	f7fe ff99 	bl	8002a38 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003b06:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8003b0c:	4b01      	ldr	r3, [pc, #4]	; (8003b14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	2001a628 	.word	0x2001a628
 8003b18:	2001a73c 	.word	0x2001a73c

08003b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b22:	f000 fba1 	bl	8004268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b26:	f000 f853 	bl	8003bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b2a:	f000 f8bb 	bl	8003ca4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter (for SEGGER)
  DWT_CTRL |= (1 << 0);
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <main+0x94>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <main+0x94>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6013      	str	r3, [r2, #0]

  // Config. uart based SEGGER communication
  SEGGER_UART_init(250000);
 8003b3a:	481e      	ldr	r0, [pc, #120]	; (8003bb4 <main+0x98>)
 8003b3c:	f7fe fac8 	bl	80020d0 <SEGGER_UART_init>

  // Starting the recording (for SEGGER)
  SEGGER_SYSVIEW_Conf();
 8003b40:	f7fe f888 	bl	8001c54 <SEGGER_SYSVIEW_Conf>

  // Config. LED_green_task
  status = xTaskCreate(&led_green_handler, "gtk", 200, NULL, 2, &ledg_task_handle);
 8003b44:	4b1c      	ldr	r3, [pc, #112]	; (8003bb8 <main+0x9c>)
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	2302      	movs	r3, #2
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	22c8      	movs	r2, #200	; 0xc8
 8003b50:	491a      	ldr	r1, [pc, #104]	; (8003bbc <main+0xa0>)
 8003b52:	481b      	ldr	r0, [pc, #108]	; (8003bc0 <main+0xa4>)
 8003b54:	f7fc fd85 	bl	8000662 <xTaskCreate>
 8003b58:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d00a      	beq.n	8003b76 <main+0x5a>
        __asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	60bb      	str	r3, [r7, #8]
    }
 8003b72:	bf00      	nop
 8003b74:	e7fe      	b.n	8003b74 <main+0x58>

  // Config. LED_red_task
  status = xTaskCreate(&led_red_handler, "rtk", 200, NULL, 3, &ledr_task_handle);
 8003b76:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <main+0xa8>)
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	22c8      	movs	r2, #200	; 0xc8
 8003b82:	4911      	ldr	r1, [pc, #68]	; (8003bc8 <main+0xac>)
 8003b84:	4811      	ldr	r0, [pc, #68]	; (8003bcc <main+0xb0>)
 8003b86:	f7fc fd6c 	bl	8000662 <xTaskCreate>
 8003b8a:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d00a      	beq.n	8003ba8 <main+0x8c>
        __asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	607b      	str	r3, [r7, #4]
    }
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <main+0x8a>

  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 8003ba8:	f7fc ff98 	bl	8000adc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003bac:	e7fe      	b.n	8003bac <main+0x90>
 8003bae:	bf00      	nop
 8003bb0:	e0001000 	.word	0xe0001000
 8003bb4:	0003d090 	.word	0x0003d090
 8003bb8:	2001a7e4 	.word	0x2001a7e4
 8003bbc:	080058dc 	.word	0x080058dc
 8003bc0:	08003f75 	.word	0x08003f75
 8003bc4:	2001a7e8 	.word	0x2001a7e8
 8003bc8:	080058e0 	.word	0x080058e0
 8003bcc:	08003f99 	.word	0x08003f99

08003bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b094      	sub	sp, #80	; 0x50
 8003bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bd6:	f107 0320 	add.w	r3, r7, #32
 8003bda:	2230      	movs	r2, #48	; 0x30
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 fdfe 	bl	80057e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003be4:	f107 030c 	add.w	r3, r7, #12
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <SystemClock_Config+0xcc>)
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	4a27      	ldr	r2, [pc, #156]	; (8003c9c <SystemClock_Config+0xcc>)
 8003bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c02:	6413      	str	r3, [r2, #64]	; 0x40
 8003c04:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <SystemClock_Config+0xcc>)
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c10:	2300      	movs	r3, #0
 8003c12:	607b      	str	r3, [r7, #4]
 8003c14:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <SystemClock_Config+0xd0>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a21      	ldr	r2, [pc, #132]	; (8003ca0 <SystemClock_Config+0xd0>)
 8003c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b1f      	ldr	r3, [pc, #124]	; (8003ca0 <SystemClock_Config+0xd0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c30:	2301      	movs	r3, #1
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c34:	2310      	movs	r3, #16
 8003c36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003c40:	2308      	movs	r3, #8
 8003c42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003c44:	23a8      	movs	r3, #168	; 0xa8
 8003c46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003c4c:	2307      	movs	r3, #7
 8003c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c50:	f107 0320 	add.w	r3, r7, #32
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fe43 	bl	80048e0 <HAL_RCC_OscConfig>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003c60:	f000 fa14 	bl	800408c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c64:	230f      	movs	r3, #15
 8003c66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c7c:	f107 030c 	add.w	r3, r7, #12
 8003c80:	2105      	movs	r1, #5
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 f8a4 	bl	8004dd0 <HAL_RCC_ClockConfig>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003c8e:	f000 f9fd 	bl	800408c <Error_Handler>
  }
}
 8003c92:	bf00      	nop
 8003c94:	3750      	adds	r7, #80	; 0x50
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40007000 	.word	0x40007000

08003ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08c      	sub	sp, #48	; 0x30
 8003ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003caa:	f107 031c 	add.w	r3, r7, #28
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	609a      	str	r2, [r3, #8]
 8003cb6:	60da      	str	r2, [r3, #12]
 8003cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	4ba5      	ldr	r3, [pc, #660]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	4aa4      	ldr	r2, [pc, #656]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003cc4:	f043 0310 	orr.w	r3, r3, #16
 8003cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cca:	4ba2      	ldr	r3, [pc, #648]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	61bb      	str	r3, [r7, #24]
 8003cd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	4b9e      	ldr	r3, [pc, #632]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	4a9d      	ldr	r2, [pc, #628]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003ce0:	f043 0304 	orr.w	r3, r3, #4
 8003ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce6:	4b9b      	ldr	r3, [pc, #620]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	4b97      	ldr	r3, [pc, #604]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	4a96      	ldr	r2, [pc, #600]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d00:	6313      	str	r3, [r2, #48]	; 0x30
 8003d02:	4b94      	ldr	r3, [pc, #592]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	4b90      	ldr	r3, [pc, #576]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	4a8f      	ldr	r2, [pc, #572]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1e:	4b8d      	ldr	r3, [pc, #564]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	4b89      	ldr	r3, [pc, #548]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a88      	ldr	r2, [pc, #544]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003d34:	f043 0302 	orr.w	r3, r3, #2
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b86      	ldr	r3, [pc, #536]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	4b82      	ldr	r3, [pc, #520]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4a81      	ldr	r2, [pc, #516]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003d50:	f043 0308 	orr.w	r3, r3, #8
 8003d54:	6313      	str	r3, [r2, #48]	; 0x30
 8003d56:	4b7f      	ldr	r3, [pc, #508]	; (8003f54 <MX_GPIO_Init+0x2b0>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	607b      	str	r3, [r7, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003d62:	2200      	movs	r2, #0
 8003d64:	2108      	movs	r1, #8
 8003d66:	487c      	ldr	r0, [pc, #496]	; (8003f58 <MX_GPIO_Init+0x2b4>)
 8003d68:	f000 fd62 	bl	8004830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	2101      	movs	r1, #1
 8003d70:	487a      	ldr	r0, [pc, #488]	; (8003f5c <MX_GPIO_Init+0x2b8>)
 8003d72:	f000 fd5d 	bl	8004830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003d76:	2200      	movs	r2, #0
 8003d78:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003d7c:	4878      	ldr	r0, [pc, #480]	; (8003f60 <MX_GPIO_Init+0x2bc>)
 8003d7e:	f000 fd57 	bl	8004830 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003d82:	2308      	movs	r3, #8
 8003d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d86:	2301      	movs	r3, #1
 8003d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003d92:	f107 031c 	add.w	r3, r7, #28
 8003d96:	4619      	mov	r1, r3
 8003d98:	486f      	ldr	r0, [pc, #444]	; (8003f58 <MX_GPIO_Init+0x2b4>)
 8003d9a:	f000 fbad 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003da2:	2301      	movs	r3, #1
 8003da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003daa:	2300      	movs	r3, #0
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003dae:	f107 031c 	add.w	r3, r7, #28
 8003db2:	4619      	mov	r1, r3
 8003db4:	4869      	ldr	r0, [pc, #420]	; (8003f5c <MX_GPIO_Init+0x2b8>)
 8003db6:	f000 fb9f 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003dba:	2308      	movs	r3, #8
 8003dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003dca:	2305      	movs	r3, #5
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003dce:	f107 031c 	add.w	r3, r7, #28
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4861      	ldr	r0, [pc, #388]	; (8003f5c <MX_GPIO_Init+0x2b8>)
 8003dd6:	f000 fb8f 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003dde:	4b61      	ldr	r3, [pc, #388]	; (8003f64 <MX_GPIO_Init+0x2c0>)
 8003de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003de6:	f107 031c 	add.w	r3, r7, #28
 8003dea:	4619      	mov	r1, r3
 8003dec:	485e      	ldr	r0, [pc, #376]	; (8003f68 <MX_GPIO_Init+0x2c4>)
 8003dee:	f000 fb83 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003df2:	2310      	movs	r3, #16
 8003df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df6:	2302      	movs	r3, #2
 8003df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003e02:	2306      	movs	r3, #6
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003e06:	f107 031c 	add.w	r3, r7, #28
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4856      	ldr	r0, [pc, #344]	; (8003f68 <MX_GPIO_Init+0x2c4>)
 8003e0e:	f000 fb73 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003e12:	23e0      	movs	r3, #224	; 0xe0
 8003e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e16:	2302      	movs	r3, #2
 8003e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e22:	2305      	movs	r3, #5
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e26:	f107 031c 	add.w	r3, r7, #28
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	484e      	ldr	r0, [pc, #312]	; (8003f68 <MX_GPIO_Init+0x2c4>)
 8003e2e:	f000 fb63 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003e32:	2304      	movs	r3, #4
 8003e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e36:	2300      	movs	r3, #0
 8003e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003e3e:	f107 031c 	add.w	r3, r7, #28
 8003e42:	4619      	mov	r1, r3
 8003e44:	4849      	ldr	r0, [pc, #292]	; (8003f6c <MX_GPIO_Init+0x2c8>)
 8003e46:	f000 fb57 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e50:	2302      	movs	r3, #2
 8003e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e5c:	2305      	movs	r3, #5
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003e60:	f107 031c 	add.w	r3, r7, #28
 8003e64:	4619      	mov	r1, r3
 8003e66:	4841      	ldr	r0, [pc, #260]	; (8003f6c <MX_GPIO_Init+0x2c8>)
 8003e68:	f000 fb46 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003e6c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003e70:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e72:	2301      	movs	r3, #1
 8003e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e7e:	f107 031c 	add.w	r3, r7, #28
 8003e82:	4619      	mov	r1, r3
 8003e84:	4836      	ldr	r0, [pc, #216]	; (8003f60 <MX_GPIO_Init+0x2bc>)
 8003e86:	f000 fb37 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003e8a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e90:	2302      	movs	r3, #2
 8003e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003e9c:	2306      	movs	r3, #6
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ea0:	f107 031c 	add.w	r3, r7, #28
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	482d      	ldr	r0, [pc, #180]	; (8003f5c <MX_GPIO_Init+0x2b8>)
 8003ea8:	f000 fb26 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003eba:	f107 031c 	add.w	r3, r7, #28
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4829      	ldr	r0, [pc, #164]	; (8003f68 <MX_GPIO_Init+0x2c4>)
 8003ec2:	f000 fb19 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003ec6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003ed8:	230a      	movs	r3, #10
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003edc:	f107 031c 	add.w	r3, r7, #28
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4821      	ldr	r0, [pc, #132]	; (8003f68 <MX_GPIO_Init+0x2c4>)
 8003ee4:	f000 fb08 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003ee8:	2320      	movs	r3, #32
 8003eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003eec:	2300      	movs	r3, #0
 8003eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003ef4:	f107 031c 	add.w	r3, r7, #28
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4819      	ldr	r0, [pc, #100]	; (8003f60 <MX_GPIO_Init+0x2bc>)
 8003efc:	f000 fafc 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003f00:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f06:	2312      	movs	r3, #18
 8003f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f12:	2304      	movs	r3, #4
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f16:	f107 031c 	add.w	r3, r7, #28
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4813      	ldr	r0, [pc, #76]	; (8003f6c <MX_GPIO_Init+0x2c8>)
 8003f1e:	f000 faeb 	bl	80044f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003f22:	2302      	movs	r3, #2
 8003f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <MX_GPIO_Init+0x2cc>)
 8003f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003f2e:	f107 031c 	add.w	r3, r7, #28
 8003f32:	4619      	mov	r1, r3
 8003f34:	4808      	ldr	r0, [pc, #32]	; (8003f58 <MX_GPIO_Init+0x2b4>)
 8003f36:	f000 fadf 	bl	80044f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2106      	movs	r1, #6
 8003f3e:	2006      	movs	r0, #6
 8003f40:	f000 fab0 	bl	80044a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003f44:	2006      	movs	r0, #6
 8003f46:	f000 fac9 	bl	80044dc <HAL_NVIC_EnableIRQ>

}
 8003f4a:	bf00      	nop
 8003f4c:	3730      	adds	r7, #48	; 0x30
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40020800 	.word	0x40020800
 8003f60:	40020c00 	.word	0x40020c00
 8003f64:	10110000 	.word	0x10110000
 8003f68:	40020000 	.word	0x40020000
 8003f6c:	40020400 	.word	0x40020400
 8003f70:	10120000 	.word	0x10120000

08003f74 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters){
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8003f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f80:	4804      	ldr	r0, [pc, #16]	; (8003f94 <led_green_handler+0x20>)
 8003f82:	f000 fc6e 	bl	8004862 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8003f86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f8a:	f000 f9af 	bl	80042ec <HAL_Delay>
		switch_priority();
 8003f8e:	f000 f823 	bl	8003fd8 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8003f92:	e7f3      	b.n	8003f7c <led_green_handler+0x8>
 8003f94:	40020c00 	.word	0x40020c00

08003f98 <led_red_handler>:
	}

}

static void led_red_handler(void* parameters){
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8003fa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fa4:	4804      	ldr	r0, [pc, #16]	; (8003fb8 <led_red_handler+0x20>)
 8003fa6:	f000 fc5c 	bl	8004862 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8003faa:	2064      	movs	r0, #100	; 0x64
 8003fac:	f000 f99e 	bl	80042ec <HAL_Delay>
		switch_priority();
 8003fb0:	f000 f812 	bl	8003fd8 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8003fb4:	e7f4      	b.n	8003fa0 <led_red_handler+0x8>
 8003fb6:	bf00      	nop
 8003fb8:	40020c00 	.word	0x40020c00

08003fbc <button_interrupt_handler>:
	}

}

void button_interrupt_handler(void){
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8003fc0:	f7ff fada 	bl	8003578 <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8003fc4:	4b03      	ldr	r3, [pc, #12]	; (8003fd4 <button_interrupt_handler+0x18>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	701a      	strb	r2, [r3, #0]
	traceISR_EXIT();
 8003fca:	f7ff fb17 	bl	80035fc <SEGGER_SYSVIEW_RecordExitISR>
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	2001a73b 	.word	0x2001a73b

08003fd8 <switch_priority>:

void switch_priority(void){
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
	UBaseType_t p1, p2;
	xTaskHandle t1, t2, curr;

	BaseType_t switch_priority = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
	portENTER_CRITICAL();
 8003fe2:	f7fd faff 	bl	80015e4 <vPortEnterCritical>
	if(status_button){
 8003fe6:	4b1d      	ldr	r3, [pc, #116]	; (800405c <switch_priority+0x84>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <switch_priority+0x20>
		status_button = 0;
 8003fee:	4b1b      	ldr	r3, [pc, #108]	; (800405c <switch_priority+0x84>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
		switch_priority = 1;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8003ff8:	f7fd fb24 	bl	8001644 <vPortExitCritical>

	if(switch_priority){
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d027      	beq.n	8004052 <switch_priority+0x7a>
		t1 = xTaskGetHandle("gtk");
 8004002:	4817      	ldr	r0, [pc, #92]	; (8004060 <switch_priority+0x88>)
 8004004:	f7fc fef4 	bl	8000df0 <xTaskGetHandle>
 8004008:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("rtk");
 800400a:	4816      	ldr	r0, [pc, #88]	; (8004064 <switch_priority+0x8c>)
 800400c:	f7fc fef0 	bl	8000df0 <xTaskGetHandle>
 8004010:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 8004012:	6938      	ldr	r0, [r7, #16]
 8004014:	f7fc fc88 	bl	8000928 <uxTaskPriorityGet>
 8004018:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7fc fc84 	bl	8000928 <uxTaskPriorityGet>
 8004020:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8004022:	f7fd f923 	bl	800126c <xTaskGetCurrentTaskHandle>
 8004026:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	429a      	cmp	r2, r3
 800402e:	d108      	bne.n	8004042 <switch_priority+0x6a>
			vTaskPrioritySet(t1, p2);
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	6938      	ldr	r0, [r7, #16]
 8004034:	f7fc fc92 	bl	800095c <vTaskPrioritySet>
			vTaskPrioritySet(t2, p1);
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7fc fc8e 	bl	800095c <vTaskPrioritySet>
			vTaskPrioritySet(t1, p2);
		}

	}

}
 8004040:	e007      	b.n	8004052 <switch_priority+0x7a>
			vTaskPrioritySet(t2, p1);
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7fc fc89 	bl	800095c <vTaskPrioritySet>
			vTaskPrioritySet(t1, p2);
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	6938      	ldr	r0, [r7, #16]
 800404e:	f7fc fc85 	bl	800095c <vTaskPrioritySet>
}
 8004052:	bf00      	nop
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	2001a73b 	.word	0x2001a73b
 8004060:	080058dc 	.word	0x080058dc
 8004064:	080058e0 	.word	0x080058e0

08004068 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800407a:	f000 f917 	bl	80042ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40001000 	.word	0x40001000

0800408c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004090:	b672      	cpsid	i
}
 8004092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004094:	e7fe      	b.n	8004094 <Error_Handler+0x8>
	...

08004098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <HAL_MspInit+0x4c>)
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	4a0f      	ldr	r2, [pc, #60]	; (80040e4 <HAL_MspInit+0x4c>)
 80040a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040ac:	6453      	str	r3, [r2, #68]	; 0x44
 80040ae:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <HAL_MspInit+0x4c>)
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <HAL_MspInit+0x4c>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	4a08      	ldr	r2, [pc, #32]	; (80040e4 <HAL_MspInit+0x4c>)
 80040c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_MspInit+0x4c>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 80040d6:	f7fd fa07 	bl	80014e8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800

080040e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08c      	sub	sp, #48	; 0x30
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80040f8:	2200      	movs	r2, #0
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	2036      	movs	r0, #54	; 0x36
 80040fe:	f000 f9d1 	bl	80044a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004102:	2036      	movs	r0, #54	; 0x36
 8004104:	f000 f9ea 	bl	80044dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	4b1f      	ldr	r3, [pc, #124]	; (800418c <HAL_InitTick+0xa4>)
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	4a1e      	ldr	r2, [pc, #120]	; (800418c <HAL_InitTick+0xa4>)
 8004112:	f043 0310 	orr.w	r3, r3, #16
 8004116:	6413      	str	r3, [r2, #64]	; 0x40
 8004118:	4b1c      	ldr	r3, [pc, #112]	; (800418c <HAL_InitTick+0xa4>)
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004124:	f107 0210 	add.w	r2, r7, #16
 8004128:	f107 0314 	add.w	r3, r7, #20
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f001 f836 	bl	80051a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004134:	f001 f820 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8004138:	4603      	mov	r3, r0
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	4a13      	ldr	r2, [pc, #76]	; (8004190 <HAL_InitTick+0xa8>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	0c9b      	lsrs	r3, r3, #18
 8004148:	3b01      	subs	r3, #1
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800414c:	4b11      	ldr	r3, [pc, #68]	; (8004194 <HAL_InitTick+0xac>)
 800414e:	4a12      	ldr	r2, [pc, #72]	; (8004198 <HAL_InitTick+0xb0>)
 8004150:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <HAL_InitTick+0xac>)
 8004154:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004158:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800415a:	4a0e      	ldr	r2, [pc, #56]	; (8004194 <HAL_InitTick+0xac>)
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <HAL_InitTick+0xac>)
 8004162:	2200      	movs	r2, #0
 8004164:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_InitTick+0xac>)
 8004168:	2200      	movs	r2, #0
 800416a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800416c:	4809      	ldr	r0, [pc, #36]	; (8004194 <HAL_InitTick+0xac>)
 800416e:	f001 f849 	bl	8005204 <HAL_TIM_Base_Init>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d104      	bne.n	8004182 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004178:	4806      	ldr	r0, [pc, #24]	; (8004194 <HAL_InitTick+0xac>)
 800417a:	f001 f89d 	bl	80052b8 <HAL_TIM_Base_Start_IT>
 800417e:	4603      	mov	r3, r0
 8004180:	e000      	b.n	8004184 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
}
 8004184:	4618      	mov	r0, r3
 8004186:	3730      	adds	r7, #48	; 0x30
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40023800 	.word	0x40023800
 8004190:	431bde83 	.word	0x431bde83
 8004194:	2001a7ec 	.word	0x2001a7ec
 8004198:	40001000 	.word	0x40001000

0800419c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041a0:	e7fe      	b.n	80041a0 <NMI_Handler+0x4>

080041a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041a2:	b480      	push	{r7}
 80041a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041a6:	e7fe      	b.n	80041a6 <HardFault_Handler+0x4>

080041a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041ac:	e7fe      	b.n	80041ac <MemManage_Handler+0x4>

080041ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041ae:	b480      	push	{r7}
 80041b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041b2:	e7fe      	b.n	80041b2 <BusFault_Handler+0x4>

080041b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041b8:	e7fe      	b.n	80041b8 <UsageFault_Handler+0x4>

080041ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041be:	bf00      	nop
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	button_interrupt_handler();
 80041cc:	f7ff fef6 	bl	8003fbc <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  /* USER CODE BEGIN EXTI0_IRQn 1 */

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80041d0:	2001      	movs	r0, #1
 80041d2:	f000 fb61 	bl	8004898 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI0_IRQn 1 */
}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80041e0:	4802      	ldr	r0, [pc, #8]	; (80041ec <TIM6_DAC_IRQHandler+0x10>)
 80041e2:	f001 f8d9 	bl	8005398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	2001a7ec 	.word	0x2001a7ec

080041f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <SystemInit+0x20>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	4a05      	ldr	r2, [pc, #20]	; (8004210 <SystemInit+0x20>)
 80041fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800424c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004218:	480d      	ldr	r0, [pc, #52]	; (8004250 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800421a:	490e      	ldr	r1, [pc, #56]	; (8004254 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800421c:	4a0e      	ldr	r2, [pc, #56]	; (8004258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800421e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004220:	e002      	b.n	8004228 <LoopCopyDataInit>

08004222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004226:	3304      	adds	r3, #4

08004228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800422a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800422c:	d3f9      	bcc.n	8004222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800422e:	4a0b      	ldr	r2, [pc, #44]	; (800425c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004230:	4c0b      	ldr	r4, [pc, #44]	; (8004260 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004234:	e001      	b.n	800423a <LoopFillZerobss>

08004236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004238:	3204      	adds	r2, #4

0800423a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800423a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800423c:	d3fb      	bcc.n	8004236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800423e:	f7ff ffd7 	bl	80041f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004242:	f001 fa8d 	bl	8005760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004246:	f7ff fc69 	bl	8003b1c <main>
  bx  lr    
 800424a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800424c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004254:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8004258:	08005924 	.word	0x08005924
  ldr r2, =_sbss
 800425c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8004260:	2001a838 	.word	0x2001a838

08004264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004264:	e7fe      	b.n	8004264 <ADC_IRQHandler>
	...

08004268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800426c:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <HAL_Init+0x40>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0d      	ldr	r2, [pc, #52]	; (80042a8 <HAL_Init+0x40>)
 8004272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_Init+0x40>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a0a      	ldr	r2, [pc, #40]	; (80042a8 <HAL_Init+0x40>)
 800427e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <HAL_Init+0x40>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <HAL_Init+0x40>)
 800428a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004290:	2003      	movs	r0, #3
 8004292:	f000 f8fc 	bl	800448e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004296:	2000      	movs	r0, #0
 8004298:	f7ff ff26 	bl	80040e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800429c:	f7ff fefc 	bl	8004098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023c00 	.word	0x40023c00

080042ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_IncTick+0x20>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_IncTick+0x24>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4413      	add	r3, r2
 80042bc:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <HAL_IncTick+0x24>)
 80042be:	6013      	str	r3, [r2, #0]
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000018 	.word	0x20000018
 80042d0:	2001a834 	.word	0x2001a834

080042d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return uwTick;
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <HAL_GetTick+0x14>)
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	2001a834 	.word	0x2001a834

080042ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042f4:	f7ff ffee 	bl	80042d4 <HAL_GetTick>
 80042f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004304:	d005      	beq.n	8004312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <HAL_Delay+0x44>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004312:	bf00      	nop
 8004314:	f7ff ffde 	bl	80042d4 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	429a      	cmp	r2, r3
 8004322:	d8f7      	bhi.n	8004314 <HAL_Delay+0x28>
  {
  }
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000018 	.word	0x20000018

08004334 <__NVIC_SetPriorityGrouping>:
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004350:	4013      	ands	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800435c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004366:	4a04      	ldr	r2, [pc, #16]	; (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	60d3      	str	r3, [r2, #12]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <__NVIC_GetPriorityGrouping>:
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <__NVIC_GetPriorityGrouping+0x18>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	0a1b      	lsrs	r3, r3, #8
 8004386:	f003 0307 	and.w	r3, r3, #7
}
 800438a:	4618      	mov	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <__NVIC_EnableIRQ>:
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	db0b      	blt.n	80043c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	f003 021f 	and.w	r2, r3, #31
 80043b0:	4907      	ldr	r1, [pc, #28]	; (80043d0 <__NVIC_EnableIRQ+0x38>)
 80043b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2001      	movs	r0, #1
 80043ba:	fa00 f202 	lsl.w	r2, r0, r2
 80043be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000e100 	.word	0xe000e100

080043d4 <__NVIC_SetPriority>:
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	db0a      	blt.n	80043fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	490c      	ldr	r1, [pc, #48]	; (8004420 <__NVIC_SetPriority+0x4c>)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	0112      	lsls	r2, r2, #4
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	440b      	add	r3, r1
 80043f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043fc:	e00a      	b.n	8004414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4908      	ldr	r1, [pc, #32]	; (8004424 <__NVIC_SetPriority+0x50>)
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	3b04      	subs	r3, #4
 800440c:	0112      	lsls	r2, r2, #4
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	440b      	add	r3, r1
 8004412:	761a      	strb	r2, [r3, #24]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	e000e100 	.word	0xe000e100
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004428:	b480      	push	{r7}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f1c3 0307 	rsb	r3, r3, #7
 8004442:	2b04      	cmp	r3, #4
 8004444:	bf28      	it	cs
 8004446:	2304      	movcs	r3, #4
 8004448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3304      	adds	r3, #4
 800444e:	2b06      	cmp	r3, #6
 8004450:	d902      	bls.n	8004458 <NVIC_EncodePriority+0x30>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3b03      	subs	r3, #3
 8004456:	e000      	b.n	800445a <NVIC_EncodePriority+0x32>
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800445c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43da      	mvns	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	401a      	ands	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004470:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	43d9      	mvns	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004480:	4313      	orrs	r3, r2
         );
}
 8004482:	4618      	mov	r0, r3
 8004484:	3724      	adds	r7, #36	; 0x24
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff ff4c 	bl	8004334 <__NVIC_SetPriorityGrouping>
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044b6:	f7ff ff61 	bl	800437c <__NVIC_GetPriorityGrouping>
 80044ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	6978      	ldr	r0, [r7, #20]
 80044c2:	f7ff ffb1 	bl	8004428 <NVIC_EncodePriority>
 80044c6:	4602      	mov	r2, r0
 80044c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044cc:	4611      	mov	r1, r2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ff80 	bl	80043d4 <__NVIC_SetPriority>
}
 80044d4:	bf00      	nop
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff ff54 	bl	8004398 <__NVIC_EnableIRQ>
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b089      	sub	sp, #36	; 0x24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800450a:	2300      	movs	r3, #0
 800450c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	e16b      	b.n	80047ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004514:	2201      	movs	r2, #1
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4013      	ands	r3, r2
 8004526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	429a      	cmp	r2, r3
 800452e:	f040 815a 	bne.w	80047e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	2b01      	cmp	r3, #1
 800453c:	d005      	beq.n	800454a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004546:	2b02      	cmp	r3, #2
 8004548:	d130      	bne.n	80045ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	2203      	movs	r2, #3
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004580:	2201      	movs	r2, #1
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	4013      	ands	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	f003 0201 	and.w	r2, r3, #1
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d017      	beq.n	80045e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	2203      	movs	r2, #3
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d123      	bne.n	800463c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	08da      	lsrs	r2, r3, #3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3208      	adds	r2, #8
 80045fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	220f      	movs	r2, #15
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4013      	ands	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4313      	orrs	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	08da      	lsrs	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3208      	adds	r2, #8
 8004636:	69b9      	ldr	r1, [r7, #24]
 8004638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	2203      	movs	r2, #3
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4013      	ands	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 0203 	and.w	r2, r3, #3
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4313      	orrs	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80b4 	beq.w	80047e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	4b60      	ldr	r3, [pc, #384]	; (8004804 <HAL_GPIO_Init+0x30c>)
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	4a5f      	ldr	r2, [pc, #380]	; (8004804 <HAL_GPIO_Init+0x30c>)
 8004688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800468c:	6453      	str	r3, [r2, #68]	; 0x44
 800468e:	4b5d      	ldr	r3, [pc, #372]	; (8004804 <HAL_GPIO_Init+0x30c>)
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800469a:	4a5b      	ldr	r2, [pc, #364]	; (8004808 <HAL_GPIO_Init+0x310>)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	3302      	adds	r3, #2
 80046a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	220f      	movs	r2, #15
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4013      	ands	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a52      	ldr	r2, [pc, #328]	; (800480c <HAL_GPIO_Init+0x314>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d02b      	beq.n	800471e <HAL_GPIO_Init+0x226>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a51      	ldr	r2, [pc, #324]	; (8004810 <HAL_GPIO_Init+0x318>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d025      	beq.n	800471a <HAL_GPIO_Init+0x222>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a50      	ldr	r2, [pc, #320]	; (8004814 <HAL_GPIO_Init+0x31c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01f      	beq.n	8004716 <HAL_GPIO_Init+0x21e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a4f      	ldr	r2, [pc, #316]	; (8004818 <HAL_GPIO_Init+0x320>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d019      	beq.n	8004712 <HAL_GPIO_Init+0x21a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a4e      	ldr	r2, [pc, #312]	; (800481c <HAL_GPIO_Init+0x324>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <HAL_GPIO_Init+0x216>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a4d      	ldr	r2, [pc, #308]	; (8004820 <HAL_GPIO_Init+0x328>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00d      	beq.n	800470a <HAL_GPIO_Init+0x212>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a4c      	ldr	r2, [pc, #304]	; (8004824 <HAL_GPIO_Init+0x32c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <HAL_GPIO_Init+0x20e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a4b      	ldr	r2, [pc, #300]	; (8004828 <HAL_GPIO_Init+0x330>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d101      	bne.n	8004702 <HAL_GPIO_Init+0x20a>
 80046fe:	2307      	movs	r3, #7
 8004700:	e00e      	b.n	8004720 <HAL_GPIO_Init+0x228>
 8004702:	2308      	movs	r3, #8
 8004704:	e00c      	b.n	8004720 <HAL_GPIO_Init+0x228>
 8004706:	2306      	movs	r3, #6
 8004708:	e00a      	b.n	8004720 <HAL_GPIO_Init+0x228>
 800470a:	2305      	movs	r3, #5
 800470c:	e008      	b.n	8004720 <HAL_GPIO_Init+0x228>
 800470e:	2304      	movs	r3, #4
 8004710:	e006      	b.n	8004720 <HAL_GPIO_Init+0x228>
 8004712:	2303      	movs	r3, #3
 8004714:	e004      	b.n	8004720 <HAL_GPIO_Init+0x228>
 8004716:	2302      	movs	r3, #2
 8004718:	e002      	b.n	8004720 <HAL_GPIO_Init+0x228>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <HAL_GPIO_Init+0x228>
 800471e:	2300      	movs	r3, #0
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	f002 0203 	and.w	r2, r2, #3
 8004726:	0092      	lsls	r2, r2, #2
 8004728:	4093      	lsls	r3, r2
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4313      	orrs	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004730:	4935      	ldr	r1, [pc, #212]	; (8004808 <HAL_GPIO_Init+0x310>)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	089b      	lsrs	r3, r3, #2
 8004736:	3302      	adds	r3, #2
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800473e:	4b3b      	ldr	r3, [pc, #236]	; (800482c <HAL_GPIO_Init+0x334>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	43db      	mvns	r3, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4013      	ands	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004762:	4a32      	ldr	r2, [pc, #200]	; (800482c <HAL_GPIO_Init+0x334>)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004768:	4b30      	ldr	r3, [pc, #192]	; (800482c <HAL_GPIO_Init+0x334>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800478c:	4a27      	ldr	r2, [pc, #156]	; (800482c <HAL_GPIO_Init+0x334>)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004792:	4b26      	ldr	r3, [pc, #152]	; (800482c <HAL_GPIO_Init+0x334>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047b6:	4a1d      	ldr	r2, [pc, #116]	; (800482c <HAL_GPIO_Init+0x334>)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047bc:	4b1b      	ldr	r3, [pc, #108]	; (800482c <HAL_GPIO_Init+0x334>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047e0:	4a12      	ldr	r2, [pc, #72]	; (800482c <HAL_GPIO_Init+0x334>)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	3301      	adds	r3, #1
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	2b0f      	cmp	r3, #15
 80047f0:	f67f ae90 	bls.w	8004514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	3724      	adds	r7, #36	; 0x24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800
 8004808:	40013800 	.word	0x40013800
 800480c:	40020000 	.word	0x40020000
 8004810:	40020400 	.word	0x40020400
 8004814:	40020800 	.word	0x40020800
 8004818:	40020c00 	.word	0x40020c00
 800481c:	40021000 	.word	0x40021000
 8004820:	40021400 	.word	0x40021400
 8004824:	40021800 	.word	0x40021800
 8004828:	40021c00 	.word	0x40021c00
 800482c:	40013c00 	.word	0x40013c00

08004830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	807b      	strh	r3, [r7, #2]
 800483c:	4613      	mov	r3, r2
 800483e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004840:	787b      	ldrb	r3, [r7, #1]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004846:	887a      	ldrh	r2, [r7, #2]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800484c:	e003      	b.n	8004856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800484e:	887b      	ldrh	r3, [r7, #2]
 8004850:	041a      	lsls	r2, r3, #16
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	619a      	str	r2, [r3, #24]
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004874:	887a      	ldrh	r2, [r7, #2]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4013      	ands	r3, r2
 800487a:	041a      	lsls	r2, r3, #16
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	43d9      	mvns	r1, r3
 8004880:	887b      	ldrh	r3, [r7, #2]
 8004882:	400b      	ands	r3, r1
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	619a      	str	r2, [r3, #24]
}
 800488a:	bf00      	nop
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	4013      	ands	r3, r2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d006      	beq.n	80048bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048ae:	4a05      	ldr	r2, [pc, #20]	; (80048c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 f806 	bl	80048c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40013c00 	.word	0x40013c00

080048c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e264      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d075      	beq.n	80049ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048fe:	4ba3      	ldr	r3, [pc, #652]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b04      	cmp	r3, #4
 8004908:	d00c      	beq.n	8004924 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800490a:	4ba0      	ldr	r3, [pc, #640]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004912:	2b08      	cmp	r3, #8
 8004914:	d112      	bne.n	800493c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004916:	4b9d      	ldr	r3, [pc, #628]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004922:	d10b      	bne.n	800493c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004924:	4b99      	ldr	r3, [pc, #612]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d05b      	beq.n	80049e8 <HAL_RCC_OscConfig+0x108>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d157      	bne.n	80049e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e23f      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004944:	d106      	bne.n	8004954 <HAL_RCC_OscConfig+0x74>
 8004946:	4b91      	ldr	r3, [pc, #580]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a90      	ldr	r2, [pc, #576]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 800494c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e01d      	b.n	8004990 <HAL_RCC_OscConfig+0xb0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800495c:	d10c      	bne.n	8004978 <HAL_RCC_OscConfig+0x98>
 800495e:	4b8b      	ldr	r3, [pc, #556]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a8a      	ldr	r2, [pc, #552]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	4b88      	ldr	r3, [pc, #544]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a87      	ldr	r2, [pc, #540]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	e00b      	b.n	8004990 <HAL_RCC_OscConfig+0xb0>
 8004978:	4b84      	ldr	r3, [pc, #528]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a83      	ldr	r2, [pc, #524]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 800497e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	4b81      	ldr	r3, [pc, #516]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a80      	ldr	r2, [pc, #512]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 800498a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800498e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d013      	beq.n	80049c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004998:	f7ff fc9c 	bl	80042d4 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a0:	f7ff fc98 	bl	80042d4 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b64      	cmp	r3, #100	; 0x64
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e204      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b2:	4b76      	ldr	r3, [pc, #472]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCC_OscConfig+0xc0>
 80049be:	e014      	b.n	80049ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c0:	f7ff fc88 	bl	80042d4 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049c8:	f7ff fc84 	bl	80042d4 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	; 0x64
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e1f0      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049da:	4b6c      	ldr	r3, [pc, #432]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0xe8>
 80049e6:	e000      	b.n	80049ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d063      	beq.n	8004abe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049f6:	4b65      	ldr	r3, [pc, #404]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 030c 	and.w	r3, r3, #12
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a02:	4b62      	ldr	r3, [pc, #392]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d11c      	bne.n	8004a48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a0e:	4b5f      	ldr	r3, [pc, #380]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d116      	bne.n	8004a48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1a:	4b5c      	ldr	r3, [pc, #368]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <HAL_RCC_OscConfig+0x152>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d001      	beq.n	8004a32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e1c4      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a32:	4b56      	ldr	r3, [pc, #344]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4952      	ldr	r1, [pc, #328]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a46:	e03a      	b.n	8004abe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d020      	beq.n	8004a92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a50:	4b4f      	ldr	r3, [pc, #316]	; (8004b90 <HAL_RCC_OscConfig+0x2b0>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a56:	f7ff fc3d 	bl	80042d4 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a5e:	f7ff fc39 	bl	80042d4 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e1a5      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a70:	4b46      	ldr	r3, [pc, #280]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7c:	4b43      	ldr	r3, [pc, #268]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	4940      	ldr	r1, [pc, #256]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	600b      	str	r3, [r1, #0]
 8004a90:	e015      	b.n	8004abe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a92:	4b3f      	ldr	r3, [pc, #252]	; (8004b90 <HAL_RCC_OscConfig+0x2b0>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7ff fc1c 	bl	80042d4 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa0:	f7ff fc18 	bl	80042d4 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e184      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ab2:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d030      	beq.n	8004b2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d016      	beq.n	8004b00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ad2:	4b30      	ldr	r3, [pc, #192]	; (8004b94 <HAL_RCC_OscConfig+0x2b4>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad8:	f7ff fbfc 	bl	80042d4 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae0:	f7ff fbf8 	bl	80042d4 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e164      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004af2:	4b26      	ldr	r3, [pc, #152]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x200>
 8004afe:	e015      	b.n	8004b2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b00:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <HAL_RCC_OscConfig+0x2b4>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b06:	f7ff fbe5 	bl	80042d4 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b0e:	f7ff fbe1 	bl	80042d4 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e14d      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b20:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1f0      	bne.n	8004b0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80a0 	beq.w	8004c7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10f      	bne.n	8004b6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b58:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	60bb      	str	r3, [r7, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b66:	2301      	movs	r3, #1
 8004b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <HAL_RCC_OscConfig+0x2b8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d121      	bne.n	8004bba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <HAL_RCC_OscConfig+0x2b8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a07      	ldr	r2, [pc, #28]	; (8004b98 <HAL_RCC_OscConfig+0x2b8>)
 8004b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b82:	f7ff fba7 	bl	80042d4 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b88:	e011      	b.n	8004bae <HAL_RCC_OscConfig+0x2ce>
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	42470000 	.word	0x42470000
 8004b94:	42470e80 	.word	0x42470e80
 8004b98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b9c:	f7ff fb9a 	bl	80042d4 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e106      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bae:	4b85      	ldr	r3, [pc, #532]	; (8004dc4 <HAL_RCC_OscConfig+0x4e4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d106      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x2f0>
 8004bc2:	4b81      	ldr	r3, [pc, #516]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4a80      	ldr	r2, [pc, #512]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bce:	e01c      	b.n	8004c0a <HAL_RCC_OscConfig+0x32a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	d10c      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x312>
 8004bd8:	4b7b      	ldr	r3, [pc, #492]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	4a7a      	ldr	r2, [pc, #488]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bde:	f043 0304 	orr.w	r3, r3, #4
 8004be2:	6713      	str	r3, [r2, #112]	; 0x70
 8004be4:	4b78      	ldr	r3, [pc, #480]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	4a77      	ldr	r2, [pc, #476]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf0:	e00b      	b.n	8004c0a <HAL_RCC_OscConfig+0x32a>
 8004bf2:	4b75      	ldr	r3, [pc, #468]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	4a74      	ldr	r2, [pc, #464]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bf8:	f023 0301 	bic.w	r3, r3, #1
 8004bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfe:	4b72      	ldr	r3, [pc, #456]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	4a71      	ldr	r2, [pc, #452]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c04:	f023 0304 	bic.w	r3, r3, #4
 8004c08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d015      	beq.n	8004c3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c12:	f7ff fb5f 	bl	80042d4 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c18:	e00a      	b.n	8004c30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c1a:	f7ff fb5b 	bl	80042d4 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e0c5      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c30:	4b65      	ldr	r3, [pc, #404]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0ee      	beq.n	8004c1a <HAL_RCC_OscConfig+0x33a>
 8004c3c:	e014      	b.n	8004c68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3e:	f7ff fb49 	bl	80042d4 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c44:	e00a      	b.n	8004c5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7ff fb45 	bl	80042d4 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e0af      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c5c:	4b5a      	ldr	r3, [pc, #360]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ee      	bne.n	8004c46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d105      	bne.n	8004c7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6e:	4b56      	ldr	r3, [pc, #344]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	4a55      	ldr	r2, [pc, #340]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 809b 	beq.w	8004dba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c84:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d05c      	beq.n	8004d4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d141      	bne.n	8004d1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c98:	4b4c      	ldr	r3, [pc, #304]	; (8004dcc <HAL_RCC_OscConfig+0x4ec>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9e:	f7ff fb19 	bl	80042d4 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca6:	f7ff fb15 	bl	80042d4 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e081      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb8:	4b43      	ldr	r3, [pc, #268]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f0      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	019b      	lsls	r3, r3, #6
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	061b      	lsls	r3, r3, #24
 8004ce8:	4937      	ldr	r1, [pc, #220]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cee:	4b37      	ldr	r3, [pc, #220]	; (8004dcc <HAL_RCC_OscConfig+0x4ec>)
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf4:	f7ff faee 	bl	80042d4 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cfc:	f7ff faea 	bl	80042d4 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e056      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0e:	4b2e      	ldr	r3, [pc, #184]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0x41c>
 8004d1a:	e04e      	b.n	8004dba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d1c:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <HAL_RCC_OscConfig+0x4ec>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d22:	f7ff fad7 	bl	80042d4 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2a:	f7ff fad3 	bl	80042d4 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e03f      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3c:	4b22      	ldr	r3, [pc, #136]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f0      	bne.n	8004d2a <HAL_RCC_OscConfig+0x44a>
 8004d48:	e037      	b.n	8004dba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e032      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d56:	4b1c      	ldr	r3, [pc, #112]	; (8004dc8 <HAL_RCC_OscConfig+0x4e8>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d028      	beq.n	8004db6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d121      	bne.n	8004db6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d11a      	bne.n	8004db6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d86:	4013      	ands	r3, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d8c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d111      	bne.n	8004db6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d107      	bne.n	8004db6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d001      	beq.n	8004dba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40007000 	.word	0x40007000
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	42470060 	.word	0x42470060

08004dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0cc      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004de4:	4b68      	ldr	r3, [pc, #416]	; (8004f88 <HAL_RCC_ClockConfig+0x1b8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d90c      	bls.n	8004e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df2:	4b65      	ldr	r3, [pc, #404]	; (8004f88 <HAL_RCC_ClockConfig+0x1b8>)
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfa:	4b63      	ldr	r3, [pc, #396]	; (8004f88 <HAL_RCC_ClockConfig+0x1b8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d001      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0b8      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d020      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e24:	4b59      	ldr	r3, [pc, #356]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4a58      	ldr	r2, [pc, #352]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e3c:	4b53      	ldr	r3, [pc, #332]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	4a52      	ldr	r2, [pc, #328]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e48:	4b50      	ldr	r3, [pc, #320]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	494d      	ldr	r1, [pc, #308]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d044      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d107      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6e:	4b47      	ldr	r3, [pc, #284]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d119      	bne.n	8004eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e07f      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d003      	beq.n	8004e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d107      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8e:	4b3f      	ldr	r3, [pc, #252]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d109      	bne.n	8004eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e06f      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9e:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e067      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eae:	4b37      	ldr	r3, [pc, #220]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f023 0203 	bic.w	r2, r3, #3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	4934      	ldr	r1, [pc, #208]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ec0:	f7ff fa08 	bl	80042d4 <HAL_GetTick>
 8004ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec6:	e00a      	b.n	8004ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec8:	f7ff fa04 	bl	80042d4 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e04f      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ede:	4b2b      	ldr	r3, [pc, #172]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 020c 	and.w	r2, r3, #12
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d1eb      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef0:	4b25      	ldr	r3, [pc, #148]	; (8004f88 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d20c      	bcs.n	8004f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efe:	4b22      	ldr	r3, [pc, #136]	; (8004f88 <HAL_RCC_ClockConfig+0x1b8>)
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f06:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <HAL_RCC_ClockConfig+0x1b8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e032      	b.n	8004f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f24:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	4916      	ldr	r1, [pc, #88]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d009      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	490e      	ldr	r1, [pc, #56]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f56:	f000 f821 	bl	8004f9c <HAL_RCC_GetSysClockFreq>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	091b      	lsrs	r3, r3, #4
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	490a      	ldr	r1, [pc, #40]	; (8004f90 <HAL_RCC_ClockConfig+0x1c0>)
 8004f68:	5ccb      	ldrb	r3, [r1, r3]
 8004f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6e:	4a09      	ldr	r2, [pc, #36]	; (8004f94 <HAL_RCC_ClockConfig+0x1c4>)
 8004f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f72:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_RCC_ClockConfig+0x1c8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff f8b6 	bl	80040e8 <HAL_InitTick>

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40023c00 	.word	0x40023c00
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	080058fc 	.word	0x080058fc
 8004f94:	20000010 	.word	0x20000010
 8004f98:	20000014 	.word	0x20000014

08004f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	607b      	str	r3, [r7, #4]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	2300      	movs	r3, #0
 8004fae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fb4:	4b67      	ldr	r3, [pc, #412]	; (8005154 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 030c 	and.w	r3, r3, #12
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d00d      	beq.n	8004fdc <HAL_RCC_GetSysClockFreq+0x40>
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	f200 80bd 	bhi.w	8005140 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d003      	beq.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fce:	e0b7      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fd0:	4b61      	ldr	r3, [pc, #388]	; (8005158 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fd2:	60bb      	str	r3, [r7, #8]
       break;
 8004fd4:	e0b7      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fd6:	4b61      	ldr	r3, [pc, #388]	; (800515c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004fd8:	60bb      	str	r3, [r7, #8]
      break;
 8004fda:	e0b4      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fdc:	4b5d      	ldr	r3, [pc, #372]	; (8005154 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fe4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fe6:	4b5b      	ldr	r3, [pc, #364]	; (8005154 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d04d      	beq.n	800508e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff2:	4b58      	ldr	r3, [pc, #352]	; (8005154 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	ea02 0800 	and.w	r8, r2, r0
 800500a:	ea03 0901 	and.w	r9, r3, r1
 800500e:	4640      	mov	r0, r8
 8005010:	4649      	mov	r1, r9
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	014b      	lsls	r3, r1, #5
 800501c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005020:	0142      	lsls	r2, r0, #5
 8005022:	4610      	mov	r0, r2
 8005024:	4619      	mov	r1, r3
 8005026:	ebb0 0008 	subs.w	r0, r0, r8
 800502a:	eb61 0109 	sbc.w	r1, r1, r9
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	018b      	lsls	r3, r1, #6
 8005038:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800503c:	0182      	lsls	r2, r0, #6
 800503e:	1a12      	subs	r2, r2, r0
 8005040:	eb63 0301 	sbc.w	r3, r3, r1
 8005044:	f04f 0000 	mov.w	r0, #0
 8005048:	f04f 0100 	mov.w	r1, #0
 800504c:	00d9      	lsls	r1, r3, #3
 800504e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005052:	00d0      	lsls	r0, r2, #3
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	eb12 0208 	adds.w	r2, r2, r8
 800505c:	eb43 0309 	adc.w	r3, r3, r9
 8005060:	f04f 0000 	mov.w	r0, #0
 8005064:	f04f 0100 	mov.w	r1, #0
 8005068:	0259      	lsls	r1, r3, #9
 800506a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800506e:	0250      	lsls	r0, r2, #9
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	461a      	mov	r2, r3
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	f7fb f8f8 	bl	8000274 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4613      	mov	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e04a      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800508e:	4b31      	ldr	r3, [pc, #196]	; (8005154 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	099b      	lsrs	r3, r3, #6
 8005094:	461a      	mov	r2, r3
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800509e:	f04f 0100 	mov.w	r1, #0
 80050a2:	ea02 0400 	and.w	r4, r2, r0
 80050a6:	ea03 0501 	and.w	r5, r3, r1
 80050aa:	4620      	mov	r0, r4
 80050ac:	4629      	mov	r1, r5
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	f04f 0300 	mov.w	r3, #0
 80050b6:	014b      	lsls	r3, r1, #5
 80050b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050bc:	0142      	lsls	r2, r0, #5
 80050be:	4610      	mov	r0, r2
 80050c0:	4619      	mov	r1, r3
 80050c2:	1b00      	subs	r0, r0, r4
 80050c4:	eb61 0105 	sbc.w	r1, r1, r5
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	018b      	lsls	r3, r1, #6
 80050d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050d6:	0182      	lsls	r2, r0, #6
 80050d8:	1a12      	subs	r2, r2, r0
 80050da:	eb63 0301 	sbc.w	r3, r3, r1
 80050de:	f04f 0000 	mov.w	r0, #0
 80050e2:	f04f 0100 	mov.w	r1, #0
 80050e6:	00d9      	lsls	r1, r3, #3
 80050e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050ec:	00d0      	lsls	r0, r2, #3
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	1912      	adds	r2, r2, r4
 80050f4:	eb45 0303 	adc.w	r3, r5, r3
 80050f8:	f04f 0000 	mov.w	r0, #0
 80050fc:	f04f 0100 	mov.w	r1, #0
 8005100:	0299      	lsls	r1, r3, #10
 8005102:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005106:	0290      	lsls	r0, r2, #10
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4610      	mov	r0, r2
 800510e:	4619      	mov	r1, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	461a      	mov	r2, r3
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	f7fb f8ac 	bl	8000274 <__aeabi_uldivmod>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4613      	mov	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005124:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	3301      	adds	r3, #1
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	60bb      	str	r3, [r7, #8]
      break;
 800513e:	e002      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005142:	60bb      	str	r3, [r7, #8]
      break;
 8005144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005146:	68bb      	ldr	r3, [r7, #8]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800
 8005158:	00f42400 	.word	0x00f42400
 800515c:	007a1200 	.word	0x007a1200

08005160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005164:	4b03      	ldr	r3, [pc, #12]	; (8005174 <HAL_RCC_GetHCLKFreq+0x14>)
 8005166:	681b      	ldr	r3, [r3, #0]
}
 8005168:	4618      	mov	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000010 	.word	0x20000010

08005178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800517c:	f7ff fff0 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b05      	ldr	r3, [pc, #20]	; (8005198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	0a9b      	lsrs	r3, r3, #10
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4903      	ldr	r1, [pc, #12]	; (800519c <HAL_RCC_GetPCLK1Freq+0x24>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40023800 	.word	0x40023800
 800519c:	0800590c 	.word	0x0800590c

080051a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	220f      	movs	r2, #15
 80051ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051b0:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_RCC_GetClockConfig+0x5c>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 0203 	and.w	r2, r3, #3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051bc:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <HAL_RCC_GetClockConfig+0x5c>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051c8:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <HAL_RCC_GetClockConfig+0x5c>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80051d4:	4b09      	ldr	r3, [pc, #36]	; (80051fc <HAL_RCC_GetClockConfig+0x5c>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	08db      	lsrs	r3, r3, #3
 80051da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051e2:	4b07      	ldr	r3, [pc, #28]	; (8005200 <HAL_RCC_GetClockConfig+0x60>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0207 	and.w	r2, r3, #7
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	601a      	str	r2, [r3, #0]
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800
 8005200:	40023c00 	.word	0x40023c00

08005204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e041      	b.n	800529a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f839 	bl	80052a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3304      	adds	r3, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f000 f9d8 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d001      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e04e      	b.n	800536e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a23      	ldr	r2, [pc, #140]	; (800537c <HAL_TIM_Base_Start_IT+0xc4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d022      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fa:	d01d      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <HAL_TIM_Base_Start_IT+0xc8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d018      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1e      	ldr	r2, [pc, #120]	; (8005384 <HAL_TIM_Base_Start_IT+0xcc>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1c      	ldr	r2, [pc, #112]	; (8005388 <HAL_TIM_Base_Start_IT+0xd0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00e      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1b      	ldr	r2, [pc, #108]	; (800538c <HAL_TIM_Base_Start_IT+0xd4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d009      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a19      	ldr	r2, [pc, #100]	; (8005390 <HAL_TIM_Base_Start_IT+0xd8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a18      	ldr	r2, [pc, #96]	; (8005394 <HAL_TIM_Base_Start_IT+0xdc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d111      	bne.n	800535c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b06      	cmp	r3, #6
 8005348:	d010      	beq.n	800536c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0201 	orr.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535a:	e007      	b.n	800536c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40010000 	.word	0x40010000
 8005380:	40000400 	.word	0x40000400
 8005384:	40000800 	.word	0x40000800
 8005388:	40000c00 	.word	0x40000c00
 800538c:	40010400 	.word	0x40010400
 8005390:	40014000 	.word	0x40014000
 8005394:	40001800 	.word	0x40001800

08005398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d122      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d11b      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0202 	mvn.w	r2, #2
 80053c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8ee 	bl	80055bc <HAL_TIM_IC_CaptureCallback>
 80053e0:	e005      	b.n	80053ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f8e0 	bl	80055a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f8f1 	bl	80055d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d122      	bne.n	8005448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d11b      	bne.n	8005448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0204 	mvn.w	r2, #4
 8005418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f8c4 	bl	80055bc <HAL_TIM_IC_CaptureCallback>
 8005434:	e005      	b.n	8005442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f8b6 	bl	80055a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f8c7 	bl	80055d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b08      	cmp	r3, #8
 8005454:	d122      	bne.n	800549c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b08      	cmp	r3, #8
 8005462:	d11b      	bne.n	800549c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0208 	mvn.w	r2, #8
 800546c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2204      	movs	r2, #4
 8005472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f89a 	bl	80055bc <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f88c 	bl	80055a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f89d 	bl	80055d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d122      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d11b      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0210 	mvn.w	r2, #16
 80054c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2208      	movs	r2, #8
 80054c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f870 	bl	80055bc <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f862 	bl	80055a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f873 	bl	80055d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d10e      	bne.n	800551c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	d107      	bne.n	800551c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0201 	mvn.w	r2, #1
 8005514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fe fda6 	bl	8004068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b80      	cmp	r3, #128	; 0x80
 8005528:	d10e      	bne.n	8005548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005534:	2b80      	cmp	r3, #128	; 0x80
 8005536:	d107      	bne.n	8005548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f902 	bl	800574c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d10e      	bne.n	8005574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d107      	bne.n	8005574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f838 	bl	80055e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b20      	cmp	r3, #32
 8005580:	d10e      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b20      	cmp	r3, #32
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0220 	mvn.w	r2, #32
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f8cc 	bl	8005738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a40      	ldr	r2, [pc, #256]	; (800570c <TIM_Base_SetConfig+0x114>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d013      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005616:	d00f      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a3d      	ldr	r2, [pc, #244]	; (8005710 <TIM_Base_SetConfig+0x118>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00b      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a3c      	ldr	r2, [pc, #240]	; (8005714 <TIM_Base_SetConfig+0x11c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d007      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a3b      	ldr	r2, [pc, #236]	; (8005718 <TIM_Base_SetConfig+0x120>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a3a      	ldr	r2, [pc, #232]	; (800571c <TIM_Base_SetConfig+0x124>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d108      	bne.n	800564a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2f      	ldr	r2, [pc, #188]	; (800570c <TIM_Base_SetConfig+0x114>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d02b      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005658:	d027      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a2c      	ldr	r2, [pc, #176]	; (8005710 <TIM_Base_SetConfig+0x118>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d023      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a2b      	ldr	r2, [pc, #172]	; (8005714 <TIM_Base_SetConfig+0x11c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01f      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a2a      	ldr	r2, [pc, #168]	; (8005718 <TIM_Base_SetConfig+0x120>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01b      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a29      	ldr	r2, [pc, #164]	; (800571c <TIM_Base_SetConfig+0x124>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d017      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a28      	ldr	r2, [pc, #160]	; (8005720 <TIM_Base_SetConfig+0x128>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a27      	ldr	r2, [pc, #156]	; (8005724 <TIM_Base_SetConfig+0x12c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00f      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a26      	ldr	r2, [pc, #152]	; (8005728 <TIM_Base_SetConfig+0x130>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00b      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a25      	ldr	r2, [pc, #148]	; (800572c <TIM_Base_SetConfig+0x134>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a24      	ldr	r2, [pc, #144]	; (8005730 <TIM_Base_SetConfig+0x138>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a23      	ldr	r2, [pc, #140]	; (8005734 <TIM_Base_SetConfig+0x13c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d108      	bne.n	80056bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a0a      	ldr	r2, [pc, #40]	; (800570c <TIM_Base_SetConfig+0x114>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d003      	beq.n	80056f0 <TIM_Base_SetConfig+0xf8>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a0c      	ldr	r2, [pc, #48]	; (800571c <TIM_Base_SetConfig+0x124>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d103      	bne.n	80056f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	615a      	str	r2, [r3, #20]
}
 80056fe:	bf00      	nop
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40010000 	.word	0x40010000
 8005710:	40000400 	.word	0x40000400
 8005714:	40000800 	.word	0x40000800
 8005718:	40000c00 	.word	0x40000c00
 800571c:	40010400 	.word	0x40010400
 8005720:	40014000 	.word	0x40014000
 8005724:	40014400 	.word	0x40014400
 8005728:	40014800 	.word	0x40014800
 800572c:	40001800 	.word	0x40001800
 8005730:	40001c00 	.word	0x40001c00
 8005734:	40002000 	.word	0x40002000

08005738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <__libc_init_array>:
 8005760:	b570      	push	{r4, r5, r6, lr}
 8005762:	4d0d      	ldr	r5, [pc, #52]	; (8005798 <__libc_init_array+0x38>)
 8005764:	4c0d      	ldr	r4, [pc, #52]	; (800579c <__libc_init_array+0x3c>)
 8005766:	1b64      	subs	r4, r4, r5
 8005768:	10a4      	asrs	r4, r4, #2
 800576a:	2600      	movs	r6, #0
 800576c:	42a6      	cmp	r6, r4
 800576e:	d109      	bne.n	8005784 <__libc_init_array+0x24>
 8005770:	4d0b      	ldr	r5, [pc, #44]	; (80057a0 <__libc_init_array+0x40>)
 8005772:	4c0c      	ldr	r4, [pc, #48]	; (80057a4 <__libc_init_array+0x44>)
 8005774:	f000 f83c 	bl	80057f0 <_init>
 8005778:	1b64      	subs	r4, r4, r5
 800577a:	10a4      	asrs	r4, r4, #2
 800577c:	2600      	movs	r6, #0
 800577e:	42a6      	cmp	r6, r4
 8005780:	d105      	bne.n	800578e <__libc_init_array+0x2e>
 8005782:	bd70      	pop	{r4, r5, r6, pc}
 8005784:	f855 3b04 	ldr.w	r3, [r5], #4
 8005788:	4798      	blx	r3
 800578a:	3601      	adds	r6, #1
 800578c:	e7ee      	b.n	800576c <__libc_init_array+0xc>
 800578e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005792:	4798      	blx	r3
 8005794:	3601      	adds	r6, #1
 8005796:	e7f2      	b.n	800577e <__libc_init_array+0x1e>
 8005798:	0800591c 	.word	0x0800591c
 800579c:	0800591c 	.word	0x0800591c
 80057a0:	0800591c 	.word	0x0800591c
 80057a4:	08005920 	.word	0x08005920

080057a8 <memcmp>:
 80057a8:	b530      	push	{r4, r5, lr}
 80057aa:	3901      	subs	r1, #1
 80057ac:	2400      	movs	r4, #0
 80057ae:	42a2      	cmp	r2, r4
 80057b0:	d101      	bne.n	80057b6 <memcmp+0xe>
 80057b2:	2000      	movs	r0, #0
 80057b4:	e005      	b.n	80057c2 <memcmp+0x1a>
 80057b6:	5d03      	ldrb	r3, [r0, r4]
 80057b8:	3401      	adds	r4, #1
 80057ba:	5d0d      	ldrb	r5, [r1, r4]
 80057bc:	42ab      	cmp	r3, r5
 80057be:	d0f6      	beq.n	80057ae <memcmp+0x6>
 80057c0:	1b58      	subs	r0, r3, r5
 80057c2:	bd30      	pop	{r4, r5, pc}

080057c4 <memcpy>:
 80057c4:	440a      	add	r2, r1
 80057c6:	4291      	cmp	r1, r2
 80057c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80057cc:	d100      	bne.n	80057d0 <memcpy+0xc>
 80057ce:	4770      	bx	lr
 80057d0:	b510      	push	{r4, lr}
 80057d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057da:	4291      	cmp	r1, r2
 80057dc:	d1f9      	bne.n	80057d2 <memcpy+0xe>
 80057de:	bd10      	pop	{r4, pc}

080057e0 <memset>:
 80057e0:	4402      	add	r2, r0
 80057e2:	4603      	mov	r3, r0
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d100      	bne.n	80057ea <memset+0xa>
 80057e8:	4770      	bx	lr
 80057ea:	f803 1b01 	strb.w	r1, [r3], #1
 80057ee:	e7f9      	b.n	80057e4 <memset+0x4>

080057f0 <_init>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	bf00      	nop
 80057f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f6:	bc08      	pop	{r3}
 80057f8:	469e      	mov	lr, r3
 80057fa:	4770      	bx	lr

080057fc <_fini>:
 80057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fe:	bf00      	nop
 8005800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005802:	bc08      	pop	{r3}
 8005804:	469e      	mov	lr, r3
 8005806:	4770      	bx	lr
