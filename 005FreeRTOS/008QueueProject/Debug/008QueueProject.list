
008QueueProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08007ca4  08007ca4  00017ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008108  08008108  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008110  08008110  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008110  08008110  00018110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008114  08008114  00018114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019320  2000008c  080081a4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200193ac  080081a4  000293ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c318  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003935  00000000  00000000  0003c3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003fd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  000410a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022861  00000000  00000000  000422e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174b7  00000000  00000000  00064b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9bb6  00000000  00000000  0007c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155bb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005644  00000000  00000000  00155c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c8c 	.word	0x08007c8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08007c8c 	.word	0x08007c8c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f103 0208 	add.w	r2, r3, #8
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f103 0208 	add.w	r2, r3, #8
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f103 0208 	add.w	r2, r3, #8
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005f2:	b480      	push	{r7}
 80005f4:	b085      	sub	sp, #20
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	689a      	ldr	r2, [r3, #8]
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	683a      	ldr	r2, [r7, #0]
 800061c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	601a      	str	r2, [r3, #0]
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800063a:	b480      	push	{r7}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000650:	d103      	bne.n	800065a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	691b      	ldr	r3, [r3, #16]
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	e00c      	b.n	8000674 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3308      	adds	r3, #8
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e002      	b.n	8000668 <vListInsert+0x2e>
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	429a      	cmp	r2, r3
 8000672:	d2f6      	bcs.n	8000662 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	601a      	str	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	6892      	ldr	r2, [r2, #8]
 80006c2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	6852      	ldr	r2, [r2, #4]
 80006cc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d103      	bne.n	80006e0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	1e5a      	subs	r2, r3, #1
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10a      	bne.n	800072a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000718:	f383 8811 	msr	BASEPRI, r3
 800071c:	f3bf 8f6f 	isb	sy
 8000720:	f3bf 8f4f 	dsb	sy
 8000724:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000726:	bf00      	nop
 8000728:	e7fe      	b.n	8000728 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800072a:	f002 fb0d 	bl	8002d48 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000736:	68f9      	ldr	r1, [r7, #12]
 8000738:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800073a:	fb01 f303 	mul.w	r3, r1, r3
 800073e:	441a      	add	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2200      	movs	r2, #0
 8000748:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800075a:	3b01      	subs	r3, #1
 800075c:	68f9      	ldr	r1, [r7, #12]
 800075e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000760:	fb01 f303 	mul.w	r3, r1, r3
 8000764:	441a      	add	r2, r3
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	22ff      	movs	r2, #255	; 0xff
 800076e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	22ff      	movs	r2, #255	; 0xff
 8000776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d114      	bne.n	80007aa <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	691b      	ldr	r3, [r3, #16]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d01a      	beq.n	80007be <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	3310      	adds	r3, #16
 800078c:	4618      	mov	r0, r3
 800078e:	f001 f921 	bl	80019d4 <xTaskRemoveFromEventList>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d012      	beq.n	80007be <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <xQueueGenericReset+0xcc>)
 800079a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	f3bf 8f4f 	dsb	sy
 80007a4:	f3bf 8f6f 	isb	sy
 80007a8:	e009      	b.n	80007be <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	3310      	adds	r3, #16
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fef2 	bl	8000598 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3324      	adds	r3, #36	; 0x24
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff feed 	bl	8000598 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80007be:	f002 faf3 	bl	8002da8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	e000ed04 	.word	0xe000ed04

080007d0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	4613      	mov	r3, r2
 80007dc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10a      	bne.n	80007fa <xQueueGenericCreate+0x2a>
        __asm volatile
 80007e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007e8:	f383 8811 	msr	BASEPRI, r3
 80007ec:	f3bf 8f6f 	isb	sy
 80007f0:	f3bf 8f4f 	dsb	sy
 80007f4:	61bb      	str	r3, [r7, #24]
    }
 80007f6:	bf00      	nop
 80007f8:	e7fe      	b.n	80007f8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	68ba      	ldr	r2, [r7, #8]
 80007fe:	fb02 f303 	mul.w	r3, r2, r3
 8000802:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d006      	beq.n	8000818 <xQueueGenericCreate+0x48>
 800080a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	429a      	cmp	r2, r3
 8000816:	d101      	bne.n	800081c <xQueueGenericCreate+0x4c>
 8000818:	2301      	movs	r3, #1
 800081a:	e000      	b.n	800081e <xQueueGenericCreate+0x4e>
 800081c:	2300      	movs	r3, #0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d10a      	bne.n	8000838 <xQueueGenericCreate+0x68>
        __asm volatile
 8000822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000826:	f383 8811 	msr	BASEPRI, r3
 800082a:	f3bf 8f6f 	isb	sy
 800082e:	f3bf 8f4f 	dsb	sy
 8000832:	617b      	str	r3, [r7, #20]
    }
 8000834:	bf00      	nop
 8000836:	e7fe      	b.n	8000836 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800083e:	d90a      	bls.n	8000856 <xQueueGenericCreate+0x86>
        __asm volatile
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	613b      	str	r3, [r7, #16]
    }
 8000852:	bf00      	nop
 8000854:	e7fe      	b.n	8000854 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	3350      	adds	r3, #80	; 0x50
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fb96 	bl	8002f8c <pvPortMalloc>
 8000860:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000862:	6a3b      	ldr	r3, [r7, #32]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00d      	beq.n	8000884 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000868:	6a3b      	ldr	r3, [r7, #32]
 800086a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	3350      	adds	r3, #80	; 0x50
 8000870:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000872:	79fa      	ldrb	r2, [r7, #7]
 8000874:	6a3b      	ldr	r3, [r7, #32]
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	4613      	mov	r3, r2
 800087a:	69fa      	ldr	r2, [r7, #28]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f000 f805 	bl	800088e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000884:	6a3b      	ldr	r3, [r7, #32]
    }
 8000886:	4618      	mov	r0, r3
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d103      	bne.n	80008aa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	e002      	b.n	80008b0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008bc:	2101      	movs	r1, #1
 80008be:	69b8      	ldr	r0, [r7, #24]
 80008c0:	f7ff ff1e 	bl	8000700 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	78fa      	ldrb	r2, [r7, #3]
 80008c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08e      	sub	sp, #56	; 0x38
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
 80008e0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008e2:	2300      	movs	r3, #0
 80008e4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80008ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d10a      	bne.n	8000906 <xQueueGenericSend+0x32>
        __asm volatile
 80008f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008f4:	f383 8811 	msr	BASEPRI, r3
 80008f8:	f3bf 8f6f 	isb	sy
 80008fc:	f3bf 8f4f 	dsb	sy
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000902:	bf00      	nop
 8000904:	e7fe      	b.n	8000904 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d103      	bne.n	8000914 <xQueueGenericSend+0x40>
 800090c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <xQueueGenericSend+0x44>
 8000914:	2301      	movs	r3, #1
 8000916:	e000      	b.n	800091a <xQueueGenericSend+0x46>
 8000918:	2300      	movs	r3, #0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d10a      	bne.n	8000934 <xQueueGenericSend+0x60>
        __asm volatile
 800091e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000922:	f383 8811 	msr	BASEPRI, r3
 8000926:	f3bf 8f6f 	isb	sy
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000930:	bf00      	nop
 8000932:	e7fe      	b.n	8000932 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d103      	bne.n	8000942 <xQueueGenericSend+0x6e>
 800093a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800093c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800093e:	2b01      	cmp	r3, #1
 8000940:	d101      	bne.n	8000946 <xQueueGenericSend+0x72>
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <xQueueGenericSend+0x74>
 8000946:	2300      	movs	r3, #0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d10a      	bne.n	8000962 <xQueueGenericSend+0x8e>
        __asm volatile
 800094c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000950:	f383 8811 	msr	BASEPRI, r3
 8000954:	f3bf 8f6f 	isb	sy
 8000958:	f3bf 8f4f 	dsb	sy
 800095c:	623b      	str	r3, [r7, #32]
    }
 800095e:	bf00      	nop
 8000960:	e7fe      	b.n	8000960 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000962:	f001 f9d3 	bl	8001d0c <xTaskGetSchedulerState>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <xQueueGenericSend+0x9e>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <xQueueGenericSend+0xa2>
 8000972:	2301      	movs	r3, #1
 8000974:	e000      	b.n	8000978 <xQueueGenericSend+0xa4>
 8000976:	2300      	movs	r3, #0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d10a      	bne.n	8000992 <xQueueGenericSend+0xbe>
        __asm volatile
 800097c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000980:	f383 8811 	msr	BASEPRI, r3
 8000984:	f3bf 8f6f 	isb	sy
 8000988:	f3bf 8f4f 	dsb	sy
 800098c:	61fb      	str	r3, [r7, #28]
    }
 800098e:	bf00      	nop
 8000990:	e7fe      	b.n	8000990 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000992:	f002 f9d9 	bl	8002d48 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800099a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800099c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099e:	429a      	cmp	r2, r3
 80009a0:	d302      	bcc.n	80009a8 <xQueueGenericSend+0xd4>
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d129      	bne.n	80009fc <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	68b9      	ldr	r1, [r7, #8]
 80009ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009ae:	f000 fac6 	bl	8000f3e <prvCopyDataToQueue>
 80009b2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d010      	beq.n	80009de <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009be:	3324      	adds	r3, #36	; 0x24
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 f807 	bl	80019d4 <xTaskRemoveFromEventList>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d013      	beq.n	80009f4 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80009cc:	4b3f      	ldr	r3, [pc, #252]	; (8000acc <xQueueGenericSend+0x1f8>)
 80009ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	f3bf 8f4f 	dsb	sy
 80009d8:	f3bf 8f6f 	isb	sy
 80009dc:	e00a      	b.n	80009f4 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80009de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d007      	beq.n	80009f4 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009e4:	4b39      	ldr	r3, [pc, #228]	; (8000acc <xQueueGenericSend+0x1f8>)
 80009e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	f3bf 8f4f 	dsb	sy
 80009f0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009f4:	f002 f9d8 	bl	8002da8 <vPortExitCritical>
                return pdPASS;
 80009f8:	2301      	movs	r3, #1
 80009fa:	e063      	b.n	8000ac4 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d103      	bne.n	8000a0a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a02:	f002 f9d1 	bl	8002da8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e05c      	b.n	8000ac4 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d106      	bne.n	8000a1e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 f83f 	bl	8001a98 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a1e:	f002 f9c3 	bl	8002da8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a22:	f000 fdb9 	bl	8001598 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a26:	f002 f98f 	bl	8002d48 <vPortEnterCritical>
 8000a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a36:	d103      	bne.n	8000a40 <xQueueGenericSend+0x16c>
 8000a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a4c:	d103      	bne.n	8000a56 <xQueueGenericSend+0x182>
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a56:	f002 f9a7 	bl	8002da8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a5a:	1d3a      	adds	r2, r7, #4
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 f82e 	bl	8001ac4 <xTaskCheckForTimeOut>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d124      	bne.n	8000ab8 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a70:	f000 fb5d 	bl	800112e <prvIsQueueFull>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d018      	beq.n	8000aac <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a7c:	3310      	adds	r3, #16
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 ff56 	bl	8001934 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a8a:	f000 fae8 	bl	800105e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a8e:	f000 fd91 	bl	80015b4 <xTaskResumeAll>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f47f af7c 	bne.w	8000992 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <xQueueGenericSend+0x1f8>)
 8000a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	f3bf 8f4f 	dsb	sy
 8000aa6:	f3bf 8f6f 	isb	sy
 8000aaa:	e772      	b.n	8000992 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aae:	f000 fad6 	bl	800105e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ab2:	f000 fd7f 	bl	80015b4 <xTaskResumeAll>
 8000ab6:	e76c      	b.n	8000992 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aba:	f000 fad0 	bl	800105e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000abe:	f000 fd79 	bl	80015b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000ac2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3738      	adds	r7, #56	; 0x38
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	e000ed04 	.word	0xe000ed04

08000ad0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b090      	sub	sp, #64	; 0x40
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10a      	bne.n	8000afe <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aec:	f383 8811 	msr	BASEPRI, r3
 8000af0:	f3bf 8f6f 	isb	sy
 8000af4:	f3bf 8f4f 	dsb	sy
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000afa:	bf00      	nop
 8000afc:	e7fe      	b.n	8000afc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d103      	bne.n	8000b0c <xQueueGenericSendFromISR+0x3c>
 8000b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d101      	bne.n	8000b10 <xQueueGenericSendFromISR+0x40>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e000      	b.n	8000b12 <xQueueGenericSendFromISR+0x42>
 8000b10:	2300      	movs	r3, #0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10a      	bne.n	8000b2c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b1a:	f383 8811 	msr	BASEPRI, r3
 8000b1e:	f3bf 8f6f 	isb	sy
 8000b22:	f3bf 8f4f 	dsb	sy
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000b28:	bf00      	nop
 8000b2a:	e7fe      	b.n	8000b2a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d103      	bne.n	8000b3a <xQueueGenericSendFromISR+0x6a>
 8000b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d101      	bne.n	8000b3e <xQueueGenericSendFromISR+0x6e>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <xQueueGenericSendFromISR+0x70>
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10a      	bne.n	8000b5a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b48:	f383 8811 	msr	BASEPRI, r3
 8000b4c:	f3bf 8f6f 	isb	sy
 8000b50:	f3bf 8f4f 	dsb	sy
 8000b54:	623b      	str	r3, [r7, #32]
    }
 8000b56:	bf00      	nop
 8000b58:	e7fe      	b.n	8000b58 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b5a:	f002 f9d7 	bl	8002f0c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b5e:	f3ef 8211 	mrs	r2, BASEPRI
 8000b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b66:	f383 8811 	msr	BASEPRI, r3
 8000b6a:	f3bf 8f6f 	isb	sy
 8000b6e:	f3bf 8f4f 	dsb	sy
 8000b72:	61fa      	str	r2, [r7, #28]
 8000b74:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000b76:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d302      	bcc.n	8000b8c <xQueueGenericSendFromISR+0xbc>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d13e      	bne.n	8000c0a <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	68b9      	ldr	r1, [r7, #8]
 8000ba0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000ba2:	f000 f9cc 	bl	8000f3e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000ba6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bae:	d112      	bne.n	8000bd6 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d025      	beq.n	8000c04 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bba:	3324      	adds	r3, #36	; 0x24
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 ff09 	bl	80019d4 <xTaskRemoveFromEventList>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d01d      	beq.n	8000c04 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d01a      	beq.n	8000c04 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	e016      	b.n	8000c04 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000bd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000bda:	2b7f      	cmp	r3, #127	; 0x7f
 8000bdc:	d10a      	bne.n	8000bf4 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8000bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000be2:	f383 8811 	msr	BASEPRI, r3
 8000be6:	f3bf 8f6f 	isb	sy
 8000bea:	f3bf 8f4f 	dsb	sy
 8000bee:	617b      	str	r3, [r7, #20]
    }
 8000bf0:	bf00      	nop
 8000bf2:	e7fe      	b.n	8000bf2 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	b25a      	sxtb	r2, r3
 8000bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000c04:	2301      	movs	r3, #1
 8000c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000c08:	e001      	b.n	8000c0e <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c18:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3740      	adds	r7, #64	; 0x40
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	; 0x30
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10a      	bne.n	8000c54 <xQueueReceive+0x30>
        __asm volatile
 8000c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c42:	f383 8811 	msr	BASEPRI, r3
 8000c46:	f3bf 8f6f 	isb	sy
 8000c4a:	f3bf 8f4f 	dsb	sy
 8000c4e:	623b      	str	r3, [r7, #32]
    }
 8000c50:	bf00      	nop
 8000c52:	e7fe      	b.n	8000c52 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d103      	bne.n	8000c62 <xQueueReceive+0x3e>
 8000c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <xQueueReceive+0x42>
 8000c62:	2301      	movs	r3, #1
 8000c64:	e000      	b.n	8000c68 <xQueueReceive+0x44>
 8000c66:	2300      	movs	r3, #0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d10a      	bne.n	8000c82 <xQueueReceive+0x5e>
        __asm volatile
 8000c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c70:	f383 8811 	msr	BASEPRI, r3
 8000c74:	f3bf 8f6f 	isb	sy
 8000c78:	f3bf 8f4f 	dsb	sy
 8000c7c:	61fb      	str	r3, [r7, #28]
    }
 8000c7e:	bf00      	nop
 8000c80:	e7fe      	b.n	8000c80 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c82:	f001 f843 	bl	8001d0c <xTaskGetSchedulerState>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <xQueueReceive+0x6e>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <xQueueReceive+0x72>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e000      	b.n	8000c98 <xQueueReceive+0x74>
 8000c96:	2300      	movs	r3, #0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d10a      	bne.n	8000cb2 <xQueueReceive+0x8e>
        __asm volatile
 8000c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ca0:	f383 8811 	msr	BASEPRI, r3
 8000ca4:	f3bf 8f6f 	isb	sy
 8000ca8:	f3bf 8f4f 	dsb	sy
 8000cac:	61bb      	str	r3, [r7, #24]
    }
 8000cae:	bf00      	nop
 8000cb0:	e7fe      	b.n	8000cb0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000cb2:	f002 f849 	bl	8002d48 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d01f      	beq.n	8000d02 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000cc2:	68b9      	ldr	r1, [r7, #8]
 8000cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cc6:	f000 f9a4 	bl	8001012 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	1e5a      	subs	r2, r3, #1
 8000cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00f      	beq.n	8000cfa <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cdc:	3310      	adds	r3, #16
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 fe78 	bl	80019d4 <xTaskRemoveFromEventList>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000cea:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <xQueueReceive+0x1bc>)
 8000cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	f3bf 8f4f 	dsb	sy
 8000cf6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000cfa:	f002 f855 	bl	8002da8 <vPortExitCritical>
                return pdPASS;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e069      	b.n	8000dd6 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d103      	bne.n	8000d10 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000d08:	f002 f84e 	bl	8002da8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e062      	b.n	8000dd6 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d106      	bne.n	8000d24 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 febc 	bl	8001a98 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d20:	2301      	movs	r3, #1
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d24:	f002 f840 	bl	8002da8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d28:	f000 fc36 	bl	8001598 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d2c:	f002 f80c 	bl	8002d48 <vPortEnterCritical>
 8000d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d3c:	d103      	bne.n	8000d46 <xQueueReceive+0x122>
 8000d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d52:	d103      	bne.n	8000d5c <xQueueReceive+0x138>
 8000d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d5c:	f002 f824 	bl	8002da8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d60:	1d3a      	adds	r2, r7, #4
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 feab 	bl	8001ac4 <xTaskCheckForTimeOut>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d123      	bne.n	8000dbc <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d76:	f000 f9c4 	bl	8001102 <prvIsQueueEmpty>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d017      	beq.n	8000db0 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d82:	3324      	adds	r3, #36	; 0x24
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fdd3 	bl	8001934 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d90:	f000 f965 	bl	800105e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d94:	f000 fc0e 	bl	80015b4 <xTaskResumeAll>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d189      	bne.n	8000cb2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <xQueueReceive+0x1bc>)
 8000da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	f3bf 8f4f 	dsb	sy
 8000daa:	f3bf 8f6f 	isb	sy
 8000dae:	e780      	b.n	8000cb2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000db2:	f000 f954 	bl	800105e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000db6:	f000 fbfd 	bl	80015b4 <xTaskResumeAll>
 8000dba:	e77a      	b.n	8000cb2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dbe:	f000 f94e 	bl	800105e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000dc2:	f000 fbf7 	bl	80015b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dc8:	f000 f99b 	bl	8001102 <prvIsQueueEmpty>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f43f af6f 	beq.w	8000cb2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000dd4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3730      	adds	r7, #48	; 0x30
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000ed04 	.word	0xe000ed04

08000de4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b090      	sub	sp, #64	; 0x40
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10a      	bne.n	8000e10 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8000dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dfe:	f383 8811 	msr	BASEPRI, r3
 8000e02:	f3bf 8f6f 	isb	sy
 8000e06:	f3bf 8f4f 	dsb	sy
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000e0c:	bf00      	nop
 8000e0e:	e7fe      	b.n	8000e0e <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d103      	bne.n	8000e1e <xQueueReceiveFromISR+0x3a>
 8000e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <xQueueReceiveFromISR+0x3e>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <xQueueReceiveFromISR+0x40>
 8000e22:	2300      	movs	r3, #0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10a      	bne.n	8000e3e <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8000e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e2c:	f383 8811 	msr	BASEPRI, r3
 8000e30:	f3bf 8f6f 	isb	sy
 8000e34:	f3bf 8f4f 	dsb	sy
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000e3a:	bf00      	nop
 8000e3c:	e7fe      	b.n	8000e3c <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000e3e:	f002 f865 	bl	8002f0c <vPortValidateInterruptPriority>
        __asm volatile
 8000e42:	f3ef 8211 	mrs	r2, BASEPRI
 8000e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e4a:	f383 8811 	msr	BASEPRI, r3
 8000e4e:	f3bf 8f6f 	isb	sy
 8000e52:	f3bf 8f4f 	dsb	sy
 8000e56:	623a      	str	r2, [r7, #32]
 8000e58:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8000e5a:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d03e      	beq.n	8000ee8 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8000e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000e78:	f000 f8cb 	bl	8001012 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7e:	1e5a      	subs	r2, r3, #1
 8000e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e82:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8000e84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e8c:	d112      	bne.n	8000eb4 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d025      	beq.n	8000ee2 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e98:	3310      	adds	r3, #16
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fd9a 	bl	80019d4 <xTaskRemoveFromEventList>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d01d      	beq.n	8000ee2 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d01a      	beq.n	8000ee2 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e016      	b.n	8000ee2 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8000eb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eba:	d10a      	bne.n	8000ed2 <xQueueReceiveFromISR+0xee>
        __asm volatile
 8000ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec0:	f383 8811 	msr	BASEPRI, r3
 8000ec4:	f3bf 8f6f 	isb	sy
 8000ec8:	f3bf 8f4f 	dsb	sy
 8000ecc:	61bb      	str	r3, [r7, #24]
    }
 8000ece:	bf00      	nop
 8000ed0:	e7fe      	b.n	8000ed0 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8000ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	b25a      	sxtb	r2, r3
 8000edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ee6:	e001      	b.n	8000eec <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eee:	617b      	str	r3, [r7, #20]
        __asm volatile
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f383 8811 	msr	BASEPRI, r3
    }
 8000ef6:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3740      	adds	r7, #64	; 0x40
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10a      	bne.n	8000f26 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8000f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f14:	f383 8811 	msr	BASEPRI, r3
 8000f18:	f3bf 8f6f 	isb	sy
 8000f1c:	f3bf 8f4f 	dsb	sy
 8000f20:	60bb      	str	r3, [r7, #8]
    }
 8000f22:	bf00      	nop
 8000f24:	e7fe      	b.n	8000f24 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8000f26:	f001 ff0f 	bl	8002d48 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2e:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8000f30:	f001 ff3a 	bl	8002da8 <vPortExitCritical>

    return uxReturn;
 8000f34:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f52:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10d      	bne.n	8000f78 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d14d      	bne.n	8001000 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 feed 	bl	8001d48 <xTaskPriorityDisinherit>
 8000f6e:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	e043      	b.n	8001000 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d119      	bne.n	8000fb2 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6858      	ldr	r0, [r3, #4]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	461a      	mov	r2, r3
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	f006 fa3b 	bl	8007404 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	441a      	add	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d32b      	bcc.n	8001000 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	e026      	b.n	8001000 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	68d8      	ldr	r0, [r3, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	f006 fa21 	bl	8007404 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	425b      	negs	r3, r3
 8000fcc:	441a      	add	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d207      	bcs.n	8000fee <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	425b      	negs	r3, r3
 8000fe8:	441a      	add	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d105      	bne.n	8001000 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001008:	697b      	ldr	r3, [r7, #20]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	2b00      	cmp	r3, #0
 8001022:	d018      	beq.n	8001056 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	441a      	add	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	429a      	cmp	r2, r3
 800103c:	d303      	bcc.n	8001046 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68d9      	ldr	r1, [r3, #12]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	461a      	mov	r2, r3
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f006 f9d7 	bl	8007404 <memcpy>
    }
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001066:	f001 fe6f 	bl	8002d48 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001070:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001072:	e011      	b.n	8001098 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	2b00      	cmp	r3, #0
 800107a:	d012      	beq.n	80010a2 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3324      	adds	r3, #36	; 0x24
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fca7 	bl	80019d4 <xTaskRemoveFromEventList>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800108c:	f000 fd80 	bl	8001b90 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	3b01      	subs	r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109c:	2b00      	cmp	r3, #0
 800109e:	dce9      	bgt.n	8001074 <prvUnlockQueue+0x16>
 80010a0:	e000      	b.n	80010a4 <prvUnlockQueue+0x46>
                        break;
 80010a2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	22ff      	movs	r2, #255	; 0xff
 80010a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80010ac:	f001 fe7c 	bl	8002da8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80010b0:	f001 fe4a 	bl	8002d48 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010ba:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80010bc:	e011      	b.n	80010e2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d012      	beq.n	80010ec <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3310      	adds	r3, #16
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fc82 	bl	80019d4 <xTaskRemoveFromEventList>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80010d6:	f000 fd5b 	bl	8001b90 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80010da:	7bbb      	ldrb	r3, [r7, #14]
 80010dc:	3b01      	subs	r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80010e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	dce9      	bgt.n	80010be <prvUnlockQueue+0x60>
 80010ea:	e000      	b.n	80010ee <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80010ec:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	22ff      	movs	r2, #255	; 0xff
 80010f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80010f6:	f001 fe57 	bl	8002da8 <vPortExitCritical>
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800110a:	f001 fe1d 	bl	8002d48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001116:	2301      	movs	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	e001      	b.n	8001120 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001120:	f001 fe42 	bl	8002da8 <vPortExitCritical>

    return xReturn;
 8001124:	68fb      	ldr	r3, [r7, #12]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001136:	f001 fe07 	bl	8002d48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001142:	429a      	cmp	r2, r3
 8001144:	d102      	bne.n	800114c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001146:	2301      	movs	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	e001      	b.n	8001150 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001150:	f001 fe2a 	bl	8002da8 <vPortExitCritical>

    return xReturn;
 8001154:	68fb      	ldr	r3, [r7, #12]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800115e:	b480      	push	{r7}
 8001160:	b087      	sub	sp, #28
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10a      	bne.n	8001186 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8001170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001174:	f383 8811 	msr	BASEPRI, r3
 8001178:	f3bf 8f6f 	isb	sy
 800117c:	f3bf 8f4f 	dsb	sy
 8001180:	60fb      	str	r3, [r7, #12]
    }
 8001182:	bf00      	nop
 8001184:	e7fe      	b.n	8001184 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118e:	429a      	cmp	r2, r3
 8001190:	d102      	bne.n	8001198 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8001192:	2301      	movs	r3, #1
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e001      	b.n	800119c <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800119c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800119e:	4618      	mov	r0, r3
 80011a0:	371c      	adds	r7, #28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	e014      	b.n	80011e6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80011bc:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <vQueueAddToRegistry+0x50>)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10b      	bne.n	80011e0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <vQueueAddToRegistry+0x50>)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <vQueueAddToRegistry+0x50>)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4413      	add	r3, r2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80011de:	e006      	b.n	80011ee <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	d9e7      	bls.n	80011bc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2001927c 	.word	0x2001927c

08001200 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001210:	f001 fd9a 	bl	8002d48 <vPortEnterCritical>
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800121a:	b25b      	sxtb	r3, r3
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001220:	d103      	bne.n	800122a <vQueueWaitForMessageRestricted+0x2a>
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001230:	b25b      	sxtb	r3, r3
 8001232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001236:	d103      	bne.n	8001240 <vQueueWaitForMessageRestricted+0x40>
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001240:	f001 fdb2 	bl	8002da8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001248:	2b00      	cmp	r3, #0
 800124a:	d106      	bne.n	800125a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3324      	adds	r3, #36	; 0x24
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	4618      	mov	r0, r3
 8001256:	f000 fb91 	bl	800197c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff feff 	bl	800105e <prvUnlockQueue>
    }
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af04      	add	r7, sp, #16
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fe85 	bl	8002f8c <pvPortMalloc>
 8001282:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00e      	beq.n	80012a8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800128a:	2058      	movs	r0, #88	; 0x58
 800128c:	f001 fe7e 	bl	8002f8c <pvPortMalloc>
 8001290:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
 800129e:	e005      	b.n	80012ac <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80012a0:	6978      	ldr	r0, [r7, #20]
 80012a2:	f001 ff53 	bl	800314c <vPortFree>
 80012a6:	e001      	b.n	80012ac <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d013      	beq.n	80012da <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80012b2:	88fa      	ldrh	r2, [r7, #6]
 80012b4:	2300      	movs	r3, #0
 80012b6:	9303      	str	r3, [sp, #12]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68b9      	ldr	r1, [r7, #8]
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 f80e 	bl	80012ea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80012ce:	69f8      	ldr	r0, [r7, #28]
 80012d0:	f000 f8a2 	bl	8001418 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	e002      	b.n	80012e0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012de:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80012e0:	69bb      	ldr	r3, [r7, #24]
    }
 80012e2:	4618      	mov	r0, r3
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b088      	sub	sp, #32
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80012f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	461a      	mov	r2, r3
 8001302:	21a5      	movs	r1, #165	; 0xa5
 8001304:	f006 f88c 	bl	8007420 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001312:	3b01      	subs	r3, #1
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	f023 0307 	bic.w	r3, r3, #7
 8001320:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00a      	beq.n	8001342 <prvInitialiseNewTask+0x58>
        __asm volatile
 800132c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001330:	f383 8811 	msr	BASEPRI, r3
 8001334:	f3bf 8f6f 	isb	sy
 8001338:	f3bf 8f4f 	dsb	sy
 800133c:	617b      	str	r3, [r7, #20]
    }
 800133e:	bf00      	nop
 8001340:	e7fe      	b.n	8001340 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d01f      	beq.n	8001388 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	e012      	b.n	8001374 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	4413      	add	r3, r2
 8001354:	7819      	ldrb	r1, [r3, #0]
 8001356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	4413      	add	r3, r2
 800135c:	3334      	adds	r3, #52	; 0x34
 800135e:	460a      	mov	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3301      	adds	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b09      	cmp	r3, #9
 8001378:	d9e9      	bls.n	800134e <prvInitialiseNewTask+0x64>
 800137a:	e000      	b.n	800137e <prvInitialiseNewTask+0x94>
            {
                break;
 800137c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001386:	e003      	b.n	8001390 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001392:	2b04      	cmp	r3, #4
 8001394:	d901      	bls.n	800139a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001396:	2304      	movs	r3, #4
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80013a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013a4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80013a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a8:	2200      	movs	r2, #0
 80013aa:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80013ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ae:	3304      	adds	r3, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f911 	bl	80005d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80013b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b8:	3318      	adds	r3, #24
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f90c 	bl	80005d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80013c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013c4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c8:	f1c3 0205 	rsb	r2, r3, #5
 80013cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ce:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80013d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80013d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d8:	3350      	adds	r3, #80	; 0x50
 80013da:	2204      	movs	r2, #4
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f006 f81e 	bl	8007420 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80013e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e6:	3354      	adds	r3, #84	; 0x54
 80013e8:	2201      	movs	r2, #1
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f006 f817 	bl	8007420 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	68f9      	ldr	r1, [r7, #12]
 80013f6:	69b8      	ldr	r0, [r7, #24]
 80013f8:	f001 fb76 	bl	8002ae8 <pxPortInitialiseStack>
 80013fc:	4602      	mov	r2, r0
 80013fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001400:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800140c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800140e:	bf00      	nop
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001420:	f001 fc92 	bl	8002d48 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <prvAddNewTaskToReadyList+0xc0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	4a2b      	ldr	r2, [pc, #172]	; (80014d8 <prvAddNewTaskToReadyList+0xc0>)
 800142c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <prvAddNewTaskToReadyList+0xc4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001436:	4a29      	ldr	r2, [pc, #164]	; (80014dc <prvAddNewTaskToReadyList+0xc4>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <prvAddNewTaskToReadyList+0xc0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d110      	bne.n	8001466 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001444:	f000 fbc8 	bl	8001bd8 <prvInitialiseTaskLists>
 8001448:	e00d      	b.n	8001466 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800144a:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <prvAddNewTaskToReadyList+0xc8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <prvAddNewTaskToReadyList+0xc4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	429a      	cmp	r2, r3
 800145e:	d802      	bhi.n	8001466 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001460:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <prvAddNewTaskToReadyList+0xc4>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <prvAddNewTaskToReadyList+0xcc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <prvAddNewTaskToReadyList+0xcc>)
 800146e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <prvAddNewTaskToReadyList+0xcc>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	2201      	movs	r2, #1
 800147e:	409a      	lsls	r2, r3
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <prvAddNewTaskToReadyList+0xd0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4313      	orrs	r3, r2
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <prvAddNewTaskToReadyList+0xd0>)
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <prvAddNewTaskToReadyList+0xd4>)
 8001498:	441a      	add	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3304      	adds	r3, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4610      	mov	r0, r2
 80014a2:	f7ff f8a6 	bl	80005f2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80014a6:	f001 fc7f 	bl	8002da8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <prvAddNewTaskToReadyList+0xc8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00e      	beq.n	80014d0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <prvAddNewTaskToReadyList+0xc4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	429a      	cmp	r2, r3
 80014be:	d207      	bcs.n	80014d0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <prvAddNewTaskToReadyList+0xd8>)
 80014c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f3bf 8f4f 	dsb	sy
 80014cc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000180 	.word	0x20000180
 80014dc:	200000a8 	.word	0x200000a8
 80014e0:	2000018c 	.word	0x2000018c
 80014e4:	2000019c 	.word	0x2000019c
 80014e8:	20000188 	.word	0x20000188
 80014ec:	200000ac 	.word	0x200000ac
 80014f0:	e000ed04 	.word	0xe000ed04

080014f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <vTaskStartScheduler+0x88>)
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	2300      	movs	r3, #0
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2300      	movs	r3, #0
 8001504:	2282      	movs	r2, #130	; 0x82
 8001506:	491e      	ldr	r1, [pc, #120]	; (8001580 <vTaskStartScheduler+0x8c>)
 8001508:	481e      	ldr	r0, [pc, #120]	; (8001584 <vTaskStartScheduler+0x90>)
 800150a:	f7ff fead 	bl	8001268 <xTaskCreate>
 800150e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d102      	bne.n	800151c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001516:	f000 ff59 	bl	80023cc <xTimerCreateTimerTask>
 800151a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d116      	bne.n	8001550 <vTaskStartScheduler+0x5c>
        __asm volatile
 8001522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001526:	f383 8811 	msr	BASEPRI, r3
 800152a:	f3bf 8f6f 	isb	sy
 800152e:	f3bf 8f4f 	dsb	sy
 8001532:	60bb      	str	r3, [r7, #8]
    }
 8001534:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <vTaskStartScheduler+0x94>)
 8001538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800153c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <vTaskStartScheduler+0x98>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <vTaskStartScheduler+0x9c>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800154a:	f001 fb5b 	bl	8002c04 <xPortStartScheduler>
 800154e:	e00e      	b.n	800156e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001556:	d10a      	bne.n	800156e <vTaskStartScheduler+0x7a>
        __asm volatile
 8001558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	607b      	str	r3, [r7, #4]
    }
 800156a:	bf00      	nop
 800156c:	e7fe      	b.n	800156c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <vTaskStartScheduler+0xa0>)
 8001570:	681b      	ldr	r3, [r3, #0]
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200001a4 	.word	0x200001a4
 8001580:	08007ca4 	.word	0x08007ca4
 8001584:	08001ba9 	.word	0x08001ba9
 8001588:	200001a0 	.word	0x200001a0
 800158c:	2000018c 	.word	0x2000018c
 8001590:	20000184 	.word	0x20000184
 8001594:	20000000 	.word	0x20000000

08001598 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <vTaskSuspendAll+0x18>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a03      	ldr	r2, [pc, #12]	; (80015b0 <vTaskSuspendAll+0x18>)
 80015a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	200001a8 	.word	0x200001a8

080015b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <xTaskResumeAll+0x114>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10a      	bne.n	80015e0 <xTaskResumeAll+0x2c>
        __asm volatile
 80015ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ce:	f383 8811 	msr	BASEPRI, r3
 80015d2:	f3bf 8f6f 	isb	sy
 80015d6:	f3bf 8f4f 	dsb	sy
 80015da:	603b      	str	r3, [r7, #0]
    }
 80015dc:	bf00      	nop
 80015de:	e7fe      	b.n	80015de <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80015e0:	f001 fbb2 	bl	8002d48 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80015e4:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <xTaskResumeAll+0x114>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	4a37      	ldr	r2, [pc, #220]	; (80016c8 <xTaskResumeAll+0x114>)
 80015ec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015ee:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <xTaskResumeAll+0x114>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d161      	bne.n	80016ba <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80015f6:	4b35      	ldr	r3, [pc, #212]	; (80016cc <xTaskResumeAll+0x118>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d05d      	beq.n	80016ba <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015fe:	e02e      	b.n	800165e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <xTaskResumeAll+0x11c>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3318      	adds	r3, #24
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f84d 	bl	80006ac <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3304      	adds	r3, #4
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f848 	bl	80006ac <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	2201      	movs	r2, #1
 8001622:	409a      	lsls	r2, r3
 8001624:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <xTaskResumeAll+0x120>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4313      	orrs	r3, r2
 800162a:	4a2a      	ldr	r2, [pc, #168]	; (80016d4 <xTaskResumeAll+0x120>)
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <xTaskResumeAll+0x124>)
 800163c:	441a      	add	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3304      	adds	r3, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4610      	mov	r0, r2
 8001646:	f7fe ffd4 	bl	80005f2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <xTaskResumeAll+0x128>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	429a      	cmp	r2, r3
 8001656:	d302      	bcc.n	800165e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8001658:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <xTaskResumeAll+0x12c>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <xTaskResumeAll+0x11c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1cc      	bne.n	8001600 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800166c:	f000 fb32 	bl	8001cd4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <xTaskResumeAll+0x130>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d010      	beq.n	800169e <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800167c:	f000 f846 	bl	800170c <xTaskIncrementTick>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <xTaskResumeAll+0x12c>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f1      	bne.n	800167c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <xTaskResumeAll+0x130>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <xTaskResumeAll+0x12c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <xTaskResumeAll+0x134>)
 80016ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	f3bf 8f4f 	dsb	sy
 80016b6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80016ba:	f001 fb75 	bl	8002da8 <vPortExitCritical>

    return xAlreadyYielded;
 80016be:	68bb      	ldr	r3, [r7, #8]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200001a8 	.word	0x200001a8
 80016cc:	20000180 	.word	0x20000180
 80016d0:	20000140 	.word	0x20000140
 80016d4:	20000188 	.word	0x20000188
 80016d8:	200000ac 	.word	0x200000ac
 80016dc:	200000a8 	.word	0x200000a8
 80016e0:	20000194 	.word	0x20000194
 80016e4:	20000190 	.word	0x20000190
 80016e8:	e000ed04 	.word	0xe000ed04

080016ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <xTaskGetTickCount+0x1c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80016f8:	687b      	ldr	r3, [r7, #4]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000184 	.word	0x20000184

0800170c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001716:	4b4e      	ldr	r3, [pc, #312]	; (8001850 <xTaskIncrementTick+0x144>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f040 808e 	bne.w	800183c <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001720:	4b4c      	ldr	r3, [pc, #304]	; (8001854 <xTaskIncrementTick+0x148>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001728:	4a4a      	ldr	r2, [pc, #296]	; (8001854 <xTaskIncrementTick+0x148>)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d120      	bne.n	8001776 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001734:	4b48      	ldr	r3, [pc, #288]	; (8001858 <xTaskIncrementTick+0x14c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00a      	beq.n	8001754 <xTaskIncrementTick+0x48>
        __asm volatile
 800173e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001742:	f383 8811 	msr	BASEPRI, r3
 8001746:	f3bf 8f6f 	isb	sy
 800174a:	f3bf 8f4f 	dsb	sy
 800174e:	603b      	str	r3, [r7, #0]
    }
 8001750:	bf00      	nop
 8001752:	e7fe      	b.n	8001752 <xTaskIncrementTick+0x46>
 8001754:	4b40      	ldr	r3, [pc, #256]	; (8001858 <xTaskIncrementTick+0x14c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b40      	ldr	r3, [pc, #256]	; (800185c <xTaskIncrementTick+0x150>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a3e      	ldr	r2, [pc, #248]	; (8001858 <xTaskIncrementTick+0x14c>)
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4a3e      	ldr	r2, [pc, #248]	; (800185c <xTaskIncrementTick+0x150>)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <xTaskIncrementTick+0x154>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	4a3c      	ldr	r2, [pc, #240]	; (8001860 <xTaskIncrementTick+0x154>)
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	f000 faaf 	bl	8001cd4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001776:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <xTaskIncrementTick+0x158>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d348      	bcc.n	8001812 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001780:	4b35      	ldr	r3, [pc, #212]	; (8001858 <xTaskIncrementTick+0x14c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d104      	bne.n	8001794 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800178a:	4b36      	ldr	r3, [pc, #216]	; (8001864 <xTaskIncrementTick+0x158>)
 800178c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001790:	601a      	str	r2, [r3, #0]
                    break;
 8001792:	e03e      	b.n	8001812 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001794:	4b30      	ldr	r3, [pc, #192]	; (8001858 <xTaskIncrementTick+0x14c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d203      	bcs.n	80017b4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80017ac:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <xTaskIncrementTick+0x158>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80017b2:	e02e      	b.n	8001812 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	3304      	adds	r3, #4
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe ff77 	bl	80006ac <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d004      	beq.n	80017d0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3318      	adds	r3, #24
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe ff6e 	bl	80006ac <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	2201      	movs	r2, #1
 80017d6:	409a      	lsls	r2, r3
 80017d8:	4b23      	ldr	r3, [pc, #140]	; (8001868 <xTaskIncrementTick+0x15c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4313      	orrs	r3, r2
 80017de:	4a22      	ldr	r2, [pc, #136]	; (8001868 <xTaskIncrementTick+0x15c>)
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4a1f      	ldr	r2, [pc, #124]	; (800186c <xTaskIncrementTick+0x160>)
 80017f0:	441a      	add	r2, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3304      	adds	r3, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	4610      	mov	r0, r2
 80017fa:	f7fe fefa 	bl	80005f2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <xTaskIncrementTick+0x164>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	429a      	cmp	r2, r3
 800180a:	d3b9      	bcc.n	8001780 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800180c:	2301      	movs	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001810:	e7b6      	b.n	8001780 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <xTaskIncrementTick+0x164>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001818:	4914      	ldr	r1, [pc, #80]	; (800186c <xTaskIncrementTick+0x160>)
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d901      	bls.n	800182e <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800182a:	2301      	movs	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <xTaskIncrementTick+0x168>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8001836:	2301      	movs	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	e004      	b.n	8001846 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <xTaskIncrementTick+0x16c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	4a0d      	ldr	r2, [pc, #52]	; (8001878 <xTaskIncrementTick+0x16c>)
 8001844:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001846:	697b      	ldr	r3, [r7, #20]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200001a8 	.word	0x200001a8
 8001854:	20000184 	.word	0x20000184
 8001858:	20000138 	.word	0x20000138
 800185c:	2000013c 	.word	0x2000013c
 8001860:	20000198 	.word	0x20000198
 8001864:	200001a0 	.word	0x200001a0
 8001868:	20000188 	.word	0x20000188
 800186c:	200000ac 	.word	0x200000ac
 8001870:	200000a8 	.word	0x200000a8
 8001874:	20000194 	.word	0x20000194
 8001878:	20000190 	.word	0x20000190

0800187c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001882:	4b27      	ldr	r3, [pc, #156]	; (8001920 <vTaskSwitchContext+0xa4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <vTaskSwitchContext+0xa8>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001890:	e03f      	b.n	8001912 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <vTaskSwitchContext+0xa8>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001898:	4b23      	ldr	r3, [pc, #140]	; (8001928 <vTaskSwitchContext+0xac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80018a6:	7afb      	ldrb	r3, [r7, #11]
 80018a8:	f1c3 031f 	rsb	r3, r3, #31
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	491f      	ldr	r1, [pc, #124]	; (800192c <vTaskSwitchContext+0xb0>)
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10a      	bne.n	80018d8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80018c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c6:	f383 8811 	msr	BASEPRI, r3
 80018ca:	f3bf 8f6f 	isb	sy
 80018ce:	f3bf 8f4f 	dsb	sy
 80018d2:	607b      	str	r3, [r7, #4]
    }
 80018d4:	bf00      	nop
 80018d6:	e7fe      	b.n	80018d6 <vTaskSwitchContext+0x5a>
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <vTaskSwitchContext+0xb0>)
 80018e4:	4413      	add	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	3308      	adds	r3, #8
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d104      	bne.n	8001908 <vTaskSwitchContext+0x8c>
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	4a08      	ldr	r2, [pc, #32]	; (8001930 <vTaskSwitchContext+0xb4>)
 8001910:	6013      	str	r3, [r2, #0]
}
 8001912:	bf00      	nop
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	200001a8 	.word	0x200001a8
 8001924:	20000194 	.word	0x20000194
 8001928:	20000188 	.word	0x20000188
 800192c:	200000ac 	.word	0x200000ac
 8001930:	200000a8 	.word	0x200000a8

08001934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10a      	bne.n	800195a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001948:	f383 8811 	msr	BASEPRI, r3
 800194c:	f3bf 8f6f 	isb	sy
 8001950:	f3bf 8f4f 	dsb	sy
 8001954:	60fb      	str	r3, [r7, #12]
    }
 8001956:	bf00      	nop
 8001958:	e7fe      	b.n	8001958 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <vTaskPlaceOnEventList+0x44>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	3318      	adds	r3, #24
 8001960:	4619      	mov	r1, r3
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7fe fe69 	bl	800063a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001968:	2101      	movs	r1, #1
 800196a:	6838      	ldr	r0, [r7, #0]
 800196c:	f000 fcc8 	bl	8002300 <prvAddCurrentTaskToDelayedList>
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200000a8 	.word	0x200000a8

0800197c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10a      	bne.n	80019a4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800198e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001992:	f383 8811 	msr	BASEPRI, r3
 8001996:	f3bf 8f6f 	isb	sy
 800199a:	f3bf 8f4f 	dsb	sy
 800199e:	617b      	str	r3, [r7, #20]
    }
 80019a0:	bf00      	nop
 80019a2:	e7fe      	b.n	80019a2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3318      	adds	r3, #24
 80019aa:	4619      	mov	r1, r3
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7fe fe20 	bl	80005f2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019bc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	68b8      	ldr	r0, [r7, #8]
 80019c2:	f000 fc9d 	bl	8002300 <prvAddCurrentTaskToDelayedList>
    }
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200000a8 	.word	0x200000a8

080019d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10a      	bne.n	8001a00 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80019ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ee:	f383 8811 	msr	BASEPRI, r3
 80019f2:	f3bf 8f6f 	isb	sy
 80019f6:	f3bf 8f4f 	dsb	sy
 80019fa:	60fb      	str	r3, [r7, #12]
    }
 80019fc:	bf00      	nop
 80019fe:	e7fe      	b.n	80019fe <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	3318      	adds	r3, #24
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fe51 	bl	80006ac <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <xTaskRemoveFromEventList+0xac>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d11c      	bne.n	8001a4c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	3304      	adds	r3, #4
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fe48 	bl	80006ac <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	2201      	movs	r2, #1
 8001a22:	409a      	lsls	r2, r3
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <xTaskRemoveFromEventList+0xb0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	4a16      	ldr	r2, [pc, #88]	; (8001a84 <xTaskRemoveFromEventList+0xb0>)
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <xTaskRemoveFromEventList+0xb4>)
 8001a3c:	441a      	add	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	3304      	adds	r3, #4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4610      	mov	r0, r2
 8001a46:	f7fe fdd4 	bl	80005f2 <vListInsertEnd>
 8001a4a:	e005      	b.n	8001a58 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	3318      	adds	r3, #24
 8001a50:	4619      	mov	r1, r3
 8001a52:	480e      	ldr	r0, [pc, #56]	; (8001a8c <xTaskRemoveFromEventList+0xb8>)
 8001a54:	f7fe fdcd 	bl	80005f2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <xTaskRemoveFromEventList+0xbc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d905      	bls.n	8001a72 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001a66:	2301      	movs	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <xTaskRemoveFromEventList+0xc0>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e001      	b.n	8001a76 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001a76:	697b      	ldr	r3, [r7, #20]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200001a8 	.word	0x200001a8
 8001a84:	20000188 	.word	0x20000188
 8001a88:	200000ac 	.word	0x200000ac
 8001a8c:	20000140 	.word	0x20000140
 8001a90:	200000a8 	.word	0x200000a8
 8001a94:	20000194 	.word	0x20000194

08001a98 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <vTaskInternalSetTimeOutState+0x24>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <vTaskInternalSetTimeOutState+0x28>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	605a      	str	r2, [r3, #4]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	20000198 	.word	0x20000198
 8001ac0:	20000184 	.word	0x20000184

08001ac4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10a      	bne.n	8001aea <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad8:	f383 8811 	msr	BASEPRI, r3
 8001adc:	f3bf 8f6f 	isb	sy
 8001ae0:	f3bf 8f4f 	dsb	sy
 8001ae4:	613b      	str	r3, [r7, #16]
    }
 8001ae6:	bf00      	nop
 8001ae8:	e7fe      	b.n	8001ae8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10a      	bne.n	8001b06 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af4:	f383 8811 	msr	BASEPRI, r3
 8001af8:	f3bf 8f6f 	isb	sy
 8001afc:	f3bf 8f4f 	dsb	sy
 8001b00:	60fb      	str	r3, [r7, #12]
    }
 8001b02:	bf00      	nop
 8001b04:	e7fe      	b.n	8001b04 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001b06:	f001 f91f 	bl	8002d48 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <xTaskCheckForTimeOut+0xc4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b22:	d102      	bne.n	8001b2a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
 8001b28:	e026      	b.n	8001b78 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <xTaskCheckForTimeOut+0xc8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d00a      	beq.n	8001b4c <xTaskCheckForTimeOut+0x88>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d305      	bcc.n	8001b4c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001b40:	2301      	movs	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e015      	b.n	8001b78 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d20b      	bcs.n	8001b6e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	1ad2      	subs	r2, r2, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff98 	bl	8001a98 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	e004      	b.n	8001b78 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001b78:	f001 f916 	bl	8002da8 <vPortExitCritical>

    return xReturn;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3720      	adds	r7, #32
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000184 	.word	0x20000184
 8001b8c:	20000198 	.word	0x20000198

08001b90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <vTaskMissedYield+0x14>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	20000194 	.word	0x20000194

08001ba8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001bb0:	f000 f852 	bl	8001c58 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <prvIdleTask+0x28>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d9f9      	bls.n	8001bb0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <prvIdleTask+0x2c>)
 8001bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f3bf 8f4f 	dsb	sy
 8001bc8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001bcc:	e7f0      	b.n	8001bb0 <prvIdleTask+0x8>
 8001bce:	bf00      	nop
 8001bd0:	200000ac 	.word	0x200000ac
 8001bd4:	e000ed04 	.word	0xe000ed04

08001bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	e00c      	b.n	8001bfe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <prvInitialiseTaskLists+0x60>)
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fcd0 	bl	8000598 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d9ef      	bls.n	8001be4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001c04:	480d      	ldr	r0, [pc, #52]	; (8001c3c <prvInitialiseTaskLists+0x64>)
 8001c06:	f7fe fcc7 	bl	8000598 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001c0a:	480d      	ldr	r0, [pc, #52]	; (8001c40 <prvInitialiseTaskLists+0x68>)
 8001c0c:	f7fe fcc4 	bl	8000598 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001c10:	480c      	ldr	r0, [pc, #48]	; (8001c44 <prvInitialiseTaskLists+0x6c>)
 8001c12:	f7fe fcc1 	bl	8000598 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001c16:	480c      	ldr	r0, [pc, #48]	; (8001c48 <prvInitialiseTaskLists+0x70>)
 8001c18:	f7fe fcbe 	bl	8000598 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001c1c:	480b      	ldr	r0, [pc, #44]	; (8001c4c <prvInitialiseTaskLists+0x74>)
 8001c1e:	f7fe fcbb 	bl	8000598 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <prvInitialiseTaskLists+0x78>)
 8001c24:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <prvInitialiseTaskLists+0x64>)
 8001c26:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <prvInitialiseTaskLists+0x7c>)
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <prvInitialiseTaskLists+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200000ac 	.word	0x200000ac
 8001c3c:	20000110 	.word	0x20000110
 8001c40:	20000124 	.word	0x20000124
 8001c44:	20000140 	.word	0x20000140
 8001c48:	20000154 	.word	0x20000154
 8001c4c:	2000016c 	.word	0x2000016c
 8001c50:	20000138 	.word	0x20000138
 8001c54:	2000013c 	.word	0x2000013c

08001c58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c5e:	e019      	b.n	8001c94 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001c60:	f001 f872 	bl	8002d48 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c64:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <prvCheckTasksWaitingTermination+0x50>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fd1b 	bl	80006ac <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <prvCheckTasksWaitingTermination+0x54>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <prvCheckTasksWaitingTermination+0x54>)
 8001c7e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <prvCheckTasksWaitingTermination+0x58>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <prvCheckTasksWaitingTermination+0x58>)
 8001c88:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001c8a:	f001 f88d 	bl	8002da8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f810 	bl	8001cb4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <prvCheckTasksWaitingTermination+0x58>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e1      	bne.n	8001c60 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000154 	.word	0x20000154
 8001cac:	20000180 	.word	0x20000180
 8001cb0:	20000168 	.word	0x20000168

08001cb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 fa43 	bl	800314c <vPortFree>
                vPortFree( pxTCB );
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f001 fa40 	bl	800314c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <prvResetNextTaskUnblockTime+0x30>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d104      	bne.n	8001cec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <prvResetNextTaskUnblockTime+0x34>)
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ce8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001cea:	e005      	b.n	8001cf8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <prvResetNextTaskUnblockTime+0x30>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <prvResetNextTaskUnblockTime+0x34>)
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000138 	.word	0x20000138
 8001d08:	200001a0 	.word	0x200001a0

08001d0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <xTaskGetSchedulerState+0x34>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	e008      	b.n	8001d32 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <xTaskGetSchedulerState+0x38>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	e001      	b.n	8001d32 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001d32:	687b      	ldr	r3, [r7, #4]
    }
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	2000018c 	.word	0x2000018c
 8001d44:	200001a8 	.word	0x200001a8

08001d48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d063      	beq.n	8001e26 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <xTaskPriorityDisinherit+0xe8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d00a      	beq.n	8001d7e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d6c:	f383 8811 	msr	BASEPRI, r3
 8001d70:	f3bf 8f6f 	isb	sy
 8001d74:	f3bf 8f4f 	dsb	sy
 8001d78:	60fb      	str	r3, [r7, #12]
    }
 8001d7a:	bf00      	nop
 8001d7c:	e7fe      	b.n	8001d7c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10a      	bne.n	8001d9c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8a:	f383 8811 	msr	BASEPRI, r3
 8001d8e:	f3bf 8f6f 	isb	sy
 8001d92:	f3bf 8f4f 	dsb	sy
 8001d96:	60bb      	str	r3, [r7, #8]
    }
 8001d98:	bf00      	nop
 8001d9a:	e7fe      	b.n	8001d9a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da0:	1e5a      	subs	r2, r3, #1
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d039      	beq.n	8001e26 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d135      	bne.n	8001e26 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fc74 	bl	80006ac <uxListRemove>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10a      	bne.n	8001de0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	2201      	movs	r2, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <xTaskPriorityDisinherit+0xec>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <xTaskPriorityDisinherit+0xec>)
 8001dde:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	f1c3 0205 	rsb	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	2201      	movs	r2, #1
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <xTaskPriorityDisinherit+0xec>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <xTaskPriorityDisinherit+0xec>)
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <xTaskPriorityDisinherit+0xf0>)
 8001e14:	441a      	add	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f7fe fbe8 	bl	80005f2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001e22:	2301      	movs	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001e26:	697b      	ldr	r3, [r7, #20]
    }
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200000a8 	.word	0x200000a8
 8001e34:	20000188 	.word	0x20000188
 8001e38:	200000ac 	.word	0x200000ac

08001e3c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e54:	f383 8811 	msr	BASEPRI, r3
 8001e58:	f3bf 8f6f 	isb	sy
 8001e5c:	f3bf 8f4f 	dsb	sy
 8001e60:	613b      	str	r3, [r7, #16]
    }
 8001e62:	bf00      	nop
 8001e64:	e7fe      	b.n	8001e64 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001e66:	f000 ff6f 	bl	8002d48 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001e6a:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <xTaskGenericNotifyWait+0xf8>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	3354      	adds	r3, #84	; 0x54
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d022      	beq.n	8001ec2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <xTaskGenericNotifyWait+0xf8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	3214      	adds	r2, #20
 8001e84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	43d2      	mvns	r2, r2
 8001e8c:	4011      	ands	r1, r2
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	3214      	adds	r2, #20
 8001e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001e96:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <xTaskGenericNotifyWait+0xf8>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3354      	adds	r3, #84	; 0x54
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001eaa:	2101      	movs	r1, #1
 8001eac:	6a38      	ldr	r0, [r7, #32]
 8001eae:	f000 fa27 	bl	8002300 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <xTaskGenericNotifyWait+0xfc>)
 8001eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	f3bf 8f4f 	dsb	sy
 8001ebe:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001ec2:	f000 ff71 	bl	8002da8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001ec6:	f000 ff3f 	bl	8002d48 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <xTaskGenericNotifyWait+0xf8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	3214      	adds	r2, #20
 8001ed8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <xTaskGenericNotifyWait+0xf8>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3354      	adds	r3, #84	; 0x54
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d002      	beq.n	8001ef8 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	e00e      	b.n	8001f16 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <xTaskGenericNotifyWait+0xf8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	3214      	adds	r2, #20
 8001f00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	43d2      	mvns	r2, r2
 8001f08:	4011      	ands	r1, r2
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	3214      	adds	r2, #20
 8001f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001f12:	2301      	movs	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <xTaskGenericNotifyWait+0xf8>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3354      	adds	r3, #84	; 0x54
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001f24:	f000 ff40 	bl	8002da8 <vPortExitCritical>

        return xReturn;
 8001f28:	697b      	ldr	r3, [r7, #20]
    }
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200000a8 	.word	0x200000a8
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08c      	sub	sp, #48	; 0x30
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <xTaskGenericNotify+0x2e>
        __asm volatile
 8001f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	623b      	str	r3, [r7, #32]
    }
 8001f66:	bf00      	nop
 8001f68:	e7fe      	b.n	8001f68 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10a      	bne.n	8001f86 <xTaskGenericNotify+0x4a>
        __asm volatile
 8001f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f74:	f383 8811 	msr	BASEPRI, r3
 8001f78:	f3bf 8f6f 	isb	sy
 8001f7c:	f3bf 8f4f 	dsb	sy
 8001f80:	61fb      	str	r3, [r7, #28]
    }
 8001f82:	bf00      	nop
 8001f84:	e7fe      	b.n	8001f84 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8001f8a:	f000 fedd 	bl	8002d48 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	3214      	adds	r2, #20
 8001f9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3354      	adds	r3, #84	; 0x54
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3354      	adds	r3, #84	; 0x54
 8001fb8:	2202      	movs	r2, #2
 8001fba:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d83b      	bhi.n	800203a <xTaskGenericNotify+0xfe>
 8001fc2:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <xTaskGenericNotify+0x8c>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08002059 	.word	0x08002059
 8001fcc:	08001fdd 	.word	0x08001fdd
 8001fd0:	08001ff9 	.word	0x08001ff9
 8001fd4:	08002011 	.word	0x08002011
 8001fd8:	0800201f 	.word	0x0800201f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	3214      	adds	r2, #20
 8001fe2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	ea42 0103 	orr.w	r1, r2, r3
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	3214      	adds	r2, #20
 8001ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001ff6:	e032      	b.n	800205e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	3214      	adds	r2, #20
 8001ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002002:	1c59      	adds	r1, r3, #1
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	3214      	adds	r2, #20
 800200a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800200e:	e026      	b.n	800205e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	3214      	adds	r2, #20
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800201c:	e01f      	b.n	800205e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800201e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002022:	2b02      	cmp	r3, #2
 8002024:	d006      	beq.n	8002034 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	3214      	adds	r2, #20
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002032:	e014      	b.n	800205e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8002038:	e011      	b.n	800205e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <xTaskGenericNotify+0x1ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <xTaskGenericNotify+0x120>
        __asm volatile
 8002042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002046:	f383 8811 	msr	BASEPRI, r3
 800204a:	f3bf 8f6f 	isb	sy
 800204e:	f3bf 8f4f 	dsb	sy
 8002052:	61bb      	str	r3, [r7, #24]
    }
 8002054:	bf00      	nop
 8002056:	e7fe      	b.n	8002056 <xTaskGenericNotify+0x11a>
                    break;
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <xTaskGenericNotify+0x122>

                    break;
 800205c:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800205e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002062:	2b01      	cmp	r3, #1
 8002064:	d139      	bne.n	80020da <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	3304      	adds	r3, #4
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fb1e 	bl	80006ac <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	2201      	movs	r2, #1
 8002076:	409a      	lsls	r2, r3
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <xTaskGenericNotify+0x1b0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4313      	orrs	r3, r2
 800207e:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <xTaskGenericNotify+0x1b0>)
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <xTaskGenericNotify+0x1b4>)
 8002090:	441a      	add	r2, r3
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	3304      	adds	r3, #4
 8002096:	4619      	mov	r1, r3
 8002098:	4610      	mov	r0, r2
 800209a:	f7fe faaa 	bl	80005f2 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <xTaskGenericNotify+0x180>
        __asm volatile
 80020a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020aa:	f383 8811 	msr	BASEPRI, r3
 80020ae:	f3bf 8f6f 	isb	sy
 80020b2:	f3bf 8f4f 	dsb	sy
 80020b6:	617b      	str	r3, [r7, #20]
    }
 80020b8:	bf00      	nop
 80020ba:	e7fe      	b.n	80020ba <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <xTaskGenericNotify+0x1b8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d907      	bls.n	80020da <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <xTaskGenericNotify+0x1bc>)
 80020cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	f3bf 8f4f 	dsb	sy
 80020d6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80020da:	f000 fe65 	bl	8002da8 <vPortExitCritical>

        return xReturn;
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80020e0:	4618      	mov	r0, r3
 80020e2:	3730      	adds	r7, #48	; 0x30
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000184 	.word	0x20000184
 80020ec:	20000188 	.word	0x20000188
 80020f0:	200000ac 	.word	0x200000ac
 80020f4:	200000a8 	.word	0x200000a8
 80020f8:	e000ed04 	.word	0xe000ed04

080020fc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b090      	sub	sp, #64	; 0x40
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800210a:	2301      	movs	r3, #1
 800210c:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10a      	bne.n	800212a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8002114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002118:	f383 8811 	msr	BASEPRI, r3
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	f3bf 8f4f 	dsb	sy
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8002126:	bf00      	nop
 8002128:	e7fe      	b.n	8002128 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8002130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002134:	f383 8811 	msr	BASEPRI, r3
 8002138:	f3bf 8f6f 	isb	sy
 800213c:	f3bf 8f4f 	dsb	sy
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002142:	bf00      	nop
 8002144:	e7fe      	b.n	8002144 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002146:	f000 fee1 	bl	8002f0c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800214e:	f3ef 8211 	mrs	r2, BASEPRI
 8002152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	627a      	str	r2, [r7, #36]	; 0x24
 8002164:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002168:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800216a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	3214      	adds	r2, #20
 8002176:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800217a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800217e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4413      	add	r3, r2
 8002184:	3354      	adds	r3, #84	; 0x54
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800218c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4413      	add	r3, r2
 8002192:	3354      	adds	r3, #84	; 0x54
 8002194:	2202      	movs	r2, #2
 8002196:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d83b      	bhi.n	8002216 <xTaskGenericNotifyFromISR+0x11a>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <xTaskGenericNotifyFromISR+0xa8>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	08002235 	.word	0x08002235
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021d5 	.word	0x080021d5
 80021b0:	080021ed 	.word	0x080021ed
 80021b4:	080021fb 	.word	0x080021fb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80021b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	3214      	adds	r2, #20
 80021be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	ea42 0103 	orr.w	r1, r2, r3
 80021c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	3214      	adds	r2, #20
 80021ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80021d2:	e032      	b.n	800223a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80021d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	3214      	adds	r2, #20
 80021da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021de:	1c59      	adds	r1, r3, #1
 80021e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	3214      	adds	r2, #20
 80021e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80021ea:	e026      	b.n	800223a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80021ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	3214      	adds	r2, #20
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80021f8:	e01f      	b.n	800223a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80021fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d006      	beq.n	8002210 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	3214      	adds	r2, #20
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800220e:	e014      	b.n	800223a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8002210:	2300      	movs	r3, #0
 8002212:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8002214:	e011      	b.n	800223a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002216:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <xTaskGenericNotifyFromISR+0x1e8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00c      	beq.n	8002238 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800221e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002222:	f383 8811 	msr	BASEPRI, r3
 8002226:	f3bf 8f6f 	isb	sy
 800222a:	f3bf 8f4f 	dsb	sy
 800222e:	61fb      	str	r3, [r7, #28]
    }
 8002230:	bf00      	nop
 8002232:	e7fe      	b.n	8002232 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8002234:	bf00      	nop
 8002236:	e000      	b.n	800223a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8002238:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800223a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800223e:	2b01      	cmp	r3, #1
 8002240:	d145      	bne.n	80022ce <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 800224a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224e:	f383 8811 	msr	BASEPRI, r3
 8002252:	f3bf 8f6f 	isb	sy
 8002256:	f3bf 8f4f 	dsb	sy
 800225a:	61bb      	str	r3, [r7, #24]
    }
 800225c:	bf00      	nop
 800225e:	e7fe      	b.n	800225e <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <xTaskGenericNotifyFromISR+0x1ec>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d11c      	bne.n	80022a2 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226a:	3304      	adds	r3, #4
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fa1d 	bl	80006ac <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	2201      	movs	r2, #1
 8002278:	409a      	lsls	r2, r3
 800227a:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <xTaskGenericNotifyFromISR+0x1f0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	4a1a      	ldr	r2, [pc, #104]	; (80022ec <xTaskGenericNotifyFromISR+0x1f0>)
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <xTaskGenericNotifyFromISR+0x1f4>)
 8002292:	441a      	add	r2, r3
 8002294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002296:	3304      	adds	r3, #4
 8002298:	4619      	mov	r1, r3
 800229a:	4610      	mov	r0, r2
 800229c:	f7fe f9a9 	bl	80005f2 <vListInsertEnd>
 80022a0:	e005      	b.n	80022ae <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80022a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a4:	3318      	adds	r3, #24
 80022a6:	4619      	mov	r1, r3
 80022a8:	4812      	ldr	r0, [pc, #72]	; (80022f4 <xTaskGenericNotifyFromISR+0x1f8>)
 80022aa:	f7fe f9a2 	bl	80005f2 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <xTaskGenericNotifyFromISR+0x1fc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d908      	bls.n	80022ce <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80022bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80022c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <xTaskGenericNotifyFromISR+0x200>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d0:	617b      	str	r3, [r7, #20]
        __asm volatile
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f383 8811 	msr	BASEPRI, r3
    }
 80022d8:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80022da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80022dc:	4618      	mov	r0, r3
 80022de:	3740      	adds	r7, #64	; 0x40
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000184 	.word	0x20000184
 80022e8:	200001a8 	.word	0x200001a8
 80022ec:	20000188 	.word	0x20000188
 80022f0:	200000ac 	.word	0x200000ac
 80022f4:	20000140 	.word	0x20000140
 80022f8:	200000a8 	.word	0x200000a8
 80022fc:	20000194 	.word	0x20000194

08002300 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800230a:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002310:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3304      	adds	r3, #4
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe f9c8 	bl	80006ac <uxListRemove>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10b      	bne.n	800233a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002322:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	2201      	movs	r2, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4013      	ands	r3, r2
 8002336:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002338:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002340:	d10a      	bne.n	8002358 <prvAddCurrentTaskToDelayedList+0x58>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3304      	adds	r3, #4
 800234e:	4619      	mov	r1, r3
 8002350:	481a      	ldr	r0, [pc, #104]	; (80023bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8002352:	f7fe f94e 	bl	80005f2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002356:	e026      	b.n	80023a6 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002360:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d209      	bcs.n	8002384 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002370:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3304      	adds	r3, #4
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f7fe f95c 	bl	800063a <vListInsert>
}
 8002382:	e010      	b.n	80023a6 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3304      	adds	r3, #4
 800238e:	4619      	mov	r1, r3
 8002390:	4610      	mov	r0, r2
 8002392:	f7fe f952 	bl	800063a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	429a      	cmp	r2, r3
 800239e:	d202      	bcs.n	80023a6 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80023a0:	4a09      	ldr	r2, [pc, #36]	; (80023c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6013      	str	r3, [r2, #0]
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000184 	.word	0x20000184
 80023b4:	200000a8 	.word	0x200000a8
 80023b8:	20000188 	.word	0x20000188
 80023bc:	2000016c 	.word	0x2000016c
 80023c0:	2000013c 	.word	0x2000013c
 80023c4:	20000138 	.word	0x20000138
 80023c8:	200001a0 	.word	0x200001a0

080023cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80023d6:	f000 fb31 	bl	8002a3c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <xTimerCreateTimerTask+0x54>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <xTimerCreateTimerTask+0x58>)
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	2302      	movs	r3, #2
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2300      	movs	r3, #0
 80023ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023f0:	490d      	ldr	r1, [pc, #52]	; (8002428 <xTimerCreateTimerTask+0x5c>)
 80023f2:	480e      	ldr	r0, [pc, #56]	; (800242c <xTimerCreateTimerTask+0x60>)
 80023f4:	f7fe ff38 	bl	8001268 <xTaskCreate>
 80023f8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	603b      	str	r3, [r7, #0]
    }
 8002412:	bf00      	nop
 8002414:	e7fe      	b.n	8002414 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002416:	687b      	ldr	r3, [r7, #4]
    }
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	200001dc 	.word	0x200001dc
 8002424:	200001e0 	.word	0x200001e0
 8002428:	08007cac 	.word	0x08007cac
 800242c:	0800261d 	.word	0x0800261d

08002430 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800243e:	202c      	movs	r0, #44	; 0x2c
 8002440:	f000 fda4 	bl	8002f8c <pvPortMalloc>
 8002444:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00d      	beq.n	8002468 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f805 	bl	8002472 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8002468:	697b      	ldr	r3, [r7, #20]
        }
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8002486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248a:	f383 8811 	msr	BASEPRI, r3
 800248e:	f3bf 8f6f 	isb	sy
 8002492:	f3bf 8f4f 	dsb	sy
 8002496:	617b      	str	r3, [r7, #20]
    }
 8002498:	bf00      	nop
 800249a:	e7fe      	b.n	800249a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d01e      	beq.n	80024e0 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80024a2:	f000 facb 	bl	8002a3c <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	6a3a      	ldr	r2, [r7, #32]
 80024bc:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	3304      	adds	r3, #4
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe f888 	bl	80005d8 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10a      	bne.n	8002516 <xTimerGenericCommand+0x2e>
        __asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	623b      	str	r3, [r7, #32]
    }
 8002512:	bf00      	nop
 8002514:	e7fe      	b.n	8002514 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <xTimerGenericCommand+0x98>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d02a      	beq.n	8002574 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b05      	cmp	r3, #5
 800252e:	dc18      	bgt.n	8002562 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002530:	f7ff fbec 	bl	8001d0c <xTaskGetSchedulerState>
 8002534:	4603      	mov	r3, r0
 8002536:	2b02      	cmp	r3, #2
 8002538:	d109      	bne.n	800254e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <xTimerGenericCommand+0x98>)
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	f107 0114 	add.w	r1, r7, #20
 8002542:	2300      	movs	r3, #0
 8002544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002546:	f7fe f9c5 	bl	80008d4 <xQueueGenericSend>
 800254a:	6278      	str	r0, [r7, #36]	; 0x24
 800254c:	e012      	b.n	8002574 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <xTimerGenericCommand+0x98>)
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	f107 0114 	add.w	r1, r7, #20
 8002556:	2300      	movs	r3, #0
 8002558:	2200      	movs	r2, #0
 800255a:	f7fe f9bb 	bl	80008d4 <xQueueGenericSend>
 800255e:	6278      	str	r0, [r7, #36]	; 0x24
 8002560:	e008      	b.n	8002574 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <xTimerGenericCommand+0x98>)
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	f107 0114 	add.w	r1, r7, #20
 800256a:	2300      	movs	r3, #0
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	f7fe faaf 	bl	8000ad0 <xQueueGenericSendFromISR>
 8002572:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002576:	4618      	mov	r0, r3
 8002578:	3728      	adds	r7, #40	; 0x28
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200001dc 	.word	0x200001dc

08002584 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af02      	add	r7, sp, #8
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <prvProcessExpiredTimer+0x94>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3304      	adds	r3, #4
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe f885 	bl	80006ac <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d022      	beq.n	80025f6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	18d1      	adds	r1, r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	6978      	ldr	r0, [r7, #20]
 80025be:	f000 f8d1 	bl	8002764 <prvInsertTimerInActiveList>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01f      	beq.n	8002608 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80025c8:	2300      	movs	r3, #0
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2300      	movs	r3, #0
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	2100      	movs	r1, #0
 80025d2:	6978      	ldr	r0, [r7, #20]
 80025d4:	f7ff ff88 	bl	80024e8 <xTimerGenericCommand>
 80025d8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d113      	bne.n	8002608 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	60fb      	str	r3, [r7, #12]
    }
 80025f2:	bf00      	nop
 80025f4:	e7fe      	b.n	80025f4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	6978      	ldr	r0, [r7, #20]
 800260e:	4798      	blx	r3
    }
 8002610:	bf00      	nop
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200001d4 	.word	0x200001d4

0800261c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002624:	f107 0308 	add.w	r3, r7, #8
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f857 	bl	80026dc <prvGetNextExpireTime>
 800262e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4619      	mov	r1, r3
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f803 	bl	8002640 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800263a:	f000 f8d5 	bl	80027e8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800263e:	e7f1      	b.n	8002624 <prvTimerTask+0x8>

08002640 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800264a:	f7fe ffa5 	bl	8001598 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800264e:	f107 0308 	add.w	r3, r7, #8
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f866 	bl	8002724 <prvSampleTimeNow>
 8002658:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d130      	bne.n	80026c2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <prvProcessTimerOrBlockTask+0x3c>
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	429a      	cmp	r2, r3
 800266c:	d806      	bhi.n	800267c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800266e:	f7fe ffa1 	bl	80015b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002672:	68f9      	ldr	r1, [r7, #12]
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ff85 	bl	8002584 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800267a:	e024      	b.n	80026c6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <prvProcessTimerOrBlockTask+0x90>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <prvProcessTimerOrBlockTask+0x50>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <prvProcessTimerOrBlockTask+0x52>
 8002690:	2300      	movs	r3, #0
 8002692:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <prvProcessTimerOrBlockTask+0x94>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f7fe fdad 	bl	8001200 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80026a6:	f7fe ff85 	bl	80015b4 <xTaskResumeAll>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <prvProcessTimerOrBlockTask+0x98>)
 80026b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	f3bf 8f6f 	isb	sy
    }
 80026c0:	e001      	b.n	80026c6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80026c2:	f7fe ff77 	bl	80015b4 <xTaskResumeAll>
    }
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200001d8 	.word	0x200001d8
 80026d4:	200001dc 	.word	0x200001dc
 80026d8:	e000ed04 	.word	0xe000ed04

080026dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80026e4:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <prvGetNextExpireTime+0x44>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <prvGetNextExpireTime+0x16>
 80026ee:	2201      	movs	r2, #1
 80026f0:	e000      	b.n	80026f4 <prvGetNextExpireTime+0x18>
 80026f2:	2200      	movs	r2, #0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002700:	4b07      	ldr	r3, [pc, #28]	; (8002720 <prvGetNextExpireTime+0x44>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e001      	b.n	8002710 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002710:	68fb      	ldr	r3, [r7, #12]
    }
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	200001d4 	.word	0x200001d4

08002724 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800272c:	f7fe ffde 	bl	80016ec <xTaskGetTickCount>
 8002730:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <prvSampleTimeNow+0x3c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d205      	bcs.n	8002748 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800273c:	f000 f91a 	bl	8002974 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e002      	b.n	800274e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800274e:	4a04      	ldr	r2, [pc, #16]	; (8002760 <prvSampleTimeNow+0x3c>)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002754:	68fb      	ldr	r3, [r7, #12]
    }
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200001e4 	.word	0x200001e4

08002764 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	d812      	bhi.n	80027b0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	1ad2      	subs	r2, r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	429a      	cmp	r2, r3
 8002796:	d302      	bcc.n	800279e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002798:	2301      	movs	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	e01b      	b.n	80027d6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <prvInsertTimerInActiveList+0x7c>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3304      	adds	r3, #4
 80027a6:	4619      	mov	r1, r3
 80027a8:	4610      	mov	r0, r2
 80027aa:	f7fd ff46 	bl	800063a <vListInsert>
 80027ae:	e012      	b.n	80027d6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d206      	bcs.n	80027c6 <prvInsertTimerInActiveList+0x62>
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d302      	bcc.n	80027c6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80027c0:	2301      	movs	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	e007      	b.n	80027d6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <prvInsertTimerInActiveList+0x80>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3304      	adds	r3, #4
 80027ce:	4619      	mov	r1, r3
 80027d0:	4610      	mov	r0, r2
 80027d2:	f7fd ff32 	bl	800063a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80027d6:	697b      	ldr	r3, [r7, #20]
    }
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	200001d8 	.word	0x200001d8
 80027e4:	200001d4 	.word	0x200001d4

080027e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	; 0x30
 80027ec:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027ee:	e0ae      	b.n	800294e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f2c0 80aa 	blt.w	800294c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	3304      	adds	r3, #4
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd ff4f 	bl	80006ac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff87 	bl	8002724 <prvSampleTimeNow>
 8002816:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b09      	cmp	r3, #9
 800281c:	f200 8097 	bhi.w	800294e <prvProcessReceivedCommands+0x166>
 8002820:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <prvProcessReceivedCommands+0x40>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	08002851 	.word	0x08002851
 800282c:	08002851 	.word	0x08002851
 8002830:	08002851 	.word	0x08002851
 8002834:	080028c5 	.word	0x080028c5
 8002838:	080028d9 	.word	0x080028d9
 800283c:	08002923 	.word	0x08002923
 8002840:	08002851 	.word	0x08002851
 8002844:	08002851 	.word	0x08002851
 8002848:	080028c5 	.word	0x080028c5
 800284c:	080028d9 	.word	0x080028d9
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	18d1      	adds	r1, r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a3a      	ldr	r2, [r7, #32]
 800286e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002870:	f7ff ff78 	bl	8002764 <prvInsertTimerInActiveList>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d069      	beq.n	800294e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002880:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d05e      	beq.n	800294e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	441a      	add	r2, r3
 8002898:	2300      	movs	r3, #0
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2300      	movs	r3, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028a2:	f7ff fe21 	bl	80024e8 <xTimerGenericCommand>
 80028a6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d14f      	bne.n	800294e <prvProcessReceivedCommands+0x166>
        __asm volatile
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	61bb      	str	r3, [r7, #24]
    }
 80028c0:	bf00      	nop
 80028c2:	e7fe      	b.n	80028c2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80028d6:	e03a      	b.n	800294e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <prvProcessReceivedCommands+0x126>
        __asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	617b      	str	r3, [r7, #20]
    }
 800290a:	bf00      	nop
 800290c:	e7fe      	b.n	800290c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	18d1      	adds	r1, r2, r3
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	6a3a      	ldr	r2, [r7, #32]
 800291a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800291c:	f7ff ff22 	bl	8002764 <prvInsertTimerInActiveList>
                        break;
 8002920:	e015      	b.n	800294e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002932:	f000 fc0b 	bl	800314c <vPortFree>
 8002936:	e00a      	b.n	800294e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	b2da      	uxtb	r2, r3
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800294a:	e000      	b.n	800294e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800294c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800294e:	4b08      	ldr	r3, [pc, #32]	; (8002970 <prvProcessReceivedCommands+0x188>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f107 0108 	add.w	r1, r7, #8
 8002956:	2200      	movs	r2, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe f963 	bl	8000c24 <xQueueReceive>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	f47f af45 	bne.w	80027f0 <prvProcessReceivedCommands+0x8>
        }
    }
 8002966:	bf00      	nop
 8002968:	bf00      	nop
 800296a:	3728      	adds	r7, #40	; 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	200001dc 	.word	0x200001dc

08002974 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800297a:	e048      	b.n	8002a0e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800297c:	4b2d      	ldr	r3, [pc, #180]	; (8002a34 <prvSwitchTimerLists+0xc0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002986:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <prvSwitchTimerLists+0xc0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3304      	adds	r3, #4
 8002994:	4618      	mov	r0, r3
 8002996:	f7fd fe89 	bl	80006ac <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02e      	beq.n	8002a0e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d90e      	bls.n	80029e0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <prvSwitchTimerLists+0xc0>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3304      	adds	r3, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4610      	mov	r0, r2
 80029da:	f7fd fe2e 	bl	800063a <vListInsert>
 80029de:	e016      	b.n	8002a0e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80029e0:	2300      	movs	r3, #0
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2300      	movs	r3, #0
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	2100      	movs	r1, #0
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff fd7c 	bl	80024e8 <xTimerGenericCommand>
 80029f0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <prvSwitchTimerLists+0x9a>
        __asm volatile
 80029f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	603b      	str	r3, [r7, #0]
    }
 8002a0a:	bf00      	nop
 8002a0c:	e7fe      	b.n	8002a0c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <prvSwitchTimerLists+0xc0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1b1      	bne.n	800297c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <prvSwitchTimerLists+0xc0>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <prvSwitchTimerLists+0xc4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <prvSwitchTimerLists+0xc0>)
 8002a24:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002a26:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <prvSwitchTimerLists+0xc4>)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	6013      	str	r3, [r2, #0]
    }
 8002a2c:	bf00      	nop
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200001d4 	.word	0x200001d4
 8002a38:	200001d8 	.word	0x200001d8

08002a3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002a40:	f000 f982 	bl	8002d48 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <prvCheckForValidListAndQueue+0x54>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d11d      	bne.n	8002a88 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002a4c:	4811      	ldr	r0, [pc, #68]	; (8002a94 <prvCheckForValidListAndQueue+0x58>)
 8002a4e:	f7fd fda3 	bl	8000598 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002a52:	4811      	ldr	r0, [pc, #68]	; (8002a98 <prvCheckForValidListAndQueue+0x5c>)
 8002a54:	f7fd fda0 	bl	8000598 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002a58:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <prvCheckForValidListAndQueue+0x60>)
 8002a5a:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <prvCheckForValidListAndQueue+0x58>)
 8002a5c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <prvCheckForValidListAndQueue+0x64>)
 8002a60:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <prvCheckForValidListAndQueue+0x5c>)
 8002a62:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002a64:	2200      	movs	r2, #0
 8002a66:	210c      	movs	r1, #12
 8002a68:	200a      	movs	r0, #10
 8002a6a:	f7fd feb1 	bl	80007d0 <xQueueGenericCreate>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <prvCheckForValidListAndQueue+0x54>)
 8002a72:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <prvCheckForValidListAndQueue+0x54>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <prvCheckForValidListAndQueue+0x54>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4908      	ldr	r1, [pc, #32]	; (8002aa4 <prvCheckForValidListAndQueue+0x68>)
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fb92 	bl	80011ac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002a88:	f000 f98e 	bl	8002da8 <vPortExitCritical>
    }
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	200001dc 	.word	0x200001dc
 8002a94:	200001ac 	.word	0x200001ac
 8002a98:	200001c0 	.word	0x200001c0
 8002a9c:	200001d4 	.word	0x200001d4
 8002aa0:	200001d8 	.word	0x200001d8
 8002aa4:	08007cb4 	.word	0x08007cb4

08002aa8 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <pvTimerGetTimerID+0x28>
        __asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	60fb      	str	r3, [r7, #12]
    }
 8002acc:	bf00      	nop
 8002ace:	e7fe      	b.n	8002ace <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8002ad0:	f000 f93a 	bl	8002d48 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8002ada:	f000 f965 	bl	8002da8 <vPortExitCritical>

        return pvReturn;
 8002ade:	693b      	ldr	r3, [r7, #16]
    }
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3b04      	subs	r3, #4
 8002af8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3b04      	subs	r3, #4
 8002b06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f023 0201 	bic.w	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3b04      	subs	r3, #4
 8002b16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002b18:	4a0c      	ldr	r2, [pc, #48]	; (8002b4c <pxPortInitialiseStack+0x64>)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3b14      	subs	r3, #20
 8002b22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3b04      	subs	r3, #4
 8002b2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f06f 0202 	mvn.w	r2, #2
 8002b36:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3b20      	subs	r3, #32
 8002b3c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	08002b51 	.word	0x08002b51

08002b50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <prvTaskExitError+0x54>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b62:	d00a      	beq.n	8002b7a <prvTaskExitError+0x2a>
        __asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	60fb      	str	r3, [r7, #12]
    }
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <prvTaskExitError+0x28>
        __asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	60bb      	str	r3, [r7, #8]
    }
 8002b8c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002b8e:	bf00      	nop
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0fc      	beq.n	8002b90 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002b96:	bf00      	nop
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	20000004 	.word	0x20000004
	...

08002bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002bb0:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <pxCurrentTCBConst2>)
 8002bb2:	6819      	ldr	r1, [r3, #0]
 8002bb4:	6808      	ldr	r0, [r1, #0]
 8002bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bba:	f380 8809 	msr	PSP, r0
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f04f 0000 	mov.w	r0, #0
 8002bc6:	f380 8811 	msr	BASEPRI, r0
 8002bca:	4770      	bx	lr
 8002bcc:	f3af 8000 	nop.w

08002bd0 <pxCurrentTCBConst2>:
 8002bd0:	200000a8 	.word	0x200000a8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop

08002bd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002bd8:	4808      	ldr	r0, [pc, #32]	; (8002bfc <prvPortStartFirstTask+0x24>)
 8002bda:	6800      	ldr	r0, [r0, #0]
 8002bdc:	6800      	ldr	r0, [r0, #0]
 8002bde:	f380 8808 	msr	MSP, r0
 8002be2:	f04f 0000 	mov.w	r0, #0
 8002be6:	f380 8814 	msr	CONTROL, r0
 8002bea:	b662      	cpsie	i
 8002bec:	b661      	cpsie	f
 8002bee:	f3bf 8f4f 	dsb	sy
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	df00      	svc	0
 8002bf8:	bf00      	nop
 8002bfa:	0000      	.short	0x0000
 8002bfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop

08002c04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c0a:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <xPortStartScheduler+0x120>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a46      	ldr	r2, [pc, #280]	; (8002d28 <xPortStartScheduler+0x124>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d10a      	bne.n	8002c2a <xPortStartScheduler+0x26>
        __asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	613b      	str	r3, [r7, #16]
    }
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c2a:	4b3e      	ldr	r3, [pc, #248]	; (8002d24 <xPortStartScheduler+0x120>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a3f      	ldr	r2, [pc, #252]	; (8002d2c <xPortStartScheduler+0x128>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d10a      	bne.n	8002c4a <xPortStartScheduler+0x46>
        __asm volatile
 8002c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	60fb      	str	r3, [r7, #12]
    }
 8002c46:	bf00      	nop
 8002c48:	e7fe      	b.n	8002c48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c4a:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <xPortStartScheduler+0x12c>)
 8002c4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	22ff      	movs	r2, #255	; 0xff
 8002c5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <xPortStartScheduler+0x130>)
 8002c70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <xPortStartScheduler+0x134>)
 8002c74:	2207      	movs	r2, #7
 8002c76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c78:	e009      	b.n	8002c8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <xPortStartScheduler+0x134>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	4a2d      	ldr	r2, [pc, #180]	; (8002d38 <xPortStartScheduler+0x134>)
 8002c82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	2b80      	cmp	r3, #128	; 0x80
 8002c98:	d0ef      	beq.n	8002c7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c9a:	4b27      	ldr	r3, [pc, #156]	; (8002d38 <xPortStartScheduler+0x134>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d00a      	beq.n	8002cbc <xPortStartScheduler+0xb8>
        __asm volatile
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	60bb      	str	r3, [r7, #8]
    }
 8002cb8:	bf00      	nop
 8002cba:	e7fe      	b.n	8002cba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002cbc:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <xPortStartScheduler+0x134>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <xPortStartScheduler+0x134>)
 8002cc4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <xPortStartScheduler+0x134>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cce:	4a1a      	ldr	r2, [pc, #104]	; (8002d38 <xPortStartScheduler+0x134>)
 8002cd0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <xPortStartScheduler+0x138>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <xPortStartScheduler+0x138>)
 8002ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ce4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <xPortStartScheduler+0x138>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <xPortStartScheduler+0x138>)
 8002cec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002cf0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002cf2:	f000 f8db 	bl	8002eac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <xPortStartScheduler+0x13c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002cfc:	f000 f8fa 	bl	8002ef4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <xPortStartScheduler+0x140>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0f      	ldr	r2, [pc, #60]	; (8002d44 <xPortStartScheduler+0x140>)
 8002d06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002d0c:	f7ff ff64 	bl	8002bd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d10:	f7fe fdb4 	bl	800187c <vTaskSwitchContext>
    prvTaskExitError();
 8002d14:	f7ff ff1c 	bl	8002b50 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	e000ed00 	.word	0xe000ed00
 8002d28:	410fc271 	.word	0x410fc271
 8002d2c:	410fc270 	.word	0x410fc270
 8002d30:	e000e400 	.word	0xe000e400
 8002d34:	200001e8 	.word	0x200001e8
 8002d38:	200001ec 	.word	0x200001ec
 8002d3c:	e000ed20 	.word	0xe000ed20
 8002d40:	20000004 	.word	0x20000004
 8002d44:	e000ef34 	.word	0xe000ef34

08002d48 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	607b      	str	r3, [r7, #4]
    }
 8002d60:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d62:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <vPortEnterCritical+0x58>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <vPortEnterCritical+0x58>)
 8002d6a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <vPortEnterCritical+0x58>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d10f      	bne.n	8002d94 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <vPortEnterCritical+0x5c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <vPortEnterCritical+0x4c>
        __asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	603b      	str	r3, [r7, #0]
    }
 8002d90:	bf00      	nop
 8002d92:	e7fe      	b.n	8002d92 <vPortEnterCritical+0x4a>
    }
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	20000004 	.word	0x20000004
 8002da4:	e000ed04 	.word	0xe000ed04

08002da8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <vPortExitCritical+0x50>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <vPortExitCritical+0x24>
        __asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	607b      	str	r3, [r7, #4]
    }
 8002dc8:	bf00      	nop
 8002dca:	e7fe      	b.n	8002dca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <vPortExitCritical+0x50>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <vPortExitCritical+0x50>)
 8002dd4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <vPortExitCritical+0x50>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d105      	bne.n	8002dea <vPortExitCritical+0x42>
 8002dde:	2300      	movs	r3, #0
 8002de0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f383 8811 	msr	BASEPRI, r3
    }
 8002de8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000004 	.word	0x20000004
 8002dfc:	00000000 	.word	0x00000000

08002e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002e00:	f3ef 8009 	mrs	r0, PSP
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <pxCurrentTCBConst>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	f01e 0f10 	tst.w	lr, #16
 8002e10:	bf08      	it	eq
 8002e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e1a:	6010      	str	r0, [r2, #0]
 8002e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e24:	f380 8811 	msr	BASEPRI, r0
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f7fe fd24 	bl	800187c <vTaskSwitchContext>
 8002e34:	f04f 0000 	mov.w	r0, #0
 8002e38:	f380 8811 	msr	BASEPRI, r0
 8002e3c:	bc09      	pop	{r0, r3}
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	6808      	ldr	r0, [r1, #0]
 8002e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e46:	f01e 0f10 	tst.w	lr, #16
 8002e4a:	bf08      	it	eq
 8002e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e50:	f380 8809 	msr	PSP, r0
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	f3af 8000 	nop.w

08002e60 <pxCurrentTCBConst>:
 8002e60:	200000a8 	.word	0x200000a8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop

08002e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	607b      	str	r3, [r7, #4]
    }
 8002e80:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e82:	f7fe fc43 	bl	800170c <xTaskIncrementTick>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <SysTick_Handler+0x40>)
 8002e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	2300      	movs	r3, #0
 8002e96:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f383 8811 	msr	BASEPRI, r3
    }
 8002e9e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	e000ed04 	.word	0xe000ed04

08002eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <vPortSetupTimerInterrupt+0x34>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <vPortSetupTimerInterrupt+0x38>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <vPortSetupTimerInterrupt+0x3c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <vPortSetupTimerInterrupt+0x40>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	099b      	lsrs	r3, r3, #6
 8002ec8:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <vPortSetupTimerInterrupt+0x44>)
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <vPortSetupTimerInterrupt+0x34>)
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	601a      	str	r2, [r3, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	e000e010 	.word	0xe000e010
 8002ee4:	e000e018 	.word	0xe000e018
 8002ee8:	20000018 	.word	0x20000018
 8002eec:	10624dd3 	.word	0x10624dd3
 8002ef0:	e000e014 	.word	0xe000e014

08002ef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002f04 <vPortEnableVFP+0x10>
 8002ef8:	6801      	ldr	r1, [r0, #0]
 8002efa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002efe:	6001      	str	r1, [r0, #0]
 8002f00:	4770      	bx	lr
 8002f02:	0000      	.short	0x0000
 8002f04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop

08002f0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002f12:	f3ef 8305 	mrs	r3, IPSR
 8002f16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b0f      	cmp	r3, #15
 8002f1c:	d914      	bls.n	8002f48 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002f1e:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <vPortValidateInterruptPriority+0x70>)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <vPortValidateInterruptPriority+0x74>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	7afa      	ldrb	r2, [r7, #11]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d20a      	bcs.n	8002f48 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	607b      	str	r3, [r7, #4]
    }
 8002f44:	bf00      	nop
 8002f46:	e7fe      	b.n	8002f46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f48:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <vPortValidateInterruptPriority+0x78>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f50:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <vPortValidateInterruptPriority+0x7c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d90a      	bls.n	8002f6e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	603b      	str	r3, [r7, #0]
    }
 8002f6a:	bf00      	nop
 8002f6c:	e7fe      	b.n	8002f6c <vPortValidateInterruptPriority+0x60>
    }
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000e3f0 	.word	0xe000e3f0
 8002f80:	200001e8 	.word	0x200001e8
 8002f84:	e000ed0c 	.word	0xe000ed0c
 8002f88:	200001ec 	.word	0x200001ec

08002f8c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	; 0x28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002f98:	f7fe fafe 	bl	8001598 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f9c:	4b65      	ldr	r3, [pc, #404]	; (8003134 <pvPortMalloc+0x1a8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002fa4:	f000 f934 	bl	8003210 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002fa8:	4b63      	ldr	r3, [pc, #396]	; (8003138 <pvPortMalloc+0x1ac>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f040 80a7 	bne.w	8003104 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02d      	beq.n	8003018 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d227      	bcs.n	8003018 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002fc8:	2208      	movs	r2, #8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d021      	beq.n	800301e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f023 0307 	bic.w	r3, r3, #7
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d214      	bcs.n	8003012 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f023 0307 	bic.w	r3, r3, #7
 8002fee:	3308      	adds	r3, #8
 8002ff0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d010      	beq.n	800301e <pvPortMalloc+0x92>
        __asm volatile
 8002ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003000:	f383 8811 	msr	BASEPRI, r3
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	617b      	str	r3, [r7, #20]
    }
 800300e:	bf00      	nop
 8003010:	e7fe      	b.n	8003010 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003016:	e002      	b.n	800301e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	e000      	b.n	8003020 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800301e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d06e      	beq.n	8003104 <pvPortMalloc+0x178>
 8003026:	4b45      	ldr	r3, [pc, #276]	; (800313c <pvPortMalloc+0x1b0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	429a      	cmp	r2, r3
 800302e:	d869      	bhi.n	8003104 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003030:	4b43      	ldr	r3, [pc, #268]	; (8003140 <pvPortMalloc+0x1b4>)
 8003032:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003034:	4b42      	ldr	r3, [pc, #264]	; (8003140 <pvPortMalloc+0x1b4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800303a:	e004      	b.n	8003046 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	d903      	bls.n	8003058 <pvPortMalloc+0xcc>
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f1      	bne.n	800303c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003058:	4b36      	ldr	r3, [pc, #216]	; (8003134 <pvPortMalloc+0x1a8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	429a      	cmp	r2, r3
 8003060:	d050      	beq.n	8003104 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2208      	movs	r2, #8
 8003068:	4413      	add	r3, r2
 800306a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	1ad2      	subs	r2, r2, r3
 800307c:	2308      	movs	r3, #8
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	429a      	cmp	r2, r3
 8003082:	d91f      	bls.n	80030c4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4413      	add	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <pvPortMalloc+0x120>
        __asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	613b      	str	r3, [r7, #16]
    }
 80030a8:	bf00      	nop
 80030aa:	e7fe      	b.n	80030aa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	1ad2      	subs	r2, r2, r3
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030be:	69b8      	ldr	r0, [r7, #24]
 80030c0:	f000 f908 	bl	80032d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030c4:	4b1d      	ldr	r3, [pc, #116]	; (800313c <pvPortMalloc+0x1b0>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	4a1b      	ldr	r2, [pc, #108]	; (800313c <pvPortMalloc+0x1b0>)
 80030d0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030d2:	4b1a      	ldr	r3, [pc, #104]	; (800313c <pvPortMalloc+0x1b0>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <pvPortMalloc+0x1b8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d203      	bcs.n	80030e6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030de:	4b17      	ldr	r3, [pc, #92]	; (800313c <pvPortMalloc+0x1b0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a18      	ldr	r2, [pc, #96]	; (8003144 <pvPortMalloc+0x1b8>)
 80030e4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <pvPortMalloc+0x1ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80030fa:	4b13      	ldr	r3, [pc, #76]	; (8003148 <pvPortMalloc+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	4a11      	ldr	r2, [pc, #68]	; (8003148 <pvPortMalloc+0x1bc>)
 8003102:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003104:	f7fe fa56 	bl	80015b4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <pvPortMalloc+0x19c>
        __asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	60fb      	str	r3, [r7, #12]
    }
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <pvPortMalloc+0x19a>
    return pvReturn;
 8003128:	69fb      	ldr	r3, [r7, #28]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3728      	adds	r7, #40	; 0x28
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	200191f8 	.word	0x200191f8
 8003138:	2001920c 	.word	0x2001920c
 800313c:	200191fc 	.word	0x200191fc
 8003140:	200191f0 	.word	0x200191f0
 8003144:	20019200 	.word	0x20019200
 8003148:	20019204 	.word	0x20019204

0800314c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d04d      	beq.n	80031fa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800315e:	2308      	movs	r3, #8
 8003160:	425b      	negs	r3, r3
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4413      	add	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <vPortFree+0xb8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <vPortFree+0x44>
        __asm volatile
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	60fb      	str	r3, [r7, #12]
    }
 800318c:	bf00      	nop
 800318e:	e7fe      	b.n	800318e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <vPortFree+0x62>
        __asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	60bb      	str	r3, [r7, #8]
    }
 80031aa:	bf00      	nop
 80031ac:	e7fe      	b.n	80031ac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	4b14      	ldr	r3, [pc, #80]	; (8003204 <vPortFree+0xb8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d01e      	beq.n	80031fa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d11a      	bne.n	80031fa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <vPortFree+0xb8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	401a      	ands	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80031d4:	f7fe f9e0 	bl	8001598 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <vPortFree+0xbc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	4a09      	ldr	r2, [pc, #36]	; (8003208 <vPortFree+0xbc>)
 80031e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031e6:	6938      	ldr	r0, [r7, #16]
 80031e8:	f000 f874 	bl	80032d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <vPortFree+0xc0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	4a06      	ldr	r2, [pc, #24]	; (800320c <vPortFree+0xc0>)
 80031f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80031f6:	f7fe f9dd 	bl	80015b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80031fa:	bf00      	nop
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	2001920c 	.word	0x2001920c
 8003208:	200191fc 	.word	0x200191fc
 800320c:	20019208 	.word	0x20019208

08003210 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003216:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800321a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800321c:	4b27      	ldr	r3, [pc, #156]	; (80032bc <prvHeapInit+0xac>)
 800321e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3307      	adds	r3, #7
 800322e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0307 	bic.w	r3, r3, #7
 8003236:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <prvHeapInit+0xac>)
 8003240:	4413      	add	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003248:	4a1d      	ldr	r2, [pc, #116]	; (80032c0 <prvHeapInit+0xb0>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800324e:	4b1c      	ldr	r3, [pc, #112]	; (80032c0 <prvHeapInit+0xb0>)
 8003250:	2200      	movs	r2, #0
 8003252:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	4413      	add	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800325c:	2208      	movs	r2, #8
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0307 	bic.w	r3, r3, #7
 800326a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <prvHeapInit+0xb4>)
 8003270:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <prvHeapInit+0xb4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2200      	movs	r2, #0
 8003278:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <prvHeapInit+0xb4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	1ad2      	subs	r2, r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <prvHeapInit+0xb4>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <prvHeapInit+0xb8>)
 800329e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4a09      	ldr	r2, [pc, #36]	; (80032cc <prvHeapInit+0xbc>)
 80032a6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80032a8:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <prvHeapInit+0xc0>)
 80032aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032ae:	601a      	str	r2, [r3, #0]
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	200001f0 	.word	0x200001f0
 80032c0:	200191f0 	.word	0x200191f0
 80032c4:	200191f8 	.word	0x200191f8
 80032c8:	20019200 	.word	0x20019200
 80032cc:	200191fc 	.word	0x200191fc
 80032d0:	2001920c 	.word	0x2001920c

080032d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032dc:	4b28      	ldr	r3, [pc, #160]	; (8003380 <prvInsertBlockIntoFreeList+0xac>)
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e002      	b.n	80032e8 <prvInsertBlockIntoFreeList+0x14>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d8f7      	bhi.n	80032e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	4413      	add	r3, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	429a      	cmp	r2, r3
 8003302:	d108      	bne.n	8003316 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	441a      	add	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	441a      	add	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d118      	bne.n	800335c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4b15      	ldr	r3, [pc, #84]	; (8003384 <prvInsertBlockIntoFreeList+0xb0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d00d      	beq.n	8003352 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	441a      	add	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e008      	b.n	8003364 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <prvInsertBlockIntoFreeList+0xb0>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e003      	b.n	8003364 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	429a      	cmp	r2, r3
 800336a:	d002      	beq.n	8003372 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	200191f0 	.word	0x200191f0
 8003384:	200191f8 	.word	0x200191f8

08003388 <led_effect_stop>:
 *      Author: igor
 */

#include "main.h"

void led_effect_stop(void){
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af02      	add	r7, sp, #8
	for(int i=0; i<4; i++)
 800338e:	2300      	movs	r3, #0
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	e00e      	b.n	80033b2 <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 8003394:	4a0b      	ldr	r2, [pc, #44]	; (80033c4 <led_effect_stop+0x3c>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800339c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2300      	movs	r3, #0
 80033a4:	2200      	movs	r2, #0
 80033a6:	2103      	movs	r1, #3
 80033a8:	f7ff f89e 	bl	80024e8 <xTimerGenericCommand>
	for(int i=0; i<4; i++)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3301      	adds	r3, #1
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	dded      	ble.n	8003394 <led_effect_stop+0xc>
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200192bc 	.word	0x200192bc

080033c8 <led_effect>:

void led_effect(int n){
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80033d0:	f7ff ffda 	bl	8003388 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	4a08      	ldr	r2, [pc, #32]	; (80033fc <led_effect+0x34>)
 80033da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80033de:	f7fe f985 	bl	80016ec <xTaskGetTickCount>
 80033e2:	4602      	mov	r2, r0
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2300      	movs	r3, #0
 80033ec:	2101      	movs	r1, #1
 80033ee:	4620      	mov	r0, r4
 80033f0:	f7ff f87a 	bl	80024e8 <xTimerGenericCommand>
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	200192bc 	.word	0x200192bc

08003400 <turn_off_all_leds>:

void turn_off_all_leds(void){
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003404:	2200      	movs	r2, #0
 8003406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800340a:	480b      	ldr	r0, [pc, #44]	; (8003438 <turn_off_all_leds+0x38>)
 800340c:	f001 fdec 	bl	8004fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8003410:	2200      	movs	r2, #0
 8003412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003416:	4808      	ldr	r0, [pc, #32]	; (8003438 <turn_off_all_leds+0x38>)
 8003418:	f001 fde6 	bl	8004fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800341c:	2200      	movs	r2, #0
 800341e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003422:	4805      	ldr	r0, [pc, #20]	; (8003438 <turn_off_all_leds+0x38>)
 8003424:	f001 fde0 	bl	8004fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8003428:	2200      	movs	r2, #0
 800342a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800342e:	4802      	ldr	r0, [pc, #8]	; (8003438 <turn_off_all_leds+0x38>)
 8003430:	f001 fdda 	bl	8004fe8 <HAL_GPIO_WritePin>
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40020c00 	.word	0x40020c00

0800343c <turn_on_all_leds>:

void turn_on_all_leds(void){
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003440:	2201      	movs	r2, #1
 8003442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003446:	480b      	ldr	r0, [pc, #44]	; (8003474 <turn_on_all_leds+0x38>)
 8003448:	f001 fdce 	bl	8004fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800344c:	2201      	movs	r2, #1
 800344e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003452:	4808      	ldr	r0, [pc, #32]	; (8003474 <turn_on_all_leds+0x38>)
 8003454:	f001 fdc8 	bl	8004fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8003458:	2201      	movs	r2, #1
 800345a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800345e:	4805      	ldr	r0, [pc, #20]	; (8003474 <turn_on_all_leds+0x38>)
 8003460:	f001 fdc2 	bl	8004fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8003464:	2201      	movs	r2, #1
 8003466:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800346a:	4802      	ldr	r0, [pc, #8]	; (8003474 <turn_on_all_leds+0x38>)
 800346c:	f001 fdbc 	bl	8004fe8 <HAL_GPIO_WritePin>
}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40020c00 	.word	0x40020c00

08003478 <turn_on_odd_leds>:

void turn_on_odd_leds(void){
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1, GPIO_PIN_SET);
 800347c:	2201      	movs	r2, #1
 800347e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003482:	480b      	ldr	r0, [pc, #44]	; (80034b0 <turn_on_odd_leds+0x38>)
 8003484:	f001 fdb0 	bl	8004fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2, GPIO_PIN_RESET);
 8003488:	2200      	movs	r2, #0
 800348a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800348e:	4808      	ldr	r0, [pc, #32]	; (80034b0 <turn_on_odd_leds+0x38>)
 8003490:	f001 fdaa 	bl	8004fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3, GPIO_PIN_SET);
 8003494:	2201      	movs	r2, #1
 8003496:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800349a:	4805      	ldr	r0, [pc, #20]	; (80034b0 <turn_on_odd_leds+0x38>)
 800349c:	f001 fda4 	bl	8004fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4, GPIO_PIN_RESET);
 80034a0:	2200      	movs	r2, #0
 80034a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034a6:	4802      	ldr	r0, [pc, #8]	; (80034b0 <turn_on_odd_leds+0x38>)
 80034a8:	f001 fd9e 	bl	8004fe8 <HAL_GPIO_WritePin>
}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40020c00 	.word	0x40020c00

080034b4 <turn_on_even_leds>:

void turn_on_even_leds(void){
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1, GPIO_PIN_RESET);
 80034b8:	2200      	movs	r2, #0
 80034ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034be:	480b      	ldr	r0, [pc, #44]	; (80034ec <turn_on_even_leds+0x38>)
 80034c0:	f001 fd92 	bl	8004fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2, GPIO_PIN_SET);
 80034c4:	2201      	movs	r2, #1
 80034c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034ca:	4808      	ldr	r0, [pc, #32]	; (80034ec <turn_on_even_leds+0x38>)
 80034cc:	f001 fd8c 	bl	8004fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3, GPIO_PIN_RESET);
 80034d0:	2200      	movs	r2, #0
 80034d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034d6:	4805      	ldr	r0, [pc, #20]	; (80034ec <turn_on_even_leds+0x38>)
 80034d8:	f001 fd86 	bl	8004fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4, GPIO_PIN_SET);
 80034dc:	2201      	movs	r2, #1
 80034de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034e2:	4802      	ldr	r0, [pc, #8]	; (80034ec <turn_on_even_leds+0x38>)
 80034e4:	f001 fd80 	bl	8004fe8 <HAL_GPIO_WritePin>
}
 80034e8:	bf00      	nop
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40020c00 	.word	0x40020c00

080034f0 <LED_control>:

void LED_control(int value){
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	for(int i=0; i<4; i++)
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	e014      	b.n	8003528 <LED_control+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i) & 0x1));
 80034fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	b299      	uxth	r1, r3
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	fa42 f303 	asr.w	r3, r2, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	4806      	ldr	r0, [pc, #24]	; (8003538 <LED_control+0x48>)
 800351e:	f001 fd63 	bl	8004fe8 <HAL_GPIO_WritePin>
	for(int i=0; i<4; i++)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3301      	adds	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b03      	cmp	r3, #3
 800352c:	dde7      	ble.n	80034fe <LED_control+0xe>
}
 800352e:	bf00      	nop
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40020c00 	.word	0x40020c00

0800353c <LED_effect1>:

void LED_effect1(void){
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1)? turn_off_all_leds() : turn_on_all_leds();
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <LED_effect1+0x28>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f083 0301 	eor.w	r3, r3, #1
 8003548:	4a06      	ldr	r2, [pc, #24]	; (8003564 <LED_effect1+0x28>)
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <LED_effect1+0x28>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <LED_effect1+0x1e>
 8003554:	f7ff ff54 	bl	8003400 <turn_off_all_leds>
}
 8003558:	e001      	b.n	800355e <LED_effect1+0x22>
	(flag ^= 1)? turn_off_all_leds() : turn_on_all_leds();
 800355a:	f7ff ff6f 	bl	800343c <turn_on_all_leds>
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000008 	.word	0x20000008

08003568 <LED_effect2>:

void LED_effect2(void){
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1)? turn_on_even_leds() : turn_on_odd_leds();
 800356c:	4b08      	ldr	r3, [pc, #32]	; (8003590 <LED_effect2+0x28>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f083 0301 	eor.w	r3, r3, #1
 8003574:	4a06      	ldr	r2, [pc, #24]	; (8003590 <LED_effect2+0x28>)
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <LED_effect2+0x28>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <LED_effect2+0x1e>
 8003580:	f7ff ff98 	bl	80034b4 <turn_on_even_leds>
}
 8003584:	e001      	b.n	800358a <LED_effect2+0x22>
	(flag ^= 1)? turn_on_even_leds() : turn_on_odd_leds();
 8003586:	f7ff ff77 	bl	8003478 <turn_on_odd_leds>
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2000000c 	.word	0x2000000c

08003594 <LED_effect3>:

void LED_effect3(void){
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control(0x1 << (i++ % 4));
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <LED_effect3+0x2c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	4908      	ldr	r1, [pc, #32]	; (80035c0 <LED_effect3+0x2c>)
 80035a0:	600a      	str	r2, [r1, #0]
 80035a2:	425a      	negs	r2, r3
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	f002 0203 	and.w	r2, r2, #3
 80035ac:	bf58      	it	pl
 80035ae:	4253      	negpl	r3, r2
 80035b0:	2201      	movs	r2, #1
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff9a 	bl	80034f0 <LED_control>
}
 80035bc:	bf00      	nop
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20019210 	.word	0x20019210

080035c4 <LED_effect4>:

void LED_effect4(void){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control(0x8 >> (i++ % 4));
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <LED_effect4+0x2c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	4908      	ldr	r1, [pc, #32]	; (80035f0 <LED_effect4+0x2c>)
 80035d0:	600a      	str	r2, [r1, #0]
 80035d2:	425a      	negs	r2, r3
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	f002 0203 	and.w	r2, r2, #3
 80035dc:	bf58      	it	pl
 80035de:	4253      	negpl	r3, r2
 80035e0:	2208      	movs	r2, #8
 80035e2:	fa42 f303 	asr.w	r3, r2, r3
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff ff82 	bl	80034f0 <LED_control>
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20019214 	.word	0x20019214

080035f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	; 0x30
 80035f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035fa:	f001 f9a3 	bl	8004944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035fe:	f000 f8ff 	bl	8003800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003602:	f000 f9cf 	bl	80039a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003606:	f000 f9a3 	bl	8003950 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800360a:	f000 f97b 	bl	8003904 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Creating tasks
  status = xTaskCreate(&menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 800360e:	4b66      	ldr	r3, [pc, #408]	; (80037a8 <main+0x1b4>)
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	2302      	movs	r3, #2
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	2300      	movs	r3, #0
 8003618:	22fa      	movs	r2, #250	; 0xfa
 800361a:	4964      	ldr	r1, [pc, #400]	; (80037ac <main+0x1b8>)
 800361c:	4864      	ldr	r0, [pc, #400]	; (80037b0 <main+0x1bc>)
 800361e:	f7fd fe23 	bl	8001268 <xTaskCreate>
 8003622:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d00a      	beq.n	8003640 <main+0x4c>
        __asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	61fb      	str	r3, [r7, #28]
    }
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <main+0x4a>

  status = xTaskCreate(&cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 8003640:	4b5c      	ldr	r3, [pc, #368]	; (80037b4 <main+0x1c0>)
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	2302      	movs	r3, #2
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2300      	movs	r3, #0
 800364a:	22fa      	movs	r2, #250	; 0xfa
 800364c:	495a      	ldr	r1, [pc, #360]	; (80037b8 <main+0x1c4>)
 800364e:	485b      	ldr	r0, [pc, #364]	; (80037bc <main+0x1c8>)
 8003650:	f7fd fe0a 	bl	8001268 <xTaskCreate>
 8003654:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d00a      	beq.n	8003672 <main+0x7e>
        __asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	61bb      	str	r3, [r7, #24]
    }
 800366e:	bf00      	nop
 8003670:	e7fe      	b.n	8003670 <main+0x7c>

  status = xTaskCreate(&print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8003672:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <main+0x1cc>)
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	2302      	movs	r3, #2
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	2300      	movs	r3, #0
 800367c:	22fa      	movs	r2, #250	; 0xfa
 800367e:	4951      	ldr	r1, [pc, #324]	; (80037c4 <main+0x1d0>)
 8003680:	4851      	ldr	r0, [pc, #324]	; (80037c8 <main+0x1d4>)
 8003682:	f7fd fdf1 	bl	8001268 <xTaskCreate>
 8003686:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d00a      	beq.n	80036a4 <main+0xb0>
        __asm volatile
 800368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	617b      	str	r3, [r7, #20]
    }
 80036a0:	bf00      	nop
 80036a2:	e7fe      	b.n	80036a2 <main+0xae>

  status = xTaskCreate(&led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80036a4:	4b49      	ldr	r3, [pc, #292]	; (80037cc <main+0x1d8>)
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	2302      	movs	r3, #2
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	2300      	movs	r3, #0
 80036ae:	22fa      	movs	r2, #250	; 0xfa
 80036b0:	4947      	ldr	r1, [pc, #284]	; (80037d0 <main+0x1dc>)
 80036b2:	4848      	ldr	r0, [pc, #288]	; (80037d4 <main+0x1e0>)
 80036b4:	f7fd fdd8 	bl	8001268 <xTaskCreate>
 80036b8:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d00a      	beq.n	80036d6 <main+0xe2>
        __asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	613b      	str	r3, [r7, #16]
    }
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <main+0xe0>

  status = xTaskCreate(&rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80036d6:	4b40      	ldr	r3, [pc, #256]	; (80037d8 <main+0x1e4>)
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	2302      	movs	r3, #2
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	2300      	movs	r3, #0
 80036e0:	22fa      	movs	r2, #250	; 0xfa
 80036e2:	493e      	ldr	r1, [pc, #248]	; (80037dc <main+0x1e8>)
 80036e4:	483e      	ldr	r0, [pc, #248]	; (80037e0 <main+0x1ec>)
 80036e6:	f7fd fdbf 	bl	8001268 <xTaskCreate>
 80036ea:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d00a      	beq.n	8003708 <main+0x114>
        __asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	60fb      	str	r3, [r7, #12]
    }
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <main+0x112>

  // Create the queue
  q_data = xQueueCreate(10, sizeof(char));
 8003708:	2200      	movs	r2, #0
 800370a:	2101      	movs	r1, #1
 800370c:	200a      	movs	r0, #10
 800370e:	f7fd f85f 	bl	80007d0 <xQueueGenericCreate>
 8003712:	4603      	mov	r3, r0
 8003714:	4a33      	ldr	r2, [pc, #204]	; (80037e4 <main+0x1f0>)
 8003716:	6013      	str	r3, [r2, #0]
  configASSERT(q_data != NULL);
 8003718:	4b32      	ldr	r3, [pc, #200]	; (80037e4 <main+0x1f0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <main+0x142>
        __asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	60bb      	str	r3, [r7, #8]
    }
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <main+0x140>

  q_print = xQueueCreate(10, sizeof(size_t));
 8003736:	2200      	movs	r2, #0
 8003738:	2104      	movs	r1, #4
 800373a:	200a      	movs	r0, #10
 800373c:	f7fd f848 	bl	80007d0 <xQueueGenericCreate>
 8003740:	4603      	mov	r3, r0
 8003742:	4a29      	ldr	r2, [pc, #164]	; (80037e8 <main+0x1f4>)
 8003744:	6013      	str	r3, [r2, #0]
  configASSERT(q_print != NULL);
 8003746:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <main+0x1f4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <main+0x170>
        __asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	607b      	str	r3, [r7, #4]
    }
 8003760:	bf00      	nop
 8003762:	e7fe      	b.n	8003762 <main+0x16e>

  // Create software timers for LED effects

  for(int i=0; i<4; i++)
 8003764:	2300      	movs	r3, #0
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
 8003768:	e013      	b.n	8003792 <main+0x19e>
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void *)(i+1), led_effect_callback);
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	3301      	adds	r3, #1
 800376e:	461a      	mov	r2, r3
 8003770:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <main+0x1f8>)
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	2201      	movs	r2, #1
 8003778:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800377c:	481c      	ldr	r0, [pc, #112]	; (80037f0 <main+0x1fc>)
 800377e:	f7fe fe57 	bl	8002430 <xTimerCreate>
 8003782:	4602      	mov	r2, r0
 8003784:	491b      	ldr	r1, [pc, #108]	; (80037f4 <main+0x200>)
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<4; i++)
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	3301      	adds	r3, #1
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	2b03      	cmp	r3, #3
 8003796:	dde8      	ble.n	800376a <main+0x176>

  // Trigger UART reception

  HAL_UART_Receive_IT(&huart2, (uint8_t *)&user_data, 1);
 8003798:	2201      	movs	r2, #1
 800379a:	4917      	ldr	r1, [pc, #92]	; (80037f8 <main+0x204>)
 800379c:	4817      	ldr	r0, [pc, #92]	; (80037fc <main+0x208>)
 800379e:	f003 f884 	bl	80068aa <HAL_UART_Receive_IT>

  // Start scheduler

  vTaskStartScheduler();
 80037a2:	f7fd fea7 	bl	80014f4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80037a6:	e7fe      	b.n	80037a6 <main+0x1b2>
 80037a8:	200192d8 	.word	0x200192d8
 80037ac:	08007cbc 	.word	0x08007cbc
 80037b0:	08004239 	.word	0x08004239
 80037b4:	200192d0 	.word	0x200192d0
 80037b8:	08007cc8 	.word	0x08007cc8
 80037bc:	08004321 	.word	0x08004321
 80037c0:	20019300 	.word	0x20019300
 80037c4:	08007cd4 	.word	0x08007cd4
 80037c8:	08004351 	.word	0x08004351
 80037cc:	20019304 	.word	0x20019304
 80037d0:	08007ce0 	.word	0x08007ce0
 80037d4:	08004391 	.word	0x08004391
 80037d8:	200192cc 	.word	0x200192cc
 80037dc:	08007cec 	.word	0x08007cec
 80037e0:	08004505 	.word	0x08004505
 80037e4:	200192d4 	.word	0x200192d4
 80037e8:	200192dc 	.word	0x200192dc
 80037ec:	08003c65 	.word	0x08003c65
 80037f0:	08007cf8 	.word	0x08007cf8
 80037f4:	200192bc 	.word	0x200192bc
 80037f8:	20019308 	.word	0x20019308
 80037fc:	2001930c 	.word	0x2001930c

08003800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b098      	sub	sp, #96	; 0x60
 8003804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003806:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800380a:	2230      	movs	r2, #48	; 0x30
 800380c:	2100      	movs	r1, #0
 800380e:	4618      	mov	r0, r3
 8003810:	f003 fe06 	bl	8007420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003814:	f107 031c 	add.w	r3, r7, #28
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003824:	f107 030c 	add.w	r3, r7, #12
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	4b31      	ldr	r3, [pc, #196]	; (80038fc <SystemClock_Config+0xfc>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	4a30      	ldr	r2, [pc, #192]	; (80038fc <SystemClock_Config+0xfc>)
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003840:	6413      	str	r3, [r2, #64]	; 0x40
 8003842:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <SystemClock_Config+0xfc>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <SystemClock_Config+0x100>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a2a      	ldr	r2, [pc, #168]	; (8003900 <SystemClock_Config+0x100>)
 8003858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b28      	ldr	r3, [pc, #160]	; (8003900 <SystemClock_Config+0x100>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800386a:	230a      	movs	r3, #10
 800386c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800386e:	2301      	movs	r3, #1
 8003870:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003872:	2310      	movs	r3, #16
 8003874:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003876:	2301      	movs	r3, #1
 8003878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800387a:	2302      	movs	r3, #2
 800387c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800387e:	2300      	movs	r3, #0
 8003880:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003882:	2308      	movs	r3, #8
 8003884:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003886:	23a8      	movs	r3, #168	; 0xa8
 8003888:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800388a:	2302      	movs	r3, #2
 800388c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800388e:	2307      	movs	r3, #7
 8003890:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003896:	4618      	mov	r0, r3
 8003898:	f001 fbc0 	bl	800501c <HAL_RCC_OscConfig>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80038a2:	f000 fa63 	bl	8003d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038a6:	230f      	movs	r3, #15
 80038a8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038aa:	2302      	movs	r3, #2
 80038ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80038be:	f107 031c 	add.w	r3, r7, #28
 80038c2:	2105      	movs	r1, #5
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 fe21 	bl	800550c <HAL_RCC_ClockConfig>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80038d0:	f000 fa4c 	bl	8003d6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038d4:	2302      	movs	r3, #2
 80038d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80038d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038dc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 f840 	bl	8005968 <HAL_RCCEx_PeriphCLKConfig>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80038ee:	f000 fa3d 	bl	8003d6c <Error_Handler>
  }
}
 80038f2:	bf00      	nop
 80038f4:	3760      	adds	r7, #96	; 0x60
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800
 8003900:	40007000 	.word	0x40007000

08003904 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <MX_RTC_Init+0x44>)
 800390a:	4a10      	ldr	r2, [pc, #64]	; (800394c <MX_RTC_Init+0x48>)
 800390c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800390e:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <MX_RTC_Init+0x44>)
 8003910:	2240      	movs	r2, #64	; 0x40
 8003912:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <MX_RTC_Init+0x44>)
 8003916:	227f      	movs	r2, #127	; 0x7f
 8003918:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <MX_RTC_Init+0x44>)
 800391c:	22ff      	movs	r2, #255	; 0xff
 800391e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <MX_RTC_Init+0x44>)
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003926:	4b08      	ldr	r3, [pc, #32]	; (8003948 <MX_RTC_Init+0x44>)
 8003928:	2200      	movs	r2, #0
 800392a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <MX_RTC_Init+0x44>)
 800392e:	2200      	movs	r2, #0
 8003930:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003932:	4805      	ldr	r0, [pc, #20]	; (8003948 <MX_RTC_Init+0x44>)
 8003934:	f002 f8fa 	bl	8005b2c <HAL_RTC_Init>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800393e:	f000 fa15 	bl	8003d6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	200192e0 	.word	0x200192e0
 800394c:	40002800 	.word	0x40002800

08003950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <MX_USART2_UART_Init+0x4c>)
 8003956:	4a12      	ldr	r2, [pc, #72]	; (80039a0 <MX_USART2_UART_Init+0x50>)
 8003958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <MX_USART2_UART_Init+0x4c>)
 800395c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <MX_USART2_UART_Init+0x4c>)
 8003964:	2200      	movs	r2, #0
 8003966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <MX_USART2_UART_Init+0x4c>)
 800396a:	2200      	movs	r2, #0
 800396c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <MX_USART2_UART_Init+0x4c>)
 8003970:	2200      	movs	r2, #0
 8003972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003974:	4b09      	ldr	r3, [pc, #36]	; (800399c <MX_USART2_UART_Init+0x4c>)
 8003976:	220c      	movs	r2, #12
 8003978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <MX_USART2_UART_Init+0x4c>)
 800397c:	2200      	movs	r2, #0
 800397e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <MX_USART2_UART_Init+0x4c>)
 8003982:	2200      	movs	r2, #0
 8003984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003986:	4805      	ldr	r0, [pc, #20]	; (800399c <MX_USART2_UART_Init+0x4c>)
 8003988:	f002 feb0 	bl	80066ec <HAL_UART_Init>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003992:	f000 f9eb 	bl	8003d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	2001930c 	.word	0x2001930c
 80039a0:	40004400 	.word	0x40004400

080039a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08c      	sub	sp, #48	; 0x30
 80039a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039aa:	f107 031c 	add.w	r3, r7, #28
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	609a      	str	r2, [r3, #8]
 80039b6:	60da      	str	r2, [r3, #12]
 80039b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	4ba1      	ldr	r3, [pc, #644]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4aa0      	ldr	r2, [pc, #640]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 80039c4:	f043 0310 	orr.w	r3, r3, #16
 80039c8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ca:	4b9e      	ldr	r3, [pc, #632]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	4b9a      	ldr	r3, [pc, #616]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	4a99      	ldr	r2, [pc, #612]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	6313      	str	r3, [r2, #48]	; 0x30
 80039e6:	4b97      	ldr	r3, [pc, #604]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	4b93      	ldr	r3, [pc, #588]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	4a92      	ldr	r2, [pc, #584]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 80039fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30
 8003a02:	4b90      	ldr	r3, [pc, #576]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	4b8c      	ldr	r3, [pc, #560]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	4a8b      	ldr	r2, [pc, #556]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1e:	4b89      	ldr	r3, [pc, #548]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	4b85      	ldr	r3, [pc, #532]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	4a84      	ldr	r2, [pc, #528]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 8003a34:	f043 0302 	orr.w	r3, r3, #2
 8003a38:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3a:	4b82      	ldr	r3, [pc, #520]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
 8003a4a:	4b7e      	ldr	r3, [pc, #504]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	4a7d      	ldr	r2, [pc, #500]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 8003a50:	f043 0308 	orr.w	r3, r3, #8
 8003a54:	6313      	str	r3, [r2, #48]	; 0x30
 8003a56:	4b7b      	ldr	r3, [pc, #492]	; (8003c44 <MX_GPIO_Init+0x2a0>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	607b      	str	r3, [r7, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2108      	movs	r1, #8
 8003a66:	4878      	ldr	r0, [pc, #480]	; (8003c48 <MX_GPIO_Init+0x2a4>)
 8003a68:	f001 fabe 	bl	8004fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4876      	ldr	r0, [pc, #472]	; (8003c4c <MX_GPIO_Init+0x2a8>)
 8003a72:	f001 fab9 	bl	8004fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003a76:	2200      	movs	r2, #0
 8003a78:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003a7c:	4874      	ldr	r0, [pc, #464]	; (8003c50 <MX_GPIO_Init+0x2ac>)
 8003a7e:	f001 fab3 	bl	8004fe8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003a82:	2308      	movs	r3, #8
 8003a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a86:	2301      	movs	r3, #1
 8003a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003a92:	f107 031c 	add.w	r3, r7, #28
 8003a96:	4619      	mov	r1, r3
 8003a98:	486b      	ldr	r0, [pc, #428]	; (8003c48 <MX_GPIO_Init+0x2a4>)
 8003a9a:	f001 f909 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003aae:	f107 031c 	add.w	r3, r7, #28
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4865      	ldr	r0, [pc, #404]	; (8003c4c <MX_GPIO_Init+0x2a8>)
 8003ab6:	f001 f8fb 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003aba:	2308      	movs	r3, #8
 8003abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003aca:	2305      	movs	r3, #5
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003ace:	f107 031c 	add.w	r3, r7, #28
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	485d      	ldr	r0, [pc, #372]	; (8003c4c <MX_GPIO_Init+0x2a8>)
 8003ad6:	f001 f8eb 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003ada:	2301      	movs	r3, #1
 8003adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ade:	4b5d      	ldr	r3, [pc, #372]	; (8003c54 <MX_GPIO_Init+0x2b0>)
 8003ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ae6:	f107 031c 	add.w	r3, r7, #28
 8003aea:	4619      	mov	r1, r3
 8003aec:	485a      	ldr	r0, [pc, #360]	; (8003c58 <MX_GPIO_Init+0x2b4>)
 8003aee:	f001 f8df 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003af2:	2310      	movs	r3, #16
 8003af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	2302      	movs	r3, #2
 8003af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afe:	2300      	movs	r3, #0
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b02:	2306      	movs	r3, #6
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003b06:	f107 031c 	add.w	r3, r7, #28
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4852      	ldr	r0, [pc, #328]	; (8003c58 <MX_GPIO_Init+0x2b4>)
 8003b0e:	f001 f8cf 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003b12:	23e0      	movs	r3, #224	; 0xe0
 8003b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b16:	2302      	movs	r3, #2
 8003b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b22:	2305      	movs	r3, #5
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b26:	f107 031c 	add.w	r3, r7, #28
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	484a      	ldr	r0, [pc, #296]	; (8003c58 <MX_GPIO_Init+0x2b4>)
 8003b2e:	f001 f8bf 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003b32:	2304      	movs	r3, #4
 8003b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b36:	2300      	movs	r3, #0
 8003b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003b3e:	f107 031c 	add.w	r3, r7, #28
 8003b42:	4619      	mov	r1, r3
 8003b44:	4845      	ldr	r0, [pc, #276]	; (8003c5c <MX_GPIO_Init+0x2b8>)
 8003b46:	f001 f8b3 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b50:	2302      	movs	r3, #2
 8003b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b5c:	2305      	movs	r3, #5
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003b60:	f107 031c 	add.w	r3, r7, #28
 8003b64:	4619      	mov	r1, r3
 8003b66:	483d      	ldr	r0, [pc, #244]	; (8003c5c <MX_GPIO_Init+0x2b8>)
 8003b68:	f001 f8a2 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003b6c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003b70:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b72:	2301      	movs	r3, #1
 8003b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b7e:	f107 031c 	add.w	r3, r7, #28
 8003b82:	4619      	mov	r1, r3
 8003b84:	4832      	ldr	r0, [pc, #200]	; (8003c50 <MX_GPIO_Init+0x2ac>)
 8003b86:	f001 f893 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003b8a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b90:	2302      	movs	r3, #2
 8003b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b9c:	2306      	movs	r3, #6
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ba0:	f107 031c 	add.w	r3, r7, #28
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4829      	ldr	r0, [pc, #164]	; (8003c4c <MX_GPIO_Init+0x2a8>)
 8003ba8:	f001 f882 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003bba:	f107 031c 	add.w	r3, r7, #28
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4825      	ldr	r0, [pc, #148]	; (8003c58 <MX_GPIO_Init+0x2b4>)
 8003bc2:	f001 f875 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003bc6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003bd8:	230a      	movs	r3, #10
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bdc:	f107 031c 	add.w	r3, r7, #28
 8003be0:	4619      	mov	r1, r3
 8003be2:	481d      	ldr	r0, [pc, #116]	; (8003c58 <MX_GPIO_Init+0x2b4>)
 8003be4:	f001 f864 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003be8:	2320      	movs	r3, #32
 8003bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bec:	2300      	movs	r3, #0
 8003bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003bf4:	f107 031c 	add.w	r3, r7, #28
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4815      	ldr	r0, [pc, #84]	; (8003c50 <MX_GPIO_Init+0x2ac>)
 8003bfc:	f001 f858 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003c00:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c06:	2312      	movs	r3, #18
 8003c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c12:	2304      	movs	r3, #4
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c16:	f107 031c 	add.w	r3, r7, #28
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	480f      	ldr	r0, [pc, #60]	; (8003c5c <MX_GPIO_Init+0x2b8>)
 8003c1e:	f001 f847 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003c22:	2302      	movs	r3, #2
 8003c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003c26:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <MX_GPIO_Init+0x2bc>)
 8003c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003c2e:	f107 031c 	add.w	r3, r7, #28
 8003c32:	4619      	mov	r1, r3
 8003c34:	4804      	ldr	r0, [pc, #16]	; (8003c48 <MX_GPIO_Init+0x2a4>)
 8003c36:	f001 f83b 	bl	8004cb0 <HAL_GPIO_Init>

}
 8003c3a:	bf00      	nop
 8003c3c:	3730      	adds	r7, #48	; 0x30
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40020800 	.word	0x40020800
 8003c50:	40020c00 	.word	0x40020c00
 8003c54:	10110000 	.word	0x10110000
 8003c58:	40020000 	.word	0x40020000
 8003c5c:	40020400 	.word	0x40020400
 8003c60:	10120000 	.word	0x10120000

08003c64 <led_effect_callback>:

/* USER CODE BEGIN 4 */

void led_effect_callback(TimerHandle_t xTimer){
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]

	int id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7fe ff1b 	bl	8002aa8 <pvTimerGetTimerID>
 8003c72:	4603      	mov	r3, r0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d816      	bhi.n	8003cac <led_effect_callback+0x48>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <led_effect_callback+0x20>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003c95 	.word	0x08003c95
 8003c88:	08003c9b 	.word	0x08003c9b
 8003c8c:	08003ca1 	.word	0x08003ca1
 8003c90:	08003ca7 	.word	0x08003ca7

	switch(id){
		case 1:
			LED_effect1();
 8003c94:	f7ff fc52 	bl	800353c <LED_effect1>
			break;
 8003c98:	e008      	b.n	8003cac <led_effect_callback+0x48>
		case 2:
			LED_effect2();
 8003c9a:	f7ff fc65 	bl	8003568 <LED_effect2>
			break;
 8003c9e:	e005      	b.n	8003cac <led_effect_callback+0x48>
		case 3:
			LED_effect3();
 8003ca0:	f7ff fc78 	bl	8003594 <LED_effect3>
			break;
 8003ca4:	e002      	b.n	8003cac <led_effect_callback+0x48>
		case 4:
			LED_effect4();
 8003ca6:	f7ff fc8d 	bl	80035c4 <LED_effect4>
			break;
 8003caa:	bf00      	nop
	}

}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	6078      	str	r0, [r7, #4]


	if(!xQueueIsQueueFullFromISR(q_data)) // check : is queue full ?
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <HAL_UART_RxCpltCallback+0x84>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fd fa4c 	bl	800115e <xQueueIsQueueFullFromISR>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d107      	bne.n	8003cdc <HAL_UART_RxCpltCallback+0x28>
	{
		/* Queue is not full */
		/* Enqueue data byte */
		xQueueSendFromISR(q_data, (void *)&user_data, NULL);
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <HAL_UART_RxCpltCallback+0x84>)
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	4919      	ldr	r1, [pc, #100]	; (8003d3c <HAL_UART_RxCpltCallback+0x88>)
 8003cd6:	f7fc fefb 	bl	8000ad0 <xQueueGenericSendFromISR>
 8003cda:	e013      	b.n	8003d04 <HAL_UART_RxCpltCallback+0x50>

	}else{
		/* Queue is full */

		if(user_data == '\n') // check, is user_data '\n'?
 8003cdc:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <HAL_UART_RxCpltCallback+0x88>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b0a      	cmp	r3, #10
 8003ce4:	d10e      	bne.n	8003d04 <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */
			/*make sure that last data byte of the queue is '\n' */
			uint8_t dummy;
			xQueueReceiveFromISR(q_data, (void *)&dummy, NULL);
 8003ce6:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <HAL_UART_RxCpltCallback+0x84>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f107 010f 	add.w	r1, r7, #15
 8003cee:	2200      	movs	r2, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fd f877 	bl	8000de4 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void *)&user_data, NULL);
 8003cf6:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <HAL_UART_RxCpltCallback+0x84>)
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	490f      	ldr	r1, [pc, #60]	; (8003d3c <HAL_UART_RxCpltCallback+0x88>)
 8003d00:	f7fc fee6 	bl	8000ad0 <xQueueGenericSendFromISR>
		}
	}


	/* send notification to command handling task if user_data = '\n' */
	if(user_data == '\n'){
 8003d04:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <HAL_UART_RxCpltCallback+0x88>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b0a      	cmp	r3, #10
 8003d0c:	d10a      	bne.n	8003d24 <HAL_UART_RxCpltCallback+0x70>
		/* send notification to command handling task */
		xTaskNotifyFromISR(handle_cmd_task, 0, eNoAction, NULL);
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <HAL_UART_RxCpltCallback+0x8c>)
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	2300      	movs	r3, #0
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2100      	movs	r1, #0
 8003d20:	f7fe f9ec 	bl	80020fc <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&user_data, 1);
 8003d24:	2201      	movs	r2, #1
 8003d26:	4905      	ldr	r1, [pc, #20]	; (8003d3c <HAL_UART_RxCpltCallback+0x88>)
 8003d28:	4806      	ldr	r0, [pc, #24]	; (8003d44 <HAL_UART_RxCpltCallback+0x90>)
 8003d2a:	f002 fdbe 	bl	80068aa <HAL_UART_Receive_IT>

}
 8003d2e:	bf00      	nop
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200192d4 	.word	0x200192d4
 8003d3c:	20019308 	.word	0x20019308
 8003d40:	200192d0 	.word	0x200192d0
 8003d44:	2001930c 	.word	0x2001930c

08003d48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003d5a:	f000 fe15 	bl	8004988 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40001000 	.word	0x40001000

08003d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d70:	b672      	cpsid	i
}
 8003d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d74:	e7fe      	b.n	8003d74 <Error_Handler+0x8>
	...

08003d78 <show_time_date>:
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);

 }

void show_time_date(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08c      	sub	sp, #48	; 0x30
 8003d7c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8003d7e:	f107 0318 	add.w	r3, r7, #24
 8003d82:	2204      	movs	r2, #4
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f003 fb4a 	bl	8007420 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	2214      	movs	r2, #20
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 fb44 	bl	8007420 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4821      	ldr	r0, [pc, #132]	; (8003e24 <show_time_date+0xac>)
 8003da0:	f002 f812 	bl	8005dc8 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8003da4:	f107 0318 	add.w	r3, r7, #24
 8003da8:	2200      	movs	r2, #0
 8003daa:	4619      	mov	r1, r3
 8003dac:	481d      	ldr	r0, [pc, #116]	; (8003e24 <show_time_date+0xac>)
 8003dae:	f002 f910 	bl	8005fd2 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <show_time_date+0x44>
 8003db8:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <show_time_date+0xb0>)
 8003dba:	e000      	b.n	8003dbe <show_time_date+0x46>
 8003dbc:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <show_time_date+0xb4>)
 8003dbe:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8003dc0:	793b      	ldrb	r3, [r7, #4]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	797b      	ldrb	r3, [r7, #5]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	79bb      	ldrb	r3, [r7, #6]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	9302      	str	r3, [sp, #8]
 8003dd0:	9101      	str	r1, [sp, #4]
 8003dd2:	9200      	str	r2, [sp, #0]
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	4a16      	ldr	r2, [pc, #88]	; (8003e30 <show_time_date+0xb8>)
 8003dd8:	4916      	ldr	r1, [pc, #88]	; (8003e34 <show_time_date+0xbc>)
 8003dda:	4817      	ldr	r0, [pc, #92]	; (8003e38 <show_time_date+0xc0>)
 8003ddc:	f003 fb28 	bl	8007430 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 8003de0:	4b16      	ldr	r3, [pc, #88]	; (8003e3c <show_time_date+0xc4>)
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	2300      	movs	r3, #0
 8003de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dea:	4915      	ldr	r1, [pc, #84]	; (8003e40 <show_time_date+0xc8>)
 8003dec:	f7fc fd72 	bl	80008d4 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8003df0:	7e7b      	ldrb	r3, [r7, #25]
 8003df2:	461a      	mov	r2, r3
 8003df4:	7ebb      	ldrb	r3, [r7, #26]
 8003df6:	4619      	mov	r1, r3
 8003df8:	7efb      	ldrb	r3, [r7, #27]
 8003dfa:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	460b      	mov	r3, r1
 8003e02:	4910      	ldr	r1, [pc, #64]	; (8003e44 <show_time_date+0xcc>)
 8003e04:	4810      	ldr	r0, [pc, #64]	; (8003e48 <show_time_date+0xd0>)
 8003e06:	f003 fb13 	bl	8007430 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <show_time_date+0xc4>)
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e14:	490d      	ldr	r1, [pc, #52]	; (8003e4c <show_time_date+0xd4>)
 8003e16:	f7fc fd5d 	bl	80008d4 <xQueueGenericSend>
}
 8003e1a:	bf00      	nop
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	200192e0 	.word	0x200192e0
 8003e28:	08007d04 	.word	0x08007d04
 8003e2c:	08007d08 	.word	0x08007d08
 8003e30:	08007d30 	.word	0x08007d30
 8003e34:	08007d44 	.word	0x08007d44
 8003e38:	2001921c 	.word	0x2001921c
 8003e3c:	200192dc 	.word	0x200192dc
 8003e40:	20000010 	.word	0x20000010
 8003e44:	08007d20 	.word	0x08007d20
 8003e48:	20019244 	.word	0x20019244
 8003e4c:	20000014 	.word	0x20000014

08003e50 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4803      	ldr	r0, [pc, #12]	; (8003e7c <rtc_configure_time+0x2c>)
 8003e70:	f001 feed 	bl	8005c4e <HAL_RTC_SetTime>
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	200192e0 	.word	0x200192e0

08003e80 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4803      	ldr	r0, [pc, #12]	; (8003e9c <rtc_configure_date+0x1c>)
 8003e8e:	f001 fff9 	bl	8005e84 <HAL_RTC_SetDate>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200192e0 	.word	0x200192e0

08003ea0 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
	if(time){
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00d      	beq.n	8003ecc <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	d807      	bhi.n	8003ec8 <validate_rtc_information+0x28>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	785b      	ldrb	r3, [r3, #1]
 8003ebc:	2b3b      	cmp	r3, #59	; 0x3b
 8003ebe:	d803      	bhi.n	8003ec8 <validate_rtc_information+0x28>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	789b      	ldrb	r3, [r3, #2]
 8003ec4:	2b3b      	cmp	r3, #59	; 0x3b
 8003ec6:	d901      	bls.n	8003ecc <validate_rtc_information+0x2c>
			return 1;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e015      	b.n	8003ef8 <validate_rtc_information+0x58>
	}

	if(date){
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d011      	beq.n	8003ef6 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	789b      	ldrb	r3, [r3, #2]
 8003ed6:	2b1f      	cmp	r3, #31
 8003ed8:	d80b      	bhi.n	8003ef2 <validate_rtc_information+0x52>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b07      	cmp	r3, #7
 8003ee0:	d807      	bhi.n	8003ef2 <validate_rtc_information+0x52>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	78db      	ldrb	r3, [r3, #3]
 8003ee6:	2b63      	cmp	r3, #99	; 0x63
 8003ee8:	d803      	bhi.n	8003ef2 <validate_rtc_information+0x52>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	785b      	ldrb	r3, [r3, #1]
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	d901      	bls.n	8003ef6 <validate_rtc_information+0x56>
			return 1;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <validate_rtc_information+0x58>
	}

	return 0;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	607b      	str	r3, [r7, #4]
 8003f0e:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <HAL_MspInit+0x4c>)
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <HAL_MspInit+0x4c>)
 8003f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f18:	6453      	str	r3, [r2, #68]	; 0x44
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <HAL_MspInit+0x4c>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f22:	607b      	str	r3, [r7, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_MspInit+0x4c>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	4a08      	ldr	r2, [pc, #32]	; (8003f50 <HAL_MspInit+0x4c>)
 8003f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f34:	6413      	str	r3, [r2, #64]	; 0x40
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_MspInit+0x4c>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800

08003f54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a05      	ldr	r2, [pc, #20]	; (8003f78 <HAL_RTC_MspInit+0x24>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d102      	bne.n	8003f6c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RTC_MspInit+0x28>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40002800 	.word	0x40002800
 8003f7c:	42470e3c 	.word	0x42470e3c

08003f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <HAL_UART_MspInit+0x94>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d133      	bne.n	800400a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <HAL_UART_MspInit+0x98>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <HAL_UART_MspInit+0x98>)
 8003fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb2:	4b19      	ldr	r3, [pc, #100]	; (8004018 <HAL_UART_MspInit+0x98>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	4b15      	ldr	r3, [pc, #84]	; (8004018 <HAL_UART_MspInit+0x98>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	4a14      	ldr	r2, [pc, #80]	; (8004018 <HAL_UART_MspInit+0x98>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fce:	4b12      	ldr	r3, [pc, #72]	; (8004018 <HAL_UART_MspInit+0x98>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003fda:	230c      	movs	r3, #12
 8003fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fea:	2307      	movs	r3, #7
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fee:	f107 0314 	add.w	r3, r7, #20
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4809      	ldr	r0, [pc, #36]	; (800401c <HAL_UART_MspInit+0x9c>)
 8003ff6:	f000 fe5b 	bl	8004cb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2106      	movs	r1, #6
 8003ffe:	2026      	movs	r0, #38	; 0x26
 8004000:	f000 fd9a 	bl	8004b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004004:	2026      	movs	r0, #38	; 0x26
 8004006:	f000 fdb3 	bl	8004b70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800400a:	bf00      	nop
 800400c:	3728      	adds	r7, #40	; 0x28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40004400 	.word	0x40004400
 8004018:	40023800 	.word	0x40023800
 800401c:	40020000 	.word	0x40020000

08004020 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08c      	sub	sp, #48	; 0x30
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004030:	2200      	movs	r2, #0
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	2036      	movs	r0, #54	; 0x36
 8004036:	f000 fd7f 	bl	8004b38 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800403a:	2036      	movs	r0, #54	; 0x36
 800403c:	f000 fd98 	bl	8004b70 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <HAL_InitTick+0xa4>)
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	4a1e      	ldr	r2, [pc, #120]	; (80040c4 <HAL_InitTick+0xa4>)
 800404a:	f043 0310 	orr.w	r3, r3, #16
 800404e:	6413      	str	r3, [r2, #64]	; 0x40
 8004050:	4b1c      	ldr	r3, [pc, #112]	; (80040c4 <HAL_InitTick+0xa4>)
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800405c:	f107 0210 	add.w	r2, r7, #16
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f001 fc4c 	bl	8005904 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800406c:	f001 fc22 	bl	80058b4 <HAL_RCC_GetPCLK1Freq>
 8004070:	4603      	mov	r3, r0
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004078:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <HAL_InitTick+0xa8>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	0c9b      	lsrs	r3, r3, #18
 8004080:	3b01      	subs	r3, #1
 8004082:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004084:	4b11      	ldr	r3, [pc, #68]	; (80040cc <HAL_InitTick+0xac>)
 8004086:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <HAL_InitTick+0xb0>)
 8004088:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800408a:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_InitTick+0xac>)
 800408c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004090:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004092:	4a0e      	ldr	r2, [pc, #56]	; (80040cc <HAL_InitTick+0xac>)
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <HAL_InitTick+0xac>)
 800409a:	2200      	movs	r2, #0
 800409c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800409e:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <HAL_InitTick+0xac>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80040a4:	4809      	ldr	r0, [pc, #36]	; (80040cc <HAL_InitTick+0xac>)
 80040a6:	f002 f873 	bl	8006190 <HAL_TIM_Base_Init>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d104      	bne.n	80040ba <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80040b0:	4806      	ldr	r0, [pc, #24]	; (80040cc <HAL_InitTick+0xac>)
 80040b2:	f002 f8c7 	bl	8006244 <HAL_TIM_Base_Start_IT>
 80040b6:	4603      	mov	r3, r0
 80040b8:	e000      	b.n	80040bc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3730      	adds	r7, #48	; 0x30
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	431bde83 	.word	0x431bde83
 80040cc:	20019350 	.word	0x20019350
 80040d0:	40001000 	.word	0x40001000

080040d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040d8:	e7fe      	b.n	80040d8 <NMI_Handler+0x4>

080040da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040da:	b480      	push	{r7}
 80040dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040de:	e7fe      	b.n	80040de <HardFault_Handler+0x4>

080040e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040e4:	e7fe      	b.n	80040e4 <MemManage_Handler+0x4>

080040e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040ea:	e7fe      	b.n	80040ea <BusFault_Handler+0x4>

080040ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040f0:	e7fe      	b.n	80040f0 <UsageFault_Handler+0x4>

080040f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040f2:	b480      	push	{r7}
 80040f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004104:	4802      	ldr	r0, [pc, #8]	; (8004110 <USART2_IRQHandler+0x10>)
 8004106:	f002 fc01 	bl	800690c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800410a:	bf00      	nop
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	2001930c 	.word	0x2001930c

08004114 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004118:	4802      	ldr	r0, [pc, #8]	; (8004124 <TIM6_DAC_IRQHandler+0x10>)
 800411a:	f002 f903 	bl	8006324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20019350 	.word	0x20019350

08004128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <SystemInit+0x20>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	4a05      	ldr	r2, [pc, #20]	; (8004148 <SystemInit+0x20>)
 8004134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	e000ed00 	.word	0xe000ed00

0800414c <extract_command>:

//*****************************************************************************
//                             HELPER FUNCTIONS                               *
//*****************************************************************************

static int extract_command(command_t *cmd){
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <extract_command+0x70>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7fc fed2 	bl	8000f02 <uxQueueMessagesWaiting>
 800415e:	4603      	mov	r3, r0
 8004160:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <extract_command+0x22>
 8004168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800416c:	e022      	b.n	80041b4 <extract_command+0x68>
	uint8_t i = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]

	do{
		status = xQueueReceive(q_data, &item, 0);
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <extract_command+0x70>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f107 010f 	add.w	r1, r7, #15
 800417a:	2200      	movs	r2, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f7fc fd51 	bl	8000c24 <xQueueReceive>
 8004182:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d106      	bne.n	8004198 <extract_command+0x4c>
 800418a:	7dfb      	ldrb	r3, [r7, #23]
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	75fa      	strb	r2, [r7, #23]
 8004190:	461a      	mov	r2, r3
 8004192:	7bf9      	ldrb	r1, [r7, #15]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	2b0a      	cmp	r3, #10
 800419c:	d1e9      	bne.n	8004172 <extract_command+0x26>

	cmd->payload[i-1] = '\0';   // Exclude \n
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	2100      	movs	r1, #0
 80041a6:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;             // Exclude null from the count
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	461a      	mov	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60da      	str	r2, [r3, #12]

	return 0;
 80041b2:	2300      	movs	r3, #0

}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	200192d4 	.word	0x200192d4

080041c0 <process_command>:

static void process_command(command_t *cmd){
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ffbf 	bl	800414c <extract_command>

	switch(curr_state){
 80041ce:	4b16      	ldr	r3, [pc, #88]	; (8004228 <process_command+0x68>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	dc24      	bgt.n	8004220 <process_command+0x60>
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	da18      	bge.n	800420c <process_command+0x4c>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <process_command+0x24>
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d00a      	beq.n	80041f8 <process_command+0x38>
		case sRtcReport:
			/* Notify RTC task with the command */
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
			break;
	}
}
 80041e2:	e01d      	b.n	8004220 <process_command+0x60>
			xTaskNotify(handle_menu_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <process_command+0x6c>)
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	2300      	movs	r3, #0
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	2303      	movs	r3, #3
 80041f0:	2100      	movs	r1, #0
 80041f2:	f7fd fea3 	bl	8001f3c <xTaskGenericNotify>
			break;
 80041f6:	e013      	b.n	8004220 <process_command+0x60>
			xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80041f8:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <process_command+0x70>)
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	2300      	movs	r3, #0
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	2303      	movs	r3, #3
 8004204:	2100      	movs	r1, #0
 8004206:	f7fd fe99 	bl	8001f3c <xTaskGenericNotify>
			break;
 800420a:	e009      	b.n	8004220 <process_command+0x60>
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 800420c:	4b09      	ldr	r3, [pc, #36]	; (8004234 <process_command+0x74>)
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	2300      	movs	r3, #0
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	2303      	movs	r3, #3
 8004218:	2100      	movs	r1, #0
 800421a:	f7fd fe8f 	bl	8001f3c <xTaskGenericNotify>
			break;
 800421e:	bf00      	nop
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20019218 	.word	0x20019218
 800422c:	200192d8 	.word	0x200192d8
 8004230:	20019304 	.word	0x20019304
 8004234:	200192cc 	.word	0x200192cc

08004238 <menu_task>:

//*****************************************************************************
//                             TASKS                                          *
//*****************************************************************************

void menu_task(void* parameters){
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af02      	add	r7, sp, #8
 800423e:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;
	int option;

	const char* msg_menu = "\n=====================\n"
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <menu_task+0xd0>)
 8004242:	60bb      	str	r3, [r7, #8]
						   " Date and time --> 1 \n"
						   " Exit          --> 2 \n"
						   " Enter your choice here: ";

	while(1){
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8004244:	4b31      	ldr	r3, [pc, #196]	; (800430c <menu_task+0xd4>)
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	f107 0108 	add.w	r1, r7, #8
 800424c:	2300      	movs	r3, #0
 800424e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004252:	f7fc fb3f 	bl	80008d4 <xQueueGenericSend>

		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8004256:	f107 030c 	add.w	r3, r7, #12
 800425a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800425e:	9200      	str	r2, [sp, #0]
 8004260:	2200      	movs	r2, #0
 8004262:	2100      	movs	r1, #0
 8004264:	2000      	movs	r0, #0
 8004266:	f7fd fde9 	bl	8001e3c <xTaskGenericNotifyWait>

		cmd = (command_t *)cmd_addr;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1){
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d133      	bne.n	80042de <menu_task+0xa6>
			option = cmd->payload[0] - 48;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	3b30      	subs	r3, #48	; 0x30
 800427c:	613b      	str	r3, [r7, #16]

			switch(option){
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d035      	beq.n	80042f0 <menu_task+0xb8>
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b02      	cmp	r3, #2
 8004288:	dc20      	bgt.n	80042cc <menu_task+0x94>
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <menu_task+0x60>
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d00d      	beq.n	80042b2 <menu_task+0x7a>
 8004296:	e019      	b.n	80042cc <menu_task+0x94>
				case 0:
					curr_state = sLedEffect;
 8004298:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <menu_task+0xd8>)
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 800429e:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <menu_task+0xdc>)
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	2300      	movs	r3, #0
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	2300      	movs	r3, #0
 80042a8:	2200      	movs	r2, #0
 80042aa:	2100      	movs	r1, #0
 80042ac:	f7fd fe46 	bl	8001f3c <xTaskGenericNotify>
					break;
 80042b0:	e01f      	b.n	80042f2 <menu_task+0xba>
				case 1:
					curr_state = sRtcMenu;
 80042b2:	4b17      	ldr	r3, [pc, #92]	; (8004310 <menu_task+0xd8>)
 80042b4:	2202      	movs	r2, #2
 80042b6:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 80042b8:	4b17      	ldr	r3, [pc, #92]	; (8004318 <menu_task+0xe0>)
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	2300      	movs	r3, #0
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	2300      	movs	r3, #0
 80042c2:	2200      	movs	r2, #0
 80042c4:	2100      	movs	r1, #0
 80042c6:	f7fd fe39 	bl	8001f3c <xTaskGenericNotify>
					break;
 80042ca:	e012      	b.n	80042f2 <menu_task+0xba>
				case 2:
					break;
				default:
					xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <menu_task+0xd4>)
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	2300      	movs	r3, #0
 80042d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042d6:	4911      	ldr	r1, [pc, #68]	; (800431c <menu_task+0xe4>)
 80042d8:	f7fc fafc 	bl	80008d4 <xQueueGenericSend>
					continue;
 80042dc:	e012      	b.n	8004304 <menu_task+0xcc>
			}
		}else{
			// invalid entry
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <menu_task+0xd4>)
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	2300      	movs	r3, #0
 80042e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042e8:	490c      	ldr	r1, [pc, #48]	; (800431c <menu_task+0xe4>)
 80042ea:	f7fc faf3 	bl	80008d4 <xQueueGenericSend>
			continue;
 80042ee:	e009      	b.n	8004304 <menu_task+0xcc>
					break;
 80042f0:	bf00      	nop
		}

		// Wait to run again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	2300      	movs	r3, #0
 80042fa:	2200      	movs	r2, #0
 80042fc:	2100      	movs	r1, #0
 80042fe:	2000      	movs	r0, #0
 8004300:	f7fd fd9c 	bl	8001e3c <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8004304:	e79e      	b.n	8004244 <menu_task+0xc>
 8004306:	bf00      	nop
 8004308:	08007d78 	.word	0x08007d78
 800430c:	200192dc 	.word	0x200192dc
 8004310:	20019218 	.word	0x20019218
 8004314:	20019304 	.word	0x20019304
 8004318:	200192cc 	.word	0x200192cc
 800431c:	2000001c 	.word	0x2000001c

08004320 <cmd_handler_task>:

	}
}

void cmd_handler_task(void* parameters){
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af02      	add	r7, sp, #8
 8004326:	6078      	str	r0, [r7, #4]
	command_t cmd;

	while(1){

		/* Implement notify wait */
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8004328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	2300      	movs	r3, #0
 8004330:	2200      	movs	r2, #0
 8004332:	2100      	movs	r1, #0
 8004334:	2000      	movs	r0, #0
 8004336:	f7fd fd81 	bl	8001e3c <xTaskGenericNotifyWait>
 800433a:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE){
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d1f2      	bne.n	8004328 <cmd_handler_task+0x8>

			/* Process the user data(command) stored in input data queue */
			process_command(&cmd);
 8004342:	f107 030c 	add.w	r3, r7, #12
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff ff3a 	bl	80041c0 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800434c:	e7ec      	b.n	8004328 <cmd_handler_task+0x8>
	...

08004350 <print_task>:
		}

	}
}

void print_task(void* parameters){
 8004350:	b590      	push	{r4, r7, lr}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <print_task+0x38>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f107 010c 	add.w	r1, r7, #12
 8004360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004364:	4618      	mov	r0, r3
 8004366:	f7fc fc5d 	bl	8000c24 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen((char *)msg), HAL_MAX_DELAY);
 800436a:	68fc      	ldr	r4, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4618      	mov	r0, r3
 8004370:	f7fb ff38 	bl	80001e4 <strlen>
 8004374:	4603      	mov	r3, r0
 8004376:	b29a      	uxth	r2, r3
 8004378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800437c:	4621      	mov	r1, r4
 800437e:	4803      	ldr	r0, [pc, #12]	; (800438c <print_task+0x3c>)
 8004380:	f002 fa01 	bl	8006786 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8004384:	e7e8      	b.n	8004358 <print_task+0x8>
 8004386:	bf00      	nop
 8004388:	200192dc 	.word	0x200192dc
 800438c:	2001930c 	.word	0x2001930c

08004390 <led_task>:
	}
}

void led_task(void *param)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af02      	add	r7, sp, #8
 8004396:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "\n========================\n"
 8004398:	4b3e      	ldr	r3, [pc, #248]	; (8004494 <led_task+0x104>)
 800439a:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/* Wait for notification (Notify wait) */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800439c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2300      	movs	r3, #0
 80043a4:	2200      	movs	r2, #0
 80043a6:	2100      	movs	r1, #0
 80043a8:	2000      	movs	r0, #0
 80043aa:	f7fd fd47 	bl	8001e3c <xTaskGenericNotifyWait>

		/* Print LED menu */
		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 80043ae:	4b3a      	ldr	r3, [pc, #232]	; (8004498 <led_task+0x108>)
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	f107 010c 	add.w	r1, r7, #12
 80043b6:	2300      	movs	r3, #0
 80043b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043bc:	f7fc fa8a 	bl	80008d4 <xQueueGenericSend>

		/* wait for LED command (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80043c0:	f107 0310 	add.w	r3, r7, #16
 80043c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043c8:	9200      	str	r2, [sp, #0]
 80043ca:	2200      	movs	r2, #0
 80043cc:	2100      	movs	r1, #0
 80043ce:	2000      	movs	r0, #0
 80043d0:	f7fd fd34 	bl	8001e3c <xTaskGenericNotifyWait>
		cmd = (command_t *)cmd_addr;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d843      	bhi.n	8004468 <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload, "none"))
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	492e      	ldr	r1, [pc, #184]	; (800449c <led_task+0x10c>)
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fb fef3 	bl	80001d0 <strcmp>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <led_task+0x66>
				led_effect_stop();
 80043f0:	f7fe ffca 	bl	8003388 <led_effect_stop>
 80043f4:	e040      	b.n	8004478 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	4929      	ldr	r1, [pc, #164]	; (80044a0 <led_task+0x110>)
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fb fee8 	bl	80001d0 <strcmp>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d103      	bne.n	800440e <led_task+0x7e>
				led_effect(1);
 8004406:	2001      	movs	r0, #1
 8004408:	f7fe ffde 	bl	80033c8 <led_effect>
 800440c:	e034      	b.n	8004478 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	4924      	ldr	r1, [pc, #144]	; (80044a4 <led_task+0x114>)
 8004412:	4618      	mov	r0, r3
 8004414:	f7fb fedc 	bl	80001d0 <strcmp>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <led_task+0x96>
				led_effect(2);
 800441e:	2002      	movs	r0, #2
 8004420:	f7fe ffd2 	bl	80033c8 <led_effect>
 8004424:	e028      	b.n	8004478 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	491f      	ldr	r1, [pc, #124]	; (80044a8 <led_task+0x118>)
 800442a:	4618      	mov	r0, r3
 800442c:	f7fb fed0 	bl	80001d0 <strcmp>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d103      	bne.n	800443e <led_task+0xae>
				led_effect(3);
 8004436:	2003      	movs	r0, #3
 8004438:	f7fe ffc6 	bl	80033c8 <led_effect>
 800443c:	e01c      	b.n	8004478 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	491a      	ldr	r1, [pc, #104]	; (80044ac <led_task+0x11c>)
 8004442:	4618      	mov	r0, r3
 8004444:	f7fb fec4 	bl	80001d0 <strcmp>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d103      	bne.n	8004456 <led_task+0xc6>
				led_effect(4);
 800444e:	2004      	movs	r0, #4
 8004450:	f7fe ffba 	bl	80033c8 <led_effect>
 8004454:	e010      	b.n	8004478 <led_task+0xe8>
			else
				/* print invalid message */
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <led_task+0x108>)
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	2300      	movs	r3, #0
 800445c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004460:	4913      	ldr	r1, [pc, #76]	; (80044b0 <led_task+0x120>)
 8004462:	f7fc fa37 	bl	80008d4 <xQueueGenericSend>
 8004466:	e007      	b.n	8004478 <led_task+0xe8>
		}else
			/* print invalid message */
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <led_task+0x108>)
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	2300      	movs	r3, #0
 800446e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004472:	490f      	ldr	r1, [pc, #60]	; (80044b0 <led_task+0x120>)
 8004474:	f7fc fa2e 	bl	80008d4 <xQueueGenericSend>

		/* update state variable */
		curr_state = sMainMenu;
 8004478:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <led_task+0x124>)
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]

		/* Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 800447e:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <led_task+0x128>)
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	2300      	movs	r3, #0
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	2300      	movs	r3, #0
 8004488:	2200      	movs	r2, #0
 800448a:	2100      	movs	r1, #0
 800448c:	f7fd fd56 	bl	8001f3c <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8004490:	e784      	b.n	800439c <led_task+0xc>
 8004492:	bf00      	nop
 8004494:	08007e04 	.word	0x08007e04
 8004498:	200192dc 	.word	0x200192dc
 800449c:	08007e7c 	.word	0x08007e7c
 80044a0:	08007e84 	.word	0x08007e84
 80044a4:	08007e88 	.word	0x08007e88
 80044a8:	08007e8c 	.word	0x08007e8c
 80044ac:	08007e90 	.word	0x08007e90
 80044b0:	2000001c 	.word	0x2000001c
 80044b4:	20019218 	.word	0x20019218
 80044b8:	200192d8 	.word	0x200192d8

080044bc <getnumber>:

	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	dd0f      	ble.n	80044ec <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	461a      	mov	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3301      	adds	r3, #1
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	3b30      	subs	r3, #48	; 0x30
 80044e6:	4413      	add	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e003      	b.n	80044f4 <getnumber+0x38>
	else
		value = p[0] - 48;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	3b30      	subs	r3, #48	; 0x30
 80044f2:	60fb      	str	r3, [r7, #12]

	return value;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	b2db      	uxtb	r3, r3

}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <rtc_task>:

void rtc_task(void* parameters){
 8004504:	b580      	push	{r7, lr}
 8004506:	b09a      	sub	sp, #104	; 0x68
 8004508:	af02      	add	r7, sp, #8
 800450a:	6078      	str	r0, [r7, #4]

	const char* msg_rtc1 = "========================\n"
 800450c:	4bb2      	ldr	r3, [pc, #712]	; (80047d8 <rtc_task+0x2d4>)
 800450e:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 8004510:	4bb2      	ldr	r3, [pc, #712]	; (80047dc <rtc_task+0x2d8>)
 8004512:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8004514:	4bb2      	ldr	r3, [pc, #712]	; (80047e0 <rtc_task+0x2dc>)
 8004516:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8004518:	4bb2      	ldr	r3, [pc, #712]	; (80047e4 <rtc_task+0x2e0>)
 800451a:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 800451c:	4bb2      	ldr	r3, [pc, #712]	; (80047e8 <rtc_task+0x2e4>)
 800451e:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8004520:	4bb2      	ldr	r3, [pc, #712]	; (80047ec <rtc_task+0x2e8>)
 8004522:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8004524:	4bb2      	ldr	r3, [pc, #712]	; (80047f0 <rtc_task+0x2ec>)
 8004526:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8004528:	4bb2      	ldr	r3, [pc, #712]	; (80047f4 <rtc_task+0x2f0>)
 800452a:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 800452c:	4bb2      	ldr	r3, [pc, #712]	; (80047f8 <rtc_task+0x2f4>)
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 8004530:	4bb2      	ldr	r3, [pc, #712]	; (80047fc <rtc_task+0x2f8>)
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8004534:	4bb2      	ldr	r3, [pc, #712]	; (8004800 <rtc_task+0x2fc>)
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3


	while(1){
		/*Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	2300      	movs	r3, #0
 8004540:	2200      	movs	r2, #0
 8004542:	2100      	movs	r1, #0
 8004544:	2000      	movs	r0, #0
 8004546:	f7fd fc79 	bl	8001e3c <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 800454a:	4bae      	ldr	r3, [pc, #696]	; (8004804 <rtc_task+0x300>)
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004552:	2300      	movs	r3, #0
 8004554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004558:	f7fc f9bc 	bl	80008d4 <xQueueGenericSend>
		show_time_date();
 800455c:	f7ff fc0c 	bl	8003d78 <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 8004560:	4ba8      	ldr	r3, [pc, #672]	; (8004804 <rtc_task+0x300>)
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004568:	2300      	movs	r3, #0
 800456a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800456e:	f7fc f9b1 	bl	80008d4 <xQueueGenericSend>


		while(curr_state != sMainMenu){
 8004572:	bf00      	nop
 8004574:	e1a3      	b.n	80048be <rtc_task+0x3ba>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8004576:	f107 0320 	add.w	r3, r7, #32
 800457a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800457e:	9200      	str	r2, [sp, #0]
 8004580:	2200      	movs	r2, #0
 8004582:	2100      	movs	r1, #0
 8004584:	2000      	movs	r0, #0
 8004586:	f7fd fc59 	bl	8001e3c <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state)
 800458e:	4b9e      	ldr	r3, [pc, #632]	; (8004808 <rtc_task+0x304>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	3b02      	subs	r3, #2
 8004594:	2b03      	cmp	r3, #3
 8004596:	f200 8192 	bhi.w	80048be <rtc_task+0x3ba>
 800459a:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <rtc_task+0x9c>)
 800459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a0:	080045b1 	.word	0x080045b1
 80045a4:	08004663 	.word	0x08004663
 80045a8:	08004751 	.word	0x08004751
 80045ac:	080048b7 	.word	0x080048b7
			{
				case sRtcMenu:{
					/*process RTC menu commands */
					if(cmd->len == 1)
 80045b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d148      	bne.n	800464a <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 80045b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	3b30      	subs	r3, #48	; 0x30
 80045be:	653b      	str	r3, [r7, #80]	; 0x50
 80045c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d835      	bhi.n	8004632 <rtc_task+0x12e>
 80045c6:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <rtc_task+0xc8>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	080045dd 	.word	0x080045dd
 80045d0:	080045f7 	.word	0x080045f7
 80045d4:	08004611 	.word	0x08004611
 80045d8:	0800462b 	.word	0x0800462b
						switch(menu_code)
						{
						case 0:
							curr_state = sRtcTimeConfig;
 80045dc:	4b8a      	ldr	r3, [pc, #552]	; (8004808 <rtc_task+0x304>)
 80045de:	2203      	movs	r2, #3
 80045e0:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 80045e2:	4b88      	ldr	r3, [pc, #544]	; (8004804 <rtc_task+0x300>)
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80045ea:	2300      	movs	r3, #0
 80045ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045f0:	f7fc f970 	bl	80008d4 <xQueueGenericSend>
							break;
 80045f4:	e034      	b.n	8004660 <rtc_task+0x15c>
						case 1:
							curr_state = sRtcDateConfig;
 80045f6:	4b84      	ldr	r3, [pc, #528]	; (8004808 <rtc_task+0x304>)
 80045f8:	2204      	movs	r2, #4
 80045fa:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 80045fc:	4b81      	ldr	r3, [pc, #516]	; (8004804 <rtc_task+0x300>)
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004604:	2300      	movs	r3, #0
 8004606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800460a:	f7fc f963 	bl	80008d4 <xQueueGenericSend>
							break;
 800460e:	e027      	b.n	8004660 <rtc_task+0x15c>
						case 2 :
							curr_state = sRtcReport;
 8004610:	4b7d      	ldr	r3, [pc, #500]	; (8004808 <rtc_task+0x304>)
 8004612:	2205      	movs	r2, #5
 8004614:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 8004616:	4b7b      	ldr	r3, [pc, #492]	; (8004804 <rtc_task+0x300>)
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800461e:	2300      	movs	r3, #0
 8004620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004624:	f7fc f956 	bl	80008d4 <xQueueGenericSend>
							break;
 8004628:	e01a      	b.n	8004660 <rtc_task+0x15c>
						case 3 :
							curr_state = sMainMenu;
 800462a:	4b77      	ldr	r3, [pc, #476]	; (8004808 <rtc_task+0x304>)
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
							break;
 8004630:	e016      	b.n	8004660 <rtc_task+0x15c>
						default:
							curr_state = sMainMenu;
 8004632:	4b75      	ldr	r3, [pc, #468]	; (8004808 <rtc_task+0x304>)
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8004638:	4b72      	ldr	r3, [pc, #456]	; (8004804 <rtc_task+0x300>)
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	2300      	movs	r3, #0
 800463e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004642:	4972      	ldr	r1, [pc, #456]	; (800480c <rtc_task+0x308>)
 8004644:	f7fc f946 	bl	80008d4 <xQueueGenericSend>
 8004648:	e139      	b.n	80048be <rtc_task+0x3ba>
						}

					}else{
						curr_state = sMainMenu;
 800464a:	4b6f      	ldr	r3, [pc, #444]	; (8004808 <rtc_task+0x304>)
 800464c:	2200      	movs	r2, #0
 800464e:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8004650:	4b6c      	ldr	r3, [pc, #432]	; (8004804 <rtc_task+0x300>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	2300      	movs	r3, #0
 8004656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800465a:	496c      	ldr	r1, [pc, #432]	; (800480c <rtc_task+0x308>)
 800465c:	f7fc f93a 	bl	80008d4 <xQueueGenericSend>
					}
					break;}
 8004660:	e12d      	b.n	80048be <rtc_task+0x3ba>

				case sRtcTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 8004662:	4b6b      	ldr	r3, [pc, #428]	; (8004810 <rtc_task+0x30c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d03b      	beq.n	80046e2 <rtc_task+0x1de>
 800466a:	2b02      	cmp	r3, #2
 800466c:	f300 8127 	bgt.w	80048be <rtc_task+0x3ba>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <rtc_task+0x176>
 8004674:	2b01      	cmp	r3, #1
 8004676:	d01a      	beq.n	80046ae <rtc_task+0x1aa>
 8004678:	e121      	b.n	80048be <rtc_task+0x3ba>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->len);
 800467a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800467c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4619      	mov	r1, r3
 8004682:	4610      	mov	r0, r2
 8004684:	f7ff ff1a 	bl	80044bc <getnumber>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 800468e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004692:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 8004694:	4b5e      	ldr	r3, [pc, #376]	; (8004810 <rtc_task+0x30c>)
 8004696:	2201      	movs	r2, #1
 8004698:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 800469a:	4b5a      	ldr	r3, [pc, #360]	; (8004804 <rtc_task+0x300>)
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80046a2:	2300      	movs	r3, #0
 80046a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046a8:	f7fc f914 	bl	80008d4 <xQueueGenericSend>
								break;}
 80046ac:	e04f      	b.n	800474e <rtc_task+0x24a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->len);
 80046ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4619      	mov	r1, r3
 80046b6:	4610      	mov	r0, r2
 80046b8:	f7ff ff00 	bl	80044bc <getnumber>
 80046bc:	4603      	mov	r3, r0
 80046be:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 80046c2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80046c6:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 80046c8:	4b51      	ldr	r3, [pc, #324]	; (8004810 <rtc_task+0x30c>)
 80046ca:	2202      	movs	r2, #2
 80046cc:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 80046ce:	4b4d      	ldr	r3, [pc, #308]	; (8004804 <rtc_task+0x300>)
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80046d6:	2300      	movs	r3, #0
 80046d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046dc:	f7fc f8fa 	bl	80008d4 <xQueueGenericSend>
								break;}
 80046e0:	e035      	b.n	800474e <rtc_task+0x24a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->len);
 80046e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f7ff fee6 	bl	80044bc <getnumber>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 80046f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80046fa:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 80046fc:	f107 030c 	add.w	r3, r7, #12
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fbcc 	bl	8003ea0 <validate_rtc_information>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d110      	bne.n	8004730 <rtc_task+0x22c>
								{
									rtc_configure_time(&time);
 800470e:	f107 030c 	add.w	r3, r7, #12
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fb9c 	bl	8003e50 <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8004718:	4b3a      	ldr	r3, [pc, #232]	; (8004804 <rtc_task+0x300>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004720:	2300      	movs	r3, #0
 8004722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004726:	f7fc f8d5 	bl	80008d4 <xQueueGenericSend>
									show_time_date();
 800472a:	f7ff fb25 	bl	8003d78 <show_time_date>
 800472e:	e007      	b.n	8004740 <rtc_task+0x23c>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8004730:	4b34      	ldr	r3, [pc, #208]	; (8004804 <rtc_task+0x300>)
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	2300      	movs	r3, #0
 8004736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800473a:	4934      	ldr	r1, [pc, #208]	; (800480c <rtc_task+0x308>)
 800473c:	f7fc f8ca 	bl	80008d4 <xQueueGenericSend>

								curr_state = sMainMenu;
 8004740:	4b31      	ldr	r3, [pc, #196]	; (8004808 <rtc_task+0x304>)
 8004742:	2200      	movs	r2, #0
 8004744:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8004746:	4b32      	ldr	r3, [pc, #200]	; (8004810 <rtc_task+0x30c>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
								break;}
 800474c:	bf00      	nop
						}

					break;}
 800474e:	e0b6      	b.n	80048be <rtc_task+0x3ba>
				case sRtcDateConfig:{

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 8004750:	4b2f      	ldr	r3, [pc, #188]	; (8004810 <rtc_task+0x30c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b03      	cmp	r3, #3
 8004756:	f200 80b2 	bhi.w	80048be <rtc_task+0x3ba>
 800475a:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <rtc_task+0x25c>)
 800475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004760:	08004771 	.word	0x08004771
 8004764:	080047a5 	.word	0x080047a5
 8004768:	08004849 	.word	0x08004849
 800476c:	08004815 	.word	0x08004815
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->len);
 8004770:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	4619      	mov	r1, r3
 8004778:	4610      	mov	r0, r2
 800477a:	f7ff fe9f 	bl	80044bc <getnumber>
 800477e:	4603      	mov	r3, r0
 8004780:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 8004784:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8004788:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 800478a:	4b21      	ldr	r3, [pc, #132]	; (8004810 <rtc_task+0x30c>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8004790:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <rtc_task+0x300>)
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8004798:	2300      	movs	r3, #0
 800479a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800479e:	f7fc f899 	bl	80008d4 <xQueueGenericSend>
								break;}
 80047a2:	e087      	b.n	80048b4 <rtc_task+0x3b0>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->len);
 80047a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7ff fe85 	bl	80044bc <getnumber>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 80047b8:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80047bc:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 80047be:	4b14      	ldr	r3, [pc, #80]	; (8004810 <rtc_task+0x30c>)
 80047c0:	2203      	movs	r2, #3
 80047c2:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <rtc_task+0x300>)
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80047cc:	2300      	movs	r3, #0
 80047ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047d2:	f7fc f87f 	bl	80008d4 <xQueueGenericSend>
								break;}
 80047d6:	e06d      	b.n	80048b4 <rtc_task+0x3b0>
 80047d8:	08007e94 	.word	0x08007e94
 80047dc:	08007ee0 	.word	0x08007ee0
 80047e0:	08007f84 	.word	0x08007f84
 80047e4:	08007f98 	.word	0x08007f98
 80047e8:	08007fb0 	.word	0x08007fb0
 80047ec:	08007fc8 	.word	0x08007fc8
 80047f0:	08007fdc 	.word	0x08007fdc
 80047f4:	08007ff0 	.word	0x08007ff0
 80047f8:	08008008 	.word	0x08008008
 80047fc:	0800801c 	.word	0x0800801c
 8004800:	08008038 	.word	0x08008038
 8004804:	200192dc 	.word	0x200192dc
 8004808:	20019218 	.word	0x20019218
 800480c:	2000001c 	.word	0x2000001c
 8004810:	2001926c 	.word	0x2001926c
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->len);
 8004814:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	4619      	mov	r1, r3
 800481c:	4610      	mov	r0, r2
 800481e:	f7ff fe4d 	bl	80044bc <getnumber>
 8004822:	4603      	mov	r3, r0
 8004824:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 8004828:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800482c:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 800482e:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <rtc_task+0x3d8>)
 8004830:	2202      	movs	r2, #2
 8004832:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8004834:	4b2a      	ldr	r3, [pc, #168]	; (80048e0 <rtc_task+0x3dc>)
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800483c:	2300      	movs	r3, #0
 800483e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004842:	f7fc f847 	bl	80008d4 <xQueueGenericSend>
								break;}
 8004846:	e035      	b.n	80048b4 <rtc_task+0x3b0>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->len);
 8004848:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800484a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f7ff fe33 	bl	80044bc <getnumber>
 8004856:	4603      	mov	r3, r0
 8004858:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 800485c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8004860:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 8004862:	f107 0308 	add.w	r3, r7, #8
 8004866:	4619      	mov	r1, r3
 8004868:	2000      	movs	r0, #0
 800486a:	f7ff fb19 	bl	8003ea0 <validate_rtc_information>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d110      	bne.n	8004896 <rtc_task+0x392>
								{
									rtc_configure_date(&date);
 8004874:	f107 0308 	add.w	r3, r7, #8
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fb01 	bl	8003e80 <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 800487e:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <rtc_task+0x3dc>)
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004886:	2300      	movs	r3, #0
 8004888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800488c:	f7fc f822 	bl	80008d4 <xQueueGenericSend>
									show_time_date();
 8004890:	f7ff fa72 	bl	8003d78 <show_time_date>
 8004894:	e007      	b.n	80048a6 <rtc_task+0x3a2>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8004896:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <rtc_task+0x3dc>)
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	2300      	movs	r3, #0
 800489c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048a0:	4910      	ldr	r1, [pc, #64]	; (80048e4 <rtc_task+0x3e0>)
 80048a2:	f7fc f817 	bl	80008d4 <xQueueGenericSend>

								curr_state = sMainMenu;
 80048a6:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <rtc_task+0x3e4>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <rtc_task+0x3d8>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
								break;}
 80048b2:	bf00      	nop
						}


					break;}
 80048b4:	e003      	b.n	80048be <rtc_task+0x3ba>

				case sRtcReport:{
					/*enable or disable RTC current time reporting over ITM printf */

					curr_state = sMainMenu;
 80048b6:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <rtc_task+0x3e4>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]
					break;}
 80048bc:	bf00      	nop
		while(curr_state != sMainMenu){
 80048be:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <rtc_task+0x3e4>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f47f ae57 	bne.w	8004576 <rtc_task+0x72>

		} //while end


		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 80048c8:	4b08      	ldr	r3, [pc, #32]	; (80048ec <rtc_task+0x3e8>)
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	2300      	movs	r3, #0
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	2300      	movs	r3, #0
 80048d2:	2200      	movs	r2, #0
 80048d4:	2100      	movs	r1, #0
 80048d6:	f7fd fb31 	bl	8001f3c <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80048da:	e62d      	b.n	8004538 <rtc_task+0x34>
 80048dc:	2001926c 	.word	0x2001926c
 80048e0:	200192dc 	.word	0x200192dc
 80048e4:	2000001c 	.word	0x2000001c
 80048e8:	20019218 	.word	0x20019218
 80048ec:	200192d8 	.word	0x200192d8

080048f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004928 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048f4:	480d      	ldr	r0, [pc, #52]	; (800492c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80048f6:	490e      	ldr	r1, [pc, #56]	; (8004930 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80048f8:	4a0e      	ldr	r2, [pc, #56]	; (8004934 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048fc:	e002      	b.n	8004904 <LoopCopyDataInit>

080048fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004902:	3304      	adds	r3, #4

08004904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004908:	d3f9      	bcc.n	80048fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800490a:	4a0b      	ldr	r2, [pc, #44]	; (8004938 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800490c:	4c0b      	ldr	r4, [pc, #44]	; (800493c <LoopFillZerobss+0x26>)
  movs r3, #0
 800490e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004910:	e001      	b.n	8004916 <LoopFillZerobss>

08004912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004914:	3204      	adds	r2, #4

08004916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004918:	d3fb      	bcc.n	8004912 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800491a:	f7ff fc05 	bl	8004128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800491e:	f002 fd4d 	bl	80073bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004922:	f7fe fe67 	bl	80035f4 <main>
  bx  lr    
 8004926:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800492c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004930:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8004934:	08008118 	.word	0x08008118
  ldr r2, =_sbss
 8004938:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800493c:	200193ac 	.word	0x200193ac

08004940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004940:	e7fe      	b.n	8004940 <ADC_IRQHandler>
	...

08004944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004948:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <HAL_Init+0x40>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a0d      	ldr	r2, [pc, #52]	; (8004984 <HAL_Init+0x40>)
 800494e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_Init+0x40>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <HAL_Init+0x40>)
 800495a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800495e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004960:	4b08      	ldr	r3, [pc, #32]	; (8004984 <HAL_Init+0x40>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a07      	ldr	r2, [pc, #28]	; (8004984 <HAL_Init+0x40>)
 8004966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800496c:	2003      	movs	r0, #3
 800496e:	f000 f8d8 	bl	8004b22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004972:	2000      	movs	r0, #0
 8004974:	f7ff fb54 	bl	8004020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004978:	f7ff fac4 	bl	8003f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40023c00 	.word	0x40023c00

08004988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <HAL_IncTick+0x20>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	4b06      	ldr	r3, [pc, #24]	; (80049ac <HAL_IncTick+0x24>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4413      	add	r3, r2
 8004998:	4a04      	ldr	r2, [pc, #16]	; (80049ac <HAL_IncTick+0x24>)
 800499a:	6013      	str	r3, [r2, #0]
}
 800499c:	bf00      	nop
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000024 	.word	0x20000024
 80049ac:	20019398 	.word	0x20019398

080049b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return uwTick;
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <HAL_GetTick+0x14>)
 80049b6:	681b      	ldr	r3, [r3, #0]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20019398 	.word	0x20019398

080049c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <__NVIC_SetPriorityGrouping+0x44>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049e4:	4013      	ands	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049fa:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <__NVIC_SetPriorityGrouping+0x44>)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	60d3      	str	r3, [r2, #12]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	e000ed00 	.word	0xe000ed00

08004a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <__NVIC_GetPriorityGrouping+0x18>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	f003 0307 	and.w	r3, r3, #7
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	db0b      	blt.n	8004a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	f003 021f 	and.w	r2, r3, #31
 8004a44:	4907      	ldr	r1, [pc, #28]	; (8004a64 <__NVIC_EnableIRQ+0x38>)
 8004a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	e000e100 	.word	0xe000e100

08004a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	6039      	str	r1, [r7, #0]
 8004a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	db0a      	blt.n	8004a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	490c      	ldr	r1, [pc, #48]	; (8004ab4 <__NVIC_SetPriority+0x4c>)
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	0112      	lsls	r2, r2, #4
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a90:	e00a      	b.n	8004aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	4908      	ldr	r1, [pc, #32]	; (8004ab8 <__NVIC_SetPriority+0x50>)
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	3b04      	subs	r3, #4
 8004aa0:	0112      	lsls	r2, r2, #4
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	761a      	strb	r2, [r3, #24]
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	e000e100 	.word	0xe000e100
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f1c3 0307 	rsb	r3, r3, #7
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	bf28      	it	cs
 8004ada:	2304      	movcs	r3, #4
 8004adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d902      	bls.n	8004aec <NVIC_EncodePriority+0x30>
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3b03      	subs	r3, #3
 8004aea:	e000      	b.n	8004aee <NVIC_EncodePriority+0x32>
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43da      	mvns	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	401a      	ands	r2, r3
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	43d9      	mvns	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b14:	4313      	orrs	r3, r2
         );
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3724      	adds	r7, #36	; 0x24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b082      	sub	sp, #8
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff ff4c 	bl	80049c8 <__NVIC_SetPriorityGrouping>
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b4a:	f7ff ff61 	bl	8004a10 <__NVIC_GetPriorityGrouping>
 8004b4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	6978      	ldr	r0, [r7, #20]
 8004b56:	f7ff ffb1 	bl	8004abc <NVIC_EncodePriority>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b60:	4611      	mov	r1, r2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff ff80 	bl	8004a68 <__NVIC_SetPriority>
}
 8004b68:	bf00      	nop
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff ff54 	bl	8004a2c <__NVIC_EnableIRQ>
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b9a:	f7ff ff09 	bl	80049b0 <HAL_GetTick>
 8004b9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d008      	beq.n	8004bbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e052      	b.n	8004c64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0216 	bic.w	r2, r2, #22
 8004bcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <HAL_DMA_Abort+0x62>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0208 	bic.w	r2, r2, #8
 8004bfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c0e:	e013      	b.n	8004c38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c10:	f7ff fece 	bl	80049b0 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	d90c      	bls.n	8004c38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2203      	movs	r2, #3
 8004c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e015      	b.n	8004c64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e4      	bne.n	8004c10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	223f      	movs	r2, #63	; 0x3f
 8004c4c:	409a      	lsls	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d004      	beq.n	8004c8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2280      	movs	r2, #128	; 0x80
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e00c      	b.n	8004ca4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2205      	movs	r2, #5
 8004c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0201 	bic.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b089      	sub	sp, #36	; 0x24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	e16b      	b.n	8004fa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ccc:	2201      	movs	r2, #1
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	f040 815a 	bne.w	8004f9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d005      	beq.n	8004d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d130      	bne.n	8004d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d38:	2201      	movs	r2, #1
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	43db      	mvns	r3, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4013      	ands	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 0201 	and.w	r2, r3, #1
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d017      	beq.n	8004da0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d123      	bne.n	8004df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	08da      	lsrs	r2, r3, #3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3208      	adds	r2, #8
 8004db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	220f      	movs	r2, #15
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	08da      	lsrs	r2, r3, #3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3208      	adds	r2, #8
 8004dee:	69b9      	ldr	r1, [r7, #24]
 8004df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	2203      	movs	r2, #3
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	43db      	mvns	r3, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f003 0203 	and.w	r2, r3, #3
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 80b4 	beq.w	8004f9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	4b60      	ldr	r3, [pc, #384]	; (8004fbc <HAL_GPIO_Init+0x30c>)
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	4a5f      	ldr	r2, [pc, #380]	; (8004fbc <HAL_GPIO_Init+0x30c>)
 8004e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e44:	6453      	str	r3, [r2, #68]	; 0x44
 8004e46:	4b5d      	ldr	r3, [pc, #372]	; (8004fbc <HAL_GPIO_Init+0x30c>)
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e52:	4a5b      	ldr	r2, [pc, #364]	; (8004fc0 <HAL_GPIO_Init+0x310>)
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	089b      	lsrs	r3, r3, #2
 8004e58:	3302      	adds	r3, #2
 8004e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	220f      	movs	r2, #15
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4013      	ands	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a52      	ldr	r2, [pc, #328]	; (8004fc4 <HAL_GPIO_Init+0x314>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d02b      	beq.n	8004ed6 <HAL_GPIO_Init+0x226>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a51      	ldr	r2, [pc, #324]	; (8004fc8 <HAL_GPIO_Init+0x318>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d025      	beq.n	8004ed2 <HAL_GPIO_Init+0x222>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a50      	ldr	r2, [pc, #320]	; (8004fcc <HAL_GPIO_Init+0x31c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01f      	beq.n	8004ece <HAL_GPIO_Init+0x21e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a4f      	ldr	r2, [pc, #316]	; (8004fd0 <HAL_GPIO_Init+0x320>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d019      	beq.n	8004eca <HAL_GPIO_Init+0x21a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a4e      	ldr	r2, [pc, #312]	; (8004fd4 <HAL_GPIO_Init+0x324>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <HAL_GPIO_Init+0x216>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a4d      	ldr	r2, [pc, #308]	; (8004fd8 <HAL_GPIO_Init+0x328>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00d      	beq.n	8004ec2 <HAL_GPIO_Init+0x212>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a4c      	ldr	r2, [pc, #304]	; (8004fdc <HAL_GPIO_Init+0x32c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d007      	beq.n	8004ebe <HAL_GPIO_Init+0x20e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a4b      	ldr	r2, [pc, #300]	; (8004fe0 <HAL_GPIO_Init+0x330>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d101      	bne.n	8004eba <HAL_GPIO_Init+0x20a>
 8004eb6:	2307      	movs	r3, #7
 8004eb8:	e00e      	b.n	8004ed8 <HAL_GPIO_Init+0x228>
 8004eba:	2308      	movs	r3, #8
 8004ebc:	e00c      	b.n	8004ed8 <HAL_GPIO_Init+0x228>
 8004ebe:	2306      	movs	r3, #6
 8004ec0:	e00a      	b.n	8004ed8 <HAL_GPIO_Init+0x228>
 8004ec2:	2305      	movs	r3, #5
 8004ec4:	e008      	b.n	8004ed8 <HAL_GPIO_Init+0x228>
 8004ec6:	2304      	movs	r3, #4
 8004ec8:	e006      	b.n	8004ed8 <HAL_GPIO_Init+0x228>
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e004      	b.n	8004ed8 <HAL_GPIO_Init+0x228>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e002      	b.n	8004ed8 <HAL_GPIO_Init+0x228>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <HAL_GPIO_Init+0x228>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	f002 0203 	and.w	r2, r2, #3
 8004ede:	0092      	lsls	r2, r2, #2
 8004ee0:	4093      	lsls	r3, r2
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ee8:	4935      	ldr	r1, [pc, #212]	; (8004fc0 <HAL_GPIO_Init+0x310>)
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	089b      	lsrs	r3, r3, #2
 8004eee:	3302      	adds	r3, #2
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ef6:	4b3b      	ldr	r3, [pc, #236]	; (8004fe4 <HAL_GPIO_Init+0x334>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	43db      	mvns	r3, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4013      	ands	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f1a:	4a32      	ldr	r2, [pc, #200]	; (8004fe4 <HAL_GPIO_Init+0x334>)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f20:	4b30      	ldr	r3, [pc, #192]	; (8004fe4 <HAL_GPIO_Init+0x334>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f44:	4a27      	ldr	r2, [pc, #156]	; (8004fe4 <HAL_GPIO_Init+0x334>)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f4a:	4b26      	ldr	r3, [pc, #152]	; (8004fe4 <HAL_GPIO_Init+0x334>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	43db      	mvns	r3, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4013      	ands	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f6e:	4a1d      	ldr	r2, [pc, #116]	; (8004fe4 <HAL_GPIO_Init+0x334>)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f74:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <HAL_GPIO_Init+0x334>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4013      	ands	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f98:	4a12      	ldr	r2, [pc, #72]	; (8004fe4 <HAL_GPIO_Init+0x334>)
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	f67f ae90 	bls.w	8004ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	3724      	adds	r7, #36	; 0x24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	40013800 	.word	0x40013800
 8004fc4:	40020000 	.word	0x40020000
 8004fc8:	40020400 	.word	0x40020400
 8004fcc:	40020800 	.word	0x40020800
 8004fd0:	40020c00 	.word	0x40020c00
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40021400 	.word	0x40021400
 8004fdc:	40021800 	.word	0x40021800
 8004fe0:	40021c00 	.word	0x40021c00
 8004fe4:	40013c00 	.word	0x40013c00

08004fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	807b      	strh	r3, [r7, #2]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ff8:	787b      	ldrb	r3, [r7, #1]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ffe:	887a      	ldrh	r2, [r7, #2]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005004:	e003      	b.n	800500e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005006:	887b      	ldrh	r3, [r7, #2]
 8005008:	041a      	lsls	r2, r3, #16
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	619a      	str	r2, [r3, #24]
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e264      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d075      	beq.n	8005126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800503a:	4ba3      	ldr	r3, [pc, #652]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	2b04      	cmp	r3, #4
 8005044:	d00c      	beq.n	8005060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005046:	4ba0      	ldr	r3, [pc, #640]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800504e:	2b08      	cmp	r3, #8
 8005050:	d112      	bne.n	8005078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005052:	4b9d      	ldr	r3, [pc, #628]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800505e:	d10b      	bne.n	8005078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005060:	4b99      	ldr	r3, [pc, #612]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d05b      	beq.n	8005124 <HAL_RCC_OscConfig+0x108>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d157      	bne.n	8005124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e23f      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005080:	d106      	bne.n	8005090 <HAL_RCC_OscConfig+0x74>
 8005082:	4b91      	ldr	r3, [pc, #580]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a90      	ldr	r2, [pc, #576]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e01d      	b.n	80050cc <HAL_RCC_OscConfig+0xb0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005098:	d10c      	bne.n	80050b4 <HAL_RCC_OscConfig+0x98>
 800509a:	4b8b      	ldr	r3, [pc, #556]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a8a      	ldr	r2, [pc, #552]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 80050a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	4b88      	ldr	r3, [pc, #544]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a87      	ldr	r2, [pc, #540]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	e00b      	b.n	80050cc <HAL_RCC_OscConfig+0xb0>
 80050b4:	4b84      	ldr	r3, [pc, #528]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a83      	ldr	r2, [pc, #524]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 80050ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	4b81      	ldr	r3, [pc, #516]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a80      	ldr	r2, [pc, #512]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 80050c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d013      	beq.n	80050fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7ff fc6c 	bl	80049b0 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050dc:	f7ff fc68 	bl	80049b0 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b64      	cmp	r3, #100	; 0x64
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e204      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ee:	4b76      	ldr	r3, [pc, #472]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0xc0>
 80050fa:	e014      	b.n	8005126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fc:	f7ff fc58 	bl	80049b0 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005104:	f7ff fc54 	bl	80049b0 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b64      	cmp	r3, #100	; 0x64
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e1f0      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005116:	4b6c      	ldr	r3, [pc, #432]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0xe8>
 8005122:	e000      	b.n	8005126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d063      	beq.n	80051fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005132:	4b65      	ldr	r3, [pc, #404]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513e:	4b62      	ldr	r3, [pc, #392]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005146:	2b08      	cmp	r3, #8
 8005148:	d11c      	bne.n	8005184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800514a:	4b5f      	ldr	r3, [pc, #380]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d116      	bne.n	8005184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005156:	4b5c      	ldr	r3, [pc, #368]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_RCC_OscConfig+0x152>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d001      	beq.n	800516e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e1c4      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516e:	4b56      	ldr	r3, [pc, #344]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4952      	ldr	r1, [pc, #328]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005182:	e03a      	b.n	80051fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d020      	beq.n	80051ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800518c:	4b4f      	ldr	r3, [pc, #316]	; (80052cc <HAL_RCC_OscConfig+0x2b0>)
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005192:	f7ff fc0d 	bl	80049b0 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800519a:	f7ff fc09 	bl	80049b0 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e1a5      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ac:	4b46      	ldr	r3, [pc, #280]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b8:	4b43      	ldr	r3, [pc, #268]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4940      	ldr	r1, [pc, #256]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	600b      	str	r3, [r1, #0]
 80051cc:	e015      	b.n	80051fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ce:	4b3f      	ldr	r3, [pc, #252]	; (80052cc <HAL_RCC_OscConfig+0x2b0>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7ff fbec 	bl	80049b0 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051dc:	f7ff fbe8 	bl	80049b0 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e184      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ee:	4b36      	ldr	r3, [pc, #216]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d030      	beq.n	8005268 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d016      	beq.n	800523c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520e:	4b30      	ldr	r3, [pc, #192]	; (80052d0 <HAL_RCC_OscConfig+0x2b4>)
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005214:	f7ff fbcc 	bl	80049b0 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800521c:	f7ff fbc8 	bl	80049b0 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e164      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522e:	4b26      	ldr	r3, [pc, #152]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 8005230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0x200>
 800523a:	e015      	b.n	8005268 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800523c:	4b24      	ldr	r3, [pc, #144]	; (80052d0 <HAL_RCC_OscConfig+0x2b4>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005242:	f7ff fbb5 	bl	80049b0 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800524a:	f7ff fbb1 	bl	80049b0 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e14d      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800525c:	4b1a      	ldr	r3, [pc, #104]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 800525e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f0      	bne.n	800524a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80a0 	beq.w	80053b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527a:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10f      	bne.n	80052a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	2300      	movs	r3, #0
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	4a0e      	ldr	r2, [pc, #56]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005294:	6413      	str	r3, [r2, #64]	; 0x40
 8005296:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <HAL_RCC_OscConfig+0x2ac>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a2:	2301      	movs	r3, #1
 80052a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_RCC_OscConfig+0x2b8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d121      	bne.n	80052f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052b2:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <HAL_RCC_OscConfig+0x2b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a07      	ldr	r2, [pc, #28]	; (80052d4 <HAL_RCC_OscConfig+0x2b8>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052be:	f7ff fb77 	bl	80049b0 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c4:	e011      	b.n	80052ea <HAL_RCC_OscConfig+0x2ce>
 80052c6:	bf00      	nop
 80052c8:	40023800 	.word	0x40023800
 80052cc:	42470000 	.word	0x42470000
 80052d0:	42470e80 	.word	0x42470e80
 80052d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d8:	f7ff fb6a 	bl	80049b0 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e106      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ea:	4b85      	ldr	r3, [pc, #532]	; (8005500 <HAL_RCC_OscConfig+0x4e4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d106      	bne.n	800530c <HAL_RCC_OscConfig+0x2f0>
 80052fe:	4b81      	ldr	r3, [pc, #516]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	4a80      	ldr	r2, [pc, #512]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	6713      	str	r3, [r2, #112]	; 0x70
 800530a:	e01c      	b.n	8005346 <HAL_RCC_OscConfig+0x32a>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2b05      	cmp	r3, #5
 8005312:	d10c      	bne.n	800532e <HAL_RCC_OscConfig+0x312>
 8005314:	4b7b      	ldr	r3, [pc, #492]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	4a7a      	ldr	r2, [pc, #488]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 800531a:	f043 0304 	orr.w	r3, r3, #4
 800531e:	6713      	str	r3, [r2, #112]	; 0x70
 8005320:	4b78      	ldr	r3, [pc, #480]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	4a77      	ldr	r2, [pc, #476]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	6713      	str	r3, [r2, #112]	; 0x70
 800532c:	e00b      	b.n	8005346 <HAL_RCC_OscConfig+0x32a>
 800532e:	4b75      	ldr	r3, [pc, #468]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005332:	4a74      	ldr	r2, [pc, #464]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	6713      	str	r3, [r2, #112]	; 0x70
 800533a:	4b72      	ldr	r3, [pc, #456]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533e:	4a71      	ldr	r2, [pc, #452]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 8005340:	f023 0304 	bic.w	r3, r3, #4
 8005344:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d015      	beq.n	800537a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534e:	f7ff fb2f 	bl	80049b0 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005354:	e00a      	b.n	800536c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005356:	f7ff fb2b 	bl	80049b0 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	f241 3288 	movw	r2, #5000	; 0x1388
 8005364:	4293      	cmp	r3, r2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e0c5      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536c:	4b65      	ldr	r3, [pc, #404]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0ee      	beq.n	8005356 <HAL_RCC_OscConfig+0x33a>
 8005378:	e014      	b.n	80053a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800537a:	f7ff fb19 	bl	80049b0 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005380:	e00a      	b.n	8005398 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005382:	f7ff fb15 	bl	80049b0 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005390:	4293      	cmp	r3, r2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e0af      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005398:	4b5a      	ldr	r3, [pc, #360]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 800539a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1ee      	bne.n	8005382 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d105      	bne.n	80053b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053aa:	4b56      	ldr	r3, [pc, #344]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	4a55      	ldr	r2, [pc, #340]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 80053b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 809b 	beq.w	80054f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053c0:	4b50      	ldr	r3, [pc, #320]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 030c 	and.w	r3, r3, #12
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d05c      	beq.n	8005486 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d141      	bne.n	8005458 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d4:	4b4c      	ldr	r3, [pc, #304]	; (8005508 <HAL_RCC_OscConfig+0x4ec>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053da:	f7ff fae9 	bl	80049b0 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e2:	f7ff fae5 	bl	80049b0 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e081      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f4:	4b43      	ldr	r3, [pc, #268]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f0      	bne.n	80053e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	019b      	lsls	r3, r3, #6
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	3b01      	subs	r3, #1
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	061b      	lsls	r3, r3, #24
 8005424:	4937      	ldr	r1, [pc, #220]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800542a:	4b37      	ldr	r3, [pc, #220]	; (8005508 <HAL_RCC_OscConfig+0x4ec>)
 800542c:	2201      	movs	r2, #1
 800542e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005430:	f7ff fabe 	bl	80049b0 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005438:	f7ff faba 	bl	80049b0 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e056      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800544a:	4b2e      	ldr	r3, [pc, #184]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f0      	beq.n	8005438 <HAL_RCC_OscConfig+0x41c>
 8005456:	e04e      	b.n	80054f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005458:	4b2b      	ldr	r3, [pc, #172]	; (8005508 <HAL_RCC_OscConfig+0x4ec>)
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545e:	f7ff faa7 	bl	80049b0 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005466:	f7ff faa3 	bl	80049b0 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e03f      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005478:	4b22      	ldr	r3, [pc, #136]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1f0      	bne.n	8005466 <HAL_RCC_OscConfig+0x44a>
 8005484:	e037      	b.n	80054f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e032      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005492:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <HAL_RCC_OscConfig+0x4e8>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d028      	beq.n	80054f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d121      	bne.n	80054f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d11a      	bne.n	80054f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054c2:	4013      	ands	r3, r2
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d111      	bne.n	80054f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	3b01      	subs	r3, #1
 80054dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054de:	429a      	cmp	r2, r3
 80054e0:	d107      	bne.n	80054f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d001      	beq.n	80054f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40007000 	.word	0x40007000
 8005504:	40023800 	.word	0x40023800
 8005508:	42470060 	.word	0x42470060

0800550c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0cc      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005520:	4b68      	ldr	r3, [pc, #416]	; (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d90c      	bls.n	8005548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552e:	4b65      	ldr	r3, [pc, #404]	; (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b63      	ldr	r3, [pc, #396]	; (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0b8      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d020      	beq.n	8005596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005560:	4b59      	ldr	r3, [pc, #356]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	4a58      	ldr	r2, [pc, #352]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800556a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005578:	4b53      	ldr	r3, [pc, #332]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	4a52      	ldr	r2, [pc, #328]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005584:	4b50      	ldr	r3, [pc, #320]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	494d      	ldr	r1, [pc, #308]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d044      	beq.n	800562c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d107      	bne.n	80055ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055aa:	4b47      	ldr	r3, [pc, #284]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d119      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e07f      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d003      	beq.n	80055ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d107      	bne.n	80055da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ca:	4b3f      	ldr	r3, [pc, #252]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e06f      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055da:	4b3b      	ldr	r3, [pc, #236]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e067      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ea:	4b37      	ldr	r3, [pc, #220]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f023 0203 	bic.w	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4934      	ldr	r1, [pc, #208]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055fc:	f7ff f9d8 	bl	80049b0 <HAL_GetTick>
 8005600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005602:	e00a      	b.n	800561a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005604:	f7ff f9d4 	bl	80049b0 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e04f      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561a:	4b2b      	ldr	r3, [pc, #172]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 020c 	and.w	r2, r3, #12
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	429a      	cmp	r2, r3
 800562a:	d1eb      	bne.n	8005604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800562c:	4b25      	ldr	r3, [pc, #148]	; (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d20c      	bcs.n	8005654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563a:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005642:	4b20      	ldr	r3, [pc, #128]	; (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d001      	beq.n	8005654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e032      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005660:	4b19      	ldr	r3, [pc, #100]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4916      	ldr	r1, [pc, #88]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800567e:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	490e      	ldr	r1, [pc, #56]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	4313      	orrs	r3, r2
 8005690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005692:	f000 f821 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 8005696:	4602      	mov	r2, r0
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	490a      	ldr	r1, [pc, #40]	; (80056cc <HAL_RCC_ClockConfig+0x1c0>)
 80056a4:	5ccb      	ldrb	r3, [r1, r3]
 80056a6:	fa22 f303 	lsr.w	r3, r2, r3
 80056aa:	4a09      	ldr	r2, [pc, #36]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 80056ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056ae:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <HAL_RCC_ClockConfig+0x1c8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fe fcb4 	bl	8004020 <HAL_InitTick>

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40023c00 	.word	0x40023c00
 80056c8:	40023800 	.word	0x40023800
 80056cc:	0800805c 	.word	0x0800805c
 80056d0:	20000018 	.word	0x20000018
 80056d4:	20000020 	.word	0x20000020

080056d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	607b      	str	r3, [r7, #4]
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	2300      	movs	r3, #0
 80056ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056f0:	4b67      	ldr	r3, [pc, #412]	; (8005890 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 030c 	and.w	r3, r3, #12
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d00d      	beq.n	8005718 <HAL_RCC_GetSysClockFreq+0x40>
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	f200 80bd 	bhi.w	800587c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x34>
 8005706:	2b04      	cmp	r3, #4
 8005708:	d003      	beq.n	8005712 <HAL_RCC_GetSysClockFreq+0x3a>
 800570a:	e0b7      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800570c:	4b61      	ldr	r3, [pc, #388]	; (8005894 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800570e:	60bb      	str	r3, [r7, #8]
       break;
 8005710:	e0b7      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005712:	4b61      	ldr	r3, [pc, #388]	; (8005898 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005714:	60bb      	str	r3, [r7, #8]
      break;
 8005716:	e0b4      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005718:	4b5d      	ldr	r3, [pc, #372]	; (8005890 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005720:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005722:	4b5b      	ldr	r3, [pc, #364]	; (8005890 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d04d      	beq.n	80057ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800572e:	4b58      	ldr	r3, [pc, #352]	; (8005890 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	099b      	lsrs	r3, r3, #6
 8005734:	461a      	mov	r2, r3
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800573e:	f04f 0100 	mov.w	r1, #0
 8005742:	ea02 0800 	and.w	r8, r2, r0
 8005746:	ea03 0901 	and.w	r9, r3, r1
 800574a:	4640      	mov	r0, r8
 800574c:	4649      	mov	r1, r9
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	014b      	lsls	r3, r1, #5
 8005758:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800575c:	0142      	lsls	r2, r0, #5
 800575e:	4610      	mov	r0, r2
 8005760:	4619      	mov	r1, r3
 8005762:	ebb0 0008 	subs.w	r0, r0, r8
 8005766:	eb61 0109 	sbc.w	r1, r1, r9
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	018b      	lsls	r3, r1, #6
 8005774:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005778:	0182      	lsls	r2, r0, #6
 800577a:	1a12      	subs	r2, r2, r0
 800577c:	eb63 0301 	sbc.w	r3, r3, r1
 8005780:	f04f 0000 	mov.w	r0, #0
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	00d9      	lsls	r1, r3, #3
 800578a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800578e:	00d0      	lsls	r0, r2, #3
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	eb12 0208 	adds.w	r2, r2, r8
 8005798:	eb43 0309 	adc.w	r3, r3, r9
 800579c:	f04f 0000 	mov.w	r0, #0
 80057a0:	f04f 0100 	mov.w	r1, #0
 80057a4:	0259      	lsls	r1, r3, #9
 80057a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80057aa:	0250      	lsls	r0, r2, #9
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4610      	mov	r0, r2
 80057b2:	4619      	mov	r1, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	f7fa fd70 	bl	80002a0 <__aeabi_uldivmod>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4613      	mov	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e04a      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ca:	4b31      	ldr	r3, [pc, #196]	; (8005890 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	099b      	lsrs	r3, r3, #6
 80057d0:	461a      	mov	r2, r3
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057da:	f04f 0100 	mov.w	r1, #0
 80057de:	ea02 0400 	and.w	r4, r2, r0
 80057e2:	ea03 0501 	and.w	r5, r3, r1
 80057e6:	4620      	mov	r0, r4
 80057e8:	4629      	mov	r1, r5
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	014b      	lsls	r3, r1, #5
 80057f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057f8:	0142      	lsls	r2, r0, #5
 80057fa:	4610      	mov	r0, r2
 80057fc:	4619      	mov	r1, r3
 80057fe:	1b00      	subs	r0, r0, r4
 8005800:	eb61 0105 	sbc.w	r1, r1, r5
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	018b      	lsls	r3, r1, #6
 800580e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005812:	0182      	lsls	r2, r0, #6
 8005814:	1a12      	subs	r2, r2, r0
 8005816:	eb63 0301 	sbc.w	r3, r3, r1
 800581a:	f04f 0000 	mov.w	r0, #0
 800581e:	f04f 0100 	mov.w	r1, #0
 8005822:	00d9      	lsls	r1, r3, #3
 8005824:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005828:	00d0      	lsls	r0, r2, #3
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	1912      	adds	r2, r2, r4
 8005830:	eb45 0303 	adc.w	r3, r5, r3
 8005834:	f04f 0000 	mov.w	r0, #0
 8005838:	f04f 0100 	mov.w	r1, #0
 800583c:	0299      	lsls	r1, r3, #10
 800583e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005842:	0290      	lsls	r0, r2, #10
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4610      	mov	r0, r2
 800584a:	4619      	mov	r1, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	461a      	mov	r2, r3
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	f7fa fd24 	bl	80002a0 <__aeabi_uldivmod>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4613      	mov	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	0c1b      	lsrs	r3, r3, #16
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	3301      	adds	r3, #1
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	fbb2 f3f3 	udiv	r3, r2, r3
 8005878:	60bb      	str	r3, [r7, #8]
      break;
 800587a:	e002      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800587e:	60bb      	str	r3, [r7, #8]
      break;
 8005880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005882:	68bb      	ldr	r3, [r7, #8]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800588e:	bf00      	nop
 8005890:	40023800 	.word	0x40023800
 8005894:	00f42400 	.word	0x00f42400
 8005898:	007a1200 	.word	0x007a1200

0800589c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058a0:	4b03      	ldr	r3, [pc, #12]	; (80058b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058a2:	681b      	ldr	r3, [r3, #0]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20000018 	.word	0x20000018

080058b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058b8:	f7ff fff0 	bl	800589c <HAL_RCC_GetHCLKFreq>
 80058bc:	4602      	mov	r2, r0
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	0a9b      	lsrs	r3, r3, #10
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	4903      	ldr	r1, [pc, #12]	; (80058d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ca:	5ccb      	ldrb	r3, [r1, r3]
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40023800 	.word	0x40023800
 80058d8:	0800806c 	.word	0x0800806c

080058dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058e0:	f7ff ffdc 	bl	800589c <HAL_RCC_GetHCLKFreq>
 80058e4:	4602      	mov	r2, r0
 80058e6:	4b05      	ldr	r3, [pc, #20]	; (80058fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	0b5b      	lsrs	r3, r3, #13
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	4903      	ldr	r1, [pc, #12]	; (8005900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f2:	5ccb      	ldrb	r3, [r1, r3]
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40023800 	.word	0x40023800
 8005900:	0800806c 	.word	0x0800806c

08005904 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	220f      	movs	r2, #15
 8005912:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005914:	4b12      	ldr	r3, [pc, #72]	; (8005960 <HAL_RCC_GetClockConfig+0x5c>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0203 	and.w	r2, r3, #3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005920:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <HAL_RCC_GetClockConfig+0x5c>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800592c:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <HAL_RCC_GetClockConfig+0x5c>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005938:	4b09      	ldr	r3, [pc, #36]	; (8005960 <HAL_RCC_GetClockConfig+0x5c>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	08db      	lsrs	r3, r3, #3
 800593e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005946:	4b07      	ldr	r3, [pc, #28]	; (8005964 <HAL_RCC_GetClockConfig+0x60>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0207 	and.w	r2, r3, #7
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	601a      	str	r2, [r3, #0]
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40023800 	.word	0x40023800
 8005964:	40023c00 	.word	0x40023c00

08005968 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d105      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800598c:	2b00      	cmp	r3, #0
 800598e:	d035      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005990:	4b62      	ldr	r3, [pc, #392]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005996:	f7ff f80b 	bl	80049b0 <HAL_GetTick>
 800599a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800599c:	e008      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800599e:	f7ff f807 	bl	80049b0 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e0b0      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059b0:	4b5b      	ldr	r3, [pc, #364]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f0      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	019a      	lsls	r2, r3, #6
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	071b      	lsls	r3, r3, #28
 80059c8:	4955      	ldr	r1, [pc, #340]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059d0:	4b52      	ldr	r3, [pc, #328]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059d6:	f7fe ffeb 	bl	80049b0 <HAL_GetTick>
 80059da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059dc:	e008      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059de:	f7fe ffe7 	bl	80049b0 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e090      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059f0:	4b4b      	ldr	r3, [pc, #300]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0f0      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 8083 	beq.w	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	4b44      	ldr	r3, [pc, #272]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	4a43      	ldr	r2, [pc, #268]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a18:	6413      	str	r3, [r2, #64]	; 0x40
 8005a1a:	4b41      	ldr	r3, [pc, #260]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a26:	4b3f      	ldr	r3, [pc, #252]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a3e      	ldr	r2, [pc, #248]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a32:	f7fe ffbd 	bl	80049b0 <HAL_GetTick>
 8005a36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a38:	e008      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a3a:	f7fe ffb9 	bl	80049b0 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e062      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a4c:	4b35      	ldr	r3, [pc, #212]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a58:	4b31      	ldr	r3, [pc, #196]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d02f      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d028      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a76:	4b2a      	ldr	r3, [pc, #168]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a80:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a86:	4b28      	ldr	r3, [pc, #160]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a8c:	4a24      	ldr	r2, [pc, #144]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a92:	4b23      	ldr	r3, [pc, #140]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d114      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a9e:	f7fe ff87 	bl	80049b0 <HAL_GetTick>
 8005aa2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa4:	e00a      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aa6:	f7fe ff83 	bl	80049b0 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e02a      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005abc:	4b18      	ldr	r3, [pc, #96]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0ee      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad4:	d10d      	bne.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005ad6:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aea:	490d      	ldr	r1, [pc, #52]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	608b      	str	r3, [r1, #8]
 8005af0:	e005      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005af2:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	4a0a      	ldr	r2, [pc, #40]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005af8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005afc:	6093      	str	r3, [r2, #8]
 8005afe:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b0a:	4905      	ldr	r1, [pc, #20]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	42470068 	.word	0x42470068
 8005b20:	40023800 	.word	0x40023800
 8005b24:	40007000 	.word	0x40007000
 8005b28:	42470e40 	.word	0x42470e40

08005b2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e083      	b.n	8005c46 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	7f5b      	ldrb	r3, [r3, #29]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d105      	bne.n	8005b54 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fe fa00 	bl	8003f54 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	22ca      	movs	r2, #202	; 0xca
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2253      	movs	r2, #83	; 0x53
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 faa8 	bl	80060c0 <RTC_EnterInitMode>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d008      	beq.n	8005b88 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	22ff      	movs	r2, #255	; 0xff
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2204      	movs	r2, #4
 8005b82:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e05e      	b.n	8005c46 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b9a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6899      	ldr	r1, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	68d2      	ldr	r2, [r2, #12]
 8005bc2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6919      	ldr	r1, [r3, #16]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	041a      	lsls	r2, r3, #16
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005be6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10e      	bne.n	8005c14 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa3a 	bl	8006070 <HAL_RTC_WaitForSynchro>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	22ff      	movs	r2, #255	; 0xff
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e018      	b.n	8005c46 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c22:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	22ff      	movs	r2, #255	; 0xff
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005c44:	2300      	movs	r3, #0
  }
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c4e:	b590      	push	{r4, r7, lr}
 8005c50:	b087      	sub	sp, #28
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	7f1b      	ldrb	r3, [r3, #28]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d101      	bne.n	8005c6a <HAL_RTC_SetTime+0x1c>
 8005c66:	2302      	movs	r3, #2
 8005c68:	e0aa      	b.n	8005dc0 <HAL_RTC_SetTime+0x172>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2202      	movs	r2, #2
 8005c74:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d126      	bne.n	8005cca <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fa3f 	bl	8006118 <RTC_ByteToBcd2>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fa38 	bl	8006118 <RTC_ByteToBcd2>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005cac:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	789b      	ldrb	r3, [r3, #2]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fa30 	bl	8006118 <RTC_ByteToBcd2>
 8005cb8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005cba:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	78db      	ldrb	r3, [r3, #3]
 8005cc2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	e018      	b.n	8005cfc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005cea:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005cf0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	78db      	ldrb	r3, [r3, #3]
 8005cf6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	22ca      	movs	r2, #202	; 0xca
 8005d02:	625a      	str	r2, [r3, #36]	; 0x24
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2253      	movs	r2, #83	; 0x53
 8005d0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f9d7 	bl	80060c0 <RTC_EnterInitMode>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00b      	beq.n	8005d30 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	22ff      	movs	r2, #255	; 0xff
 8005d1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2204      	movs	r2, #4
 8005d24:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e047      	b.n	8005dc0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d3a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d3e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d4e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6899      	ldr	r1, [r3, #8]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d76:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d111      	bne.n	8005daa <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f972 	bl	8006070 <HAL_RTC_WaitForSynchro>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	22ff      	movs	r2, #255	; 0xff
 8005d98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e00a      	b.n	8005dc0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	22ff      	movs	r2, #255	; 0xff
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
  }
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd90      	pop	{r4, r7, pc}

08005dc8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005dfa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	0c1b      	lsrs	r3, r3, #16
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	0a1b      	lsrs	r3, r3, #8
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	0c1b      	lsrs	r3, r3, #16
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d11a      	bne.n	8005e7a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 f983 	bl	8006154 <RTC_Bcd2ToByte>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	461a      	mov	r2, r3
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 f97a 	bl	8006154 <RTC_Bcd2ToByte>
 8005e60:	4603      	mov	r3, r0
 8005e62:	461a      	mov	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	789b      	ldrb	r3, [r3, #2]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 f971 	bl	8006154 <RTC_Bcd2ToByte>
 8005e72:	4603      	mov	r3, r0
 8005e74:	461a      	mov	r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e84:	b590      	push	{r4, r7, lr}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	7f1b      	ldrb	r3, [r3, #28]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_RTC_SetDate+0x1c>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e094      	b.n	8005fca <HAL_RTC_SetDate+0x146>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10e      	bne.n	8005ed0 <HAL_RTC_SetDate+0x4c>
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	f003 0310 	and.w	r3, r3, #16
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	f023 0310 	bic.w	r3, r3, #16
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	330a      	adds	r3, #10
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d11c      	bne.n	8005f10 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	78db      	ldrb	r3, [r3, #3]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f91c 	bl	8006118 <RTC_ByteToBcd2>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	785b      	ldrb	r3, [r3, #1]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 f915 	bl	8006118 <RTC_ByteToBcd2>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005ef2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	789b      	ldrb	r3, [r3, #2]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 f90d 	bl	8006118 <RTC_ByteToBcd2>
 8005efe:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005f00:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	e00e      	b.n	8005f2e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	78db      	ldrb	r3, [r3, #3]
 8005f14:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005f1c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005f22:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	22ca      	movs	r2, #202	; 0xca
 8005f34:	625a      	str	r2, [r3, #36]	; 0x24
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2253      	movs	r2, #83	; 0x53
 8005f3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 f8be 	bl	80060c0 <RTC_EnterInitMode>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00b      	beq.n	8005f62 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	22ff      	movs	r2, #255	; 0xff
 8005f50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2204      	movs	r2, #4
 8005f56:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e033      	b.n	8005fca <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f70:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f80:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 0320 	and.w	r3, r3, #32
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d111      	bne.n	8005fb4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f86d 	bl	8006070 <HAL_RTC_WaitForSynchro>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00b      	beq.n	8005fb4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	22ff      	movs	r2, #255	; 0xff
 8005fa2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e00a      	b.n	8005fca <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	22ff      	movs	r2, #255	; 0xff
 8005fba:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
  }
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd90      	pop	{r4, r7, pc}

08005fd2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b086      	sub	sp, #24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005fec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	0a1b      	lsrs	r3, r3, #8
 8006000:	b2db      	uxtb	r3, r3
 8006002:	f003 031f 	and.w	r3, r3, #31
 8006006:	b2da      	uxtb	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006014:	b2da      	uxtb	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	0b5b      	lsrs	r3, r3, #13
 800601e:	b2db      	uxtb	r3, r3
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	b2da      	uxtb	r2, r3
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d11a      	bne.n	8006066 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	78db      	ldrb	r3, [r3, #3]
 8006034:	4618      	mov	r0, r3
 8006036:	f000 f88d 	bl	8006154 <RTC_Bcd2ToByte>
 800603a:	4603      	mov	r3, r0
 800603c:	461a      	mov	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	785b      	ldrb	r3, [r3, #1]
 8006046:	4618      	mov	r0, r3
 8006048:	f000 f884 	bl	8006154 <RTC_Bcd2ToByte>
 800604c:	4603      	mov	r3, r0
 800604e:	461a      	mov	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	789b      	ldrb	r3, [r3, #2]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 f87b 	bl	8006154 <RTC_Bcd2ToByte>
 800605e:	4603      	mov	r3, r0
 8006060:	461a      	mov	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800608a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800608c:	f7fe fc90 	bl	80049b0 <HAL_GetTick>
 8006090:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006092:	e009      	b.n	80060a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006094:	f7fe fc8c 	bl	80049b0 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060a2:	d901      	bls.n	80060a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e007      	b.n	80060b8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0ee      	beq.n	8006094 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d119      	bne.n	800610e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060e4:	f7fe fc64 	bl	80049b0 <HAL_GetTick>
 80060e8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060ea:	e009      	b.n	8006100 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060ec:	f7fe fc60 	bl	80049b0 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060fa:	d901      	bls.n	8006100 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e007      	b.n	8006110 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0ee      	beq.n	80060ec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006126:	e005      	b.n	8006134 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3301      	adds	r3, #1
 800612c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	3b0a      	subs	r3, #10
 8006132:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	2b09      	cmp	r3, #9
 8006138:	d8f6      	bhi.n	8006128 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	b2da      	uxtb	r2, r3
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	4313      	orrs	r3, r2
 8006146:	b2db      	uxtb	r3, r3
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	4603      	mov	r3, r0
 800615c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006162:	79fb      	ldrb	r3, [r7, #7]
 8006164:	091b      	lsrs	r3, r3, #4
 8006166:	b2db      	uxtb	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	b2da      	uxtb	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	4413      	add	r3, r2
 8006182:	b2db      	uxtb	r3, r3
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e041      	b.n	8006226 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d106      	bne.n	80061bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f839 	bl	800622e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4619      	mov	r1, r3
 80061ce:	4610      	mov	r0, r2
 80061d0:	f000 f9d8 	bl	8006584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b01      	cmp	r3, #1
 8006256:	d001      	beq.n	800625c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e04e      	b.n	80062fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0201 	orr.w	r2, r2, #1
 8006272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a23      	ldr	r2, [pc, #140]	; (8006308 <HAL_TIM_Base_Start_IT+0xc4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d022      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0x80>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006286:	d01d      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0x80>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1f      	ldr	r2, [pc, #124]	; (800630c <HAL_TIM_Base_Start_IT+0xc8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d018      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0x80>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1e      	ldr	r2, [pc, #120]	; (8006310 <HAL_TIM_Base_Start_IT+0xcc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d013      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0x80>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1c      	ldr	r2, [pc, #112]	; (8006314 <HAL_TIM_Base_Start_IT+0xd0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00e      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0x80>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1b      	ldr	r2, [pc, #108]	; (8006318 <HAL_TIM_Base_Start_IT+0xd4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d009      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0x80>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a19      	ldr	r2, [pc, #100]	; (800631c <HAL_TIM_Base_Start_IT+0xd8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d004      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0x80>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a18      	ldr	r2, [pc, #96]	; (8006320 <HAL_TIM_Base_Start_IT+0xdc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d111      	bne.n	80062e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b06      	cmp	r3, #6
 80062d4:	d010      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0201 	orr.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e6:	e007      	b.n	80062f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40010000 	.word	0x40010000
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40000c00 	.word	0x40000c00
 8006318:	40010400 	.word	0x40010400
 800631c:	40014000 	.word	0x40014000
 8006320:	40001800 	.word	0x40001800

08006324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b02      	cmp	r3, #2
 8006338:	d122      	bne.n	8006380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b02      	cmp	r3, #2
 8006346:	d11b      	bne.n	8006380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0202 	mvn.w	r2, #2
 8006350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f8ee 	bl	8006548 <HAL_TIM_IC_CaptureCallback>
 800636c:	e005      	b.n	800637a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f8e0 	bl	8006534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f8f1 	bl	800655c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b04      	cmp	r3, #4
 800638c:	d122      	bne.n	80063d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b04      	cmp	r3, #4
 800639a:	d11b      	bne.n	80063d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0204 	mvn.w	r2, #4
 80063a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f8c4 	bl	8006548 <HAL_TIM_IC_CaptureCallback>
 80063c0:	e005      	b.n	80063ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f8b6 	bl	8006534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f8c7 	bl	800655c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d122      	bne.n	8006428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d11b      	bne.n	8006428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0208 	mvn.w	r2, #8
 80063f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2204      	movs	r2, #4
 80063fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f89a 	bl	8006548 <HAL_TIM_IC_CaptureCallback>
 8006414:	e005      	b.n	8006422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f88c 	bl	8006534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f89d 	bl	800655c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b10      	cmp	r3, #16
 8006434:	d122      	bne.n	800647c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	2b10      	cmp	r3, #16
 8006442:	d11b      	bne.n	800647c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0210 	mvn.w	r2, #16
 800644c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2208      	movs	r2, #8
 8006452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f870 	bl	8006548 <HAL_TIM_IC_CaptureCallback>
 8006468:	e005      	b.n	8006476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f862 	bl	8006534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f873 	bl	800655c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b01      	cmp	r3, #1
 8006488:	d10e      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b01      	cmp	r3, #1
 8006496:	d107      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0201 	mvn.w	r2, #1
 80064a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fd fc50 	bl	8003d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	2b80      	cmp	r3, #128	; 0x80
 80064b4:	d10e      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c0:	2b80      	cmp	r3, #128	; 0x80
 80064c2:	d107      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f902 	bl	80066d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	d10e      	bne.n	8006500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ec:	2b40      	cmp	r3, #64	; 0x40
 80064ee:	d107      	bne.n	8006500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f838 	bl	8006570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b20      	cmp	r3, #32
 800650c:	d10e      	bne.n	800652c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f003 0320 	and.w	r3, r3, #32
 8006518:	2b20      	cmp	r3, #32
 800651a:	d107      	bne.n	800652c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f06f 0220 	mvn.w	r2, #32
 8006524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f8cc 	bl	80066c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800652c:	bf00      	nop
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a40      	ldr	r2, [pc, #256]	; (8006698 <TIM_Base_SetConfig+0x114>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d013      	beq.n	80065c4 <TIM_Base_SetConfig+0x40>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a2:	d00f      	beq.n	80065c4 <TIM_Base_SetConfig+0x40>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a3d      	ldr	r2, [pc, #244]	; (800669c <TIM_Base_SetConfig+0x118>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00b      	beq.n	80065c4 <TIM_Base_SetConfig+0x40>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a3c      	ldr	r2, [pc, #240]	; (80066a0 <TIM_Base_SetConfig+0x11c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d007      	beq.n	80065c4 <TIM_Base_SetConfig+0x40>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a3b      	ldr	r2, [pc, #236]	; (80066a4 <TIM_Base_SetConfig+0x120>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_Base_SetConfig+0x40>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a3a      	ldr	r2, [pc, #232]	; (80066a8 <TIM_Base_SetConfig+0x124>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d108      	bne.n	80065d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a2f      	ldr	r2, [pc, #188]	; (8006698 <TIM_Base_SetConfig+0x114>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d02b      	beq.n	8006636 <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e4:	d027      	beq.n	8006636 <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a2c      	ldr	r2, [pc, #176]	; (800669c <TIM_Base_SetConfig+0x118>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d023      	beq.n	8006636 <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a2b      	ldr	r2, [pc, #172]	; (80066a0 <TIM_Base_SetConfig+0x11c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d01f      	beq.n	8006636 <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a2a      	ldr	r2, [pc, #168]	; (80066a4 <TIM_Base_SetConfig+0x120>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d01b      	beq.n	8006636 <TIM_Base_SetConfig+0xb2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a29      	ldr	r2, [pc, #164]	; (80066a8 <TIM_Base_SetConfig+0x124>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d017      	beq.n	8006636 <TIM_Base_SetConfig+0xb2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a28      	ldr	r2, [pc, #160]	; (80066ac <TIM_Base_SetConfig+0x128>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <TIM_Base_SetConfig+0xb2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a27      	ldr	r2, [pc, #156]	; (80066b0 <TIM_Base_SetConfig+0x12c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00f      	beq.n	8006636 <TIM_Base_SetConfig+0xb2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a26      	ldr	r2, [pc, #152]	; (80066b4 <TIM_Base_SetConfig+0x130>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00b      	beq.n	8006636 <TIM_Base_SetConfig+0xb2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a25      	ldr	r2, [pc, #148]	; (80066b8 <TIM_Base_SetConfig+0x134>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d007      	beq.n	8006636 <TIM_Base_SetConfig+0xb2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a24      	ldr	r2, [pc, #144]	; (80066bc <TIM_Base_SetConfig+0x138>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d003      	beq.n	8006636 <TIM_Base_SetConfig+0xb2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a23      	ldr	r2, [pc, #140]	; (80066c0 <TIM_Base_SetConfig+0x13c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d108      	bne.n	8006648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800663c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a0a      	ldr	r2, [pc, #40]	; (8006698 <TIM_Base_SetConfig+0x114>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_Base_SetConfig+0xf8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a0c      	ldr	r2, [pc, #48]	; (80066a8 <TIM_Base_SetConfig+0x124>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d103      	bne.n	8006684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	615a      	str	r2, [r3, #20]
}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40010000 	.word	0x40010000
 800669c:	40000400 	.word	0x40000400
 80066a0:	40000800 	.word	0x40000800
 80066a4:	40000c00 	.word	0x40000c00
 80066a8:	40010400 	.word	0x40010400
 80066ac:	40014000 	.word	0x40014000
 80066b0:	40014400 	.word	0x40014400
 80066b4:	40014800 	.word	0x40014800
 80066b8:	40001800 	.word	0x40001800
 80066bc:	40001c00 	.word	0x40001c00
 80066c0:	40002000 	.word	0x40002000

080066c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e03f      	b.n	800677e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7fd fc34 	bl	8003f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2224      	movs	r2, #36	; 0x24
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800672e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fc7b 	bl	800702c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	691a      	ldr	r2, [r3, #16]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695a      	ldr	r2, [r3, #20]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b08a      	sub	sp, #40	; 0x28
 800678a:	af02      	add	r7, sp, #8
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	603b      	str	r3, [r7, #0]
 8006792:	4613      	mov	r3, r2
 8006794:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d17c      	bne.n	80068a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <HAL_UART_Transmit+0x2c>
 80067ac:	88fb      	ldrh	r3, [r7, #6]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e075      	b.n	80068a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_UART_Transmit+0x3e>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e06e      	b.n	80068a2 <HAL_UART_Transmit+0x11c>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2221      	movs	r2, #33	; 0x21
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067da:	f7fe f8e9 	bl	80049b0 <HAL_GetTick>
 80067de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	88fa      	ldrh	r2, [r7, #6]
 80067e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	88fa      	ldrh	r2, [r7, #6]
 80067ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f4:	d108      	bne.n	8006808 <HAL_UART_Transmit+0x82>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d104      	bne.n	8006808 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	61bb      	str	r3, [r7, #24]
 8006806:	e003      	b.n	8006810 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800680c:	2300      	movs	r3, #0
 800680e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006818:	e02a      	b.n	8006870 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2200      	movs	r2, #0
 8006822:	2180      	movs	r1, #128	; 0x80
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 fa3d 	bl	8006ca4 <UART_WaitOnFlagUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e036      	b.n	80068a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10b      	bne.n	8006852 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	3302      	adds	r3, #2
 800684e:	61bb      	str	r3, [r7, #24]
 8006850:	e007      	b.n	8006862 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	781a      	ldrb	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	3301      	adds	r3, #1
 8006860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1cf      	bne.n	800681a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2200      	movs	r2, #0
 8006882:	2140      	movs	r1, #64	; 0x40
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 fa0d 	bl	8006ca4 <UART_WaitOnFlagUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e006      	b.n	80068a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2220      	movs	r2, #32
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	e000      	b.n	80068a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80068a0:	2302      	movs	r3, #2
  }
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3720      	adds	r7, #32
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	4613      	mov	r3, r2
 80068b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d11d      	bne.n	8006900 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <HAL_UART_Receive_IT+0x26>
 80068ca:	88fb      	ldrh	r3, [r7, #6]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e016      	b.n	8006902 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_UART_Receive_IT+0x38>
 80068de:	2302      	movs	r3, #2
 80068e0:	e00f      	b.n	8006902 <HAL_UART_Receive_IT+0x58>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80068f0:	88fb      	ldrh	r3, [r7, #6]
 80068f2:	461a      	mov	r2, r3
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 fa1e 	bl	8006d38 <UART_Start_Receive_IT>
 80068fc:	4603      	mov	r3, r0
 80068fe:	e000      	b.n	8006902 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006900:	2302      	movs	r3, #2
  }
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08a      	sub	sp, #40	; 0x28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800692c:	2300      	movs	r3, #0
 800692e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006930:	2300      	movs	r3, #0
 8006932:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	f003 030f 	and.w	r3, r3, #15
 800693a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10d      	bne.n	800695e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b00      	cmp	r3, #0
 800694a:	d008      	beq.n	800695e <HAL_UART_IRQHandler+0x52>
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fad1 	bl	8006efe <UART_Receive_IT>
      return;
 800695c:	e17c      	b.n	8006c58 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 80b1 	beq.w	8006ac8 <HAL_UART_IRQHandler+0x1bc>
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d105      	bne.n	800697c <HAL_UART_IRQHandler+0x70>
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80a6 	beq.w	8006ac8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <HAL_UART_IRQHandler+0x90>
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698c:	2b00      	cmp	r3, #0
 800698e:	d005      	beq.n	800699c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	f043 0201 	orr.w	r2, r3, #1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <HAL_UART_IRQHandler+0xb0>
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b4:	f043 0202 	orr.w	r2, r3, #2
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <HAL_UART_IRQHandler+0xd0>
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	f043 0204 	orr.w	r2, r3, #4
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00f      	beq.n	8006a06 <HAL_UART_IRQHandler+0xfa>
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d104      	bne.n	80069fa <HAL_UART_IRQHandler+0xee>
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	f043 0208 	orr.w	r2, r3, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 811f 	beq.w	8006c4e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d007      	beq.n	8006a2a <HAL_UART_IRQHandler+0x11e>
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fa6a 	bl	8006efe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a34:	2b40      	cmp	r3, #64	; 0x40
 8006a36:	bf0c      	ite	eq
 8006a38:	2301      	moveq	r3, #1
 8006a3a:	2300      	movne	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <HAL_UART_IRQHandler+0x146>
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d031      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f9aa 	bl	8006dac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a62:	2b40      	cmp	r3, #64	; 0x40
 8006a64:	d123      	bne.n	8006aae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	695a      	ldr	r2, [r3, #20]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d013      	beq.n	8006aa6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	4a77      	ldr	r2, [pc, #476]	; (8006c60 <HAL_UART_IRQHandler+0x354>)
 8006a84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe f8ee 	bl	8004c6c <HAL_DMA_Abort_IT>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d016      	beq.n	8006ac4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	e00e      	b.n	8006ac4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f8e6 	bl	8006c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aac:	e00a      	b.n	8006ac4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f8e2 	bl	8006c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab4:	e006      	b.n	8006ac4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f8de 	bl	8006c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ac2:	e0c4      	b.n	8006c4e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac4:	bf00      	nop
    return;
 8006ac6:	e0c2      	b.n	8006c4e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	f040 80a2 	bne.w	8006c16 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	f003 0310 	and.w	r3, r3, #16
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 809c 	beq.w	8006c16 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8096 	beq.w	8006c16 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0a:	2b40      	cmp	r3, #64	; 0x40
 8006b0c:	d14f      	bne.n	8006bae <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006b18:	8a3b      	ldrh	r3, [r7, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 8099 	beq.w	8006c52 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b24:	8a3a      	ldrh	r2, [r7, #16]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	f080 8093 	bcs.w	8006c52 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	8a3a      	ldrh	r2, [r7, #16]
 8006b30:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b3c:	d02b      	beq.n	8006b96 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b4c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695a      	ldr	r2, [r3, #20]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0201 	bic.w	r2, r2, #1
 8006b5c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695a      	ldr	r2, [r3, #20]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b6c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0210 	bic.w	r2, r2, #16
 8006b8a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fd fffb 	bl	8004b8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f870 	bl	8006c8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006bac:	e051      	b.n	8006c52 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d047      	beq.n	8006c56 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006bc6:	8a7b      	ldrh	r3, [r7, #18]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d044      	beq.n	8006c56 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bda:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	695a      	ldr	r2, [r3, #20]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0201 	bic.w	r2, r2, #1
 8006bea:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68da      	ldr	r2, [r3, #12]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 0210 	bic.w	r2, r2, #16
 8006c08:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c0a:	8a7b      	ldrh	r3, [r7, #18]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f83c 	bl	8006c8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006c14:	e01f      	b.n	8006c56 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <HAL_UART_IRQHandler+0x326>
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f8ff 	bl	8006e2e <UART_Transmit_IT>
    return;
 8006c30:	e012      	b.n	8006c58 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00d      	beq.n	8006c58 <HAL_UART_IRQHandler+0x34c>
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d008      	beq.n	8006c58 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f941 	bl	8006ece <UART_EndTransmit_IT>
    return;
 8006c4c:	e004      	b.n	8006c58 <HAL_UART_IRQHandler+0x34c>
    return;
 8006c4e:	bf00      	nop
 8006c50:	e002      	b.n	8006c58 <HAL_UART_IRQHandler+0x34c>
      return;
 8006c52:	bf00      	nop
 8006c54:	e000      	b.n	8006c58 <HAL_UART_IRQHandler+0x34c>
      return;
 8006c56:	bf00      	nop
  }
}
 8006c58:	3728      	adds	r7, #40	; 0x28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	08006e07 	.word	0x08006e07

08006c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	603b      	str	r3, [r7, #0]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb4:	e02c      	b.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cbc:	d028      	beq.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cc4:	f7fd fe74 	bl	80049b0 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d21d      	bcs.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ce2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	695a      	ldr	r2, [r3, #20]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0201 	bic.w	r2, r2, #1
 8006cf2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e00f      	b.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	bf0c      	ite	eq
 8006d20:	2301      	moveq	r3, #1
 8006d22:	2300      	movne	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d0c3      	beq.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	88fa      	ldrh	r2, [r7, #6]
 8006d50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	88fa      	ldrh	r2, [r7, #6]
 8006d56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2222      	movs	r2, #34	; 0x22
 8006d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d7c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695a      	ldr	r2, [r3, #20]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 0201 	orr.w	r2, r2, #1
 8006d8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f042 0220 	orr.w	r2, r2, #32
 8006d9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006dc2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695a      	ldr	r2, [r3, #20]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0201 	bic.w	r2, r2, #1
 8006dd2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d107      	bne.n	8006dec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0210 	bic.w	r2, r2, #16
 8006dea:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff ff29 	bl	8006c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e26:	bf00      	nop
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b085      	sub	sp, #20
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b21      	cmp	r3, #33	; 0x21
 8006e40:	d13e      	bne.n	8006ec0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e4a:	d114      	bne.n	8006e76 <UART_Transmit_IT+0x48>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d110      	bne.n	8006e76 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	1c9a      	adds	r2, r3, #2
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	621a      	str	r2, [r3, #32]
 8006e74:	e008      	b.n	8006e88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	1c59      	adds	r1, r3, #1
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6211      	str	r1, [r2, #32]
 8006e80:	781a      	ldrb	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	4619      	mov	r1, r3
 8006e96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10f      	bne.n	8006ebc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68da      	ldr	r2, [r3, #12]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006eaa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68da      	ldr	r2, [r3, #12]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	e000      	b.n	8006ec2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ec0:	2302      	movs	r3, #2
  }
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff feb8 	bl	8006c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b22      	cmp	r3, #34	; 0x22
 8006f10:	f040 8087 	bne.w	8007022 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1c:	d117      	bne.n	8006f4e <UART_Receive_IT+0x50>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d113      	bne.n	8006f4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f46:	1c9a      	adds	r2, r3, #2
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	629a      	str	r2, [r3, #40]	; 0x28
 8006f4c:	e026      	b.n	8006f9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f52:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006f54:	2300      	movs	r3, #0
 8006f56:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f60:	d007      	beq.n	8006f72 <UART_Receive_IT+0x74>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10a      	bne.n	8006f80 <UART_Receive_IT+0x82>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	e008      	b.n	8006f92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d136      	bne.n	800701e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68da      	ldr	r2, [r3, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0220 	bic.w	r2, r2, #32
 8006fbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	695a      	ldr	r2, [r3, #20]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0201 	bic.w	r2, r2, #1
 8006fde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d10e      	bne.n	800700e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0210 	bic.w	r2, r2, #16
 8006ffe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff fe40 	bl	8006c8c <HAL_UARTEx_RxEventCallback>
 800700c:	e002      	b.n	8007014 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7fc fe50 	bl	8003cb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	e002      	b.n	8007024 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	e000      	b.n	8007024 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007022:	2302      	movs	r3, #2
  }
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800702c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007030:	b09f      	sub	sp, #124	; 0x7c
 8007032:	af00      	add	r7, sp, #0
 8007034:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007042:	68d9      	ldr	r1, [r3, #12]
 8007044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	ea40 0301 	orr.w	r3, r0, r1
 800704c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800704e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	431a      	orrs	r2, r3
 8007058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	431a      	orrs	r2, r3
 800705e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	4313      	orrs	r3, r2
 8007064:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007070:	f021 010c 	bic.w	r1, r1, #12
 8007074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800707a:	430b      	orrs	r3, r1
 800707c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800707e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800708a:	6999      	ldr	r1, [r3, #24]
 800708c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	ea40 0301 	orr.w	r3, r0, r1
 8007094:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4bc5      	ldr	r3, [pc, #788]	; (80073b0 <UART_SetConfig+0x384>)
 800709c:	429a      	cmp	r2, r3
 800709e:	d004      	beq.n	80070aa <UART_SetConfig+0x7e>
 80070a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	4bc3      	ldr	r3, [pc, #780]	; (80073b4 <UART_SetConfig+0x388>)
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d103      	bne.n	80070b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070aa:	f7fe fc17 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 80070ae:	6778      	str	r0, [r7, #116]	; 0x74
 80070b0:	e002      	b.n	80070b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070b2:	f7fe fbff 	bl	80058b4 <HAL_RCC_GetPCLK1Freq>
 80070b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070c0:	f040 80b6 	bne.w	8007230 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070c6:	461c      	mov	r4, r3
 80070c8:	f04f 0500 	mov.w	r5, #0
 80070cc:	4622      	mov	r2, r4
 80070ce:	462b      	mov	r3, r5
 80070d0:	1891      	adds	r1, r2, r2
 80070d2:	6439      	str	r1, [r7, #64]	; 0x40
 80070d4:	415b      	adcs	r3, r3
 80070d6:	647b      	str	r3, [r7, #68]	; 0x44
 80070d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070dc:	1912      	adds	r2, r2, r4
 80070de:	eb45 0303 	adc.w	r3, r5, r3
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f04f 0100 	mov.w	r1, #0
 80070ea:	00d9      	lsls	r1, r3, #3
 80070ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070f0:	00d0      	lsls	r0, r2, #3
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	1911      	adds	r1, r2, r4
 80070f8:	6639      	str	r1, [r7, #96]	; 0x60
 80070fa:	416b      	adcs	r3, r5
 80070fc:	667b      	str	r3, [r7, #100]	; 0x64
 80070fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	461a      	mov	r2, r3
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	1891      	adds	r1, r2, r2
 800710a:	63b9      	str	r1, [r7, #56]	; 0x38
 800710c:	415b      	adcs	r3, r3
 800710e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007114:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007118:	f7f9 f8c2 	bl	80002a0 <__aeabi_uldivmod>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4ba5      	ldr	r3, [pc, #660]	; (80073b8 <UART_SetConfig+0x38c>)
 8007122:	fba3 2302 	umull	r2, r3, r3, r2
 8007126:	095b      	lsrs	r3, r3, #5
 8007128:	011e      	lsls	r6, r3, #4
 800712a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800712c:	461c      	mov	r4, r3
 800712e:	f04f 0500 	mov.w	r5, #0
 8007132:	4622      	mov	r2, r4
 8007134:	462b      	mov	r3, r5
 8007136:	1891      	adds	r1, r2, r2
 8007138:	6339      	str	r1, [r7, #48]	; 0x30
 800713a:	415b      	adcs	r3, r3
 800713c:	637b      	str	r3, [r7, #52]	; 0x34
 800713e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007142:	1912      	adds	r2, r2, r4
 8007144:	eb45 0303 	adc.w	r3, r5, r3
 8007148:	f04f 0000 	mov.w	r0, #0
 800714c:	f04f 0100 	mov.w	r1, #0
 8007150:	00d9      	lsls	r1, r3, #3
 8007152:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007156:	00d0      	lsls	r0, r2, #3
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	1911      	adds	r1, r2, r4
 800715e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007160:	416b      	adcs	r3, r5
 8007162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	461a      	mov	r2, r3
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	1891      	adds	r1, r2, r2
 8007170:	62b9      	str	r1, [r7, #40]	; 0x28
 8007172:	415b      	adcs	r3, r3
 8007174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800717a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800717e:	f7f9 f88f 	bl	80002a0 <__aeabi_uldivmod>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4b8c      	ldr	r3, [pc, #560]	; (80073b8 <UART_SetConfig+0x38c>)
 8007188:	fba3 1302 	umull	r1, r3, r3, r2
 800718c:	095b      	lsrs	r3, r3, #5
 800718e:	2164      	movs	r1, #100	; 0x64
 8007190:	fb01 f303 	mul.w	r3, r1, r3
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	3332      	adds	r3, #50	; 0x32
 800719a:	4a87      	ldr	r2, [pc, #540]	; (80073b8 <UART_SetConfig+0x38c>)
 800719c:	fba2 2303 	umull	r2, r3, r2, r3
 80071a0:	095b      	lsrs	r3, r3, #5
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071a8:	441e      	add	r6, r3
 80071aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ac:	4618      	mov	r0, r3
 80071ae:	f04f 0100 	mov.w	r1, #0
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	1894      	adds	r4, r2, r2
 80071b8:	623c      	str	r4, [r7, #32]
 80071ba:	415b      	adcs	r3, r3
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
 80071be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071c2:	1812      	adds	r2, r2, r0
 80071c4:	eb41 0303 	adc.w	r3, r1, r3
 80071c8:	f04f 0400 	mov.w	r4, #0
 80071cc:	f04f 0500 	mov.w	r5, #0
 80071d0:	00dd      	lsls	r5, r3, #3
 80071d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071d6:	00d4      	lsls	r4, r2, #3
 80071d8:	4622      	mov	r2, r4
 80071da:	462b      	mov	r3, r5
 80071dc:	1814      	adds	r4, r2, r0
 80071de:	653c      	str	r4, [r7, #80]	; 0x50
 80071e0:	414b      	adcs	r3, r1
 80071e2:	657b      	str	r3, [r7, #84]	; 0x54
 80071e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	461a      	mov	r2, r3
 80071ea:	f04f 0300 	mov.w	r3, #0
 80071ee:	1891      	adds	r1, r2, r2
 80071f0:	61b9      	str	r1, [r7, #24]
 80071f2:	415b      	adcs	r3, r3
 80071f4:	61fb      	str	r3, [r7, #28]
 80071f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80071fe:	f7f9 f84f 	bl	80002a0 <__aeabi_uldivmod>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4b6c      	ldr	r3, [pc, #432]	; (80073b8 <UART_SetConfig+0x38c>)
 8007208:	fba3 1302 	umull	r1, r3, r3, r2
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	2164      	movs	r1, #100	; 0x64
 8007210:	fb01 f303 	mul.w	r3, r1, r3
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	3332      	adds	r3, #50	; 0x32
 800721a:	4a67      	ldr	r2, [pc, #412]	; (80073b8 <UART_SetConfig+0x38c>)
 800721c:	fba2 2303 	umull	r2, r3, r2, r3
 8007220:	095b      	lsrs	r3, r3, #5
 8007222:	f003 0207 	and.w	r2, r3, #7
 8007226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4432      	add	r2, r6
 800722c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800722e:	e0b9      	b.n	80073a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007232:	461c      	mov	r4, r3
 8007234:	f04f 0500 	mov.w	r5, #0
 8007238:	4622      	mov	r2, r4
 800723a:	462b      	mov	r3, r5
 800723c:	1891      	adds	r1, r2, r2
 800723e:	6139      	str	r1, [r7, #16]
 8007240:	415b      	adcs	r3, r3
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007248:	1912      	adds	r2, r2, r4
 800724a:	eb45 0303 	adc.w	r3, r5, r3
 800724e:	f04f 0000 	mov.w	r0, #0
 8007252:	f04f 0100 	mov.w	r1, #0
 8007256:	00d9      	lsls	r1, r3, #3
 8007258:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800725c:	00d0      	lsls	r0, r2, #3
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	eb12 0804 	adds.w	r8, r2, r4
 8007266:	eb43 0905 	adc.w	r9, r3, r5
 800726a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	4618      	mov	r0, r3
 8007270:	f04f 0100 	mov.w	r1, #0
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	f04f 0300 	mov.w	r3, #0
 800727c:	008b      	lsls	r3, r1, #2
 800727e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007282:	0082      	lsls	r2, r0, #2
 8007284:	4640      	mov	r0, r8
 8007286:	4649      	mov	r1, r9
 8007288:	f7f9 f80a 	bl	80002a0 <__aeabi_uldivmod>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4b49      	ldr	r3, [pc, #292]	; (80073b8 <UART_SetConfig+0x38c>)
 8007292:	fba3 2302 	umull	r2, r3, r3, r2
 8007296:	095b      	lsrs	r3, r3, #5
 8007298:	011e      	lsls	r6, r3, #4
 800729a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800729c:	4618      	mov	r0, r3
 800729e:	f04f 0100 	mov.w	r1, #0
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	1894      	adds	r4, r2, r2
 80072a8:	60bc      	str	r4, [r7, #8]
 80072aa:	415b      	adcs	r3, r3
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072b2:	1812      	adds	r2, r2, r0
 80072b4:	eb41 0303 	adc.w	r3, r1, r3
 80072b8:	f04f 0400 	mov.w	r4, #0
 80072bc:	f04f 0500 	mov.w	r5, #0
 80072c0:	00dd      	lsls	r5, r3, #3
 80072c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072c6:	00d4      	lsls	r4, r2, #3
 80072c8:	4622      	mov	r2, r4
 80072ca:	462b      	mov	r3, r5
 80072cc:	1814      	adds	r4, r2, r0
 80072ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80072d0:	414b      	adcs	r3, r1
 80072d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	4618      	mov	r0, r3
 80072da:	f04f 0100 	mov.w	r1, #0
 80072de:	f04f 0200 	mov.w	r2, #0
 80072e2:	f04f 0300 	mov.w	r3, #0
 80072e6:	008b      	lsls	r3, r1, #2
 80072e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072ec:	0082      	lsls	r2, r0, #2
 80072ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80072f2:	f7f8 ffd5 	bl	80002a0 <__aeabi_uldivmod>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4b2f      	ldr	r3, [pc, #188]	; (80073b8 <UART_SetConfig+0x38c>)
 80072fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007300:	095b      	lsrs	r3, r3, #5
 8007302:	2164      	movs	r1, #100	; 0x64
 8007304:	fb01 f303 	mul.w	r3, r1, r3
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	011b      	lsls	r3, r3, #4
 800730c:	3332      	adds	r3, #50	; 0x32
 800730e:	4a2a      	ldr	r2, [pc, #168]	; (80073b8 <UART_SetConfig+0x38c>)
 8007310:	fba2 2303 	umull	r2, r3, r2, r3
 8007314:	095b      	lsrs	r3, r3, #5
 8007316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800731a:	441e      	add	r6, r3
 800731c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800731e:	4618      	mov	r0, r3
 8007320:	f04f 0100 	mov.w	r1, #0
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	1894      	adds	r4, r2, r2
 800732a:	603c      	str	r4, [r7, #0]
 800732c:	415b      	adcs	r3, r3
 800732e:	607b      	str	r3, [r7, #4]
 8007330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007334:	1812      	adds	r2, r2, r0
 8007336:	eb41 0303 	adc.w	r3, r1, r3
 800733a:	f04f 0400 	mov.w	r4, #0
 800733e:	f04f 0500 	mov.w	r5, #0
 8007342:	00dd      	lsls	r5, r3, #3
 8007344:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007348:	00d4      	lsls	r4, r2, #3
 800734a:	4622      	mov	r2, r4
 800734c:	462b      	mov	r3, r5
 800734e:	eb12 0a00 	adds.w	sl, r2, r0
 8007352:	eb43 0b01 	adc.w	fp, r3, r1
 8007356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	4618      	mov	r0, r3
 800735c:	f04f 0100 	mov.w	r1, #0
 8007360:	f04f 0200 	mov.w	r2, #0
 8007364:	f04f 0300 	mov.w	r3, #0
 8007368:	008b      	lsls	r3, r1, #2
 800736a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800736e:	0082      	lsls	r2, r0, #2
 8007370:	4650      	mov	r0, sl
 8007372:	4659      	mov	r1, fp
 8007374:	f7f8 ff94 	bl	80002a0 <__aeabi_uldivmod>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	4b0e      	ldr	r3, [pc, #56]	; (80073b8 <UART_SetConfig+0x38c>)
 800737e:	fba3 1302 	umull	r1, r3, r3, r2
 8007382:	095b      	lsrs	r3, r3, #5
 8007384:	2164      	movs	r1, #100	; 0x64
 8007386:	fb01 f303 	mul.w	r3, r1, r3
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	3332      	adds	r3, #50	; 0x32
 8007390:	4a09      	ldr	r2, [pc, #36]	; (80073b8 <UART_SetConfig+0x38c>)
 8007392:	fba2 2303 	umull	r2, r3, r2, r3
 8007396:	095b      	lsrs	r3, r3, #5
 8007398:	f003 020f 	and.w	r2, r3, #15
 800739c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4432      	add	r2, r6
 80073a2:	609a      	str	r2, [r3, #8]
}
 80073a4:	bf00      	nop
 80073a6:	377c      	adds	r7, #124	; 0x7c
 80073a8:	46bd      	mov	sp, r7
 80073aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ae:	bf00      	nop
 80073b0:	40011000 	.word	0x40011000
 80073b4:	40011400 	.word	0x40011400
 80073b8:	51eb851f 	.word	0x51eb851f

080073bc <__libc_init_array>:
 80073bc:	b570      	push	{r4, r5, r6, lr}
 80073be:	4d0d      	ldr	r5, [pc, #52]	; (80073f4 <__libc_init_array+0x38>)
 80073c0:	4c0d      	ldr	r4, [pc, #52]	; (80073f8 <__libc_init_array+0x3c>)
 80073c2:	1b64      	subs	r4, r4, r5
 80073c4:	10a4      	asrs	r4, r4, #2
 80073c6:	2600      	movs	r6, #0
 80073c8:	42a6      	cmp	r6, r4
 80073ca:	d109      	bne.n	80073e0 <__libc_init_array+0x24>
 80073cc:	4d0b      	ldr	r5, [pc, #44]	; (80073fc <__libc_init_array+0x40>)
 80073ce:	4c0c      	ldr	r4, [pc, #48]	; (8007400 <__libc_init_array+0x44>)
 80073d0:	f000 fc5c 	bl	8007c8c <_init>
 80073d4:	1b64      	subs	r4, r4, r5
 80073d6:	10a4      	asrs	r4, r4, #2
 80073d8:	2600      	movs	r6, #0
 80073da:	42a6      	cmp	r6, r4
 80073dc:	d105      	bne.n	80073ea <__libc_init_array+0x2e>
 80073de:	bd70      	pop	{r4, r5, r6, pc}
 80073e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e4:	4798      	blx	r3
 80073e6:	3601      	adds	r6, #1
 80073e8:	e7ee      	b.n	80073c8 <__libc_init_array+0xc>
 80073ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ee:	4798      	blx	r3
 80073f0:	3601      	adds	r6, #1
 80073f2:	e7f2      	b.n	80073da <__libc_init_array+0x1e>
 80073f4:	08008110 	.word	0x08008110
 80073f8:	08008110 	.word	0x08008110
 80073fc:	08008110 	.word	0x08008110
 8007400:	08008114 	.word	0x08008114

08007404 <memcpy>:
 8007404:	440a      	add	r2, r1
 8007406:	4291      	cmp	r1, r2
 8007408:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800740c:	d100      	bne.n	8007410 <memcpy+0xc>
 800740e:	4770      	bx	lr
 8007410:	b510      	push	{r4, lr}
 8007412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800741a:	4291      	cmp	r1, r2
 800741c:	d1f9      	bne.n	8007412 <memcpy+0xe>
 800741e:	bd10      	pop	{r4, pc}

08007420 <memset>:
 8007420:	4402      	add	r2, r0
 8007422:	4603      	mov	r3, r0
 8007424:	4293      	cmp	r3, r2
 8007426:	d100      	bne.n	800742a <memset+0xa>
 8007428:	4770      	bx	lr
 800742a:	f803 1b01 	strb.w	r1, [r3], #1
 800742e:	e7f9      	b.n	8007424 <memset+0x4>

08007430 <siprintf>:
 8007430:	b40e      	push	{r1, r2, r3}
 8007432:	b500      	push	{lr}
 8007434:	b09c      	sub	sp, #112	; 0x70
 8007436:	ab1d      	add	r3, sp, #116	; 0x74
 8007438:	9002      	str	r0, [sp, #8]
 800743a:	9006      	str	r0, [sp, #24]
 800743c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007440:	4809      	ldr	r0, [pc, #36]	; (8007468 <siprintf+0x38>)
 8007442:	9107      	str	r1, [sp, #28]
 8007444:	9104      	str	r1, [sp, #16]
 8007446:	4909      	ldr	r1, [pc, #36]	; (800746c <siprintf+0x3c>)
 8007448:	f853 2b04 	ldr.w	r2, [r3], #4
 800744c:	9105      	str	r1, [sp, #20]
 800744e:	6800      	ldr	r0, [r0, #0]
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	a902      	add	r1, sp, #8
 8007454:	f000 f8c4 	bl	80075e0 <_svfiprintf_r>
 8007458:	9b02      	ldr	r3, [sp, #8]
 800745a:	2200      	movs	r2, #0
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	b01c      	add	sp, #112	; 0x70
 8007460:	f85d eb04 	ldr.w	lr, [sp], #4
 8007464:	b003      	add	sp, #12
 8007466:	4770      	bx	lr
 8007468:	20000028 	.word	0x20000028
 800746c:	ffff0208 	.word	0xffff0208

08007470 <__retarget_lock_acquire_recursive>:
 8007470:	4770      	bx	lr

08007472 <__retarget_lock_release_recursive>:
 8007472:	4770      	bx	lr

08007474 <_malloc_r>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	1ccd      	adds	r5, r1, #3
 8007478:	f025 0503 	bic.w	r5, r5, #3
 800747c:	3508      	adds	r5, #8
 800747e:	2d0c      	cmp	r5, #12
 8007480:	bf38      	it	cc
 8007482:	250c      	movcc	r5, #12
 8007484:	2d00      	cmp	r5, #0
 8007486:	4606      	mov	r6, r0
 8007488:	db01      	blt.n	800748e <_malloc_r+0x1a>
 800748a:	42a9      	cmp	r1, r5
 800748c:	d903      	bls.n	8007496 <_malloc_r+0x22>
 800748e:	230c      	movs	r3, #12
 8007490:	6033      	str	r3, [r6, #0]
 8007492:	2000      	movs	r0, #0
 8007494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007496:	f000 fb61 	bl	8007b5c <__malloc_lock>
 800749a:	4921      	ldr	r1, [pc, #132]	; (8007520 <_malloc_r+0xac>)
 800749c:	680a      	ldr	r2, [r1, #0]
 800749e:	4614      	mov	r4, r2
 80074a0:	b99c      	cbnz	r4, 80074ca <_malloc_r+0x56>
 80074a2:	4f20      	ldr	r7, [pc, #128]	; (8007524 <_malloc_r+0xb0>)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	b923      	cbnz	r3, 80074b2 <_malloc_r+0x3e>
 80074a8:	4621      	mov	r1, r4
 80074aa:	4630      	mov	r0, r6
 80074ac:	f000 fb2c 	bl	8007b08 <_sbrk_r>
 80074b0:	6038      	str	r0, [r7, #0]
 80074b2:	4629      	mov	r1, r5
 80074b4:	4630      	mov	r0, r6
 80074b6:	f000 fb27 	bl	8007b08 <_sbrk_r>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	d123      	bne.n	8007506 <_malloc_r+0x92>
 80074be:	230c      	movs	r3, #12
 80074c0:	6033      	str	r3, [r6, #0]
 80074c2:	4630      	mov	r0, r6
 80074c4:	f000 fb50 	bl	8007b68 <__malloc_unlock>
 80074c8:	e7e3      	b.n	8007492 <_malloc_r+0x1e>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	1b5b      	subs	r3, r3, r5
 80074ce:	d417      	bmi.n	8007500 <_malloc_r+0x8c>
 80074d0:	2b0b      	cmp	r3, #11
 80074d2:	d903      	bls.n	80074dc <_malloc_r+0x68>
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	441c      	add	r4, r3
 80074d8:	6025      	str	r5, [r4, #0]
 80074da:	e004      	b.n	80074e6 <_malloc_r+0x72>
 80074dc:	6863      	ldr	r3, [r4, #4]
 80074de:	42a2      	cmp	r2, r4
 80074e0:	bf0c      	ite	eq
 80074e2:	600b      	streq	r3, [r1, #0]
 80074e4:	6053      	strne	r3, [r2, #4]
 80074e6:	4630      	mov	r0, r6
 80074e8:	f000 fb3e 	bl	8007b68 <__malloc_unlock>
 80074ec:	f104 000b 	add.w	r0, r4, #11
 80074f0:	1d23      	adds	r3, r4, #4
 80074f2:	f020 0007 	bic.w	r0, r0, #7
 80074f6:	1ac2      	subs	r2, r0, r3
 80074f8:	d0cc      	beq.n	8007494 <_malloc_r+0x20>
 80074fa:	1a1b      	subs	r3, r3, r0
 80074fc:	50a3      	str	r3, [r4, r2]
 80074fe:	e7c9      	b.n	8007494 <_malloc_r+0x20>
 8007500:	4622      	mov	r2, r4
 8007502:	6864      	ldr	r4, [r4, #4]
 8007504:	e7cc      	b.n	80074a0 <_malloc_r+0x2c>
 8007506:	1cc4      	adds	r4, r0, #3
 8007508:	f024 0403 	bic.w	r4, r4, #3
 800750c:	42a0      	cmp	r0, r4
 800750e:	d0e3      	beq.n	80074d8 <_malloc_r+0x64>
 8007510:	1a21      	subs	r1, r4, r0
 8007512:	4630      	mov	r0, r6
 8007514:	f000 faf8 	bl	8007b08 <_sbrk_r>
 8007518:	3001      	adds	r0, #1
 800751a:	d1dd      	bne.n	80074d8 <_malloc_r+0x64>
 800751c:	e7cf      	b.n	80074be <_malloc_r+0x4a>
 800751e:	bf00      	nop
 8007520:	20019270 	.word	0x20019270
 8007524:	20019274 	.word	0x20019274

08007528 <__ssputs_r>:
 8007528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	688e      	ldr	r6, [r1, #8]
 800752e:	429e      	cmp	r6, r3
 8007530:	4682      	mov	sl, r0
 8007532:	460c      	mov	r4, r1
 8007534:	4690      	mov	r8, r2
 8007536:	461f      	mov	r7, r3
 8007538:	d838      	bhi.n	80075ac <__ssputs_r+0x84>
 800753a:	898a      	ldrh	r2, [r1, #12]
 800753c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007540:	d032      	beq.n	80075a8 <__ssputs_r+0x80>
 8007542:	6825      	ldr	r5, [r4, #0]
 8007544:	6909      	ldr	r1, [r1, #16]
 8007546:	eba5 0901 	sub.w	r9, r5, r1
 800754a:	6965      	ldr	r5, [r4, #20]
 800754c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007554:	3301      	adds	r3, #1
 8007556:	444b      	add	r3, r9
 8007558:	106d      	asrs	r5, r5, #1
 800755a:	429d      	cmp	r5, r3
 800755c:	bf38      	it	cc
 800755e:	461d      	movcc	r5, r3
 8007560:	0553      	lsls	r3, r2, #21
 8007562:	d531      	bpl.n	80075c8 <__ssputs_r+0xa0>
 8007564:	4629      	mov	r1, r5
 8007566:	f7ff ff85 	bl	8007474 <_malloc_r>
 800756a:	4606      	mov	r6, r0
 800756c:	b950      	cbnz	r0, 8007584 <__ssputs_r+0x5c>
 800756e:	230c      	movs	r3, #12
 8007570:	f8ca 3000 	str.w	r3, [sl]
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800757a:	81a3      	strh	r3, [r4, #12]
 800757c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007584:	6921      	ldr	r1, [r4, #16]
 8007586:	464a      	mov	r2, r9
 8007588:	f7ff ff3c 	bl	8007404 <memcpy>
 800758c:	89a3      	ldrh	r3, [r4, #12]
 800758e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007596:	81a3      	strh	r3, [r4, #12]
 8007598:	6126      	str	r6, [r4, #16]
 800759a:	6165      	str	r5, [r4, #20]
 800759c:	444e      	add	r6, r9
 800759e:	eba5 0509 	sub.w	r5, r5, r9
 80075a2:	6026      	str	r6, [r4, #0]
 80075a4:	60a5      	str	r5, [r4, #8]
 80075a6:	463e      	mov	r6, r7
 80075a8:	42be      	cmp	r6, r7
 80075aa:	d900      	bls.n	80075ae <__ssputs_r+0x86>
 80075ac:	463e      	mov	r6, r7
 80075ae:	4632      	mov	r2, r6
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	4641      	mov	r1, r8
 80075b4:	f000 fab8 	bl	8007b28 <memmove>
 80075b8:	68a3      	ldr	r3, [r4, #8]
 80075ba:	6822      	ldr	r2, [r4, #0]
 80075bc:	1b9b      	subs	r3, r3, r6
 80075be:	4432      	add	r2, r6
 80075c0:	60a3      	str	r3, [r4, #8]
 80075c2:	6022      	str	r2, [r4, #0]
 80075c4:	2000      	movs	r0, #0
 80075c6:	e7db      	b.n	8007580 <__ssputs_r+0x58>
 80075c8:	462a      	mov	r2, r5
 80075ca:	f000 fb23 	bl	8007c14 <_realloc_r>
 80075ce:	4606      	mov	r6, r0
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d1e1      	bne.n	8007598 <__ssputs_r+0x70>
 80075d4:	6921      	ldr	r1, [r4, #16]
 80075d6:	4650      	mov	r0, sl
 80075d8:	f000 facc 	bl	8007b74 <_free_r>
 80075dc:	e7c7      	b.n	800756e <__ssputs_r+0x46>
	...

080075e0 <_svfiprintf_r>:
 80075e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	4698      	mov	r8, r3
 80075e6:	898b      	ldrh	r3, [r1, #12]
 80075e8:	061b      	lsls	r3, r3, #24
 80075ea:	b09d      	sub	sp, #116	; 0x74
 80075ec:	4607      	mov	r7, r0
 80075ee:	460d      	mov	r5, r1
 80075f0:	4614      	mov	r4, r2
 80075f2:	d50e      	bpl.n	8007612 <_svfiprintf_r+0x32>
 80075f4:	690b      	ldr	r3, [r1, #16]
 80075f6:	b963      	cbnz	r3, 8007612 <_svfiprintf_r+0x32>
 80075f8:	2140      	movs	r1, #64	; 0x40
 80075fa:	f7ff ff3b 	bl	8007474 <_malloc_r>
 80075fe:	6028      	str	r0, [r5, #0]
 8007600:	6128      	str	r0, [r5, #16]
 8007602:	b920      	cbnz	r0, 800760e <_svfiprintf_r+0x2e>
 8007604:	230c      	movs	r3, #12
 8007606:	603b      	str	r3, [r7, #0]
 8007608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800760c:	e0d1      	b.n	80077b2 <_svfiprintf_r+0x1d2>
 800760e:	2340      	movs	r3, #64	; 0x40
 8007610:	616b      	str	r3, [r5, #20]
 8007612:	2300      	movs	r3, #0
 8007614:	9309      	str	r3, [sp, #36]	; 0x24
 8007616:	2320      	movs	r3, #32
 8007618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800761c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007620:	2330      	movs	r3, #48	; 0x30
 8007622:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80077cc <_svfiprintf_r+0x1ec>
 8007626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800762a:	f04f 0901 	mov.w	r9, #1
 800762e:	4623      	mov	r3, r4
 8007630:	469a      	mov	sl, r3
 8007632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007636:	b10a      	cbz	r2, 800763c <_svfiprintf_r+0x5c>
 8007638:	2a25      	cmp	r2, #37	; 0x25
 800763a:	d1f9      	bne.n	8007630 <_svfiprintf_r+0x50>
 800763c:	ebba 0b04 	subs.w	fp, sl, r4
 8007640:	d00b      	beq.n	800765a <_svfiprintf_r+0x7a>
 8007642:	465b      	mov	r3, fp
 8007644:	4622      	mov	r2, r4
 8007646:	4629      	mov	r1, r5
 8007648:	4638      	mov	r0, r7
 800764a:	f7ff ff6d 	bl	8007528 <__ssputs_r>
 800764e:	3001      	adds	r0, #1
 8007650:	f000 80aa 	beq.w	80077a8 <_svfiprintf_r+0x1c8>
 8007654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007656:	445a      	add	r2, fp
 8007658:	9209      	str	r2, [sp, #36]	; 0x24
 800765a:	f89a 3000 	ldrb.w	r3, [sl]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 80a2 	beq.w	80077a8 <_svfiprintf_r+0x1c8>
 8007664:	2300      	movs	r3, #0
 8007666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800766a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800766e:	f10a 0a01 	add.w	sl, sl, #1
 8007672:	9304      	str	r3, [sp, #16]
 8007674:	9307      	str	r3, [sp, #28]
 8007676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800767a:	931a      	str	r3, [sp, #104]	; 0x68
 800767c:	4654      	mov	r4, sl
 800767e:	2205      	movs	r2, #5
 8007680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007684:	4851      	ldr	r0, [pc, #324]	; (80077cc <_svfiprintf_r+0x1ec>)
 8007686:	f7f8 fdbb 	bl	8000200 <memchr>
 800768a:	9a04      	ldr	r2, [sp, #16]
 800768c:	b9d8      	cbnz	r0, 80076c6 <_svfiprintf_r+0xe6>
 800768e:	06d0      	lsls	r0, r2, #27
 8007690:	bf44      	itt	mi
 8007692:	2320      	movmi	r3, #32
 8007694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007698:	0711      	lsls	r1, r2, #28
 800769a:	bf44      	itt	mi
 800769c:	232b      	movmi	r3, #43	; 0x2b
 800769e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076a2:	f89a 3000 	ldrb.w	r3, [sl]
 80076a6:	2b2a      	cmp	r3, #42	; 0x2a
 80076a8:	d015      	beq.n	80076d6 <_svfiprintf_r+0xf6>
 80076aa:	9a07      	ldr	r2, [sp, #28]
 80076ac:	4654      	mov	r4, sl
 80076ae:	2000      	movs	r0, #0
 80076b0:	f04f 0c0a 	mov.w	ip, #10
 80076b4:	4621      	mov	r1, r4
 80076b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076ba:	3b30      	subs	r3, #48	; 0x30
 80076bc:	2b09      	cmp	r3, #9
 80076be:	d94e      	bls.n	800775e <_svfiprintf_r+0x17e>
 80076c0:	b1b0      	cbz	r0, 80076f0 <_svfiprintf_r+0x110>
 80076c2:	9207      	str	r2, [sp, #28]
 80076c4:	e014      	b.n	80076f0 <_svfiprintf_r+0x110>
 80076c6:	eba0 0308 	sub.w	r3, r0, r8
 80076ca:	fa09 f303 	lsl.w	r3, r9, r3
 80076ce:	4313      	orrs	r3, r2
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	46a2      	mov	sl, r4
 80076d4:	e7d2      	b.n	800767c <_svfiprintf_r+0x9c>
 80076d6:	9b03      	ldr	r3, [sp, #12]
 80076d8:	1d19      	adds	r1, r3, #4
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	9103      	str	r1, [sp, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bfbb      	ittet	lt
 80076e2:	425b      	neglt	r3, r3
 80076e4:	f042 0202 	orrlt.w	r2, r2, #2
 80076e8:	9307      	strge	r3, [sp, #28]
 80076ea:	9307      	strlt	r3, [sp, #28]
 80076ec:	bfb8      	it	lt
 80076ee:	9204      	strlt	r2, [sp, #16]
 80076f0:	7823      	ldrb	r3, [r4, #0]
 80076f2:	2b2e      	cmp	r3, #46	; 0x2e
 80076f4:	d10c      	bne.n	8007710 <_svfiprintf_r+0x130>
 80076f6:	7863      	ldrb	r3, [r4, #1]
 80076f8:	2b2a      	cmp	r3, #42	; 0x2a
 80076fa:	d135      	bne.n	8007768 <_svfiprintf_r+0x188>
 80076fc:	9b03      	ldr	r3, [sp, #12]
 80076fe:	1d1a      	adds	r2, r3, #4
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	9203      	str	r2, [sp, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	bfb8      	it	lt
 8007708:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800770c:	3402      	adds	r4, #2
 800770e:	9305      	str	r3, [sp, #20]
 8007710:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077dc <_svfiprintf_r+0x1fc>
 8007714:	7821      	ldrb	r1, [r4, #0]
 8007716:	2203      	movs	r2, #3
 8007718:	4650      	mov	r0, sl
 800771a:	f7f8 fd71 	bl	8000200 <memchr>
 800771e:	b140      	cbz	r0, 8007732 <_svfiprintf_r+0x152>
 8007720:	2340      	movs	r3, #64	; 0x40
 8007722:	eba0 000a 	sub.w	r0, r0, sl
 8007726:	fa03 f000 	lsl.w	r0, r3, r0
 800772a:	9b04      	ldr	r3, [sp, #16]
 800772c:	4303      	orrs	r3, r0
 800772e:	3401      	adds	r4, #1
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007736:	4826      	ldr	r0, [pc, #152]	; (80077d0 <_svfiprintf_r+0x1f0>)
 8007738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800773c:	2206      	movs	r2, #6
 800773e:	f7f8 fd5f 	bl	8000200 <memchr>
 8007742:	2800      	cmp	r0, #0
 8007744:	d038      	beq.n	80077b8 <_svfiprintf_r+0x1d8>
 8007746:	4b23      	ldr	r3, [pc, #140]	; (80077d4 <_svfiprintf_r+0x1f4>)
 8007748:	bb1b      	cbnz	r3, 8007792 <_svfiprintf_r+0x1b2>
 800774a:	9b03      	ldr	r3, [sp, #12]
 800774c:	3307      	adds	r3, #7
 800774e:	f023 0307 	bic.w	r3, r3, #7
 8007752:	3308      	adds	r3, #8
 8007754:	9303      	str	r3, [sp, #12]
 8007756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007758:	4433      	add	r3, r6
 800775a:	9309      	str	r3, [sp, #36]	; 0x24
 800775c:	e767      	b.n	800762e <_svfiprintf_r+0x4e>
 800775e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007762:	460c      	mov	r4, r1
 8007764:	2001      	movs	r0, #1
 8007766:	e7a5      	b.n	80076b4 <_svfiprintf_r+0xd4>
 8007768:	2300      	movs	r3, #0
 800776a:	3401      	adds	r4, #1
 800776c:	9305      	str	r3, [sp, #20]
 800776e:	4619      	mov	r1, r3
 8007770:	f04f 0c0a 	mov.w	ip, #10
 8007774:	4620      	mov	r0, r4
 8007776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800777a:	3a30      	subs	r2, #48	; 0x30
 800777c:	2a09      	cmp	r2, #9
 800777e:	d903      	bls.n	8007788 <_svfiprintf_r+0x1a8>
 8007780:	2b00      	cmp	r3, #0
 8007782:	d0c5      	beq.n	8007710 <_svfiprintf_r+0x130>
 8007784:	9105      	str	r1, [sp, #20]
 8007786:	e7c3      	b.n	8007710 <_svfiprintf_r+0x130>
 8007788:	fb0c 2101 	mla	r1, ip, r1, r2
 800778c:	4604      	mov	r4, r0
 800778e:	2301      	movs	r3, #1
 8007790:	e7f0      	b.n	8007774 <_svfiprintf_r+0x194>
 8007792:	ab03      	add	r3, sp, #12
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	462a      	mov	r2, r5
 8007798:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <_svfiprintf_r+0x1f8>)
 800779a:	a904      	add	r1, sp, #16
 800779c:	4638      	mov	r0, r7
 800779e:	f3af 8000 	nop.w
 80077a2:	1c42      	adds	r2, r0, #1
 80077a4:	4606      	mov	r6, r0
 80077a6:	d1d6      	bne.n	8007756 <_svfiprintf_r+0x176>
 80077a8:	89ab      	ldrh	r3, [r5, #12]
 80077aa:	065b      	lsls	r3, r3, #25
 80077ac:	f53f af2c 	bmi.w	8007608 <_svfiprintf_r+0x28>
 80077b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077b2:	b01d      	add	sp, #116	; 0x74
 80077b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b8:	ab03      	add	r3, sp, #12
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	462a      	mov	r2, r5
 80077be:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <_svfiprintf_r+0x1f8>)
 80077c0:	a904      	add	r1, sp, #16
 80077c2:	4638      	mov	r0, r7
 80077c4:	f000 f87a 	bl	80078bc <_printf_i>
 80077c8:	e7eb      	b.n	80077a2 <_svfiprintf_r+0x1c2>
 80077ca:	bf00      	nop
 80077cc:	080080d4 	.word	0x080080d4
 80077d0:	080080de 	.word	0x080080de
 80077d4:	00000000 	.word	0x00000000
 80077d8:	08007529 	.word	0x08007529
 80077dc:	080080da 	.word	0x080080da

080077e0 <_printf_common>:
 80077e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e4:	4616      	mov	r6, r2
 80077e6:	4699      	mov	r9, r3
 80077e8:	688a      	ldr	r2, [r1, #8]
 80077ea:	690b      	ldr	r3, [r1, #16]
 80077ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077f0:	4293      	cmp	r3, r2
 80077f2:	bfb8      	it	lt
 80077f4:	4613      	movlt	r3, r2
 80077f6:	6033      	str	r3, [r6, #0]
 80077f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077fc:	4607      	mov	r7, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	b10a      	cbz	r2, 8007806 <_printf_common+0x26>
 8007802:	3301      	adds	r3, #1
 8007804:	6033      	str	r3, [r6, #0]
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	0699      	lsls	r1, r3, #26
 800780a:	bf42      	ittt	mi
 800780c:	6833      	ldrmi	r3, [r6, #0]
 800780e:	3302      	addmi	r3, #2
 8007810:	6033      	strmi	r3, [r6, #0]
 8007812:	6825      	ldr	r5, [r4, #0]
 8007814:	f015 0506 	ands.w	r5, r5, #6
 8007818:	d106      	bne.n	8007828 <_printf_common+0x48>
 800781a:	f104 0a19 	add.w	sl, r4, #25
 800781e:	68e3      	ldr	r3, [r4, #12]
 8007820:	6832      	ldr	r2, [r6, #0]
 8007822:	1a9b      	subs	r3, r3, r2
 8007824:	42ab      	cmp	r3, r5
 8007826:	dc26      	bgt.n	8007876 <_printf_common+0x96>
 8007828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800782c:	1e13      	subs	r3, r2, #0
 800782e:	6822      	ldr	r2, [r4, #0]
 8007830:	bf18      	it	ne
 8007832:	2301      	movne	r3, #1
 8007834:	0692      	lsls	r2, r2, #26
 8007836:	d42b      	bmi.n	8007890 <_printf_common+0xb0>
 8007838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800783c:	4649      	mov	r1, r9
 800783e:	4638      	mov	r0, r7
 8007840:	47c0      	blx	r8
 8007842:	3001      	adds	r0, #1
 8007844:	d01e      	beq.n	8007884 <_printf_common+0xa4>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	68e5      	ldr	r5, [r4, #12]
 800784a:	6832      	ldr	r2, [r6, #0]
 800784c:	f003 0306 	and.w	r3, r3, #6
 8007850:	2b04      	cmp	r3, #4
 8007852:	bf08      	it	eq
 8007854:	1aad      	subeq	r5, r5, r2
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	6922      	ldr	r2, [r4, #16]
 800785a:	bf0c      	ite	eq
 800785c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007860:	2500      	movne	r5, #0
 8007862:	4293      	cmp	r3, r2
 8007864:	bfc4      	itt	gt
 8007866:	1a9b      	subgt	r3, r3, r2
 8007868:	18ed      	addgt	r5, r5, r3
 800786a:	2600      	movs	r6, #0
 800786c:	341a      	adds	r4, #26
 800786e:	42b5      	cmp	r5, r6
 8007870:	d11a      	bne.n	80078a8 <_printf_common+0xc8>
 8007872:	2000      	movs	r0, #0
 8007874:	e008      	b.n	8007888 <_printf_common+0xa8>
 8007876:	2301      	movs	r3, #1
 8007878:	4652      	mov	r2, sl
 800787a:	4649      	mov	r1, r9
 800787c:	4638      	mov	r0, r7
 800787e:	47c0      	blx	r8
 8007880:	3001      	adds	r0, #1
 8007882:	d103      	bne.n	800788c <_printf_common+0xac>
 8007884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788c:	3501      	adds	r5, #1
 800788e:	e7c6      	b.n	800781e <_printf_common+0x3e>
 8007890:	18e1      	adds	r1, r4, r3
 8007892:	1c5a      	adds	r2, r3, #1
 8007894:	2030      	movs	r0, #48	; 0x30
 8007896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800789a:	4422      	add	r2, r4
 800789c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078a4:	3302      	adds	r3, #2
 80078a6:	e7c7      	b.n	8007838 <_printf_common+0x58>
 80078a8:	2301      	movs	r3, #1
 80078aa:	4622      	mov	r2, r4
 80078ac:	4649      	mov	r1, r9
 80078ae:	4638      	mov	r0, r7
 80078b0:	47c0      	blx	r8
 80078b2:	3001      	adds	r0, #1
 80078b4:	d0e6      	beq.n	8007884 <_printf_common+0xa4>
 80078b6:	3601      	adds	r6, #1
 80078b8:	e7d9      	b.n	800786e <_printf_common+0x8e>
	...

080078bc <_printf_i>:
 80078bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078c0:	460c      	mov	r4, r1
 80078c2:	4691      	mov	r9, r2
 80078c4:	7e27      	ldrb	r7, [r4, #24]
 80078c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80078c8:	2f78      	cmp	r7, #120	; 0x78
 80078ca:	4680      	mov	r8, r0
 80078cc:	469a      	mov	sl, r3
 80078ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078d2:	d807      	bhi.n	80078e4 <_printf_i+0x28>
 80078d4:	2f62      	cmp	r7, #98	; 0x62
 80078d6:	d80a      	bhi.n	80078ee <_printf_i+0x32>
 80078d8:	2f00      	cmp	r7, #0
 80078da:	f000 80d8 	beq.w	8007a8e <_printf_i+0x1d2>
 80078de:	2f58      	cmp	r7, #88	; 0x58
 80078e0:	f000 80a3 	beq.w	8007a2a <_printf_i+0x16e>
 80078e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078ec:	e03a      	b.n	8007964 <_printf_i+0xa8>
 80078ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078f2:	2b15      	cmp	r3, #21
 80078f4:	d8f6      	bhi.n	80078e4 <_printf_i+0x28>
 80078f6:	a001      	add	r0, pc, #4	; (adr r0, 80078fc <_printf_i+0x40>)
 80078f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80078fc:	08007955 	.word	0x08007955
 8007900:	08007969 	.word	0x08007969
 8007904:	080078e5 	.word	0x080078e5
 8007908:	080078e5 	.word	0x080078e5
 800790c:	080078e5 	.word	0x080078e5
 8007910:	080078e5 	.word	0x080078e5
 8007914:	08007969 	.word	0x08007969
 8007918:	080078e5 	.word	0x080078e5
 800791c:	080078e5 	.word	0x080078e5
 8007920:	080078e5 	.word	0x080078e5
 8007924:	080078e5 	.word	0x080078e5
 8007928:	08007a75 	.word	0x08007a75
 800792c:	08007999 	.word	0x08007999
 8007930:	08007a57 	.word	0x08007a57
 8007934:	080078e5 	.word	0x080078e5
 8007938:	080078e5 	.word	0x080078e5
 800793c:	08007a97 	.word	0x08007a97
 8007940:	080078e5 	.word	0x080078e5
 8007944:	08007999 	.word	0x08007999
 8007948:	080078e5 	.word	0x080078e5
 800794c:	080078e5 	.word	0x080078e5
 8007950:	08007a5f 	.word	0x08007a5f
 8007954:	680b      	ldr	r3, [r1, #0]
 8007956:	1d1a      	adds	r2, r3, #4
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	600a      	str	r2, [r1, #0]
 800795c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007964:	2301      	movs	r3, #1
 8007966:	e0a3      	b.n	8007ab0 <_printf_i+0x1f4>
 8007968:	6825      	ldr	r5, [r4, #0]
 800796a:	6808      	ldr	r0, [r1, #0]
 800796c:	062e      	lsls	r6, r5, #24
 800796e:	f100 0304 	add.w	r3, r0, #4
 8007972:	d50a      	bpl.n	800798a <_printf_i+0xce>
 8007974:	6805      	ldr	r5, [r0, #0]
 8007976:	600b      	str	r3, [r1, #0]
 8007978:	2d00      	cmp	r5, #0
 800797a:	da03      	bge.n	8007984 <_printf_i+0xc8>
 800797c:	232d      	movs	r3, #45	; 0x2d
 800797e:	426d      	negs	r5, r5
 8007980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007984:	485e      	ldr	r0, [pc, #376]	; (8007b00 <_printf_i+0x244>)
 8007986:	230a      	movs	r3, #10
 8007988:	e019      	b.n	80079be <_printf_i+0x102>
 800798a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800798e:	6805      	ldr	r5, [r0, #0]
 8007990:	600b      	str	r3, [r1, #0]
 8007992:	bf18      	it	ne
 8007994:	b22d      	sxthne	r5, r5
 8007996:	e7ef      	b.n	8007978 <_printf_i+0xbc>
 8007998:	680b      	ldr	r3, [r1, #0]
 800799a:	6825      	ldr	r5, [r4, #0]
 800799c:	1d18      	adds	r0, r3, #4
 800799e:	6008      	str	r0, [r1, #0]
 80079a0:	0628      	lsls	r0, r5, #24
 80079a2:	d501      	bpl.n	80079a8 <_printf_i+0xec>
 80079a4:	681d      	ldr	r5, [r3, #0]
 80079a6:	e002      	b.n	80079ae <_printf_i+0xf2>
 80079a8:	0669      	lsls	r1, r5, #25
 80079aa:	d5fb      	bpl.n	80079a4 <_printf_i+0xe8>
 80079ac:	881d      	ldrh	r5, [r3, #0]
 80079ae:	4854      	ldr	r0, [pc, #336]	; (8007b00 <_printf_i+0x244>)
 80079b0:	2f6f      	cmp	r7, #111	; 0x6f
 80079b2:	bf0c      	ite	eq
 80079b4:	2308      	moveq	r3, #8
 80079b6:	230a      	movne	r3, #10
 80079b8:	2100      	movs	r1, #0
 80079ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079be:	6866      	ldr	r6, [r4, #4]
 80079c0:	60a6      	str	r6, [r4, #8]
 80079c2:	2e00      	cmp	r6, #0
 80079c4:	bfa2      	ittt	ge
 80079c6:	6821      	ldrge	r1, [r4, #0]
 80079c8:	f021 0104 	bicge.w	r1, r1, #4
 80079cc:	6021      	strge	r1, [r4, #0]
 80079ce:	b90d      	cbnz	r5, 80079d4 <_printf_i+0x118>
 80079d0:	2e00      	cmp	r6, #0
 80079d2:	d04d      	beq.n	8007a70 <_printf_i+0x1b4>
 80079d4:	4616      	mov	r6, r2
 80079d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80079da:	fb03 5711 	mls	r7, r3, r1, r5
 80079de:	5dc7      	ldrb	r7, [r0, r7]
 80079e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079e4:	462f      	mov	r7, r5
 80079e6:	42bb      	cmp	r3, r7
 80079e8:	460d      	mov	r5, r1
 80079ea:	d9f4      	bls.n	80079d6 <_printf_i+0x11a>
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d10b      	bne.n	8007a08 <_printf_i+0x14c>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	07df      	lsls	r7, r3, #31
 80079f4:	d508      	bpl.n	8007a08 <_printf_i+0x14c>
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	6861      	ldr	r1, [r4, #4]
 80079fa:	4299      	cmp	r1, r3
 80079fc:	bfde      	ittt	le
 80079fe:	2330      	movle	r3, #48	; 0x30
 8007a00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a04:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007a08:	1b92      	subs	r2, r2, r6
 8007a0a:	6122      	str	r2, [r4, #16]
 8007a0c:	f8cd a000 	str.w	sl, [sp]
 8007a10:	464b      	mov	r3, r9
 8007a12:	aa03      	add	r2, sp, #12
 8007a14:	4621      	mov	r1, r4
 8007a16:	4640      	mov	r0, r8
 8007a18:	f7ff fee2 	bl	80077e0 <_printf_common>
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d14c      	bne.n	8007aba <_printf_i+0x1fe>
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a24:	b004      	add	sp, #16
 8007a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2a:	4835      	ldr	r0, [pc, #212]	; (8007b00 <_printf_i+0x244>)
 8007a2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	680e      	ldr	r6, [r1, #0]
 8007a34:	061f      	lsls	r7, r3, #24
 8007a36:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a3a:	600e      	str	r6, [r1, #0]
 8007a3c:	d514      	bpl.n	8007a68 <_printf_i+0x1ac>
 8007a3e:	07d9      	lsls	r1, r3, #31
 8007a40:	bf44      	itt	mi
 8007a42:	f043 0320 	orrmi.w	r3, r3, #32
 8007a46:	6023      	strmi	r3, [r4, #0]
 8007a48:	b91d      	cbnz	r5, 8007a52 <_printf_i+0x196>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	f023 0320 	bic.w	r3, r3, #32
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	2310      	movs	r3, #16
 8007a54:	e7b0      	b.n	80079b8 <_printf_i+0xfc>
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	f043 0320 	orr.w	r3, r3, #32
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	2378      	movs	r3, #120	; 0x78
 8007a60:	4828      	ldr	r0, [pc, #160]	; (8007b04 <_printf_i+0x248>)
 8007a62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a66:	e7e3      	b.n	8007a30 <_printf_i+0x174>
 8007a68:	065e      	lsls	r6, r3, #25
 8007a6a:	bf48      	it	mi
 8007a6c:	b2ad      	uxthmi	r5, r5
 8007a6e:	e7e6      	b.n	8007a3e <_printf_i+0x182>
 8007a70:	4616      	mov	r6, r2
 8007a72:	e7bb      	b.n	80079ec <_printf_i+0x130>
 8007a74:	680b      	ldr	r3, [r1, #0]
 8007a76:	6826      	ldr	r6, [r4, #0]
 8007a78:	6960      	ldr	r0, [r4, #20]
 8007a7a:	1d1d      	adds	r5, r3, #4
 8007a7c:	600d      	str	r5, [r1, #0]
 8007a7e:	0635      	lsls	r5, r6, #24
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	d501      	bpl.n	8007a88 <_printf_i+0x1cc>
 8007a84:	6018      	str	r0, [r3, #0]
 8007a86:	e002      	b.n	8007a8e <_printf_i+0x1d2>
 8007a88:	0671      	lsls	r1, r6, #25
 8007a8a:	d5fb      	bpl.n	8007a84 <_printf_i+0x1c8>
 8007a8c:	8018      	strh	r0, [r3, #0]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	6123      	str	r3, [r4, #16]
 8007a92:	4616      	mov	r6, r2
 8007a94:	e7ba      	b.n	8007a0c <_printf_i+0x150>
 8007a96:	680b      	ldr	r3, [r1, #0]
 8007a98:	1d1a      	adds	r2, r3, #4
 8007a9a:	600a      	str	r2, [r1, #0]
 8007a9c:	681e      	ldr	r6, [r3, #0]
 8007a9e:	6862      	ldr	r2, [r4, #4]
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f7f8 fbac 	bl	8000200 <memchr>
 8007aa8:	b108      	cbz	r0, 8007aae <_printf_i+0x1f2>
 8007aaa:	1b80      	subs	r0, r0, r6
 8007aac:	6060      	str	r0, [r4, #4]
 8007aae:	6863      	ldr	r3, [r4, #4]
 8007ab0:	6123      	str	r3, [r4, #16]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab8:	e7a8      	b.n	8007a0c <_printf_i+0x150>
 8007aba:	6923      	ldr	r3, [r4, #16]
 8007abc:	4632      	mov	r2, r6
 8007abe:	4649      	mov	r1, r9
 8007ac0:	4640      	mov	r0, r8
 8007ac2:	47d0      	blx	sl
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	d0ab      	beq.n	8007a20 <_printf_i+0x164>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	079b      	lsls	r3, r3, #30
 8007acc:	d413      	bmi.n	8007af6 <_printf_i+0x23a>
 8007ace:	68e0      	ldr	r0, [r4, #12]
 8007ad0:	9b03      	ldr	r3, [sp, #12]
 8007ad2:	4298      	cmp	r0, r3
 8007ad4:	bfb8      	it	lt
 8007ad6:	4618      	movlt	r0, r3
 8007ad8:	e7a4      	b.n	8007a24 <_printf_i+0x168>
 8007ada:	2301      	movs	r3, #1
 8007adc:	4632      	mov	r2, r6
 8007ade:	4649      	mov	r1, r9
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	47d0      	blx	sl
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d09b      	beq.n	8007a20 <_printf_i+0x164>
 8007ae8:	3501      	adds	r5, #1
 8007aea:	68e3      	ldr	r3, [r4, #12]
 8007aec:	9903      	ldr	r1, [sp, #12]
 8007aee:	1a5b      	subs	r3, r3, r1
 8007af0:	42ab      	cmp	r3, r5
 8007af2:	dcf2      	bgt.n	8007ada <_printf_i+0x21e>
 8007af4:	e7eb      	b.n	8007ace <_printf_i+0x212>
 8007af6:	2500      	movs	r5, #0
 8007af8:	f104 0619 	add.w	r6, r4, #25
 8007afc:	e7f5      	b.n	8007aea <_printf_i+0x22e>
 8007afe:	bf00      	nop
 8007b00:	080080e5 	.word	0x080080e5
 8007b04:	080080f6 	.word	0x080080f6

08007b08 <_sbrk_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d06      	ldr	r5, [pc, #24]	; (8007b24 <_sbrk_r+0x1c>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	602b      	str	r3, [r5, #0]
 8007b14:	f000 f8ac 	bl	8007c70 <_sbrk>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	d102      	bne.n	8007b22 <_sbrk_r+0x1a>
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	b103      	cbz	r3, 8007b22 <_sbrk_r+0x1a>
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	200193a8 	.word	0x200193a8

08007b28 <memmove>:
 8007b28:	4288      	cmp	r0, r1
 8007b2a:	b510      	push	{r4, lr}
 8007b2c:	eb01 0402 	add.w	r4, r1, r2
 8007b30:	d902      	bls.n	8007b38 <memmove+0x10>
 8007b32:	4284      	cmp	r4, r0
 8007b34:	4623      	mov	r3, r4
 8007b36:	d807      	bhi.n	8007b48 <memmove+0x20>
 8007b38:	1e43      	subs	r3, r0, #1
 8007b3a:	42a1      	cmp	r1, r4
 8007b3c:	d008      	beq.n	8007b50 <memmove+0x28>
 8007b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b46:	e7f8      	b.n	8007b3a <memmove+0x12>
 8007b48:	4402      	add	r2, r0
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	428a      	cmp	r2, r1
 8007b4e:	d100      	bne.n	8007b52 <memmove+0x2a>
 8007b50:	bd10      	pop	{r4, pc}
 8007b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b5a:	e7f7      	b.n	8007b4c <memmove+0x24>

08007b5c <__malloc_lock>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	; (8007b64 <__malloc_lock+0x8>)
 8007b5e:	f7ff bc87 	b.w	8007470 <__retarget_lock_acquire_recursive>
 8007b62:	bf00      	nop
 8007b64:	200193a0 	.word	0x200193a0

08007b68 <__malloc_unlock>:
 8007b68:	4801      	ldr	r0, [pc, #4]	; (8007b70 <__malloc_unlock+0x8>)
 8007b6a:	f7ff bc82 	b.w	8007472 <__retarget_lock_release_recursive>
 8007b6e:	bf00      	nop
 8007b70:	200193a0 	.word	0x200193a0

08007b74 <_free_r>:
 8007b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b76:	2900      	cmp	r1, #0
 8007b78:	d048      	beq.n	8007c0c <_free_r+0x98>
 8007b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b7e:	9001      	str	r0, [sp, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f1a1 0404 	sub.w	r4, r1, #4
 8007b86:	bfb8      	it	lt
 8007b88:	18e4      	addlt	r4, r4, r3
 8007b8a:	f7ff ffe7 	bl	8007b5c <__malloc_lock>
 8007b8e:	4a20      	ldr	r2, [pc, #128]	; (8007c10 <_free_r+0x9c>)
 8007b90:	9801      	ldr	r0, [sp, #4]
 8007b92:	6813      	ldr	r3, [r2, #0]
 8007b94:	4615      	mov	r5, r2
 8007b96:	b933      	cbnz	r3, 8007ba6 <_free_r+0x32>
 8007b98:	6063      	str	r3, [r4, #4]
 8007b9a:	6014      	str	r4, [r2, #0]
 8007b9c:	b003      	add	sp, #12
 8007b9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ba2:	f7ff bfe1 	b.w	8007b68 <__malloc_unlock>
 8007ba6:	42a3      	cmp	r3, r4
 8007ba8:	d90b      	bls.n	8007bc2 <_free_r+0x4e>
 8007baa:	6821      	ldr	r1, [r4, #0]
 8007bac:	1862      	adds	r2, r4, r1
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	bf04      	itt	eq
 8007bb2:	681a      	ldreq	r2, [r3, #0]
 8007bb4:	685b      	ldreq	r3, [r3, #4]
 8007bb6:	6063      	str	r3, [r4, #4]
 8007bb8:	bf04      	itt	eq
 8007bba:	1852      	addeq	r2, r2, r1
 8007bbc:	6022      	streq	r2, [r4, #0]
 8007bbe:	602c      	str	r4, [r5, #0]
 8007bc0:	e7ec      	b.n	8007b9c <_free_r+0x28>
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	b10b      	cbz	r3, 8007bcc <_free_r+0x58>
 8007bc8:	42a3      	cmp	r3, r4
 8007bca:	d9fa      	bls.n	8007bc2 <_free_r+0x4e>
 8007bcc:	6811      	ldr	r1, [r2, #0]
 8007bce:	1855      	adds	r5, r2, r1
 8007bd0:	42a5      	cmp	r5, r4
 8007bd2:	d10b      	bne.n	8007bec <_free_r+0x78>
 8007bd4:	6824      	ldr	r4, [r4, #0]
 8007bd6:	4421      	add	r1, r4
 8007bd8:	1854      	adds	r4, r2, r1
 8007bda:	42a3      	cmp	r3, r4
 8007bdc:	6011      	str	r1, [r2, #0]
 8007bde:	d1dd      	bne.n	8007b9c <_free_r+0x28>
 8007be0:	681c      	ldr	r4, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	6053      	str	r3, [r2, #4]
 8007be6:	4421      	add	r1, r4
 8007be8:	6011      	str	r1, [r2, #0]
 8007bea:	e7d7      	b.n	8007b9c <_free_r+0x28>
 8007bec:	d902      	bls.n	8007bf4 <_free_r+0x80>
 8007bee:	230c      	movs	r3, #12
 8007bf0:	6003      	str	r3, [r0, #0]
 8007bf2:	e7d3      	b.n	8007b9c <_free_r+0x28>
 8007bf4:	6825      	ldr	r5, [r4, #0]
 8007bf6:	1961      	adds	r1, r4, r5
 8007bf8:	428b      	cmp	r3, r1
 8007bfa:	bf04      	itt	eq
 8007bfc:	6819      	ldreq	r1, [r3, #0]
 8007bfe:	685b      	ldreq	r3, [r3, #4]
 8007c00:	6063      	str	r3, [r4, #4]
 8007c02:	bf04      	itt	eq
 8007c04:	1949      	addeq	r1, r1, r5
 8007c06:	6021      	streq	r1, [r4, #0]
 8007c08:	6054      	str	r4, [r2, #4]
 8007c0a:	e7c7      	b.n	8007b9c <_free_r+0x28>
 8007c0c:	b003      	add	sp, #12
 8007c0e:	bd30      	pop	{r4, r5, pc}
 8007c10:	20019270 	.word	0x20019270

08007c14 <_realloc_r>:
 8007c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c16:	4607      	mov	r7, r0
 8007c18:	4614      	mov	r4, r2
 8007c1a:	460e      	mov	r6, r1
 8007c1c:	b921      	cbnz	r1, 8007c28 <_realloc_r+0x14>
 8007c1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c22:	4611      	mov	r1, r2
 8007c24:	f7ff bc26 	b.w	8007474 <_malloc_r>
 8007c28:	b922      	cbnz	r2, 8007c34 <_realloc_r+0x20>
 8007c2a:	f7ff ffa3 	bl	8007b74 <_free_r>
 8007c2e:	4625      	mov	r5, r4
 8007c30:	4628      	mov	r0, r5
 8007c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c34:	f000 f814 	bl	8007c60 <_malloc_usable_size_r>
 8007c38:	42a0      	cmp	r0, r4
 8007c3a:	d20f      	bcs.n	8007c5c <_realloc_r+0x48>
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f7ff fc18 	bl	8007474 <_malloc_r>
 8007c44:	4605      	mov	r5, r0
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d0f2      	beq.n	8007c30 <_realloc_r+0x1c>
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	f7ff fbd9 	bl	8007404 <memcpy>
 8007c52:	4631      	mov	r1, r6
 8007c54:	4638      	mov	r0, r7
 8007c56:	f7ff ff8d 	bl	8007b74 <_free_r>
 8007c5a:	e7e9      	b.n	8007c30 <_realloc_r+0x1c>
 8007c5c:	4635      	mov	r5, r6
 8007c5e:	e7e7      	b.n	8007c30 <_realloc_r+0x1c>

08007c60 <_malloc_usable_size_r>:
 8007c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c64:	1f18      	subs	r0, r3, #4
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bfbc      	itt	lt
 8007c6a:	580b      	ldrlt	r3, [r1, r0]
 8007c6c:	18c0      	addlt	r0, r0, r3
 8007c6e:	4770      	bx	lr

08007c70 <_sbrk>:
 8007c70:	4b04      	ldr	r3, [pc, #16]	; (8007c84 <_sbrk+0x14>)
 8007c72:	6819      	ldr	r1, [r3, #0]
 8007c74:	4602      	mov	r2, r0
 8007c76:	b909      	cbnz	r1, 8007c7c <_sbrk+0xc>
 8007c78:	4903      	ldr	r1, [pc, #12]	; (8007c88 <_sbrk+0x18>)
 8007c7a:	6019      	str	r1, [r3, #0]
 8007c7c:	6818      	ldr	r0, [r3, #0]
 8007c7e:	4402      	add	r2, r0
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	4770      	bx	lr
 8007c84:	20019278 	.word	0x20019278
 8007c88:	200193b0 	.word	0x200193b0

08007c8c <_init>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	bf00      	nop
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr

08007c98 <_fini>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr
