
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000589c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005a2c  08005a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bac  08005bac  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb4  08005bb4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014414  2000001c  08005bd8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014430  08005bd8  00024430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166ac  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de6  00000000  00000000  000366f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  000394e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  0003a610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002120b  00000000  00000000  0003b5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013277  00000000  00000000  0005c7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6899  00000000  00000000  0006fa5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001462f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000474c  00000000  00000000  00146348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a14 	.word	0x08005a14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005a14 	.word	0x08005a14

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001433c 	.word	0x2001433c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f103 0208 	add.w	r2, r3, #8
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000574:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f103 0208 	add.w	r2, r3, #8
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f103 0208 	add.w	r2, r3, #8
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005b6:	b480      	push	{r7}
 80005b8:	b085      	sub	sp, #20
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1c5a      	adds	r2, r3, #1
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	601a      	str	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	6892      	ldr	r2, [r2, #8]
 8000614:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	6852      	ldr	r2, [r2, #4]
 800061e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	429a      	cmp	r2, r3
 8000628:	d103      	bne.n	8000632 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	689a      	ldr	r2, [r3, #8]
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	681b      	ldr	r3, [r3, #0]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000652:	b580      	push	{r7, lr}
 8000654:	b08c      	sub	sp, #48	; 0x30
 8000656:	af04      	add	r7, sp, #16
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	4613      	mov	r3, r2
 8000660:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4618      	mov	r0, r3
 8000668:	f000 ff20 	bl	80014ac <pvPortMalloc>
 800066c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00e      	beq.n	8000692 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000674:	2058      	movs	r0, #88	; 0x58
 8000676:	f000 ff19 	bl	80014ac <pvPortMalloc>
 800067a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d003      	beq.n	800068a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
 8000688:	e005      	b.n	8000696 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800068a:	6978      	ldr	r0, [r7, #20]
 800068c:	f000 ffee 	bl	800166c <vPortFree>
 8000690:	e001      	b.n	8000696 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d013      	beq.n	80006c4 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800069c:	88fa      	ldrh	r2, [r7, #6]
 800069e:	2300      	movs	r3, #0
 80006a0:	9303      	str	r3, [sp, #12]
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	9302      	str	r3, [sp, #8]
 80006a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f000 f80e 	bl	80006d4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80006b8:	69f8      	ldr	r0, [r7, #28]
 80006ba:	f000 f8a1 	bl	8000800 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80006be:	2301      	movs	r3, #1
 80006c0:	61bb      	str	r3, [r7, #24]
 80006c2:	e002      	b.n	80006ca <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80006ca:	69bb      	ldr	r3, [r7, #24]
    }
 80006cc:	4618      	mov	r0, r3
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80006e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	461a      	mov	r2, r3
 80006ec:	21a5      	movs	r1, #165	; 0xa5
 80006ee:	f005 f989 	bl	8005a04 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80006f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006fc:	3b01      	subs	r3, #1
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	f023 0307 	bic.w	r3, r3, #7
 800070a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	2b00      	cmp	r3, #0
 8000714:	d00a      	beq.n	800072c <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800071a:	f383 8811 	msr	BASEPRI, r3
 800071e:	f3bf 8f6f 	isb	sy
 8000722:	f3bf 8f4f 	dsb	sy
 8000726:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000728:	bf00      	nop
 800072a:	e7fe      	b.n	800072a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d01f      	beq.n	8000772 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
 8000736:	e012      	b.n	800075e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000738:	68ba      	ldr	r2, [r7, #8]
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	4413      	add	r3, r2
 800073e:	7819      	ldrb	r1, [r3, #0]
 8000740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	4413      	add	r3, r2
 8000746:	3334      	adds	r3, #52	; 0x34
 8000748:	460a      	mov	r2, r1
 800074a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d006      	beq.n	8000766 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	3301      	adds	r3, #1
 800075c:	61fb      	str	r3, [r7, #28]
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	2b09      	cmp	r3, #9
 8000762:	d9e9      	bls.n	8000738 <prvInitialiseNewTask+0x64>
 8000764:	e000      	b.n	8000768 <prvInitialiseNewTask+0x94>
            {
                break;
 8000766:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800076a:	2200      	movs	r2, #0
 800076c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000770:	e003      	b.n	800077a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800077a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077c:	2b04      	cmp	r3, #4
 800077e:	d901      	bls.n	8000784 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000780:	2304      	movs	r3, #4
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000788:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800078a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800078c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800078e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000792:	2200      	movs	r2, #0
 8000794:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000798:	3304      	adds	r3, #4
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fefe 	bl	800059c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80007a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a2:	3318      	adds	r3, #24
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fef9 	bl	800059c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80007aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007ae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b2:	f1c3 0205 	rsb	r2, r3, #5
 80007b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80007ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80007c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c2:	3350      	adds	r3, #80	; 0x50
 80007c4:	2204      	movs	r2, #4
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f005 f91b 	bl	8005a04 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80007ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d0:	3354      	adds	r3, #84	; 0x54
 80007d2:	2201      	movs	r2, #1
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f005 f914 	bl	8005a04 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	68f9      	ldr	r1, [r7, #12]
 80007e0:	69b8      	ldr	r0, [r7, #24]
 80007e2:	f000 fb8d 	bl	8000f00 <pxPortInitialiseStack>
 80007e6:	4602      	mov	r2, r0
 80007e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ea:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80007ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d002      	beq.n	80007f8 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80007f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007f6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000800:	b5b0      	push	{r4, r5, r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af02      	add	r7, sp, #8
 8000806:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000808:	f000 fd24 	bl	8001254 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800080c:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <prvAddNewTaskToReadyList+0xfc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	4a3a      	ldr	r2, [pc, #232]	; (80008fc <prvAddNewTaskToReadyList+0xfc>)
 8000814:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000816:	4b3a      	ldr	r3, [pc, #232]	; (8000900 <prvAddNewTaskToReadyList+0x100>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d109      	bne.n	8000832 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800081e:	4a38      	ldr	r2, [pc, #224]	; (8000900 <prvAddNewTaskToReadyList+0x100>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000824:	4b35      	ldr	r3, [pc, #212]	; (80008fc <prvAddNewTaskToReadyList+0xfc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d110      	bne.n	800084e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800082c:	f000 face 	bl	8000dcc <prvInitialiseTaskLists>
 8000830:	e00d      	b.n	800084e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000832:	4b34      	ldr	r3, [pc, #208]	; (8000904 <prvAddNewTaskToReadyList+0x104>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d109      	bne.n	800084e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800083a:	4b31      	ldr	r3, [pc, #196]	; (8000900 <prvAddNewTaskToReadyList+0x100>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000844:	429a      	cmp	r2, r3
 8000846:	d802      	bhi.n	800084e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000848:	4a2d      	ldr	r2, [pc, #180]	; (8000900 <prvAddNewTaskToReadyList+0x100>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800084e:	4b2e      	ldr	r3, [pc, #184]	; (8000908 <prvAddNewTaskToReadyList+0x108>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	4a2c      	ldr	r2, [pc, #176]	; (8000908 <prvAddNewTaskToReadyList+0x108>)
 8000856:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000858:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <prvAddNewTaskToReadyList+0x108>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d016      	beq.n	8000894 <prvAddNewTaskToReadyList+0x94>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4618      	mov	r0, r3
 800086a:	f003 f87d 	bl	8003968 <SEGGER_SYSVIEW_OnTaskCreate>
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	461d      	mov	r5, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	461c      	mov	r4, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	1ae3      	subs	r3, r4, r3
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	462b      	mov	r3, r5
 8000890:	f001 f8b2 	bl	80019f8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4618      	mov	r0, r3
 8000898:	f003 f8ea 	bl	8003a70 <SEGGER_SYSVIEW_OnTaskStartReady>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a0:	2201      	movs	r2, #1
 80008a2:	409a      	lsls	r2, r3
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <prvAddNewTaskToReadyList+0x10c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	4a18      	ldr	r2, [pc, #96]	; (800090c <prvAddNewTaskToReadyList+0x10c>)
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b2:	4613      	mov	r3, r2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	4413      	add	r3, r2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <prvAddNewTaskToReadyList+0x110>)
 80008bc:	441a      	add	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3304      	adds	r3, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4610      	mov	r0, r2
 80008c6:	f7ff fe76 	bl	80005b6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80008ca:	f000 fcf3 	bl	80012b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <prvAddNewTaskToReadyList+0x104>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00e      	beq.n	80008f4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <prvAddNewTaskToReadyList+0x100>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d207      	bcs.n	80008f4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <prvAddNewTaskToReadyList+0x114>)
 80008e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	f3bf 8f4f 	dsb	sy
 80008f0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bdb0      	pop	{r4, r5, r7, pc}
 80008fc:	20000110 	.word	0x20000110
 8000900:	20000038 	.word	0x20000038
 8000904:	2000011c 	.word	0x2000011c
 8000908:	2000012c 	.word	0x2000012c
 800090c:	20000118 	.word	0x20000118
 8000910:	2000003c 	.word	0x2000003c
 8000914:	e000ed04 	.word	0xe000ed04

08000918 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <vTaskStartScheduler+0x98>)
 8000920:	9301      	str	r3, [sp, #4]
 8000922:	2300      	movs	r3, #0
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2300      	movs	r3, #0
 8000928:	2282      	movs	r2, #130	; 0x82
 800092a:	4922      	ldr	r1, [pc, #136]	; (80009b4 <vTaskStartScheduler+0x9c>)
 800092c:	4822      	ldr	r0, [pc, #136]	; (80009b8 <vTaskStartScheduler+0xa0>)
 800092e:	f7ff fe90 	bl	8000652 <xTaskCreate>
 8000932:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d124      	bne.n	8000984 <vTaskStartScheduler+0x6c>
        __asm volatile
 800093a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093e:	f383 8811 	msr	BASEPRI, r3
 8000942:	f3bf 8f6f 	isb	sy
 8000946:	f3bf 8f4f 	dsb	sy
 800094a:	60bb      	str	r3, [r7, #8]
    }
 800094c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <vTaskStartScheduler+0xa4>)
 8000950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000954:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <vTaskStartScheduler+0xa8>)
 8000958:	2201      	movs	r2, #1
 800095a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <vTaskStartScheduler+0xac>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <vTaskStartScheduler+0xb0>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <vTaskStartScheduler+0x98>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	429a      	cmp	r2, r3
 800096c:	d102      	bne.n	8000974 <vTaskStartScheduler+0x5c>
 800096e:	f002 ffdf 	bl	8003930 <SEGGER_SYSVIEW_OnIdle>
 8000972:	e004      	b.n	800097e <vTaskStartScheduler+0x66>
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <vTaskStartScheduler+0xb0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f003 f837 	bl	80039ec <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800097e:	f000 fb49 	bl	8001014 <xPortStartScheduler>
 8000982:	e00e      	b.n	80009a2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800098a:	d10a      	bne.n	80009a2 <vTaskStartScheduler+0x8a>
        __asm volatile
 800098c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000990:	f383 8811 	msr	BASEPRI, r3
 8000994:	f3bf 8f6f 	isb	sy
 8000998:	f3bf 8f4f 	dsb	sy
 800099c:	607b      	str	r3, [r7, #4]
    }
 800099e:	bf00      	nop
 80009a0:	e7fe      	b.n	80009a0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <vTaskStartScheduler+0xb4>)
 80009a4:	681b      	ldr	r3, [r3, #0]
}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000134 	.word	0x20000134
 80009b4:	08005a2c 	.word	0x08005a2c
 80009b8:	08000d9d 	.word	0x08000d9d
 80009bc:	20000130 	.word	0x20000130
 80009c0:	2000011c 	.word	0x2000011c
 80009c4:	20000114 	.word	0x20000114
 80009c8:	20000038 	.word	0x20000038
 80009cc:	20000000 	.word	0x20000000

080009d0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <vTaskSuspendAll+0x18>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	4a03      	ldr	r2, [pc, #12]	; (80009e8 <vTaskSuspendAll+0x18>)
 80009dc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	20000138 	.word	0x20000138

080009ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80009fa:	4b43      	ldr	r3, [pc, #268]	; (8000b08 <xTaskResumeAll+0x11c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d10a      	bne.n	8000a18 <xTaskResumeAll+0x2c>
        __asm volatile
 8000a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a06:	f383 8811 	msr	BASEPRI, r3
 8000a0a:	f3bf 8f6f 	isb	sy
 8000a0e:	f3bf 8f4f 	dsb	sy
 8000a12:	603b      	str	r3, [r7, #0]
    }
 8000a14:	bf00      	nop
 8000a16:	e7fe      	b.n	8000a16 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000a18:	f000 fc1c 	bl	8001254 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000a1c:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <xTaskResumeAll+0x11c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	4a39      	ldr	r2, [pc, #228]	; (8000b08 <xTaskResumeAll+0x11c>)
 8000a24:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a26:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <xTaskResumeAll+0x11c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d165      	bne.n	8000afa <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000a2e:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <xTaskResumeAll+0x120>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d061      	beq.n	8000afa <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a36:	e032      	b.n	8000a9e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a38:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <xTaskResumeAll+0x124>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3318      	adds	r3, #24
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fdda 	bl	80005fe <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fdd5 	bl	80005fe <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f003 f80a 	bl	8003a70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a60:	2201      	movs	r2, #1
 8000a62:	409a      	lsls	r2, r3
 8000a64:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <xTaskResumeAll+0x128>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	4a2a      	ldr	r2, [pc, #168]	; (8000b14 <xTaskResumeAll+0x128>)
 8000a6c:	6013      	str	r3, [r2, #0]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a72:	4613      	mov	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4413      	add	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4a27      	ldr	r2, [pc, #156]	; (8000b18 <xTaskResumeAll+0x12c>)
 8000a7c:	441a      	add	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3304      	adds	r3, #4
 8000a82:	4619      	mov	r1, r3
 8000a84:	4610      	mov	r0, r2
 8000a86:	f7ff fd96 	bl	80005b6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <xTaskResumeAll+0x130>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d302      	bcc.n	8000a9e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <xTaskResumeAll+0x134>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <xTaskResumeAll+0x124>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1c8      	bne.n	8000a38 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000aac:	f000 fa0c 	bl	8000ec8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <xTaskResumeAll+0x138>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d010      	beq.n	8000ade <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000abc:	f000 f848 	bl	8000b50 <xTaskIncrementTick>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <xTaskResumeAll+0x134>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1f1      	bne.n	8000abc <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <xTaskResumeAll+0x138>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <xTaskResumeAll+0x134>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d009      	beq.n	8000afa <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <xTaskResumeAll+0x13c>)
 8000aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	f3bf 8f4f 	dsb	sy
 8000af6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000afa:	f000 fbdb 	bl	80012b4 <vPortExitCritical>

    return xAlreadyYielded;
 8000afe:	68bb      	ldr	r3, [r7, #8]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000138 	.word	0x20000138
 8000b0c:	20000110 	.word	0x20000110
 8000b10:	200000d0 	.word	0x200000d0
 8000b14:	20000118 	.word	0x20000118
 8000b18:	2000003c 	.word	0x2000003c
 8000b1c:	20000038 	.word	0x20000038
 8000b20:	20000124 	.word	0x20000124
 8000b24:	20000120 	.word	0x20000120
 8000b28:	e000ed04 	.word	0xe000ed04

08000b2c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b32:	f000 fc7b 	bl	800142c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <xTaskGetTickCountFromISR+0x20>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000b40:	683b      	ldr	r3, [r7, #0]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000114 	.word	0x20000114

08000b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b5a:	4b50      	ldr	r3, [pc, #320]	; (8000c9c <xTaskIncrementTick+0x14c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f040 8092 	bne.w	8000c88 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000b64:	4b4e      	ldr	r3, [pc, #312]	; (8000ca0 <xTaskIncrementTick+0x150>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000b6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ca0 <xTaskIncrementTick+0x150>)
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d120      	bne.n	8000bba <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000b78:	4b4a      	ldr	r3, [pc, #296]	; (8000ca4 <xTaskIncrementTick+0x154>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00a      	beq.n	8000b98 <xTaskIncrementTick+0x48>
        __asm volatile
 8000b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b86:	f383 8811 	msr	BASEPRI, r3
 8000b8a:	f3bf 8f6f 	isb	sy
 8000b8e:	f3bf 8f4f 	dsb	sy
 8000b92:	603b      	str	r3, [r7, #0]
    }
 8000b94:	bf00      	nop
 8000b96:	e7fe      	b.n	8000b96 <xTaskIncrementTick+0x46>
 8000b98:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <xTaskIncrementTick+0x154>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b42      	ldr	r3, [pc, #264]	; (8000ca8 <xTaskIncrementTick+0x158>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a40      	ldr	r2, [pc, #256]	; (8000ca4 <xTaskIncrementTick+0x154>)
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	4a40      	ldr	r2, [pc, #256]	; (8000ca8 <xTaskIncrementTick+0x158>)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b3f      	ldr	r3, [pc, #252]	; (8000cac <xTaskIncrementTick+0x15c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	4a3e      	ldr	r2, [pc, #248]	; (8000cac <xTaskIncrementTick+0x15c>)
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	f000 f987 	bl	8000ec8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000bba:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <xTaskIncrementTick+0x160>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d34c      	bcc.n	8000c5e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000bc4:	4b37      	ldr	r3, [pc, #220]	; (8000ca4 <xTaskIncrementTick+0x154>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d104      	bne.n	8000bd8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000bce:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <xTaskIncrementTick+0x160>)
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd4:	601a      	str	r2, [r3, #0]
                    break;
 8000bd6:	e042      	b.n	8000c5e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bd8:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <xTaskIncrementTick+0x154>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d203      	bcs.n	8000bf8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000bf0:	4a2f      	ldr	r2, [pc, #188]	; (8000cb0 <xTaskIncrementTick+0x160>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000bf6:	e032      	b.n	8000c5e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	3304      	adds	r3, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fcfe 	bl	80005fe <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d004      	beq.n	8000c14 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	3318      	adds	r3, #24
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fcf5 	bl	80005fe <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 ff2a 	bl	8003a70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c20:	2201      	movs	r2, #1
 8000c22:	409a      	lsls	r2, r3
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <xTaskIncrementTick+0x164>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	4a22      	ldr	r2, [pc, #136]	; (8000cb4 <xTaskIncrementTick+0x164>)
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c32:	4613      	mov	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <xTaskIncrementTick+0x168>)
 8000c3c:	441a      	add	r2, r3
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	3304      	adds	r3, #4
 8000c42:	4619      	mov	r1, r3
 8000c44:	4610      	mov	r0, r2
 8000c46:	f7ff fcb6 	bl	80005b6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <xTaskIncrementTick+0x16c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d3b5      	bcc.n	8000bc4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c5c:	e7b2      	b.n	8000bc4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <xTaskIncrementTick+0x16c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c64:	4914      	ldr	r1, [pc, #80]	; (8000cb8 <xTaskIncrementTick+0x168>)
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	440b      	add	r3, r1
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d901      	bls.n	8000c7a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8000c76:	2301      	movs	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <xTaskIncrementTick+0x170>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d007      	beq.n	8000c92 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8000c82:	2301      	movs	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e004      	b.n	8000c92 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <xTaskIncrementTick+0x174>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <xTaskIncrementTick+0x174>)
 8000c90:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000c92:	697b      	ldr	r3, [r7, #20]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000138 	.word	0x20000138
 8000ca0:	20000114 	.word	0x20000114
 8000ca4:	200000c8 	.word	0x200000c8
 8000ca8:	200000cc 	.word	0x200000cc
 8000cac:	20000128 	.word	0x20000128
 8000cb0:	20000130 	.word	0x20000130
 8000cb4:	20000118 	.word	0x20000118
 8000cb8:	2000003c 	.word	0x2000003c
 8000cbc:	20000038 	.word	0x20000038
 8000cc0:	20000124 	.word	0x20000124
 8000cc4:	20000120 	.word	0x20000120

08000cc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000cce:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <vTaskSwitchContext+0xbc>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000cd6:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <vTaskSwitchContext+0xc0>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000cdc:	e04d      	b.n	8000d7a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <vTaskSwitchContext+0xc0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ce4:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <vTaskSwitchContext+0xc4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	fab3 f383 	clz	r3, r3
 8000cf0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000cf2:	7afb      	ldrb	r3, [r7, #11]
 8000cf4:	f1c3 031f 	rsb	r3, r3, #31
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	4925      	ldr	r1, [pc, #148]	; (8000d90 <vTaskSwitchContext+0xc8>)
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	440b      	add	r3, r1
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d10a      	bne.n	8000d24 <vTaskSwitchContext+0x5c>
        __asm volatile
 8000d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d12:	f383 8811 	msr	BASEPRI, r3
 8000d16:	f3bf 8f6f 	isb	sy
 8000d1a:	f3bf 8f4f 	dsb	sy
 8000d1e:	607b      	str	r3, [r7, #4]
    }
 8000d20:	bf00      	nop
 8000d22:	e7fe      	b.n	8000d22 <vTaskSwitchContext+0x5a>
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4a18      	ldr	r2, [pc, #96]	; (8000d90 <vTaskSwitchContext+0xc8>)
 8000d30:	4413      	add	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	3308      	adds	r3, #8
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d104      	bne.n	8000d54 <vTaskSwitchContext+0x8c>
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <vTaskSwitchContext+0xcc>)
 8000d5c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <vTaskSwitchContext+0xcc>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <vTaskSwitchContext+0xd0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d102      	bne.n	8000d70 <vTaskSwitchContext+0xa8>
 8000d6a:	f002 fde1 	bl	8003930 <SEGGER_SYSVIEW_OnIdle>
}
 8000d6e:	e004      	b.n	8000d7a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <vTaskSwitchContext+0xcc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 fe39 	bl	80039ec <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000138 	.word	0x20000138
 8000d88:	20000124 	.word	0x20000124
 8000d8c:	20000118 	.word	0x20000118
 8000d90:	2000003c 	.word	0x2000003c
 8000d94:	20000038 	.word	0x20000038
 8000d98:	20000134 	.word	0x20000134

08000d9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000da4:	f000 f852 	bl	8000e4c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <prvIdleTask+0x28>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d9f9      	bls.n	8000da4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <prvIdleTask+0x2c>)
 8000db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	f3bf 8f4f 	dsb	sy
 8000dbc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000dc0:	e7f0      	b.n	8000da4 <prvIdleTask+0x8>
 8000dc2:	bf00      	nop
 8000dc4:	2000003c 	.word	0x2000003c
 8000dc8:	e000ed04 	.word	0xe000ed04

08000dcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	e00c      	b.n	8000df2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <prvInitialiseTaskLists+0x60>)
 8000de4:	4413      	add	r3, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fbb8 	bl	800055c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3301      	adds	r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d9ef      	bls.n	8000dd8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <prvInitialiseTaskLists+0x64>)
 8000dfa:	f7ff fbaf 	bl	800055c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000dfe:	480d      	ldr	r0, [pc, #52]	; (8000e34 <prvInitialiseTaskLists+0x68>)
 8000e00:	f7ff fbac 	bl	800055c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <prvInitialiseTaskLists+0x6c>)
 8000e06:	f7ff fba9 	bl	800055c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <prvInitialiseTaskLists+0x70>)
 8000e0c:	f7ff fba6 	bl	800055c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000e10:	480b      	ldr	r0, [pc, #44]	; (8000e40 <prvInitialiseTaskLists+0x74>)
 8000e12:	f7ff fba3 	bl	800055c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <prvInitialiseTaskLists+0x78>)
 8000e18:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <prvInitialiseTaskLists+0x64>)
 8000e1a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <prvInitialiseTaskLists+0x7c>)
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <prvInitialiseTaskLists+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000003c 	.word	0x2000003c
 8000e30:	200000a0 	.word	0x200000a0
 8000e34:	200000b4 	.word	0x200000b4
 8000e38:	200000d0 	.word	0x200000d0
 8000e3c:	200000e4 	.word	0x200000e4
 8000e40:	200000fc 	.word	0x200000fc
 8000e44:	200000c8 	.word	0x200000c8
 8000e48:	200000cc 	.word	0x200000cc

08000e4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e52:	e019      	b.n	8000e88 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000e54:	f000 f9fe 	bl	8001254 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <prvCheckTasksWaitingTermination+0x50>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3304      	adds	r3, #4
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fbca 	bl	80005fe <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <prvCheckTasksWaitingTermination+0x54>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <prvCheckTasksWaitingTermination+0x54>)
 8000e72:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <prvCheckTasksWaitingTermination+0x58>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <prvCheckTasksWaitingTermination+0x58>)
 8000e7c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000e7e:	f000 fa19 	bl	80012b4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f810 	bl	8000ea8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <prvCheckTasksWaitingTermination+0x58>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1e1      	bne.n	8000e54 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200000e4 	.word	0x200000e4
 8000ea0:	20000110 	.word	0x20000110
 8000ea4:	200000f8 	.word	0x200000f8

08000ea8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fbd9 	bl	800166c <vPortFree>
                vPortFree( pxTCB );
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 fbd6 	bl	800166c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <prvResetNextTaskUnblockTime+0x30>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d104      	bne.n	8000ee0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <prvResetNextTaskUnblockTime+0x34>)
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000edc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000ede:	e005      	b.n	8000eec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <prvResetNextTaskUnblockTime+0x30>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <prvResetNextTaskUnblockTime+0x34>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200000c8 	.word	0x200000c8
 8000efc:	20000130 	.word	0x20000130

08000f00 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	3b04      	subs	r3, #4
 8000f1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	f023 0201 	bic.w	r2, r3, #1
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3b04      	subs	r3, #4
 8000f2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000f30:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <pxPortInitialiseStack+0x64>)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3b14      	subs	r3, #20
 8000f3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	3b04      	subs	r3, #4
 8000f46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f06f 0202 	mvn.w	r2, #2
 8000f4e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3b20      	subs	r3, #32
 8000f54:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	08000f69 	.word	0x08000f69

08000f68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <prvTaskExitError+0x54>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f7a:	d00a      	beq.n	8000f92 <prvTaskExitError+0x2a>
        __asm volatile
 8000f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f80:	f383 8811 	msr	BASEPRI, r3
 8000f84:	f3bf 8f6f 	isb	sy
 8000f88:	f3bf 8f4f 	dsb	sy
 8000f8c:	60fb      	str	r3, [r7, #12]
    }
 8000f8e:	bf00      	nop
 8000f90:	e7fe      	b.n	8000f90 <prvTaskExitError+0x28>
        __asm volatile
 8000f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f96:	f383 8811 	msr	BASEPRI, r3
 8000f9a:	f3bf 8f6f 	isb	sy
 8000f9e:	f3bf 8f4f 	dsb	sy
 8000fa2:	60bb      	str	r3, [r7, #8]
    }
 8000fa4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000fa6:	bf00      	nop
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0fc      	beq.n	8000fa8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <pxCurrentTCBConst2>)
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	6808      	ldr	r0, [r1, #0]
 8000fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fca:	f380 8809 	msr	PSP, r0
 8000fce:	f3bf 8f6f 	isb	sy
 8000fd2:	f04f 0000 	mov.w	r0, #0
 8000fd6:	f380 8811 	msr	BASEPRI, r0
 8000fda:	4770      	bx	lr
 8000fdc:	f3af 8000 	nop.w

08000fe0 <pxCurrentTCBConst2>:
 8000fe0:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop

08000fe8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000fe8:	4808      	ldr	r0, [pc, #32]	; (800100c <prvPortStartFirstTask+0x24>)
 8000fea:	6800      	ldr	r0, [r0, #0]
 8000fec:	6800      	ldr	r0, [r0, #0]
 8000fee:	f380 8808 	msr	MSP, r0
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	f380 8814 	msr	CONTROL, r0
 8000ffa:	b662      	cpsie	i
 8000ffc:	b661      	cpsie	f
 8000ffe:	f3bf 8f4f 	dsb	sy
 8001002:	f3bf 8f6f 	isb	sy
 8001006:	df00      	svc	0
 8001008:	bf00      	nop
 800100a:	0000      	.short	0x0000
 800100c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop

08001014 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800101a:	4b46      	ldr	r3, [pc, #280]	; (8001134 <xPortStartScheduler+0x120>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a46      	ldr	r2, [pc, #280]	; (8001138 <xPortStartScheduler+0x124>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d10a      	bne.n	800103a <xPortStartScheduler+0x26>
        __asm volatile
 8001024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001028:	f383 8811 	msr	BASEPRI, r3
 800102c:	f3bf 8f6f 	isb	sy
 8001030:	f3bf 8f4f 	dsb	sy
 8001034:	613b      	str	r3, [r7, #16]
    }
 8001036:	bf00      	nop
 8001038:	e7fe      	b.n	8001038 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800103a:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <xPortStartScheduler+0x120>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a3f      	ldr	r2, [pc, #252]	; (800113c <xPortStartScheduler+0x128>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d10a      	bne.n	800105a <xPortStartScheduler+0x46>
        __asm volatile
 8001044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001048:	f383 8811 	msr	BASEPRI, r3
 800104c:	f3bf 8f6f 	isb	sy
 8001050:	f3bf 8f4f 	dsb	sy
 8001054:	60fb      	str	r3, [r7, #12]
    }
 8001056:	bf00      	nop
 8001058:	e7fe      	b.n	8001058 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <xPortStartScheduler+0x12c>)
 800105c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	22ff      	movs	r2, #255	; 0xff
 800106a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b31      	ldr	r3, [pc, #196]	; (8001144 <xPortStartScheduler+0x130>)
 8001080:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <xPortStartScheduler+0x134>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001088:	e009      	b.n	800109e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800108a:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <xPortStartScheduler+0x134>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3b01      	subs	r3, #1
 8001090:	4a2d      	ldr	r2, [pc, #180]	; (8001148 <xPortStartScheduler+0x134>)
 8001092:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a6:	2b80      	cmp	r3, #128	; 0x80
 80010a8:	d0ef      	beq.n	800108a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80010aa:	4b27      	ldr	r3, [pc, #156]	; (8001148 <xPortStartScheduler+0x134>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d00a      	beq.n	80010cc <xPortStartScheduler+0xb8>
        __asm volatile
 80010b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ba:	f383 8811 	msr	BASEPRI, r3
 80010be:	f3bf 8f6f 	isb	sy
 80010c2:	f3bf 8f4f 	dsb	sy
 80010c6:	60bb      	str	r3, [r7, #8]
    }
 80010c8:	bf00      	nop
 80010ca:	e7fe      	b.n	80010ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <xPortStartScheduler+0x134>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <xPortStartScheduler+0x134>)
 80010d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <xPortStartScheduler+0x134>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80010de:	4a1a      	ldr	r2, [pc, #104]	; (8001148 <xPortStartScheduler+0x134>)
 80010e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <xPortStartScheduler+0x138>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <xPortStartScheduler+0x138>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <xPortStartScheduler+0x138>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a14      	ldr	r2, [pc, #80]	; (800114c <xPortStartScheduler+0x138>)
 80010fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001100:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001102:	f000 f963 	bl	80013cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <xPortStartScheduler+0x13c>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800110c:	f000 f982 	bl	8001414 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <xPortStartScheduler+0x140>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <xPortStartScheduler+0x140>)
 8001116:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800111a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800111c:	f7ff ff64 	bl	8000fe8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001120:	f7ff fdd2 	bl	8000cc8 <vTaskSwitchContext>
    prvTaskExitError();
 8001124:	f7ff ff20 	bl	8000f68 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	410fc271 	.word	0x410fc271
 800113c:	410fc270 	.word	0x410fc270
 8001140:	e000e400 	.word	0xe000e400
 8001144:	2000013c 	.word	0x2000013c
 8001148:	20000140 	.word	0x20000140
 800114c:	e000ed20 	.word	0xe000ed20
 8001150:	20000004 	.word	0x20000004
 8001154:	e000ef34 	.word	0xe000ef34

08001158 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <vInitPrioGroupValue+0xe4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a37      	ldr	r2, [pc, #220]	; (8001240 <vInitPrioGroupValue+0xe8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d10a      	bne.n	800117e <vInitPrioGroupValue+0x26>
        __asm volatile
 8001168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800116c:	f383 8811 	msr	BASEPRI, r3
 8001170:	f3bf 8f6f 	isb	sy
 8001174:	f3bf 8f4f 	dsb	sy
 8001178:	613b      	str	r3, [r7, #16]
    }
 800117a:	bf00      	nop
 800117c:	e7fe      	b.n	800117c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800117e:	4b2f      	ldr	r3, [pc, #188]	; (800123c <vInitPrioGroupValue+0xe4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a30      	ldr	r2, [pc, #192]	; (8001244 <vInitPrioGroupValue+0xec>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d10a      	bne.n	800119e <vInitPrioGroupValue+0x46>
        __asm volatile
 8001188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800118c:	f383 8811 	msr	BASEPRI, r3
 8001190:	f3bf 8f6f 	isb	sy
 8001194:	f3bf 8f4f 	dsb	sy
 8001198:	60fb      	str	r3, [r7, #12]
    }
 800119a:	bf00      	nop
 800119c:	e7fe      	b.n	800119c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <vInitPrioGroupValue+0xf0>)
 80011a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	22ff      	movs	r2, #255	; 0xff
 80011ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <vInitPrioGroupValue+0xf4>)
 80011c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80011c6:	4b22      	ldr	r3, [pc, #136]	; (8001250 <vInitPrioGroupValue+0xf8>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80011cc:	e009      	b.n	80011e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <vInitPrioGroupValue+0xf8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <vInitPrioGroupValue+0xf8>)
 80011d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	2b80      	cmp	r3, #128	; 0x80
 80011ec:	d0ef      	beq.n	80011ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <vInitPrioGroupValue+0xf8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d00a      	beq.n	8001210 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80011fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011fe:	f383 8811 	msr	BASEPRI, r3
 8001202:	f3bf 8f6f 	isb	sy
 8001206:	f3bf 8f4f 	dsb	sy
 800120a:	60bb      	str	r3, [r7, #8]
    }
 800120c:	bf00      	nop
 800120e:	e7fe      	b.n	800120e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <vInitPrioGroupValue+0xf8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <vInitPrioGroupValue+0xf8>)
 8001218:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <vInitPrioGroupValue+0xf8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <vInitPrioGroupValue+0xf8>)
 8001224:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800122e:	bf00      	nop
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	410fc271 	.word	0x410fc271
 8001244:	410fc270 	.word	0x410fc270
 8001248:	e000e400 	.word	0xe000e400
 800124c:	2000013c 	.word	0x2000013c
 8001250:	20000140 	.word	0x20000140

08001254 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
        __asm volatile
 800125a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800125e:	f383 8811 	msr	BASEPRI, r3
 8001262:	f3bf 8f6f 	isb	sy
 8001266:	f3bf 8f4f 	dsb	sy
 800126a:	607b      	str	r3, [r7, #4]
    }
 800126c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <vPortEnterCritical+0x58>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <vPortEnterCritical+0x58>)
 8001276:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <vPortEnterCritical+0x58>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d10f      	bne.n	80012a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <vPortEnterCritical+0x5c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00a      	beq.n	80012a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800128a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800128e:	f383 8811 	msr	BASEPRI, r3
 8001292:	f3bf 8f6f 	isb	sy
 8001296:	f3bf 8f4f 	dsb	sy
 800129a:	603b      	str	r3, [r7, #0]
    }
 800129c:	bf00      	nop
 800129e:	e7fe      	b.n	800129e <vPortEnterCritical+0x4a>
    }
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	20000004 	.word	0x20000004
 80012b0:	e000ed04 	.word	0xe000ed04

080012b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <vPortExitCritical+0x50>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10a      	bne.n	80012d8 <vPortExitCritical+0x24>
        __asm volatile
 80012c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c6:	f383 8811 	msr	BASEPRI, r3
 80012ca:	f3bf 8f6f 	isb	sy
 80012ce:	f3bf 8f4f 	dsb	sy
 80012d2:	607b      	str	r3, [r7, #4]
    }
 80012d4:	bf00      	nop
 80012d6:	e7fe      	b.n	80012d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <vPortExitCritical+0x50>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3b01      	subs	r3, #1
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <vPortExitCritical+0x50>)
 80012e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <vPortExitCritical+0x50>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d105      	bne.n	80012f6 <vPortExitCritical+0x42>
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80012f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000004 	.word	0x20000004
	...

08001310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001310:	f3ef 8009 	mrs	r0, PSP
 8001314:	f3bf 8f6f 	isb	sy
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <pxCurrentTCBConst>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	f01e 0f10 	tst.w	lr, #16
 8001320:	bf08      	it	eq
 8001322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800132a:	6010      	str	r0, [r2, #0]
 800132c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001334:	f380 8811 	msr	BASEPRI, r0
 8001338:	f3bf 8f4f 	dsb	sy
 800133c:	f3bf 8f6f 	isb	sy
 8001340:	f7ff fcc2 	bl	8000cc8 <vTaskSwitchContext>
 8001344:	f04f 0000 	mov.w	r0, #0
 8001348:	f380 8811 	msr	BASEPRI, r0
 800134c:	bc09      	pop	{r0, r3}
 800134e:	6819      	ldr	r1, [r3, #0]
 8001350:	6808      	ldr	r0, [r1, #0]
 8001352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001356:	f01e 0f10 	tst.w	lr, #16
 800135a:	bf08      	it	eq
 800135c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001360:	f380 8809 	msr	PSP, r0
 8001364:	f3bf 8f6f 	isb	sy
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w

08001370 <pxCurrentTCBConst>:
 8001370:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop

08001378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
        __asm volatile
 800137e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001382:	f383 8811 	msr	BASEPRI, r3
 8001386:	f3bf 8f6f 	isb	sy
 800138a:	f3bf 8f4f 	dsb	sy
 800138e:	607b      	str	r3, [r7, #4]
    }
 8001390:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001392:	f002 fa53 	bl	800383c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001396:	f7ff fbdb 	bl	8000b50 <xTaskIncrementTick>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80013a0:	f002 faaa 	bl	80038f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <SysTick_Handler+0x50>)
 80013a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e001      	b.n	80013b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80013ae:	f002 fa87 	bl	80038c0 <SEGGER_SYSVIEW_RecordExitISR>
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f383 8811 	msr	BASEPRI, r3
    }
 80013bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000ed04 	.word	0xe000ed04

080013cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <vPortSetupTimerInterrupt+0x34>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <vPortSetupTimerInterrupt+0x38>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <vPortSetupTimerInterrupt+0x3c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <vPortSetupTimerInterrupt+0x40>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	099b      	lsrs	r3, r3, #6
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <vPortSetupTimerInterrupt+0x44>)
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <vPortSetupTimerInterrupt+0x34>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010
 8001404:	e000e018 	.word	0xe000e018
 8001408:	20000010 	.word	0x20000010
 800140c:	10624dd3 	.word	0x10624dd3
 8001410:	e000e014 	.word	0xe000e014

08001414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001424 <vPortEnableVFP+0x10>
 8001418:	6801      	ldr	r1, [r0, #0]
 800141a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800141e:	6001      	str	r1, [r0, #0]
 8001420:	4770      	bx	lr
 8001422:	0000      	.short	0x0000
 8001424:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop

0800142c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001432:	f3ef 8305 	mrs	r3, IPSR
 8001436:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b0f      	cmp	r3, #15
 800143c:	d914      	bls.n	8001468 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800143e:	4a17      	ldr	r2, [pc, #92]	; (800149c <vPortValidateInterruptPriority+0x70>)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <vPortValidateInterruptPriority+0x74>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	7afa      	ldrb	r2, [r7, #11]
 800144e:	429a      	cmp	r2, r3
 8001450:	d20a      	bcs.n	8001468 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8001452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001456:	f383 8811 	msr	BASEPRI, r3
 800145a:	f3bf 8f6f 	isb	sy
 800145e:	f3bf 8f4f 	dsb	sy
 8001462:	607b      	str	r3, [r7, #4]
    }
 8001464:	bf00      	nop
 8001466:	e7fe      	b.n	8001466 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <vPortValidateInterruptPriority+0x78>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <vPortValidateInterruptPriority+0x7c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d90a      	bls.n	800148e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147c:	f383 8811 	msr	BASEPRI, r3
 8001480:	f3bf 8f6f 	isb	sy
 8001484:	f3bf 8f4f 	dsb	sy
 8001488:	603b      	str	r3, [r7, #0]
    }
 800148a:	bf00      	nop
 800148c:	e7fe      	b.n	800148c <vPortValidateInterruptPriority+0x60>
    }
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e3f0 	.word	0xe000e3f0
 80014a0:	2000013c 	.word	0x2000013c
 80014a4:	e000ed0c 	.word	0xe000ed0c
 80014a8:	20000140 	.word	0x20000140

080014ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80014b8:	f7ff fa8a 	bl	80009d0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80014bc:	4b65      	ldr	r3, [pc, #404]	; (8001654 <pvPortMalloc+0x1a8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80014c4:	f000 f934 	bl	8001730 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80014c8:	4b63      	ldr	r3, [pc, #396]	; (8001658 <pvPortMalloc+0x1ac>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f040 80a7 	bne.w	8001624 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d02d      	beq.n	8001538 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80014dc:	2208      	movs	r2, #8
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d227      	bcs.n	8001538 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80014e8:	2208      	movs	r2, #8
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d021      	beq.n	800153e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f023 0307 	bic.w	r3, r3, #7
 8001500:	3308      	adds	r3, #8
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	d214      	bcs.n	8001532 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f023 0307 	bic.w	r3, r3, #7
 800150e:	3308      	adds	r3, #8
 8001510:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	2b00      	cmp	r3, #0
 800151a:	d010      	beq.n	800153e <pvPortMalloc+0x92>
        __asm volatile
 800151c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001520:	f383 8811 	msr	BASEPRI, r3
 8001524:	f3bf 8f6f 	isb	sy
 8001528:	f3bf 8f4f 	dsb	sy
 800152c:	617b      	str	r3, [r7, #20]
    }
 800152e:	bf00      	nop
 8001530:	e7fe      	b.n	8001530 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001536:	e002      	b.n	800153e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	e000      	b.n	8001540 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800153e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d06e      	beq.n	8001624 <pvPortMalloc+0x178>
 8001546:	4b45      	ldr	r3, [pc, #276]	; (800165c <pvPortMalloc+0x1b0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	d869      	bhi.n	8001624 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001550:	4b43      	ldr	r3, [pc, #268]	; (8001660 <pvPortMalloc+0x1b4>)
 8001552:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001554:	4b42      	ldr	r3, [pc, #264]	; (8001660 <pvPortMalloc+0x1b4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800155a:	e004      	b.n	8001566 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	d903      	bls.n	8001578 <pvPortMalloc+0xcc>
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f1      	bne.n	800155c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001578:	4b36      	ldr	r3, [pc, #216]	; (8001654 <pvPortMalloc+0x1a8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157e:	429a      	cmp	r2, r3
 8001580:	d050      	beq.n	8001624 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2208      	movs	r2, #8
 8001588:	4413      	add	r3, r2
 800158a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	1ad2      	subs	r2, r2, r3
 800159c:	2308      	movs	r3, #8
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d91f      	bls.n	80015e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80015a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00a      	beq.n	80015cc <pvPortMalloc+0x120>
        __asm volatile
 80015b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ba:	f383 8811 	msr	BASEPRI, r3
 80015be:	f3bf 8f6f 	isb	sy
 80015c2:	f3bf 8f4f 	dsb	sy
 80015c6:	613b      	str	r3, [r7, #16]
    }
 80015c8:	bf00      	nop
 80015ca:	e7fe      	b.n	80015ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	1ad2      	subs	r2, r2, r3
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80015de:	69b8      	ldr	r0, [r7, #24]
 80015e0:	f000 f908 	bl	80017f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <pvPortMalloc+0x1b0>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	4a1b      	ldr	r2, [pc, #108]	; (800165c <pvPortMalloc+0x1b0>)
 80015f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <pvPortMalloc+0x1b0>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <pvPortMalloc+0x1b8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d203      	bcs.n	8001606 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <pvPortMalloc+0x1b0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <pvPortMalloc+0x1b8>)
 8001604:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <pvPortMalloc+0x1ac>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	431a      	orrs	r2, r3
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <pvPortMalloc+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	4a11      	ldr	r2, [pc, #68]	; (8001668 <pvPortMalloc+0x1bc>)
 8001622:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001624:	f7ff f9e2 	bl	80009ec <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00a      	beq.n	8001648 <pvPortMalloc+0x19c>
        __asm volatile
 8001632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001636:	f383 8811 	msr	BASEPRI, r3
 800163a:	f3bf 8f6f 	isb	sy
 800163e:	f3bf 8f4f 	dsb	sy
 8001642:	60fb      	str	r3, [r7, #12]
    }
 8001644:	bf00      	nop
 8001646:	e7fe      	b.n	8001646 <pvPortMalloc+0x19a>
    return pvReturn;
 8001648:	69fb      	ldr	r3, [r7, #28]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20012d4c 	.word	0x20012d4c
 8001658:	20012d60 	.word	0x20012d60
 800165c:	20012d50 	.word	0x20012d50
 8001660:	20012d44 	.word	0x20012d44
 8001664:	20012d54 	.word	0x20012d54
 8001668:	20012d58 	.word	0x20012d58

0800166c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d04d      	beq.n	800171a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800167e:	2308      	movs	r3, #8
 8001680:	425b      	negs	r3, r3
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4413      	add	r3, r2
 8001686:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <vPortFree+0xb8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10a      	bne.n	80016b0 <vPortFree+0x44>
        __asm volatile
 800169a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800169e:	f383 8811 	msr	BASEPRI, r3
 80016a2:	f3bf 8f6f 	isb	sy
 80016a6:	f3bf 8f4f 	dsb	sy
 80016aa:	60fb      	str	r3, [r7, #12]
    }
 80016ac:	bf00      	nop
 80016ae:	e7fe      	b.n	80016ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00a      	beq.n	80016ce <vPortFree+0x62>
        __asm volatile
 80016b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016bc:	f383 8811 	msr	BASEPRI, r3
 80016c0:	f3bf 8f6f 	isb	sy
 80016c4:	f3bf 8f4f 	dsb	sy
 80016c8:	60bb      	str	r3, [r7, #8]
    }
 80016ca:	bf00      	nop
 80016cc:	e7fe      	b.n	80016cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <vPortFree+0xb8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01e      	beq.n	800171a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d11a      	bne.n	800171a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <vPortFree+0xb8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	401a      	ands	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80016f4:	f7ff f96c 	bl	80009d0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <vPortFree+0xbc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4413      	add	r3, r2
 8001702:	4a09      	ldr	r2, [pc, #36]	; (8001728 <vPortFree+0xbc>)
 8001704:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001706:	6938      	ldr	r0, [r7, #16]
 8001708:	f000 f874 	bl	80017f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <vPortFree+0xc0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	4a06      	ldr	r2, [pc, #24]	; (800172c <vPortFree+0xc0>)
 8001714:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001716:	f7ff f969 	bl	80009ec <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20012d60 	.word	0x20012d60
 8001728:	20012d50 	.word	0x20012d50
 800172c:	20012d5c 	.word	0x20012d5c

08001730 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001736:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800173a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <prvHeapInit+0xac>)
 800173e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00c      	beq.n	8001764 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3307      	adds	r3, #7
 800174e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f023 0307 	bic.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <prvHeapInit+0xac>)
 8001760:	4413      	add	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001768:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <prvHeapInit+0xb0>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <prvHeapInit+0xb0>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	4413      	add	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800177c:	2208      	movs	r2, #8
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f023 0307 	bic.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <prvHeapInit+0xb4>)
 8001790:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <prvHeapInit+0xb4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2200      	movs	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <prvHeapInit+0xb4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	1ad2      	subs	r2, r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <prvHeapInit+0xb4>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <prvHeapInit+0xb8>)
 80017be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a09      	ldr	r2, [pc, #36]	; (80017ec <prvHeapInit+0xbc>)
 80017c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <prvHeapInit+0xc0>)
 80017ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017ce:	601a      	str	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000144 	.word	0x20000144
 80017e0:	20012d44 	.word	0x20012d44
 80017e4:	20012d4c 	.word	0x20012d4c
 80017e8:	20012d54 	.word	0x20012d54
 80017ec:	20012d50 	.word	0x20012d50
 80017f0:	20012d60 	.word	0x20012d60

080017f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <prvInsertBlockIntoFreeList+0xac>)
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e002      	b.n	8001808 <prvInsertBlockIntoFreeList+0x14>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	429a      	cmp	r2, r3
 8001810:	d8f7      	bhi.n	8001802 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	4413      	add	r3, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	d108      	bne.n	8001836 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	441a      	add	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	441a      	add	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d118      	bne.n	800187c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <prvInsertBlockIntoFreeList+0xb0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d00d      	beq.n	8001872 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	441a      	add	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e008      	b.n	8001884 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <prvInsertBlockIntoFreeList+0xb0>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	e003      	b.n	8001884 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	d002      	beq.n	8001892 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20012d44 	.word	0x20012d44
 80018a4:	20012d4c 	.word	0x20012d4c

080018a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <_cbSendSystemDesc+0x14>)
 80018ae:	f001 ff6f 	bl	8003790 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80018b2:	4803      	ldr	r0, [pc, #12]	; (80018c0 <_cbSendSystemDesc+0x18>)
 80018b4:	f001 ff6c 	bl	8003790 <SEGGER_SYSVIEW_SendSysDesc>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	08005a34 	.word	0x08005a34
 80018c0:	08005a78 	.word	0x08005a78

080018c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80018ce:	6819      	ldr	r1, [r3, #0]
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80018d2:	4a06      	ldr	r2, [pc, #24]	; (80018ec <SEGGER_SYSVIEW_Conf+0x28>)
 80018d4:	f001 fbe0 	bl	8003098 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80018d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80018dc:	f001 fc20 	bl	8003120 <SEGGER_SYSVIEW_SetRAMBase>
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000010 	.word	0x20000010
 80018e8:	080018a9 	.word	0x080018a9
 80018ec:	08005b6c 	.word	0x08005b6c

080018f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	e033      	b.n	8001964 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80018fc:	491e      	ldr	r1, [pc, #120]	; (8001978 <_cbSendTaskList+0x88>)
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	491a      	ldr	r1, [pc, #104]	; (8001978 <_cbSendTaskList+0x88>)
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	3304      	adds	r3, #4
 800191c:	6819      	ldr	r1, [r3, #0]
 800191e:	4c16      	ldr	r4, [pc, #88]	; (8001978 <_cbSendTaskList+0x88>)
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4423      	add	r3, r4
 800192c:	3308      	adds	r3, #8
 800192e:	681c      	ldr	r4, [r3, #0]
 8001930:	4d11      	ldr	r5, [pc, #68]	; (8001978 <_cbSendTaskList+0x88>)
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	442b      	add	r3, r5
 800193e:	330c      	adds	r3, #12
 8001940:	681d      	ldr	r5, [r3, #0]
 8001942:	4e0d      	ldr	r6, [pc, #52]	; (8001978 <_cbSendTaskList+0x88>)
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4433      	add	r3, r6
 8001950:	3310      	adds	r3, #16
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	462b      	mov	r3, r5
 8001958:	4622      	mov	r2, r4
 800195a:	f000 f8b5 	bl	8001ac8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3301      	adds	r3, #1
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <_cbSendTaskList+0x8c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	429a      	cmp	r2, r3
 800196c:	d3c6      	bcc.n	80018fc <_cbSendTaskList+0xc>
  }
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001978:	20012d64 	.word	0x20012d64
 800197c:	20012e04 	.word	0x20012e04

08001980 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001986:	f7ff f8d1 	bl	8000b2c <xTaskGetTickCountFromISR>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001996:	e9d7 0100 	ldrd	r0, r1, [r7]
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	f04f 0400 	mov.w	r4, #0
 80019a2:	f04f 0500 	mov.w	r5, #0
 80019a6:	015d      	lsls	r5, r3, #5
 80019a8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80019ac:	0154      	lsls	r4, r2, #5
 80019ae:	4622      	mov	r2, r4
 80019b0:	462b      	mov	r3, r5
 80019b2:	1a12      	subs	r2, r2, r0
 80019b4:	eb63 0301 	sbc.w	r3, r3, r1
 80019b8:	f04f 0400 	mov.w	r4, #0
 80019bc:	f04f 0500 	mov.w	r5, #0
 80019c0:	009d      	lsls	r5, r3, #2
 80019c2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80019c6:	0094      	lsls	r4, r2, #2
 80019c8:	4622      	mov	r2, r4
 80019ca:	462b      	mov	r3, r5
 80019cc:	1812      	adds	r2, r2, r0
 80019ce:	eb41 0303 	adc.w	r3, r1, r3
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	00d9      	lsls	r1, r3, #3
 80019dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019e0:	00d0      	lsls	r0, r2, #3
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80019ea:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdb0      	pop	{r4, r5, r7, pc}

080019f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001a06:	2205      	movs	r2, #5
 8001a08:	492b      	ldr	r1, [pc, #172]	; (8001ab8 <SYSVIEW_AddTask+0xc0>)
 8001a0a:	68b8      	ldr	r0, [r7, #8]
 8001a0c:	f003 ffde 	bl	80059cc <memcmp>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d04b      	beq.n	8001aae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001a16:	4b29      	ldr	r3, [pc, #164]	; (8001abc <SYSVIEW_AddTask+0xc4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b07      	cmp	r3, #7
 8001a1c:	d903      	bls.n	8001a26 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001a1e:	4828      	ldr	r0, [pc, #160]	; (8001ac0 <SYSVIEW_AddTask+0xc8>)
 8001a20:	f002 f958 	bl	8003cd4 <SEGGER_SYSVIEW_Warn>
    return;
 8001a24:	e044      	b.n	8001ab0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001a26:	4b25      	ldr	r3, [pc, #148]	; (8001abc <SYSVIEW_AddTask+0xc4>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4926      	ldr	r1, [pc, #152]	; (8001ac4 <SYSVIEW_AddTask+0xcc>)
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <SYSVIEW_AddTask+0xc4>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4921      	ldr	r1, [pc, #132]	; (8001ac4 <SYSVIEW_AddTask+0xcc>)
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <SYSVIEW_AddTask+0xc4>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	491b      	ldr	r1, [pc, #108]	; (8001ac4 <SYSVIEW_AddTask+0xcc>)
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	3308      	adds	r3, #8
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <SYSVIEW_AddTask+0xc4>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4916      	ldr	r1, [pc, #88]	; (8001ac4 <SYSVIEW_AddTask+0xcc>)
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	330c      	adds	r3, #12
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <SYSVIEW_AddTask+0xc4>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4910      	ldr	r1, [pc, #64]	; (8001ac4 <SYSVIEW_AddTask+0xcc>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3310      	adds	r3, #16
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <SYSVIEW_AddTask+0xc4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <SYSVIEW_AddTask+0xc4>)
 8001a9a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f80e 	bl	8001ac8 <SYSVIEW_SendTaskInfo>
 8001aac:	e000      	b.n	8001ab0 <SYSVIEW_AddTask+0xb8>
    return;
 8001aae:	bf00      	nop

}
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	08005a88 	.word	0x08005a88
 8001abc:	20012e04 	.word	0x20012e04
 8001ac0:	08005a90 	.word	0x08005a90
 8001ac4:	20012d64 	.word	0x20012d64

08001ac8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	2214      	movs	r2, #20
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 ff90 	bl	8005a04 <memset>
  TaskInfo.TaskID     = TaskID;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4618      	mov	r0, r3
 8001afe:	f001 fd4f 	bl	80035a0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	; 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	db0b      	blt.n	8001b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	4907      	ldr	r1, [pc, #28]	; (8001b44 <__NVIC_EnableIRQ+0x38>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8001ba2:	f002 f8f3 	bl	8003d8c <SEGGER_SYSVIEW_IsStarted>
 8001ba6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8001bae:	f001 fb7b 	bl	80032a8 <SEGGER_SYSVIEW_Start>
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <_cbOnUARTRx+0x3c>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d806      	bhi.n	8001bdc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <_cbOnUARTRx+0x3c>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <_cbOnUARTRx+0x3c>)
 8001bd8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8001bda:	e009      	b.n	8001bf0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8001bdc:	f7ff ffde 	bl	8001b9c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <_cbOnUARTRx+0x3c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4618      	mov	r0, r3
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	2201      	movs	r2, #1
 8001bea:	4619      	mov	r1, r3
 8001bec:	f000 fb9a 	bl	8002324 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8001bf0:	bf00      	nop
}
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000008 	.word	0x20000008

08001bfc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <_cbOnUARTTx+0x5c>)
 8001c06:	785b      	ldrb	r3, [r3, #1]
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d80f      	bhi.n	8001c2c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <_cbOnUARTTx+0x5c>)
 8001c0e:	785b      	ldrb	r3, [r3, #1]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <_cbOnUARTTx+0x60>)
 8001c14:	5c9a      	ldrb	r2, [r3, r2]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <_cbOnUARTTx+0x5c>)
 8001c1c:	785b      	ldrb	r3, [r3, #1]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <_cbOnUARTTx+0x5c>)
 8001c24:	705a      	strb	r2, [r3, #1]
    r = 1;
 8001c26:	2301      	movs	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
    goto Done;
 8001c2a:	e00f      	b.n	8001c4c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <_cbOnUARTTx+0x5c>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fa19 	bl	800206c <SEGGER_RTT_ReadUpBufferNoLock>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	da02      	bge.n	8001c4a <_cbOnUARTTx+0x4e>
    r = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	e000      	b.n	8001c4c <_cbOnUARTTx+0x50>
  }
Done:
 8001c4a:	bf00      	nop
  return r;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	08005b74 	.word	0x08005b74

08001c60 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <SEGGER_UART_init+0x1c>)
 8001c6a:	4905      	ldr	r1, [pc, #20]	; (8001c80 <SEGGER_UART_init+0x20>)
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f863 	bl	8001d38 <HIF_UART_Init>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	08001bbd 	.word	0x08001bbd
 8001c80:	08001bfd 	.word	0x08001bfd

08001c84 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <USART2_IRQHandler+0x80>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d011      	beq.n	8001cbe <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <USART2_IRQHandler+0x84>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 030b 	and.w	r3, r3, #11
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d108      	bne.n	8001cbe <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <USART2_IRQHandler+0x88>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d004      	beq.n	8001cbe <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <USART2_IRQHandler+0x88>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	79fa      	ldrb	r2, [r7, #7]
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d01a      	beq.n	8001cfe <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <USART2_IRQHandler+0x8c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d015      	beq.n	8001cfc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <USART2_IRQHandler+0x8c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	1dfa      	adds	r2, r7, #7
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4798      	blx	r3
 8001cda:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <USART2_IRQHandler+0x90>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <USART2_IRQHandler+0x90>)
 8001ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e006      	b.n	8001cfe <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <USART2_IRQHandler+0x80>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8001cf4:	79fa      	ldrb	r2, [r7, #7]
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <USART2_IRQHandler+0x84>)
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e000      	b.n	8001cfe <USART2_IRQHandler+0x7a>
      return;
 8001cfc:	bf00      	nop
    }
  }
}
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40004400 	.word	0x40004400
 8001d08:	40004404 	.word	0x40004404
 8001d0c:	20012e08 	.word	0x20012e08
 8001d10:	20012e0c 	.word	0x20012e0c
 8001d14:	4000440c 	.word	0x4000440c

08001d18 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	4000440c 	.word	0x4000440c

08001d38 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8001d44:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <HIF_UART_Init+0xc8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a2d      	ldr	r2, [pc, #180]	; (8001e00 <HIF_UART_Init+0xc8>)
 8001d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8001d50:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <HIF_UART_Init+0xcc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a2b      	ldr	r2, [pc, #172]	; (8001e04 <HIF_UART_Init+0xcc>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HIF_UART_Init+0xd0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d68:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001d70:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8001d72:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <HIF_UART_Init+0xd0>)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HIF_UART_Init+0xd4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d84:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001d8c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HIF_UART_Init+0xd4>)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <HIF_UART_Init+0xd8>)
 8001d96:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8001d9a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HIF_UART_Init+0xdc>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8001da2:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <HIF_UART_Init+0xe0>)
 8001da4:	2280      	movs	r2, #128	; 0x80
 8001da6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HIF_UART_Init+0xe4>)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc6:	d302      	bcc.n	8001dce <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8001dc8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001dcc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	4a11      	ldr	r2, [pc, #68]	; (8001e20 <HIF_UART_Init+0xe8>)
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8001dde:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <HIF_UART_Init+0xec>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8001de4:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <HIF_UART_Init+0xf0>)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8001dea:	2106      	movs	r1, #6
 8001dec:	2026      	movs	r0, #38	; 0x26
 8001dee:	f7ff feab 	bl	8001b48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8001df2:	2026      	movs	r0, #38	; 0x26
 8001df4:	f7ff fe8a 	bl	8001b0c <__NVIC_EnableIRQ>
}
 8001df8:	bf00      	nop
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023840 	.word	0x40023840
 8001e04:	40023830 	.word	0x40023830
 8001e08:	40020020 	.word	0x40020020
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	4000440c 	.word	0x4000440c
 8001e14:	40004410 	.word	0x40004410
 8001e18:	40004414 	.word	0x40004414
 8001e1c:	0501bd00 	.word	0x0501bd00
 8001e20:	40004408 	.word	0x40004408
 8001e24:	20012e08 	.word	0x20012e08
 8001e28:	20012e0c 	.word	0x20012e0c

08001e2c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <_DoInit+0x98>)
 8001e34:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a20      	ldr	r2, [pc, #128]	; (8001ec8 <_DoInit+0x9c>)
 8001e46:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a20      	ldr	r2, [pc, #128]	; (8001ecc <_DoInit+0xa0>)
 8001e4c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e54:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <_DoInit+0x9c>)
 8001e6c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <_DoInit+0xa4>)
 8001e72:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2210      	movs	r2, #16
 8001e78:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3307      	adds	r3, #7
 8001e90:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <_DoInit+0xa8>)
 8001e92:	6810      	ldr	r0, [r2, #0]
 8001e94:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8001e96:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <_DoInit+0xac>)
 8001e9e:	6810      	ldr	r0, [r2, #0]
 8001ea0:	6018      	str	r0, [r3, #0]
 8001ea2:	8891      	ldrh	r1, [r2, #4]
 8001ea4:	7992      	ldrb	r2, [r2, #6]
 8001ea6:	8099      	strh	r1, [r3, #4]
 8001ea8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8001eaa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8001eb4:	f3bf 8f5f 	dmb	sy
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	2001433c 	.word	0x2001433c
 8001ec8:	08005ae0 	.word	0x08005ae0
 8001ecc:	20012e10 	.word	0x20012e10
 8001ed0:	20013210 	.word	0x20013210
 8001ed4:	08005aec 	.word	0x08005aec
 8001ed8:	08005af0 	.word	0x08005af0

08001edc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d905      	bls.n	8001f0c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0a:	e007      	b.n	8001f1c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	69b9      	ldr	r1, [r7, #24]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	1acb      	subs	r3, r1, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f26:	4293      	cmp	r3, r2
 8001f28:	bf28      	it	cs
 8001f2a:	4613      	movcs	r3, r2
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4293      	cmp	r3, r2
 8001f34:	bf28      	it	cs
 8001f36:	4613      	movcs	r3, r2
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	4413      	add	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8001f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	6978      	ldr	r0, [r7, #20]
 8001f4a:	f003 fd4d 	bl	80059e8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001f4e:	6a3a      	ldr	r2, [r7, #32]
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	4413      	add	r3, r2
 8001f54:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	4413      	add	r3, r2
 8001f5c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	4413      	add	r3, r2
 8001f6c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d101      	bne.n	8001f7c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001f7c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1b2      	bne.n	8001ef2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3728      	adds	r7, #40	; 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b088      	sub	sp, #32
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d911      	bls.n	8001fde <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	6938      	ldr	r0, [r7, #16]
 8001fca:	f003 fd0d 	bl	80059e8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001fce:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	441a      	add	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001fdc:	e01f      	b.n	800201e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	6938      	ldr	r0, [r7, #16]
 8001ff2:	f003 fcf9 	bl	80059e8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4413      	add	r3, r2
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4619      	mov	r1, r3
 800200e:	6938      	ldr	r0, [r7, #16]
 8002010:	f003 fcea 	bl	80059e8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002014:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	60da      	str	r2, [r3, #12]
}
 800201e:	bf00      	nop
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002026:	b480      	push	{r7}
 8002028:	b087      	sub	sp, #28
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	429a      	cmp	r2, r3
 8002040:	d808      	bhi.n	8002054 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	3b01      	subs	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e004      	b.n	800205e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800205e:	697b      	ldr	r3, [r7, #20]
}
 8002060:	4618      	mov	r0, r3
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	; 0x30
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8002078:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800207a:	623b      	str	r3, [r7, #32]
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8002086:	f7ff fed1 	bl	8001e2c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4a37      	ldr	r2, [pc, #220]	; (8002174 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002098:	4413      	add	r3, r2
 800209a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80020b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d92b      	bls.n	8002110 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4293      	cmp	r3, r2
 80020c8:	bf28      	it	cs
 80020ca:	4613      	movcs	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d4:	4413      	add	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	6939      	ldr	r1, [r7, #16]
 80020dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020de:	f003 fc83 	bl	80059e8 <memcpy>
    NumBytesRead += NumBytesRem;
 80020e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	4413      	add	r3, r2
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80020ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	4413      	add	r3, r2
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80020fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	4413      	add	r3, r2
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002108:	429a      	cmp	r2, r3
 800210a:	d101      	bne.n	8002110 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800210c:	2300      	movs	r3, #0
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4293      	cmp	r3, r2
 800211e:	bf28      	it	cs
 8002120:	4613      	movcs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d019      	beq.n	800215e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002130:	4413      	add	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	6939      	ldr	r1, [r7, #16]
 8002138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800213a:	f003 fc55 	bl	80059e8 <memcpy>
    NumBytesRead += NumBytesRem;
 800213e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	4413      	add	r3, r2
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	4413      	add	r3, r2
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4413      	add	r3, r2
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002168:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800216c:	4618      	mov	r0, r3
 800216e:	3730      	adds	r7, #48	; 0x30
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	2001433c 	.word	0x2001433c

08002178 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b08c      	sub	sp, #48	; 0x30
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002184:	4b3e      	ldr	r3, [pc, #248]	; (8002280 <SEGGER_RTT_ReadNoLock+0x108>)
 8002186:	623b      	str	r3, [r7, #32]
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <SEGGER_RTT_ReadNoLock+0x1e>
 8002192:	f7ff fe4b 	bl	8001e2c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	3360      	adds	r3, #96	; 0x60
 80021a2:	4a37      	ldr	r2, [pc, #220]	; (8002280 <SEGGER_RTT_ReadNoLock+0x108>)
 80021a4:	4413      	add	r3, r2
 80021a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80021bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d92b      	bls.n	800221c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4293      	cmp	r3, r2
 80021d4:	bf28      	it	cs
 80021d6:	4613      	movcs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	4413      	add	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	6939      	ldr	r1, [r7, #16]
 80021e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021ea:	f003 fbfd 	bl	80059e8 <memcpy>
    NumBytesRead += NumBytesRem;
 80021ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	4413      	add	r3, r2
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80021f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	4413      	add	r3, r2
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	4413      	add	r3, r2
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002214:	429a      	cmp	r2, r3
 8002216:	d101      	bne.n	800221c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4293      	cmp	r3, r2
 800222a:	bf28      	it	cs
 800222c:	4613      	movcs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d019      	beq.n	800226a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223c:	4413      	add	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	6939      	ldr	r1, [r7, #16]
 8002244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002246:	f003 fbcf 	bl	80059e8 <memcpy>
    NumBytesRead += NumBytesRem;
 800224a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	4413      	add	r3, r2
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	4413      	add	r3, r2
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	4413      	add	r3, r2
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002274:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002278:	4618      	mov	r0, r3
 800227a:	3730      	adds	r7, #48	; 0x30
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	2001433c 	.word	0x2001433c

08002284 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	3360      	adds	r3, #96	; 0x60
 80022a0:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80022a2:	4413      	add	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d029      	beq.n	8002302 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d82e      	bhi.n	8002310 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d013      	beq.n	80022e2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80022ba:	e029      	b.n	8002310 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80022bc:	6978      	ldr	r0, [r7, #20]
 80022be:	f7ff feb2 	bl	8002026 <_GetAvailWriteSpace>
 80022c2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d202      	bcs.n	80022d2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80022d0:	e021      	b.n	8002316 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	69b9      	ldr	r1, [r7, #24]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff fe5b 	bl	8001f96 <_WriteNoCheck>
    break;
 80022e0:	e019      	b.n	8002316 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff fe9f 	bl	8002026 <_GetAvailWriteSpace>
 80022e8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4293      	cmp	r3, r2
 80022f0:	bf28      	it	cs
 80022f2:	4613      	movcs	r3, r2
 80022f4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	69b9      	ldr	r1, [r7, #24]
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f7ff fe4b 	bl	8001f96 <_WriteNoCheck>
    break;
 8002300:	e009      	b.n	8002316 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	69b9      	ldr	r1, [r7, #24]
 8002306:	6978      	ldr	r0, [r7, #20]
 8002308:	f7ff fde8 	bl	8001edc <_WriteBlocking>
 800230c:	61f8      	str	r0, [r7, #28]
    break;
 800230e:	e002      	b.n	8002316 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
    break;
 8002314:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002316:	69fb      	ldr	r3, [r7, #28]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	2001433c 	.word	0x2001433c

08002324 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800233e:	f7ff fd75 	bl	8001e2c <_DoInit>
  SEGGER_RTT_LOCK();
 8002342:	f3ef 8311 	mrs	r3, BASEPRI
 8002346:	f04f 0120 	mov.w	r1, #32
 800234a:	f381 8811 	msr	BASEPRI, r1
 800234e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68b9      	ldr	r1, [r7, #8]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff ff95 	bl	8002284 <SEGGER_RTT_WriteDownBufferNoLock>
 800235a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8002362:	697b      	ldr	r3, [r7, #20]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3720      	adds	r7, #32
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	2001433c 	.word	0x2001433c

08002370 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800237e:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <SEGGER_RTT_AllocUpBuffer+0x20>
 800238c:	f7ff fd4e 	bl	8001e2c <_DoInit>
  SEGGER_RTT_LOCK();
 8002390:	f3ef 8311 	mrs	r3, BASEPRI
 8002394:	f04f 0120 	mov.w	r1, #32
 8002398:	f381 8811 	msr	BASEPRI, r1
 800239c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800239e:	4b35      	ldr	r3, [pc, #212]	; (8002474 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80023a0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80023a6:	6939      	ldr	r1, [r7, #16]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	3304      	adds	r3, #4
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3301      	adds	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	dbeb      	blt.n	80023a6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80023ce:	e000      	b.n	80023d2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80023d0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	429a      	cmp	r2, r3
 80023da:	da3f      	bge.n	800245c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80023dc:	6939      	ldr	r1, [r7, #16]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80023f0:	6939      	ldr	r1, [r7, #16]
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3304      	adds	r3, #4
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002406:	6939      	ldr	r1, [r7, #16]
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	3320      	adds	r3, #32
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800241a:	6939      	ldr	r1, [r7, #16]
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	3328      	adds	r3, #40	; 0x28
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800242e:	6939      	ldr	r1, [r7, #16]
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	3324      	adds	r3, #36	; 0x24
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8002442:	6939      	ldr	r1, [r7, #16]
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	332c      	adds	r3, #44	; 0x2c
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002456:	f3bf 8f5f 	dmb	sy
 800245a:	e002      	b.n	8002462 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800245c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002460:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8002468:	69fb      	ldr	r3, [r7, #28]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	2001433c 	.word	0x2001433c

08002478 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	; 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8002486:	4b21      	ldr	r3, [pc, #132]	; (800250c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002488:	623b      	str	r3, [r7, #32]
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002494:	f7ff fcca 	bl	8001e2c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002498:	4b1c      	ldr	r3, [pc, #112]	; (800250c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800249a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d82c      	bhi.n	80024fc <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80024a2:	f3ef 8311 	mrs	r3, BASEPRI
 80024a6:	f04f 0120 	mov.w	r1, #32
 80024aa:	f381 8811 	msr	BASEPRI, r1
 80024ae:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	3360      	adds	r3, #96	; 0x60
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	4413      	add	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00e      	beq.n	80024e6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2200      	movs	r2, #0
 80024e4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ea:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80024ec:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
 80024fa:	e002      	b.n	8002502 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80024fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002504:	4618      	mov	r0, r3
 8002506:	3728      	adds	r7, #40	; 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	2001433c 	.word	0x2001433c

08002510 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00f      	beq.n	8002546 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8002526:	e002      	b.n	800252e <_EncodeStr+0x1e>
      Len++;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	3301      	adds	r3, #1
 800252c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4413      	add	r3, r2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f6      	bne.n	8002528 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	429a      	cmp	r2, r3
 8002540:	d901      	bls.n	8002546 <_EncodeStr+0x36>
      Len = Limit;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2bfe      	cmp	r3, #254	; 0xfe
 800254a:	d806      	bhi.n	800255a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	60fa      	str	r2, [r7, #12]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e011      	b.n	800257e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	60fa      	str	r2, [r7, #12]
 8002560:	22ff      	movs	r2, #255	; 0xff
 8002562:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	60fa      	str	r2, [r7, #12]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	0a19      	lsrs	r1, r3, #8
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	60fa      	str	r2, [r7, #12]
 800257a:	b2ca      	uxtb	r2, r1
 800257c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002582:	e00a      	b.n	800259a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	1c53      	adds	r3, r2, #1
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1c59      	adds	r1, r3, #1
 800258e:	60f9      	str	r1, [r7, #12]
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	701a      	strb	r2, [r3, #0]
    n++;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3301      	adds	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d3f0      	bcc.n	8002584 <_EncodeStr+0x74>
  }
  return pPayload;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80025ce:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <_HandleIncomingPacket+0xe0>)
 80025d0:	7e1b      	ldrb	r3, [r3, #24]
 80025d2:	4618      	mov	r0, r3
 80025d4:	1cfb      	adds	r3, r7, #3
 80025d6:	2201      	movs	r2, #1
 80025d8:	4619      	mov	r1, r3
 80025da:	f7ff fdcd 	bl	8002178 <SEGGER_RTT_ReadNoLock>
 80025de:	4603      	mov	r3, r0
 80025e0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	dd54      	ble.n	8002692 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	2b80      	cmp	r3, #128	; 0x80
 80025ec:	d032      	beq.n	8002654 <_HandleIncomingPacket+0x8c>
 80025ee:	2b80      	cmp	r3, #128	; 0x80
 80025f0:	dc42      	bgt.n	8002678 <_HandleIncomingPacket+0xb0>
 80025f2:	2b07      	cmp	r3, #7
 80025f4:	dc16      	bgt.n	8002624 <_HandleIncomingPacket+0x5c>
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dd3e      	ble.n	8002678 <_HandleIncomingPacket+0xb0>
 80025fa:	3b01      	subs	r3, #1
 80025fc:	2b06      	cmp	r3, #6
 80025fe:	d83b      	bhi.n	8002678 <_HandleIncomingPacket+0xb0>
 8002600:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <_HandleIncomingPacket+0x40>)
 8002602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002606:	bf00      	nop
 8002608:	0800262b 	.word	0x0800262b
 800260c:	08002631 	.word	0x08002631
 8002610:	08002637 	.word	0x08002637
 8002614:	0800263d 	.word	0x0800263d
 8002618:	08002643 	.word	0x08002643
 800261c:	08002649 	.word	0x08002649
 8002620:	0800264f 	.word	0x0800264f
 8002624:	2b7f      	cmp	r3, #127	; 0x7f
 8002626:	d036      	beq.n	8002696 <_HandleIncomingPacket+0xce>
 8002628:	e026      	b.n	8002678 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800262a:	f000 fe3d 	bl	80032a8 <SEGGER_SYSVIEW_Start>
      break;
 800262e:	e037      	b.n	80026a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002630:	f000 fef6 	bl	8003420 <SEGGER_SYSVIEW_Stop>
      break;
 8002634:	e034      	b.n	80026a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002636:	f001 f8cf 	bl	80037d8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800263a:	e031      	b.n	80026a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800263c:	f001 f894 	bl	8003768 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002640:	e02e      	b.n	80026a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002642:	f000 ff13 	bl	800346c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002646:	e02b      	b.n	80026a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002648:	f001 faf2 	bl	8003c30 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800264c:	e028      	b.n	80026a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800264e:	f001 fad1 	bl	8003bf4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002652:	e025      	b.n	80026a0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <_HandleIncomingPacket+0xe0>)
 8002656:	7e1b      	ldrb	r3, [r3, #24]
 8002658:	4618      	mov	r0, r3
 800265a:	1cfb      	adds	r3, r7, #3
 800265c:	2201      	movs	r2, #1
 800265e:	4619      	mov	r1, r3
 8002660:	f7ff fd8a 	bl	8002178 <SEGGER_RTT_ReadNoLock>
 8002664:	4603      	mov	r3, r0
 8002666:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	dd15      	ble.n	800269a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	4618      	mov	r0, r3
 8002672:	f001 fa3f 	bl	8003af4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002676:	e010      	b.n	800269a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	b25b      	sxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	da0e      	bge.n	800269e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <_HandleIncomingPacket+0xe0>)
 8002682:	7e1b      	ldrb	r3, [r3, #24]
 8002684:	4618      	mov	r0, r3
 8002686:	1cfb      	adds	r3, r7, #3
 8002688:	2201      	movs	r2, #1
 800268a:	4619      	mov	r1, r3
 800268c:	f7ff fd74 	bl	8002178 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002690:	e005      	b.n	800269e <_HandleIncomingPacket+0xd6>
    }
  }
 8002692:	bf00      	nop
 8002694:	e004      	b.n	80026a0 <_HandleIncomingPacket+0xd8>
      break;
 8002696:	bf00      	nop
 8002698:	e002      	b.n	80026a0 <_HandleIncomingPacket+0xd8>
      break;
 800269a:	bf00      	nop
 800269c:	e000      	b.n	80026a0 <_HandleIncomingPacket+0xd8>
      break;
 800269e:	bf00      	nop
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20014228 	.word	0x20014228

080026ac <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08c      	sub	sp, #48	; 0x30
 80026b0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80026b2:	2301      	movs	r3, #1
 80026b4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	3301      	adds	r3, #1
 80026ba:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c0:	4b32      	ldr	r3, [pc, #200]	; (800278c <_TrySendOverflowPacket+0xe0>)
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c6:	e00b      	b.n	80026e0 <_TrySendOverflowPacket+0x34>
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ce:	1c59      	adds	r1, r3, #1
 80026d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80026d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	09db      	lsrs	r3, r3, #7
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	2b7f      	cmp	r3, #127	; 0x7f
 80026e4:	d8f0      	bhi.n	80026c8 <_TrySendOverflowPacket+0x1c>
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80026f6:	4b26      	ldr	r3, [pc, #152]	; (8002790 <_TrySendOverflowPacket+0xe4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80026fc:	4b23      	ldr	r3, [pc, #140]	; (800278c <_TrySendOverflowPacket+0xe0>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	623b      	str	r3, [r7, #32]
 800270e:	e00b      	b.n	8002728 <_TrySendOverflowPacket+0x7c>
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	1c59      	adds	r1, r3, #1
 8002718:	6279      	str	r1, [r7, #36]	; 0x24
 800271a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	09db      	lsrs	r3, r3, #7
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	2b7f      	cmp	r3, #127	; 0x7f
 800272c:	d8f0      	bhi.n	8002710 <_TrySendOverflowPacket+0x64>
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	627a      	str	r2, [r7, #36]	; 0x24
 8002734:	6a3a      	ldr	r2, [r7, #32]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <_TrySendOverflowPacket+0xe0>)
 8002740:	785b      	ldrb	r3, [r3, #1]
 8002742:	4618      	mov	r0, r3
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	461a      	mov	r2, r3
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	4619      	mov	r1, r3
 8002750:	f7fd fd3e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002754:	4603      	mov	r3, r0
 8002756:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002758:	f7ff fade 	bl	8001d18 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <_TrySendOverflowPacket+0xe0>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <_TrySendOverflowPacket+0xe0>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	3b01      	subs	r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <_TrySendOverflowPacket+0xe0>)
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	e004      	b.n	8002780 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <_TrySendOverflowPacket+0xe0>)
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	3301      	adds	r3, #1
 800277c:	4a03      	ldr	r2, [pc, #12]	; (800278c <_TrySendOverflowPacket+0xe0>)
 800277e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002780:	693b      	ldr	r3, [r7, #16]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3730      	adds	r7, #48	; 0x30
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20014228 	.word	0x20014228
 8002790:	e0001004 	.word	0xe0001004

08002794 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80027a0:	4b6d      	ldr	r3, [pc, #436]	; (8002958 <_SendPacket+0x1c4>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d010      	beq.n	80027ca <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80027a8:	4b6b      	ldr	r3, [pc, #428]	; (8002958 <_SendPacket+0x1c4>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80a5 	beq.w	80028fc <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80027b2:	4b69      	ldr	r3, [pc, #420]	; (8002958 <_SendPacket+0x1c4>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d109      	bne.n	80027ce <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80027ba:	f7ff ff77 	bl	80026ac <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80027be:	4b66      	ldr	r3, [pc, #408]	; (8002958 <_SendPacket+0x1c4>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	f040 809c 	bne.w	8002900 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80027c8:	e001      	b.n	80027ce <_SendPacket+0x3a>
    goto Send;
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <_SendPacket+0x3c>
Send:
 80027ce:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b1f      	cmp	r3, #31
 80027d4:	d809      	bhi.n	80027ea <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80027d6:	4b60      	ldr	r3, [pc, #384]	; (8002958 <_SendPacket+0x1c4>)
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 808d 	bne.w	8002904 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b17      	cmp	r3, #23
 80027ee:	d807      	bhi.n	8002800 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e03d      	b.n	800287c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b7f      	cmp	r3, #127	; 0x7f
 800280c:	d912      	bls.n	8002834 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	09da      	lsrs	r2, r3, #7
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3b01      	subs	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	3a01      	subs	r2, #1
 8002826:	60fa      	str	r2, [r7, #12]
 8002828:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800282c:	b2da      	uxtb	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	e006      	b.n	8002842 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3b01      	subs	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b7f      	cmp	r3, #127	; 0x7f
 8002846:	d912      	bls.n	800286e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	09da      	lsrs	r2, r3, #7
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3b01      	subs	r3, #1
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	3a01      	subs	r2, #1
 8002860:	60fa      	str	r2, [r7, #12]
 8002862:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002866:	b2da      	uxtb	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	701a      	strb	r2, [r3, #0]
 800286c:	e006      	b.n	800287c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3b01      	subs	r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800287c:	4b37      	ldr	r3, [pc, #220]	; (800295c <_SendPacket+0x1c8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002882:	4b35      	ldr	r3, [pc, #212]	; (8002958 <_SendPacket+0x1c4>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	623b      	str	r3, [r7, #32]
 8002894:	e00b      	b.n	80028ae <_SendPacket+0x11a>
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	1c59      	adds	r1, r3, #1
 800289e:	6279      	str	r1, [r7, #36]	; 0x24
 80028a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	09db      	lsrs	r3, r3, #7
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	2b7f      	cmp	r3, #127	; 0x7f
 80028b2:	d8f0      	bhi.n	8002896 <_SendPacket+0x102>
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	627a      	str	r2, [r7, #36]	; 0x24
 80028ba:	6a3a      	ldr	r2, [r7, #32]
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <_SendPacket+0x1c4>)
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	4618      	mov	r0, r3
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	68f9      	ldr	r1, [r7, #12]
 80028d4:	f7fd fc7c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80028d8:	4603      	mov	r3, r0
 80028da:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80028dc:	f7ff fa1c 	bl	8001d18 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80028e6:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <_SendPacket+0x1c4>)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	60d3      	str	r3, [r2, #12]
 80028ec:	e00b      	b.n	8002906 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80028ee:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <_SendPacket+0x1c4>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4b18      	ldr	r3, [pc, #96]	; (8002958 <_SendPacket+0x1c4>)
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	e004      	b.n	8002906 <_SendPacket+0x172>
    goto SendDone;
 80028fc:	bf00      	nop
 80028fe:	e002      	b.n	8002906 <_SendPacket+0x172>
      goto SendDone;
 8002900:	bf00      	nop
 8002902:	e000      	b.n	8002906 <_SendPacket+0x172>
      goto SendDone;
 8002904:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <_SendPacket+0x1c4>)
 8002908:	7e1b      	ldrb	r3, [r3, #24]
 800290a:	4619      	mov	r1, r3
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <_SendPacket+0x1cc>)
 800290e:	460b      	mov	r3, r1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	440b      	add	r3, r1
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4413      	add	r3, r2
 8002918:	336c      	adds	r3, #108	; 0x6c
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <_SendPacket+0x1c4>)
 800291e:	7e1b      	ldrb	r3, [r3, #24]
 8002920:	4618      	mov	r0, r3
 8002922:	490f      	ldr	r1, [pc, #60]	; (8002960 <_SendPacket+0x1cc>)
 8002924:	4603      	mov	r3, r0
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4403      	add	r3, r0
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	440b      	add	r3, r1
 800292e:	3370      	adds	r3, #112	; 0x70
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d00b      	beq.n	800294e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <_SendPacket+0x1c4>)
 8002938:	789b      	ldrb	r3, [r3, #2]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d107      	bne.n	800294e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <_SendPacket+0x1c4>)
 8002940:	2201      	movs	r2, #1
 8002942:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002944:	f7ff fe40 	bl	80025c8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <_SendPacket+0x1c4>)
 800294a:	2200      	movs	r2, #0
 800294c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800294e:	bf00      	nop
 8002950:	3728      	adds	r7, #40	; 0x28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20014228 	.word	0x20014228
 800295c:	e0001004 	.word	0xe0001004
 8002960:	2001433c 	.word	0x2001433c

08002964 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	3301      	adds	r3, #1
 800297a:	2b80      	cmp	r3, #128	; 0x80
 800297c:	d80a      	bhi.n	8002994 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	1c59      	adds	r1, r3, #1
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6051      	str	r1, [r2, #4]
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d15a      	bne.n	8002a52 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	e00b      	b.n	80029d6 <_StoreChar+0x72>
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	1c59      	adds	r1, r3, #1
 80029c6:	6279      	str	r1, [r7, #36]	; 0x24
 80029c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	09db      	lsrs	r3, r3, #7
 80029d4:	623b      	str	r3, [r7, #32]
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	2b7f      	cmp	r3, #127	; 0x7f
 80029da:	d8f0      	bhi.n	80029be <_StoreChar+0x5a>
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	627a      	str	r2, [r7, #36]	; 0x24
 80029e2:	6a3a      	ldr	r2, [r7, #32]
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]
 80029f4:	e00b      	b.n	8002a0e <_StoreChar+0xaa>
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	1c59      	adds	r1, r3, #1
 80029fe:	61f9      	str	r1, [r7, #28]
 8002a00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	09db      	lsrs	r3, r3, #7
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b7f      	cmp	r3, #127	; 0x7f
 8002a12:	d8f0      	bhi.n	80029f6 <_StoreChar+0x92>
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	61fa      	str	r2, [r7, #28]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	221a      	movs	r2, #26
 8002a2a:	6939      	ldr	r1, [r7, #16]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff feb1 	bl	8002794 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fdba 	bl	80025b0 <_PreparePacket>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	611a      	str	r2, [r3, #16]
  }
}
 8002a52:	bf00      	nop
 8002a54:	3728      	adds	r7, #40	; 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	; 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8002a72:	2301      	movs	r3, #1
 8002a74:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002a76:	e007      	b.n	8002a88 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8002a78:	6a3a      	ldr	r2, [r7, #32]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	623b      	str	r3, [r7, #32]
    Width++;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d2f3      	bcs.n	8002a78 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d901      	bls.n	8002a9c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d11f      	bne.n	8002ae6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01c      	beq.n	8002ae6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8002aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <_PrintUnsigned+0x66>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <_PrintUnsigned+0x66>
        c = '0';
 8002abc:	2330      	movs	r3, #48	; 0x30
 8002abe:	76fb      	strb	r3, [r7, #27]
 8002ac0:	e001      	b.n	8002ac6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002ac6:	e007      	b.n	8002ad8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	3b01      	subs	r3, #1
 8002acc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8002ace:	7efb      	ldrb	r3, [r7, #27]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7ff ff46 	bl	8002964 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <_PrintUnsigned+0x8a>
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d3f0      	bcc.n	8002ac8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d903      	bls.n	8002af4 <_PrintUnsigned+0x98>
      NumDigits--;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	e009      	b.n	8002b08 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d200      	bcs.n	8002b08 <_PrintUnsigned+0xac>
        break;
 8002b06:	e005      	b.n	8002b14 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	fb02 f303 	mul.w	r3, r2, r3
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002b12:	e7e8      	b.n	8002ae6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8002b2c:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <_PrintUnsigned+0x128>)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	4413      	add	r3, r2
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	4619      	mov	r1, r3
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f7ff ff14 	bl	8002964 <_StoreChar>
    Digit /= Base;
 8002b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e3      	bne.n	8002b14 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d011      	beq.n	8002b7a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00e      	beq.n	8002b7a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002b5c:	e006      	b.n	8002b6c <_PrintUnsigned+0x110>
        FieldWidth--;
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	3b01      	subs	r3, #1
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8002b64:	2120      	movs	r1, #32
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7ff fefc 	bl	8002964 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <_PrintUnsigned+0x11e>
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d3f1      	bcc.n	8002b5e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	3728      	adds	r7, #40	; 0x28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	08005b84 	.word	0x08005b84

08002b88 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bfb8      	it	lt
 8002b9c:	425b      	neglt	r3, r3
 8002b9e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002ba4:	e007      	b.n	8002bb6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bae:	613b      	str	r3, [r7, #16]
    Width++;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	daf3      	bge.n	8002ba6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d901      	bls.n	8002bca <_PrintInt+0x42>
    Width = NumDigits;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <_PrintInt+0x5e>
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	db04      	blt.n	8002be0 <_PrintInt+0x58>
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <_PrintInt+0x5e>
    FieldWidth--;
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <_PrintInt+0x6e>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <_PrintInt+0x9c>
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d111      	bne.n	8002c24 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00e      	beq.n	8002c24 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002c06:	e006      	b.n	8002c16 <_PrintInt+0x8e>
        FieldWidth--;
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8002c0e:	2120      	movs	r1, #32
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f7ff fea7 	bl	8002964 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <_PrintInt+0x9c>
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d3f1      	bcc.n	8002c08 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	da07      	bge.n	8002c3a <_PrintInt+0xb2>
    v = -v;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	425b      	negs	r3, r3
 8002c2e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8002c30:	212d      	movs	r1, #45	; 0x2d
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7ff fe96 	bl	8002964 <_StoreChar>
 8002c38:	e008      	b.n	8002c4c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8002c44:	212b      	movs	r1, #43	; 0x2b
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff fe8c 	bl	8002964 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d019      	beq.n	8002c8a <_PrintInt+0x102>
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d114      	bne.n	8002c8a <_PrintInt+0x102>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d111      	bne.n	8002c8a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00e      	beq.n	8002c8a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002c6c:	e006      	b.n	8002c7c <_PrintInt+0xf4>
        FieldWidth--;
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8002c74:	2130      	movs	r1, #48	; 0x30
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f7ff fe74 	bl	8002964 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <_PrintInt+0x102>
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d3f1      	bcc.n	8002c6e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7ff fedf 	bl	8002a5c <_PrintUnsigned>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b098      	sub	sp, #96	; 0x60
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8002cb8:	f04f 0120 	mov.w	r1, #32
 8002cbc:	f381 8811 	msr	BASEPRI, r1
 8002cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc2:	48b7      	ldr	r0, [pc, #732]	; (8002fa0 <_VPrintTarget+0x2f8>)
 8002cc4:	f7ff fc74 	bl	80025b0 <_PreparePacket>
 8002cc8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8002cca:	4bb5      	ldr	r3, [pc, #724]	; (8002fa0 <_VPrintTarget+0x2f8>)
 8002ccc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8002cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3301      	adds	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8002cee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8183 	beq.w	8002ffe <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8002cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cfc:	2b25      	cmp	r3, #37	; 0x25
 8002cfe:	f040 8170 	bne.w	8002fe2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8002d02:	2300      	movs	r3, #0
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8002d06:	2301      	movs	r3, #1
 8002d08:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8002d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d16:	3b23      	subs	r3, #35	; 0x23
 8002d18:	2b0d      	cmp	r3, #13
 8002d1a:	d83f      	bhi.n	8002d9c <_VPrintTarget+0xf4>
 8002d1c:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <_VPrintTarget+0x7c>)
 8002d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d22:	bf00      	nop
 8002d24:	08002d8d 	.word	0x08002d8d
 8002d28:	08002d9d 	.word	0x08002d9d
 8002d2c:	08002d9d 	.word	0x08002d9d
 8002d30:	08002d9d 	.word	0x08002d9d
 8002d34:	08002d9d 	.word	0x08002d9d
 8002d38:	08002d9d 	.word	0x08002d9d
 8002d3c:	08002d9d 	.word	0x08002d9d
 8002d40:	08002d9d 	.word	0x08002d9d
 8002d44:	08002d7d 	.word	0x08002d7d
 8002d48:	08002d9d 	.word	0x08002d9d
 8002d4c:	08002d5d 	.word	0x08002d5d
 8002d50:	08002d9d 	.word	0x08002d9d
 8002d54:	08002d9d 	.word	0x08002d9d
 8002d58:	08002d6d 	.word	0x08002d6d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8002d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3301      	adds	r3, #1
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	e01a      	b.n	8002da2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8002d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6e:	f043 0302 	orr.w	r3, r3, #2
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3301      	adds	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e012      	b.n	8002da2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8002d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3301      	adds	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	e00a      	b.n	8002da2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8002d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8e:	f043 0308 	orr.w	r3, r3, #8
 8002d92:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3301      	adds	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	e002      	b.n	8002da2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	653b      	str	r3, [r7, #80]	; 0x50
 8002da0:	bf00      	nop
        }
      } while (v);
 8002da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1b0      	bne.n	8002d0a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8002da8:	2300      	movs	r3, #0
 8002daa:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8002db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002db8:	2b2f      	cmp	r3, #47	; 0x2f
 8002dba:	d912      	bls.n	8002de2 <_VPrintTarget+0x13a>
 8002dbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dc0:	2b39      	cmp	r3, #57	; 0x39
 8002dc2:	d80e      	bhi.n	8002de2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8002dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dda:	4413      	add	r3, r2
 8002ddc:	3b30      	subs	r3, #48	; 0x30
 8002dde:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8002de0:	e7e4      	b.n	8002dac <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8002de2:	2300      	movs	r3, #0
 8002de4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8002dee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002df2:	2b2e      	cmp	r3, #46	; 0x2e
 8002df4:	d11d      	bne.n	8002e32 <_VPrintTarget+0x18a>
        sFormat++;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8002e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e08:	2b2f      	cmp	r3, #47	; 0x2f
 8002e0a:	d912      	bls.n	8002e32 <_VPrintTarget+0x18a>
 8002e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e10:	2b39      	cmp	r3, #57	; 0x39
 8002e12:	d80e      	bhi.n	8002e32 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3301      	adds	r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8002e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	461a      	mov	r2, r3
 8002e26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3b30      	subs	r3, #48	; 0x30
 8002e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8002e30:	e7e4      	b.n	8002dfc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8002e3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e3e:	2b6c      	cmp	r3, #108	; 0x6c
 8002e40:	d003      	beq.n	8002e4a <_VPrintTarget+0x1a2>
 8002e42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e46:	2b68      	cmp	r3, #104	; 0x68
 8002e48:	d107      	bne.n	8002e5a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3301      	adds	r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8002e58:	e7ef      	b.n	8002e3a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8002e5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e5e:	2b25      	cmp	r3, #37	; 0x25
 8002e60:	f000 80b3 	beq.w	8002fca <_VPrintTarget+0x322>
 8002e64:	2b25      	cmp	r3, #37	; 0x25
 8002e66:	f2c0 80b7 	blt.w	8002fd8 <_VPrintTarget+0x330>
 8002e6a:	2b78      	cmp	r3, #120	; 0x78
 8002e6c:	f300 80b4 	bgt.w	8002fd8 <_VPrintTarget+0x330>
 8002e70:	2b58      	cmp	r3, #88	; 0x58
 8002e72:	f2c0 80b1 	blt.w	8002fd8 <_VPrintTarget+0x330>
 8002e76:	3b58      	subs	r3, #88	; 0x58
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	f200 80ad 	bhi.w	8002fd8 <_VPrintTarget+0x330>
 8002e7e:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <_VPrintTarget+0x1dc>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002f7b 	.word	0x08002f7b
 8002e88:	08002fd9 	.word	0x08002fd9
 8002e8c:	08002fd9 	.word	0x08002fd9
 8002e90:	08002fd9 	.word	0x08002fd9
 8002e94:	08002fd9 	.word	0x08002fd9
 8002e98:	08002fd9 	.word	0x08002fd9
 8002e9c:	08002fd9 	.word	0x08002fd9
 8002ea0:	08002fd9 	.word	0x08002fd9
 8002ea4:	08002fd9 	.word	0x08002fd9
 8002ea8:	08002fd9 	.word	0x08002fd9
 8002eac:	08002fd9 	.word	0x08002fd9
 8002eb0:	08002f09 	.word	0x08002f09
 8002eb4:	08002f2f 	.word	0x08002f2f
 8002eb8:	08002fd9 	.word	0x08002fd9
 8002ebc:	08002fd9 	.word	0x08002fd9
 8002ec0:	08002fd9 	.word	0x08002fd9
 8002ec4:	08002fd9 	.word	0x08002fd9
 8002ec8:	08002fd9 	.word	0x08002fd9
 8002ecc:	08002fd9 	.word	0x08002fd9
 8002ed0:	08002fd9 	.word	0x08002fd9
 8002ed4:	08002fd9 	.word	0x08002fd9
 8002ed8:	08002fd9 	.word	0x08002fd9
 8002edc:	08002fd9 	.word	0x08002fd9
 8002ee0:	08002fd9 	.word	0x08002fd9
 8002ee4:	08002fa5 	.word	0x08002fa5
 8002ee8:	08002fd9 	.word	0x08002fd9
 8002eec:	08002fd9 	.word	0x08002fd9
 8002ef0:	08002fd9 	.word	0x08002fd9
 8002ef4:	08002fd9 	.word	0x08002fd9
 8002ef8:	08002f55 	.word	0x08002f55
 8002efc:	08002fd9 	.word	0x08002fd9
 8002f00:	08002fd9 	.word	0x08002fd9
 8002f04:	08002f7b 	.word	0x08002f7b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	1d19      	adds	r1, r3, #4
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6011      	str	r1, [r2, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8002f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8002f1c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fd1c 	bl	8002964 <_StoreChar>
        break;
 8002f2c:	e055      	b.n	8002fda <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	1d19      	adds	r1, r3, #4
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6011      	str	r1, [r2, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8002f3c:	f107 0014 	add.w	r0, r7, #20
 8002f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4a:	220a      	movs	r2, #10
 8002f4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002f4e:	f7ff fe1b 	bl	8002b88 <_PrintInt>
        break;
 8002f52:	e042      	b.n	8002fda <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	1d19      	adds	r1, r3, #4
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6011      	str	r1, [r2, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8002f62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002f64:	f107 0014 	add.w	r0, r7, #20
 8002f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f72:	220a      	movs	r2, #10
 8002f74:	f7ff fd72 	bl	8002a5c <_PrintUnsigned>
        break;
 8002f78:	e02f      	b.n	8002fda <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	1d19      	adds	r1, r3, #4
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6011      	str	r1, [r2, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8002f88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002f8a:	f107 0014 	add.w	r0, r7, #20
 8002f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f98:	2210      	movs	r2, #16
 8002f9a:	f7ff fd5f 	bl	8002a5c <_PrintUnsigned>
        break;
 8002f9e:	e01c      	b.n	8002fda <_VPrintTarget+0x332>
 8002fa0:	20014258 	.word	0x20014258
      case 'p':
        v = va_arg(*pParamList, int);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	1d19      	adds	r1, r3, #4
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6011      	str	r1, [r2, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8002fb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002fb4:	f107 0014 	add.w	r0, r7, #20
 8002fb8:	2300      	movs	r3, #0
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	f7ff fd4a 	bl	8002a5c <_PrintUnsigned>
        break;
 8002fc8:	e007      	b.n	8002fda <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8002fca:	f107 0314 	add.w	r3, r7, #20
 8002fce:	2125      	movs	r1, #37	; 0x25
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fcc7 	bl	8002964 <_StoreChar>
        break;
 8002fd6:	e000      	b.n	8002fda <_VPrintTarget+0x332>
      default:
        break;
 8002fd8:	bf00      	nop
      }
      sFormat++;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	e007      	b.n	8002ff2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8002fe2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002fe6:	f107 0314 	add.w	r3, r7, #20
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fcb9 	bl	8002964 <_StoreChar>
    }
  } while (*sFormat);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f47f ae72 	bne.w	8002ce0 <_VPrintTarget+0x38>
 8002ffc:	e000      	b.n	8003000 <_VPrintTarget+0x358>
      break;
 8002ffe:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	2b00      	cmp	r3, #0
 8003004:	d041      	beq.n	800308a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8003006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	643b      	str	r3, [r7, #64]	; 0x40
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003016:	e00b      	b.n	8003030 <_VPrintTarget+0x388>
 8003018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301a:	b2da      	uxtb	r2, r3
 800301c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	6439      	str	r1, [r7, #64]	; 0x40
 8003022:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302c:	09db      	lsrs	r3, r3, #7
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003032:	2b7f      	cmp	r3, #127	; 0x7f
 8003034:	d8f0      	bhi.n	8003018 <_VPrintTarget+0x370>
 8003036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	643a      	str	r2, [r7, #64]	; 0x40
 800303c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003044:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
 800304a:	2300      	movs	r3, #0
 800304c:	637b      	str	r3, [r7, #52]	; 0x34
 800304e:	e00b      	b.n	8003068 <_VPrintTarget+0x3c0>
 8003050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003052:	b2da      	uxtb	r2, r3
 8003054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003056:	1c59      	adds	r1, r3, #1
 8003058:	63b9      	str	r1, [r7, #56]	; 0x38
 800305a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003064:	09db      	lsrs	r3, r3, #7
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
 8003068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306a:	2b7f      	cmp	r3, #127	; 0x7f
 800306c:	d8f0      	bhi.n	8003050 <_VPrintTarget+0x3a8>
 800306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	63ba      	str	r2, [r7, #56]	; 0x38
 8003074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	69b9      	ldr	r1, [r7, #24]
 8003082:	221a      	movs	r2, #26
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fb85 	bl	8002794 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8003090:	bf00      	nop
 8003092:	3758      	adds	r7, #88	; 0x58
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80030a6:	2300      	movs	r3, #0
 80030a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030ac:	4917      	ldr	r1, [pc, #92]	; (800310c <SEGGER_SYSVIEW_Init+0x74>)
 80030ae:	4818      	ldr	r0, [pc, #96]	; (8003110 <SEGGER_SYSVIEW_Init+0x78>)
 80030b0:	f7ff f95e 	bl	8002370 <SEGGER_RTT_AllocUpBuffer>
 80030b4:	4603      	mov	r3, r0
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	4b16      	ldr	r3, [pc, #88]	; (8003114 <SEGGER_SYSVIEW_Init+0x7c>)
 80030ba:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80030bc:	4b15      	ldr	r3, [pc, #84]	; (8003114 <SEGGER_SYSVIEW_Init+0x7c>)
 80030be:	785a      	ldrb	r2, [r3, #1]
 80030c0:	4b14      	ldr	r3, [pc, #80]	; (8003114 <SEGGER_SYSVIEW_Init+0x7c>)
 80030c2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80030c4:	4b13      	ldr	r3, [pc, #76]	; (8003114 <SEGGER_SYSVIEW_Init+0x7c>)
 80030c6:	7e1b      	ldrb	r3, [r3, #24]
 80030c8:	4618      	mov	r0, r3
 80030ca:	2300      	movs	r3, #0
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2308      	movs	r3, #8
 80030d0:	4a11      	ldr	r2, [pc, #68]	; (8003118 <SEGGER_SYSVIEW_Init+0x80>)
 80030d2:	490f      	ldr	r1, [pc, #60]	; (8003110 <SEGGER_SYSVIEW_Init+0x78>)
 80030d4:	f7ff f9d0 	bl	8002478 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80030d8:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <SEGGER_SYSVIEW_Init+0x7c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80030de:	4b0f      	ldr	r3, [pc, #60]	; (800311c <SEGGER_SYSVIEW_Init+0x84>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a0c      	ldr	r2, [pc, #48]	; (8003114 <SEGGER_SYSVIEW_Init+0x7c>)
 80030e4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80030e6:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <SEGGER_SYSVIEW_Init+0x7c>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80030ec:	4a09      	ldr	r2, [pc, #36]	; (8003114 <SEGGER_SYSVIEW_Init+0x7c>)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <SEGGER_SYSVIEW_Init+0x7c>)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80030f8:	4a06      	ldr	r2, [pc, #24]	; (8003114 <SEGGER_SYSVIEW_Init+0x7c>)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <SEGGER_SYSVIEW_Init+0x7c>)
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20013220 	.word	0x20013220
 8003110:	08005af8 	.word	0x08005af8
 8003114:	20014228 	.word	0x20014228
 8003118:	20014220 	.word	0x20014220
 800311c:	e0001004 	.word	0xe0001004

08003120 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6113      	str	r3, [r2, #16]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20014228 	.word	0x20014228

08003140 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003148:	f3ef 8311 	mrs	r3, BASEPRI
 800314c:	f04f 0120 	mov.w	r1, #32
 8003150:	f381 8811 	msr	BASEPRI, r1
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	4808      	ldr	r0, [pc, #32]	; (8003178 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003158:	f7ff fa2a 	bl	80025b0 <_PreparePacket>
 800315c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	68b8      	ldr	r0, [r7, #8]
 8003164:	f7ff fb16 	bl	8002794 <_SendPacket>
  RECORD_END();
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f383 8811 	msr	BASEPRI, r3
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20014258 	.word	0x20014258

0800317c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003186:	f3ef 8311 	mrs	r3, BASEPRI
 800318a:	f04f 0120 	mov.w	r1, #32
 800318e:	f381 8811 	msr	BASEPRI, r1
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	4816      	ldr	r0, [pc, #88]	; (80031f0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003196:	f7ff fa0b 	bl	80025b0 <_PreparePacket>
 800319a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	e00b      	b.n	80031c2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	1c59      	adds	r1, r3, #1
 80031b2:	61f9      	str	r1, [r7, #28]
 80031b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	09db      	lsrs	r3, r3, #7
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b7f      	cmp	r3, #127	; 0x7f
 80031c6:	d8f0      	bhi.n	80031aa <SEGGER_SYSVIEW_RecordU32+0x2e>
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	61fa      	str	r2, [r7, #28]
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	6938      	ldr	r0, [r7, #16]
 80031de:	f7ff fad9 	bl	8002794 <_SendPacket>
  RECORD_END();
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f383 8811 	msr	BASEPRI, r3
}
 80031e8:	bf00      	nop
 80031ea:	3720      	adds	r7, #32
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20014258 	.word	0x20014258

080031f4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08c      	sub	sp, #48	; 0x30
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003200:	f3ef 8311 	mrs	r3, BASEPRI
 8003204:	f04f 0120 	mov.w	r1, #32
 8003208:	f381 8811 	msr	BASEPRI, r1
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	4825      	ldr	r0, [pc, #148]	; (80032a4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003210:	f7ff f9ce 	bl	80025b0 <_PreparePacket>
 8003214:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
 8003222:	e00b      	b.n	800323c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	b2da      	uxtb	r2, r3
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	1c59      	adds	r1, r3, #1
 800322c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800322e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	09db      	lsrs	r3, r3, #7
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	2b7f      	cmp	r3, #127	; 0x7f
 8003240:	d8f0      	bhi.n	8003224 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003250:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	623b      	str	r3, [r7, #32]
 800325a:	e00b      	b.n	8003274 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	1c59      	adds	r1, r3, #1
 8003264:	6279      	str	r1, [r7, #36]	; 0x24
 8003266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	09db      	lsrs	r3, r3, #7
 8003272:	623b      	str	r3, [r7, #32]
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	2b7f      	cmp	r3, #127	; 0x7f
 8003278:	d8f0      	bhi.n	800325c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	627a      	str	r2, [r7, #36]	; 0x24
 8003280:	6a3a      	ldr	r2, [r7, #32]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	6979      	ldr	r1, [r7, #20]
 800328e:	69b8      	ldr	r0, [r7, #24]
 8003290:	f7ff fa80 	bl	8002794 <_SendPacket>
  RECORD_END();
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f383 8811 	msr	BASEPRI, r3
}
 800329a:	bf00      	nop
 800329c:	3730      	adds	r7, #48	; 0x30
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20014258 	.word	0x20014258

080032a8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08c      	sub	sp, #48	; 0x30
 80032ac:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80032ae:	4b59      	ldr	r3, [pc, #356]	; (8003414 <SEGGER_SYSVIEW_Start+0x16c>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80032b4:	f3ef 8311 	mrs	r3, BASEPRI
 80032b8:	f04f 0120 	mov.w	r1, #32
 80032bc:	f381 8811 	msr	BASEPRI, r1
 80032c0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80032c2:	4b54      	ldr	r3, [pc, #336]	; (8003414 <SEGGER_SYSVIEW_Start+0x16c>)
 80032c4:	785b      	ldrb	r3, [r3, #1]
 80032c6:	220a      	movs	r2, #10
 80032c8:	4953      	ldr	r1, [pc, #332]	; (8003418 <SEGGER_SYSVIEW_Start+0x170>)
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fc ff80 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80032d6:	f7fe fd1f 	bl	8001d18 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80032da:	200a      	movs	r0, #10
 80032dc:	f7ff ff30 	bl	8003140 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80032e0:	f3ef 8311 	mrs	r3, BASEPRI
 80032e4:	f04f 0120 	mov.w	r1, #32
 80032e8:	f381 8811 	msr	BASEPRI, r1
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	484b      	ldr	r0, [pc, #300]	; (800341c <SEGGER_SYSVIEW_Start+0x174>)
 80032f0:	f7ff f95e 	bl	80025b0 <_PreparePacket>
 80032f4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032fe:	4b45      	ldr	r3, [pc, #276]	; (8003414 <SEGGER_SYSVIEW_Start+0x16c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
 8003304:	e00b      	b.n	800331e <SEGGER_SYSVIEW_Start+0x76>
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	b2da      	uxtb	r2, r3
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	1c59      	adds	r1, r3, #1
 800330e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003310:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	09db      	lsrs	r3, r3, #7
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	2b7f      	cmp	r3, #127	; 0x7f
 8003322:	d8f0      	bhi.n	8003306 <SEGGER_SYSVIEW_Start+0x5e>
 8003324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	62fa      	str	r2, [r7, #44]	; 0x2c
 800332a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
 8003338:	4b36      	ldr	r3, [pc, #216]	; (8003414 <SEGGER_SYSVIEW_Start+0x16c>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	623b      	str	r3, [r7, #32]
 800333e:	e00b      	b.n	8003358 <SEGGER_SYSVIEW_Start+0xb0>
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	b2da      	uxtb	r2, r3
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	6279      	str	r1, [r7, #36]	; 0x24
 800334a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	09db      	lsrs	r3, r3, #7
 8003356:	623b      	str	r3, [r7, #32]
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	2b7f      	cmp	r3, #127	; 0x7f
 800335c:	d8f0      	bhi.n	8003340 <SEGGER_SYSVIEW_Start+0x98>
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	627a      	str	r2, [r7, #36]	; 0x24
 8003364:	6a3a      	ldr	r2, [r7, #32]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	4b28      	ldr	r3, [pc, #160]	; (8003414 <SEGGER_SYSVIEW_Start+0x16c>)
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	e00b      	b.n	8003392 <SEGGER_SYSVIEW_Start+0xea>
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	1c59      	adds	r1, r3, #1
 8003382:	61f9      	str	r1, [r7, #28]
 8003384:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	09db      	lsrs	r3, r3, #7
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b7f      	cmp	r3, #127	; 0x7f
 8003396:	d8f0      	bhi.n	800337a <SEGGER_SYSVIEW_Start+0xd2>
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	61fa      	str	r2, [r7, #28]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	2300      	movs	r3, #0
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	e00b      	b.n	80033ca <SEGGER_SYSVIEW_Start+0x122>
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	1c59      	adds	r1, r3, #1
 80033ba:	6179      	str	r1, [r7, #20]
 80033bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	09db      	lsrs	r3, r3, #7
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b7f      	cmp	r3, #127	; 0x7f
 80033ce:	d8f0      	bhi.n	80033b2 <SEGGER_SYSVIEW_Start+0x10a>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	617a      	str	r2, [r7, #20]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80033e0:	2218      	movs	r2, #24
 80033e2:	6839      	ldr	r1, [r7, #0]
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff f9d5 	bl	8002794 <_SendPacket>
      RECORD_END();
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80033f0:	4b08      	ldr	r3, [pc, #32]	; (8003414 <SEGGER_SYSVIEW_Start+0x16c>)
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <SEGGER_SYSVIEW_Start+0x16c>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80033fe:	f000 f9eb 	bl	80037d8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003402:	f000 f9b1 	bl	8003768 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003406:	f000 fc13 	bl	8003c30 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800340a:	bf00      	nop
 800340c:	3730      	adds	r7, #48	; 0x30
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20014228 	.word	0x20014228
 8003418:	08005b78 	.word	0x08005b78
 800341c:	20014258 	.word	0x20014258

08003420 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003426:	f3ef 8311 	mrs	r3, BASEPRI
 800342a:	f04f 0120 	mov.w	r1, #32
 800342e:	f381 8811 	msr	BASEPRI, r1
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	480b      	ldr	r0, [pc, #44]	; (8003464 <SEGGER_SYSVIEW_Stop+0x44>)
 8003436:	f7ff f8bb 	bl	80025b0 <_PreparePacket>
 800343a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <SEGGER_SYSVIEW_Stop+0x48>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003444:	220b      	movs	r2, #11
 8003446:	6839      	ldr	r1, [r7, #0]
 8003448:	6838      	ldr	r0, [r7, #0]
 800344a:	f7ff f9a3 	bl	8002794 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <SEGGER_SYSVIEW_Stop+0x48>)
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f383 8811 	msr	BASEPRI, r3
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20014258 	.word	0x20014258
 8003468:	20014228 	.word	0x20014228

0800346c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b08c      	sub	sp, #48	; 0x30
 8003470:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003472:	f3ef 8311 	mrs	r3, BASEPRI
 8003476:	f04f 0120 	mov.w	r1, #32
 800347a:	f381 8811 	msr	BASEPRI, r1
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	4845      	ldr	r0, [pc, #276]	; (8003598 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003482:	f7ff f895 	bl	80025b0 <_PreparePacket>
 8003486:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003490:	4b42      	ldr	r3, [pc, #264]	; (800359c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
 8003496:	e00b      	b.n	80034b0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349a:	b2da      	uxtb	r2, r3
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	1c59      	adds	r1, r3, #1
 80034a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80034a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	09db      	lsrs	r3, r3, #7
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	2b7f      	cmp	r3, #127	; 0x7f
 80034b4:	d8f0      	bhi.n	8003498 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	4b34      	ldr	r3, [pc, #208]	; (800359c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	e00b      	b.n	80034ea <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	1c59      	adds	r1, r3, #1
 80034da:	6279      	str	r1, [r7, #36]	; 0x24
 80034dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	09db      	lsrs	r3, r3, #7
 80034e8:	623b      	str	r3, [r7, #32]
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	2b7f      	cmp	r3, #127	; 0x7f
 80034ee:	d8f0      	bhi.n	80034d2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	627a      	str	r2, [r7, #36]	; 0x24
 80034f6:	6a3a      	ldr	r2, [r7, #32]
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	4b25      	ldr	r3, [pc, #148]	; (800359c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	e00b      	b.n	8003524 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	b2da      	uxtb	r2, r3
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	1c59      	adds	r1, r3, #1
 8003514:	61f9      	str	r1, [r7, #28]
 8003516:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	09db      	lsrs	r3, r3, #7
 8003522:	61bb      	str	r3, [r7, #24]
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2b7f      	cmp	r3, #127	; 0x7f
 8003528:	d8f0      	bhi.n	800350c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	61fa      	str	r2, [r7, #28]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e00b      	b.n	800355c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	1c59      	adds	r1, r3, #1
 800354c:	6179      	str	r1, [r7, #20]
 800354e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	09db      	lsrs	r3, r3, #7
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b7f      	cmp	r3, #127	; 0x7f
 8003560:	d8f0      	bhi.n	8003544 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	617a      	str	r2, [r7, #20]
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003572:	2218      	movs	r2, #24
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	68b8      	ldr	r0, [r7, #8]
 8003578:	f7ff f90c 	bl	8002794 <_SendPacket>
  RECORD_END();
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800358a:	4b04      	ldr	r3, [pc, #16]	; (800359c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	4798      	blx	r3
  }
}
 8003590:	bf00      	nop
 8003592:	3730      	adds	r7, #48	; 0x30
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20014258 	.word	0x20014258
 800359c:	20014228 	.word	0x20014228

080035a0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b092      	sub	sp, #72	; 0x48
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80035a8:	f3ef 8311 	mrs	r3, BASEPRI
 80035ac:	f04f 0120 	mov.w	r1, #32
 80035b0:	f381 8811 	msr	BASEPRI, r1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	486a      	ldr	r0, [pc, #424]	; (8003760 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80035b8:	f7fe fffa 	bl	80025b0 <_PreparePacket>
 80035bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	647b      	str	r3, [r7, #68]	; 0x44
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4b66      	ldr	r3, [pc, #408]	; (8003764 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	643b      	str	r3, [r7, #64]	; 0x40
 80035d2:	e00b      	b.n	80035ec <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80035d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035da:	1c59      	adds	r1, r3, #1
 80035dc:	6479      	str	r1, [r7, #68]	; 0x44
 80035de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e8:	09db      	lsrs	r3, r3, #7
 80035ea:	643b      	str	r3, [r7, #64]	; 0x40
 80035ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ee:	2b7f      	cmp	r3, #127	; 0x7f
 80035f0:	d8f0      	bhi.n	80035d4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80035f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	647a      	str	r2, [r7, #68]	; 0x44
 80035f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003600:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	63bb      	str	r3, [r7, #56]	; 0x38
 800360c:	e00b      	b.n	8003626 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003610:	b2da      	uxtb	r2, r3
 8003612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003614:	1c59      	adds	r1, r3, #1
 8003616:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003618:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003622:	09db      	lsrs	r3, r3, #7
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003628:	2b7f      	cmp	r3, #127	; 0x7f
 800362a:	d8f0      	bhi.n	800360e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800362c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	4619      	mov	r1, r3
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7fe ff63 	bl	8002510 <_EncodeStr>
 800364a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800364c:	2209      	movs	r2, #9
 800364e:	68f9      	ldr	r1, [r7, #12]
 8003650:	6938      	ldr	r0, [r7, #16]
 8003652:	f7ff f89f 	bl	8002794 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	637b      	str	r3, [r7, #52]	; 0x34
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4b40      	ldr	r3, [pc, #256]	; (8003764 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	633b      	str	r3, [r7, #48]	; 0x30
 800366a:	e00b      	b.n	8003684 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	b2da      	uxtb	r2, r3
 8003670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003672:	1c59      	adds	r1, r3, #1
 8003674:	6379      	str	r1, [r7, #52]	; 0x34
 8003676:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	09db      	lsrs	r3, r3, #7
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	2b7f      	cmp	r3, #127	; 0x7f
 8003688:	d8f0      	bhi.n	800366c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800368a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	637a      	str	r2, [r7, #52]	; 0x34
 8003690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003698:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a4:	e00b      	b.n	80036be <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80036a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	1c59      	adds	r1, r3, #1
 80036ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80036b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	09db      	lsrs	r3, r3, #7
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	2b7f      	cmp	r3, #127	; 0x7f
 80036c2:	d8f0      	bhi.n	80036a6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	623b      	str	r3, [r7, #32]
 80036de:	e00b      	b.n	80036f8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	1c59      	adds	r1, r3, #1
 80036e8:	6279      	str	r1, [r7, #36]	; 0x24
 80036ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	09db      	lsrs	r3, r3, #7
 80036f6:	623b      	str	r3, [r7, #32]
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	2b7f      	cmp	r3, #127	; 0x7f
 80036fc:	d8f0      	bhi.n	80036e0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	627a      	str	r2, [r7, #36]	; 0x24
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	e00b      	b.n	8003730 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	1c59      	adds	r1, r3, #1
 8003720:	61f9      	str	r1, [r7, #28]
 8003722:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	09db      	lsrs	r3, r3, #7
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b7f      	cmp	r3, #127	; 0x7f
 8003734:	d8f0      	bhi.n	8003718 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	61fa      	str	r2, [r7, #28]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003746:	2215      	movs	r2, #21
 8003748:	68f9      	ldr	r1, [r7, #12]
 800374a:	6938      	ldr	r0, [r7, #16]
 800374c:	f7ff f822 	bl	8002794 <_SendPacket>
  RECORD_END();
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f383 8811 	msr	BASEPRI, r3
}
 8003756:	bf00      	nop
 8003758:	3748      	adds	r7, #72	; 0x48
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20014258 	.word	0x20014258
 8003764:	20014228 	.word	0x20014228

08003768 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800376c:	4b07      	ldr	r3, [pc, #28]	; (800378c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003774:	4b05      	ldr	r3, [pc, #20]	; (800378c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800377e:	4b03      	ldr	r3, [pc, #12]	; (800378c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4798      	blx	r3
  }
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20014228 	.word	0x20014228

08003790 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003798:	f3ef 8311 	mrs	r3, BASEPRI
 800379c:	f04f 0120 	mov.w	r1, #32
 80037a0:	f381 8811 	msr	BASEPRI, r1
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	480b      	ldr	r0, [pc, #44]	; (80037d4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80037a8:	f7fe ff02 	bl	80025b0 <_PreparePacket>
 80037ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	6938      	ldr	r0, [r7, #16]
 80037b4:	f7fe feac 	bl	8002510 <_EncodeStr>
 80037b8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80037ba:	220e      	movs	r2, #14
 80037bc:	68f9      	ldr	r1, [r7, #12]
 80037be:	6938      	ldr	r0, [r7, #16]
 80037c0:	f7fe ffe8 	bl	8002794 <_SendPacket>
  RECORD_END();
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f383 8811 	msr	BASEPRI, r3
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20014258 	.word	0x20014258

080037d8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80037de:	4b15      	ldr	r3, [pc, #84]	; (8003834 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01a      	beq.n	800381c <SEGGER_SYSVIEW_RecordSystime+0x44>
 80037e6:	4b13      	ldr	r3, [pc, #76]	; (8003834 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d015      	beq.n	800381c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80037f0:	4b10      	ldr	r3, [pc, #64]	; (8003834 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4798      	blx	r3
 80037f8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80037fc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80037fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	000a      	movs	r2, r1
 800380c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800380e:	4613      	mov	r3, r2
 8003810:	461a      	mov	r2, r3
 8003812:	4621      	mov	r1, r4
 8003814:	200d      	movs	r0, #13
 8003816:	f7ff fced 	bl	80031f4 <SEGGER_SYSVIEW_RecordU32x2>
 800381a:	e006      	b.n	800382a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4619      	mov	r1, r3
 8003822:	200c      	movs	r0, #12
 8003824:	f7ff fcaa 	bl	800317c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bd90      	pop	{r4, r7, pc}
 8003832:	bf00      	nop
 8003834:	20014228 	.word	0x20014228
 8003838:	e0001004 	.word	0xe0001004

0800383c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003842:	f3ef 8311 	mrs	r3, BASEPRI
 8003846:	f04f 0120 	mov.w	r1, #32
 800384a:	f381 8811 	msr	BASEPRI, r1
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	4819      	ldr	r0, [pc, #100]	; (80038b8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003852:	f7fe fead 	bl	80025b0 <_PreparePacket>
 8003856:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800385c:	4b17      	ldr	r3, [pc, #92]	; (80038bc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003864:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	e00b      	b.n	8003888 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	1c59      	adds	r1, r3, #1
 8003878:	6179      	str	r1, [r7, #20]
 800387a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	09db      	lsrs	r3, r3, #7
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	2b7f      	cmp	r3, #127	; 0x7f
 800388c:	d8f0      	bhi.n	8003870 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	617a      	str	r2, [r7, #20]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800389e:	2202      	movs	r2, #2
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	68b8      	ldr	r0, [r7, #8]
 80038a4:	f7fe ff76 	bl	8002794 <_SendPacket>
  RECORD_END();
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f383 8811 	msr	BASEPRI, r3
}
 80038ae:	bf00      	nop
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20014258 	.word	0x20014258
 80038bc:	e000ed04 	.word	0xe000ed04

080038c0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80038c6:	f3ef 8311 	mrs	r3, BASEPRI
 80038ca:	f04f 0120 	mov.w	r1, #32
 80038ce:	f381 8811 	msr	BASEPRI, r1
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	4807      	ldr	r0, [pc, #28]	; (80038f4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80038d6:	f7fe fe6b 	bl	80025b0 <_PreparePacket>
 80038da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80038dc:	2203      	movs	r2, #3
 80038de:	6839      	ldr	r1, [r7, #0]
 80038e0:	6838      	ldr	r0, [r7, #0]
 80038e2:	f7fe ff57 	bl	8002794 <_SendPacket>
  RECORD_END();
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f383 8811 	msr	BASEPRI, r3
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20014258 	.word	0x20014258

080038f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80038fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003902:	f04f 0120 	mov.w	r1, #32
 8003906:	f381 8811 	msr	BASEPRI, r1
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	4807      	ldr	r0, [pc, #28]	; (800392c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800390e:	f7fe fe4f 	bl	80025b0 <_PreparePacket>
 8003912:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003914:	2212      	movs	r2, #18
 8003916:	6839      	ldr	r1, [r7, #0]
 8003918:	6838      	ldr	r0, [r7, #0]
 800391a:	f7fe ff3b 	bl	8002794 <_SendPacket>
  RECORD_END();
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f383 8811 	msr	BASEPRI, r3
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20014258 	.word	0x20014258

08003930 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003936:	f3ef 8311 	mrs	r3, BASEPRI
 800393a:	f04f 0120 	mov.w	r1, #32
 800393e:	f381 8811 	msr	BASEPRI, r1
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	4807      	ldr	r0, [pc, #28]	; (8003964 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003946:	f7fe fe33 	bl	80025b0 <_PreparePacket>
 800394a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800394c:	2211      	movs	r2, #17
 800394e:	6839      	ldr	r1, [r7, #0]
 8003950:	6838      	ldr	r0, [r7, #0]
 8003952:	f7fe ff1f 	bl	8002794 <_SendPacket>
  RECORD_END();
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f383 8811 	msr	BASEPRI, r3
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20014258 	.word	0x20014258

08003968 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003970:	f3ef 8311 	mrs	r3, BASEPRI
 8003974:	f04f 0120 	mov.w	r1, #32
 8003978:	f381 8811 	msr	BASEPRI, r1
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	4819      	ldr	r0, [pc, #100]	; (80039e4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8003980:	f7fe fe16 	bl	80025b0 <_PreparePacket>
 8003984:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800398a:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e00b      	b.n	80039b6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	1c59      	adds	r1, r3, #1
 80039a6:	61f9      	str	r1, [r7, #28]
 80039a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	09db      	lsrs	r3, r3, #7
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b7f      	cmp	r3, #127	; 0x7f
 80039ba:	d8f0      	bhi.n	800399e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	61fa      	str	r2, [r7, #28]
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80039cc:	2208      	movs	r2, #8
 80039ce:	68f9      	ldr	r1, [r7, #12]
 80039d0:	6938      	ldr	r0, [r7, #16]
 80039d2:	f7fe fedf 	bl	8002794 <_SendPacket>
  RECORD_END();
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f383 8811 	msr	BASEPRI, r3
}
 80039dc:	bf00      	nop
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20014258 	.word	0x20014258
 80039e8:	20014228 	.word	0x20014228

080039ec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80039f4:	f3ef 8311 	mrs	r3, BASEPRI
 80039f8:	f04f 0120 	mov.w	r1, #32
 80039fc:	f381 8811 	msr	BASEPRI, r1
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	4819      	ldr	r0, [pc, #100]	; (8003a68 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003a04:	f7fe fdd4 	bl	80025b0 <_PreparePacket>
 8003a08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	e00b      	b.n	8003a3a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	1c59      	adds	r1, r3, #1
 8003a2a:	61f9      	str	r1, [r7, #28]
 8003a2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	09db      	lsrs	r3, r3, #7
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a3e:	d8f0      	bhi.n	8003a22 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	61fa      	str	r2, [r7, #28]
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003a50:	2204      	movs	r2, #4
 8003a52:	68f9      	ldr	r1, [r7, #12]
 8003a54:	6938      	ldr	r0, [r7, #16]
 8003a56:	f7fe fe9d 	bl	8002794 <_SendPacket>
  RECORD_END();
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f383 8811 	msr	BASEPRI, r3
}
 8003a60:	bf00      	nop
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	20014258 	.word	0x20014258
 8003a6c:	20014228 	.word	0x20014228

08003a70 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003a78:	f3ef 8311 	mrs	r3, BASEPRI
 8003a7c:	f04f 0120 	mov.w	r1, #32
 8003a80:	f381 8811 	msr	BASEPRI, r1
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	4819      	ldr	r0, [pc, #100]	; (8003aec <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8003a88:	f7fe fd92 	bl	80025b0 <_PreparePacket>
 8003a8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003a92:	4b17      	ldr	r3, [pc, #92]	; (8003af0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e00b      	b.n	8003abe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	1c59      	adds	r1, r3, #1
 8003aae:	61f9      	str	r1, [r7, #28]
 8003ab0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	09db      	lsrs	r3, r3, #7
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ac2:	d8f0      	bhi.n	8003aa6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	61fa      	str	r2, [r7, #28]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003ad4:	2206      	movs	r2, #6
 8003ad6:	68f9      	ldr	r1, [r7, #12]
 8003ad8:	6938      	ldr	r0, [r7, #16]
 8003ada:	f7fe fe5b 	bl	8002794 <_SendPacket>
  RECORD_END();
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f383 8811 	msr	BASEPRI, r3
}
 8003ae4:	bf00      	nop
 8003ae6:	3720      	adds	r7, #32
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20014258 	.word	0x20014258
 8003af0:	20014228 	.word	0x20014228

08003af4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08c      	sub	sp, #48	; 0x30
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003afe:	4b3b      	ldr	r3, [pc, #236]	; (8003bec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d06d      	beq.n	8003be2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003b06:	4b39      	ldr	r3, [pc, #228]	; (8003bec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b10:	e008      	b.n	8003b24 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	3301      	adds	r3, #1
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d3f2      	bcc.n	8003b12 <SEGGER_SYSVIEW_SendModule+0x1e>
 8003b2c:	e000      	b.n	8003b30 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003b2e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d055      	beq.n	8003be2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003b36:	f3ef 8311 	mrs	r3, BASEPRI
 8003b3a:	f04f 0120 	mov.w	r1, #32
 8003b3e:	f381 8811 	msr	BASEPRI, r1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	482a      	ldr	r0, [pc, #168]	; (8003bf0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003b46:	f7fe fd33 	bl	80025b0 <_PreparePacket>
 8003b4a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	623b      	str	r3, [r7, #32]
 8003b58:	e00b      	b.n	8003b72 <SEGGER_SYSVIEW_SendModule+0x7e>
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	1c59      	adds	r1, r3, #1
 8003b62:	6279      	str	r1, [r7, #36]	; 0x24
 8003b64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	09db      	lsrs	r3, r3, #7
 8003b70:	623b      	str	r3, [r7, #32]
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2b7f      	cmp	r3, #127	; 0x7f
 8003b76:	d8f0      	bhi.n	8003b5a <SEGGER_SYSVIEW_SendModule+0x66>
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b7e:	6a3a      	ldr	r2, [r7, #32]
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	e00b      	b.n	8003bac <SEGGER_SYSVIEW_SendModule+0xb8>
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	1c59      	adds	r1, r3, #1
 8003b9c:	61f9      	str	r1, [r7, #28]
 8003b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	09db      	lsrs	r3, r3, #7
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b7f      	cmp	r3, #127	; 0x7f
 8003bb0:	d8f0      	bhi.n	8003b94 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	61fa      	str	r2, [r7, #28]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2280      	movs	r2, #128	; 0x80
 8003bc8:	4619      	mov	r1, r3
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7fe fca0 	bl	8002510 <_EncodeStr>
 8003bd0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003bd2:	2216      	movs	r2, #22
 8003bd4:	68f9      	ldr	r1, [r7, #12]
 8003bd6:	6938      	ldr	r0, [r7, #16]
 8003bd8:	f7fe fddc 	bl	8002794 <_SendPacket>
      RECORD_END();
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003be2:	bf00      	nop
 8003be4:	3730      	adds	r7, #48	; 0x30
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20014250 	.word	0x20014250
 8003bf0:	20014258 	.word	0x20014258

08003bf4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00f      	beq.n	8003c22 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f2      	bne.n	8003c08 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20014250 	.word	0x20014250

08003c30 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003c36:	f3ef 8311 	mrs	r3, BASEPRI
 8003c3a:	f04f 0120 	mov.w	r1, #32
 8003c3e:	f381 8811 	msr	BASEPRI, r1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	4817      	ldr	r0, [pc, #92]	; (8003ca4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003c46:	f7fe fcb3 	bl	80025b0 <_PreparePacket>
 8003c4a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	e00b      	b.n	8003c74 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	1c59      	adds	r1, r3, #1
 8003c64:	6179      	str	r1, [r7, #20]
 8003c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	09db      	lsrs	r3, r3, #7
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b7f      	cmp	r3, #127	; 0x7f
 8003c78:	d8f0      	bhi.n	8003c5c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	617a      	str	r2, [r7, #20]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003c8a:	221b      	movs	r2, #27
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	68b8      	ldr	r0, [r7, #8]
 8003c90:	f7fe fd80 	bl	8002794 <_SendPacket>
  RECORD_END();
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f383 8811 	msr	BASEPRI, r3
}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20014258 	.word	0x20014258
 8003ca8:	20014254 	.word	0x20014254

08003cac <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8003cac:	b40f      	push	{r0, r1, r2, r3}
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8003cb4:	f107 0314 	add.w	r3, r7, #20
 8003cb8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8003cba:	1d3b      	adds	r3, r7, #4
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	6938      	ldr	r0, [r7, #16]
 8003cc2:	f7fe fff1 	bl	8002ca8 <_VPrintTarget>
  va_end(ParamList);
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cd0:	b004      	add	sp, #16
 8003cd2:	4770      	bx	lr

08003cd4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8003ce0:	f04f 0120 	mov.w	r1, #32
 8003ce4:	f381 8811 	msr	BASEPRI, r1
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	4827      	ldr	r0, [pc, #156]	; (8003d88 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003cec:	f7fe fc60 	bl	80025b0 <_PreparePacket>
 8003cf0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003cf2:	2280      	movs	r2, #128	; 0x80
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	6938      	ldr	r0, [r7, #16]
 8003cf8:	f7fe fc0a 	bl	8002510 <_EncodeStr>
 8003cfc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
 8003d02:	2301      	movs	r3, #1
 8003d04:	623b      	str	r3, [r7, #32]
 8003d06:	e00b      	b.n	8003d20 <SEGGER_SYSVIEW_Warn+0x4c>
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	1c59      	adds	r1, r3, #1
 8003d10:	6279      	str	r1, [r7, #36]	; 0x24
 8003d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	09db      	lsrs	r3, r3, #7
 8003d1e:	623b      	str	r3, [r7, #32]
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	2b7f      	cmp	r3, #127	; 0x7f
 8003d24:	d8f0      	bhi.n	8003d08 <SEGGER_SYSVIEW_Warn+0x34>
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	627a      	str	r2, [r7, #36]	; 0x24
 8003d2c:	6a3a      	ldr	r2, [r7, #32]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	e00b      	b.n	8003d58 <SEGGER_SYSVIEW_Warn+0x84>
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	1c59      	adds	r1, r3, #1
 8003d48:	61f9      	str	r1, [r7, #28]
 8003d4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	09db      	lsrs	r3, r3, #7
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d5c:	d8f0      	bhi.n	8003d40 <SEGGER_SYSVIEW_Warn+0x6c>
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	61fa      	str	r2, [r7, #28]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003d6e:	221a      	movs	r2, #26
 8003d70:	68f9      	ldr	r1, [r7, #12]
 8003d72:	6938      	ldr	r0, [r7, #16]
 8003d74:	f7fe fd0e 	bl	8002794 <_SendPacket>
  RECORD_END();
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f383 8811 	msr	BASEPRI, r3
}
 8003d7e:	bf00      	nop
 8003d80:	3728      	adds	r7, #40	; 0x28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20014258 	.word	0x20014258

08003d8c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003d90:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003d92:	7e1b      	ldrb	r3, [r3, #24]
 8003d94:	4619      	mov	r1, r3
 8003d96:	4a13      	ldr	r2, [pc, #76]	; (8003de4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8003d98:	460b      	mov	r3, r1
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	440b      	add	r3, r1
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	336c      	adds	r3, #108	; 0x6c
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003da8:	7e1b      	ldrb	r3, [r3, #24]
 8003daa:	4618      	mov	r0, r3
 8003dac:	490d      	ldr	r1, [pc, #52]	; (8003de4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8003dae:	4603      	mov	r3, r0
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4403      	add	r3, r0
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	440b      	add	r3, r1
 8003db8:	3370      	adds	r3, #112	; 0x70
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d00b      	beq.n	8003dd8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003dc0:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003dc2:	789b      	ldrb	r3, [r3, #2]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d107      	bne.n	8003dd8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003dce:	f7fe fbfb 	bl	80025c8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003dd2:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8003dd8:	4b01      	ldr	r3, [pc, #4]	; (8003de0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20014228 	.word	0x20014228
 8003de4:	2001433c 	.word	0x2001433c

08003de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003dee:	f000 fb71 	bl	80044d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003df2:	f000 f86d 	bl	8003ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003df6:	f000 f8d5 	bl	8003fa4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter (for SEGGER)
  DWT_CTRL |= (1 << 0);
 8003dfa:	4b2d      	ldr	r3, [pc, #180]	; (8003eb0 <main+0xc8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2c      	ldr	r2, [pc, #176]	; (8003eb0 <main+0xc8>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	6013      	str	r3, [r2, #0]

  // Config. uart based SEGGER communication
  SEGGER_UART_init(250000);
 8003e06:	482b      	ldr	r0, [pc, #172]	; (8003eb4 <main+0xcc>)
 8003e08:	f7fd ff2a 	bl	8001c60 <SEGGER_UART_init>

  // Starting the recording (for SEGGER)
  SEGGER_SYSVIEW_Conf();
 8003e0c:	f7fd fd5a 	bl	80018c4 <SEGGER_SYSVIEW_Conf>

  // Config. Task 1
  status = xTaskCreate(&led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8003e10:	f107 030c 	add.w	r3, r7, #12
 8003e14:	9301      	str	r3, [sp, #4]
 8003e16:	2302      	movs	r3, #2
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	22c8      	movs	r2, #200	; 0xc8
 8003e1e:	4926      	ldr	r1, [pc, #152]	; (8003eb8 <main+0xd0>)
 8003e20:	4826      	ldr	r0, [pc, #152]	; (8003ebc <main+0xd4>)
 8003e22:	f7fc fc16 	bl	8000652 <xTaskCreate>
 8003e26:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d00a      	beq.n	8003e44 <main+0x5c>
        __asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	61bb      	str	r3, [r7, #24]
    }
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <main+0x5a>

  // Config. Task 2
  status = xTaskCreate(&led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 8003e44:	f107 0308 	add.w	r3, r7, #8
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	22c8      	movs	r2, #200	; 0xc8
 8003e52:	491b      	ldr	r1, [pc, #108]	; (8003ec0 <main+0xd8>)
 8003e54:	481b      	ldr	r0, [pc, #108]	; (8003ec4 <main+0xdc>)
 8003e56:	f7fc fbfc 	bl	8000652 <xTaskCreate>
 8003e5a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d00a      	beq.n	8003e78 <main+0x90>
        __asm volatile
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	617b      	str	r3, [r7, #20]
    }
 8003e74:	bf00      	nop
 8003e76:	e7fe      	b.n	8003e76 <main+0x8e>

  // Config. Task 3
  status = xTaskCreate(&led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 8003e78:	1d3b      	adds	r3, r7, #4
 8003e7a:	9301      	str	r3, [sp, #4]
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	2300      	movs	r3, #0
 8003e82:	22c8      	movs	r2, #200	; 0xc8
 8003e84:	4910      	ldr	r1, [pc, #64]	; (8003ec8 <main+0xe0>)
 8003e86:	4811      	ldr	r0, [pc, #68]	; (8003ecc <main+0xe4>)
 8003e88:	f7fc fbe3 	bl	8000652 <xTaskCreate>
 8003e8c:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d00a      	beq.n	8003eaa <main+0xc2>
        __asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	613b      	str	r3, [r7, #16]
    }
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <main+0xc0>

  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 8003eaa:	f7fc fd35 	bl	8000918 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003eae:	e7fe      	b.n	8003eae <main+0xc6>
 8003eb0:	e0001000 	.word	0xe0001000
 8003eb4:	0003d090 	.word	0x0003d090
 8003eb8:	08005b00 	.word	0x08005b00
 8003ebc:	08004265 	.word	0x08004265
 8003ec0:	08005b10 	.word	0x08005b10
 8003ec4:	080042bd 	.word	0x080042bd
 8003ec8:	08005b20 	.word	0x08005b20
 8003ecc:	08004291 	.word	0x08004291

08003ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b094      	sub	sp, #80	; 0x50
 8003ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ed6:	f107 0320 	add.w	r3, r7, #32
 8003eda:	2230      	movs	r2, #48	; 0x30
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 fd90 	bl	8005a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ee4:	f107 030c 	add.w	r3, r7, #12
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	4b28      	ldr	r3, [pc, #160]	; (8003f9c <SystemClock_Config+0xcc>)
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <SystemClock_Config+0xcc>)
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f02:	6413      	str	r3, [r2, #64]	; 0x40
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <SystemClock_Config+0xcc>)
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f10:	2300      	movs	r3, #0
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <SystemClock_Config+0xd0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a21      	ldr	r2, [pc, #132]	; (8003fa0 <SystemClock_Config+0xd0>)
 8003f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <SystemClock_Config+0xd0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f30:	2301      	movs	r3, #1
 8003f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f34:	2310      	movs	r3, #16
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003f40:	2308      	movs	r3, #8
 8003f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003f44:	23a8      	movs	r3, #168	; 0xa8
 8003f46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003f4c:	2307      	movs	r3, #7
 8003f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f50:	f107 0320 	add.w	r3, r7, #32
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fdd5 	bl	8004b04 <HAL_RCC_OscConfig>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003f60:	f000 f9d4 	bl	800430c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f64:	230f      	movs	r3, #15
 8003f66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f7c:	f107 030c 	add.w	r3, r7, #12
 8003f80:	2105      	movs	r1, #5
 8003f82:	4618      	mov	r0, r3
 8003f84:	f001 f836 	bl	8004ff4 <HAL_RCC_ClockConfig>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003f8e:	f000 f9bd 	bl	800430c <Error_Handler>
  }
}
 8003f92:	bf00      	nop
 8003f94:	3750      	adds	r7, #80	; 0x50
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40007000 	.word	0x40007000

08003fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08c      	sub	sp, #48	; 0x30
 8003fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003faa:	f107 031c 	add.w	r3, r7, #28
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	60da      	str	r2, [r3, #12]
 8003fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	4ba1      	ldr	r3, [pc, #644]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	4aa0      	ldr	r2, [pc, #640]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8003fc4:	f043 0310 	orr.w	r3, r3, #16
 8003fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fca:	4b9e      	ldr	r3, [pc, #632]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	4b9a      	ldr	r3, [pc, #616]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	4a99      	ldr	r2, [pc, #612]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8003fe0:	f043 0304 	orr.w	r3, r3, #4
 8003fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe6:	4b97      	ldr	r3, [pc, #604]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	4b93      	ldr	r3, [pc, #588]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	4a92      	ldr	r2, [pc, #584]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8003ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004000:	6313      	str	r3, [r2, #48]	; 0x30
 8004002:	4b90      	ldr	r3, [pc, #576]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	4b8c      	ldr	r3, [pc, #560]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	4a8b      	ldr	r2, [pc, #556]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	6313      	str	r3, [r2, #48]	; 0x30
 800401e:	4b89      	ldr	r3, [pc, #548]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	4b85      	ldr	r3, [pc, #532]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	4a84      	ldr	r2, [pc, #528]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	6313      	str	r3, [r2, #48]	; 0x30
 800403a:	4b82      	ldr	r3, [pc, #520]	; (8004244 <MX_GPIO_Init+0x2a0>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	4b7e      	ldr	r3, [pc, #504]	; (8004244 <MX_GPIO_Init+0x2a0>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	4a7d      	ldr	r2, [pc, #500]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8004050:	f043 0308 	orr.w	r3, r3, #8
 8004054:	6313      	str	r3, [r2, #48]	; 0x30
 8004056:	4b7b      	ldr	r3, [pc, #492]	; (8004244 <MX_GPIO_Init+0x2a0>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	607b      	str	r3, [r7, #4]
 8004060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004062:	2200      	movs	r2, #0
 8004064:	2108      	movs	r1, #8
 8004066:	4878      	ldr	r0, [pc, #480]	; (8004248 <MX_GPIO_Init+0x2a4>)
 8004068:	f000 fd18 	bl	8004a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800406c:	2201      	movs	r2, #1
 800406e:	2101      	movs	r1, #1
 8004070:	4876      	ldr	r0, [pc, #472]	; (800424c <MX_GPIO_Init+0x2a8>)
 8004072:	f000 fd13 	bl	8004a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004076:	2200      	movs	r2, #0
 8004078:	f24f 0110 	movw	r1, #61456	; 0xf010
 800407c:	4874      	ldr	r0, [pc, #464]	; (8004250 <MX_GPIO_Init+0x2ac>)
 800407e:	f000 fd0d 	bl	8004a9c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004082:	2308      	movs	r3, #8
 8004084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004086:	2301      	movs	r3, #1
 8004088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408e:	2300      	movs	r3, #0
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004092:	f107 031c 	add.w	r3, r7, #28
 8004096:	4619      	mov	r1, r3
 8004098:	486b      	ldr	r0, [pc, #428]	; (8004248 <MX_GPIO_Init+0x2a4>)
 800409a:	f000 fb63 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800409e:	2301      	movs	r3, #1
 80040a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040a2:	2301      	movs	r3, #1
 80040a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040aa:	2300      	movs	r3, #0
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80040ae:	f107 031c 	add.w	r3, r7, #28
 80040b2:	4619      	mov	r1, r3
 80040b4:	4865      	ldr	r0, [pc, #404]	; (800424c <MX_GPIO_Init+0x2a8>)
 80040b6:	f000 fb55 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80040ba:	2308      	movs	r3, #8
 80040bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040be:	2302      	movs	r3, #2
 80040c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c6:	2300      	movs	r3, #0
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040ca:	2305      	movs	r3, #5
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80040ce:	f107 031c 	add.w	r3, r7, #28
 80040d2:	4619      	mov	r1, r3
 80040d4:	485d      	ldr	r0, [pc, #372]	; (800424c <MX_GPIO_Init+0x2a8>)
 80040d6:	f000 fb45 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80040da:	2301      	movs	r3, #1
 80040dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80040de:	4b5d      	ldr	r3, [pc, #372]	; (8004254 <MX_GPIO_Init+0x2b0>)
 80040e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80040e6:	f107 031c 	add.w	r3, r7, #28
 80040ea:	4619      	mov	r1, r3
 80040ec:	485a      	ldr	r0, [pc, #360]	; (8004258 <MX_GPIO_Init+0x2b4>)
 80040ee:	f000 fb39 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80040f2:	2310      	movs	r3, #16
 80040f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f6:	2302      	movs	r3, #2
 80040f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fe:	2300      	movs	r3, #0
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004102:	2306      	movs	r3, #6
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004106:	f107 031c 	add.w	r3, r7, #28
 800410a:	4619      	mov	r1, r3
 800410c:	4852      	ldr	r0, [pc, #328]	; (8004258 <MX_GPIO_Init+0x2b4>)
 800410e:	f000 fb29 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004112:	23e0      	movs	r3, #224	; 0xe0
 8004114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004116:	2302      	movs	r3, #2
 8004118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411a:	2300      	movs	r3, #0
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411e:	2300      	movs	r3, #0
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004122:	2305      	movs	r3, #5
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004126:	f107 031c 	add.w	r3, r7, #28
 800412a:	4619      	mov	r1, r3
 800412c:	484a      	ldr	r0, [pc, #296]	; (8004258 <MX_GPIO_Init+0x2b4>)
 800412e:	f000 fb19 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004132:	2304      	movs	r3, #4
 8004134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004136:	2300      	movs	r3, #0
 8004138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413a:	2300      	movs	r3, #0
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800413e:	f107 031c 	add.w	r3, r7, #28
 8004142:	4619      	mov	r1, r3
 8004144:	4845      	ldr	r0, [pc, #276]	; (800425c <MX_GPIO_Init+0x2b8>)
 8004146:	f000 fb0d 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800414a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800414e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004150:	2302      	movs	r3, #2
 8004152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004158:	2300      	movs	r3, #0
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800415c:	2305      	movs	r3, #5
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8004160:	f107 031c 	add.w	r3, r7, #28
 8004164:	4619      	mov	r1, r3
 8004166:	483d      	ldr	r0, [pc, #244]	; (800425c <MX_GPIO_Init+0x2b8>)
 8004168:	f000 fafc 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800416c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8004170:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004172:	2301      	movs	r3, #1
 8004174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004176:	2300      	movs	r3, #0
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417a:	2300      	movs	r3, #0
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800417e:	f107 031c 	add.w	r3, r7, #28
 8004182:	4619      	mov	r1, r3
 8004184:	4832      	ldr	r0, [pc, #200]	; (8004250 <MX_GPIO_Init+0x2ac>)
 8004186:	f000 faed 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800418a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800418e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004190:	2302      	movs	r3, #2
 8004192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004194:	2300      	movs	r3, #0
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004198:	2300      	movs	r3, #0
 800419a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800419c:	2306      	movs	r3, #6
 800419e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a0:	f107 031c 	add.w	r3, r7, #28
 80041a4:	4619      	mov	r1, r3
 80041a6:	4829      	ldr	r0, [pc, #164]	; (800424c <MX_GPIO_Init+0x2a8>)
 80041a8:	f000 fadc 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80041ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041b2:	2300      	movs	r3, #0
 80041b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80041ba:	f107 031c 	add.w	r3, r7, #28
 80041be:	4619      	mov	r1, r3
 80041c0:	4825      	ldr	r0, [pc, #148]	; (8004258 <MX_GPIO_Init+0x2b4>)
 80041c2:	f000 facf 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80041c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80041ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041cc:	2302      	movs	r3, #2
 80041ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d4:	2300      	movs	r3, #0
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80041d8:	230a      	movs	r3, #10
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041dc:	f107 031c 	add.w	r3, r7, #28
 80041e0:	4619      	mov	r1, r3
 80041e2:	481d      	ldr	r0, [pc, #116]	; (8004258 <MX_GPIO_Init+0x2b4>)
 80041e4:	f000 fabe 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80041e8:	2320      	movs	r3, #32
 80041ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041ec:	2300      	movs	r3, #0
 80041ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80041f4:	f107 031c 	add.w	r3, r7, #28
 80041f8:	4619      	mov	r1, r3
 80041fa:	4815      	ldr	r0, [pc, #84]	; (8004250 <MX_GPIO_Init+0x2ac>)
 80041fc:	f000 fab2 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004200:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004206:	2312      	movs	r3, #18
 8004208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800420a:	2301      	movs	r3, #1
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420e:	2300      	movs	r3, #0
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004212:	2304      	movs	r3, #4
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004216:	f107 031c 	add.w	r3, r7, #28
 800421a:	4619      	mov	r1, r3
 800421c:	480f      	ldr	r0, [pc, #60]	; (800425c <MX_GPIO_Init+0x2b8>)
 800421e:	f000 faa1 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004222:	2302      	movs	r3, #2
 8004224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004226:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <MX_GPIO_Init+0x2bc>)
 8004228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	2300      	movs	r3, #0
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800422e:	f107 031c 	add.w	r3, r7, #28
 8004232:	4619      	mov	r1, r3
 8004234:	4804      	ldr	r0, [pc, #16]	; (8004248 <MX_GPIO_Init+0x2a4>)
 8004236:	f000 fa95 	bl	8004764 <HAL_GPIO_Init>

}
 800423a:	bf00      	nop
 800423c:	3730      	adds	r7, #48	; 0x30
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023800 	.word	0x40023800
 8004248:	40021000 	.word	0x40021000
 800424c:	40020800 	.word	0x40020800
 8004250:	40020c00 	.word	0x40020c00
 8004254:	10110000 	.word	0x10110000
 8004258:	40020000 	.word	0x40020000
 800425c:	40020400 	.word	0x40020400
 8004260:	10120000 	.word	0x10120000

08004264 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters){
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 800426c:	4806      	ldr	r0, [pc, #24]	; (8004288 <led_green_handler+0x24>)
 800426e:	f7ff fd1d 	bl	8003cac <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8004272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004276:	4805      	ldr	r0, [pc, #20]	; (800428c <led_green_handler+0x28>)
 8004278:	f000 fc29 	bl	8004ace <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800427c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004280:	f000 f96a 	bl	8004558 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8004284:	e7f2      	b.n	800426c <led_green_handler+0x8>
 8004286:	bf00      	nop
 8004288:	08005b30 	.word	0x08005b30
 800428c:	40020c00 	.word	0x40020c00

08004290 <led_orange_handler>:
	}

}

static void led_orange_handler(void* parameters){
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8004298:	4806      	ldr	r0, [pc, #24]	; (80042b4 <led_orange_handler+0x24>)
 800429a:	f7ff fd07 	bl	8003cac <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 800429e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042a2:	4805      	ldr	r0, [pc, #20]	; (80042b8 <led_orange_handler+0x28>)
 80042a4:	f000 fc13 	bl	8004ace <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 80042a8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80042ac:	f000 f954 	bl	8004558 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80042b0:	e7f2      	b.n	8004298 <led_orange_handler+0x8>
 80042b2:	bf00      	nop
 80042b4:	08005b44 	.word	0x08005b44
 80042b8:	40020c00 	.word	0x40020c00

080042bc <led_red_handler>:
	}

}

static void led_red_handler(void* parameters){
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80042c4:	4806      	ldr	r0, [pc, #24]	; (80042e0 <led_red_handler+0x24>)
 80042c6:	f7ff fcf1 	bl	8003cac <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 80042ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042ce:	4805      	ldr	r0, [pc, #20]	; (80042e4 <led_red_handler+0x28>)
 80042d0:	f000 fbfd 	bl	8004ace <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 80042d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80042d8:	f000 f93e 	bl	8004558 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80042dc:	e7f2      	b.n	80042c4 <led_red_handler+0x8>
 80042de:	bf00      	nop
 80042e0:	08005b58 	.word	0x08005b58
 80042e4:	40020c00 	.word	0x40020c00

080042e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a04      	ldr	r2, [pc, #16]	; (8004308 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80042fa:	f000 f90d 	bl	8004518 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40001000 	.word	0x40001000

0800430c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004310:	b672      	cpsid	i
}
 8004312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004314:	e7fe      	b.n	8004314 <Error_Handler+0x8>
	...

08004318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	607b      	str	r3, [r7, #4]
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <HAL_MspInit+0x4c>)
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	4a0f      	ldr	r2, [pc, #60]	; (8004364 <HAL_MspInit+0x4c>)
 8004328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800432c:	6453      	str	r3, [r2, #68]	; 0x44
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <HAL_MspInit+0x4c>)
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004336:	607b      	str	r3, [r7, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <HAL_MspInit+0x4c>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	4a08      	ldr	r2, [pc, #32]	; (8004364 <HAL_MspInit+0x4c>)
 8004344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004348:	6413      	str	r3, [r2, #64]	; 0x40
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_MspInit+0x4c>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8004356:	f7fc feff 	bl	8001158 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800

08004368 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08c      	sub	sp, #48	; 0x30
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004378:	2200      	movs	r2, #0
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	2036      	movs	r0, #54	; 0x36
 800437e:	f000 f9c7 	bl	8004710 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004382:	2036      	movs	r0, #54	; 0x36
 8004384:	f000 f9e0 	bl	8004748 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	4b1f      	ldr	r3, [pc, #124]	; (800440c <HAL_InitTick+0xa4>)
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	4a1e      	ldr	r2, [pc, #120]	; (800440c <HAL_InitTick+0xa4>)
 8004392:	f043 0310 	orr.w	r3, r3, #16
 8004396:	6413      	str	r3, [r2, #64]	; 0x40
 8004398:	4b1c      	ldr	r3, [pc, #112]	; (800440c <HAL_InitTick+0xa4>)
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043a4:	f107 0210 	add.w	r2, r7, #16
 80043a8:	f107 0314 	add.w	r3, r7, #20
 80043ac:	4611      	mov	r1, r2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f001 f808 	bl	80053c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80043b4:	f000 fff2 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 80043b8:	4603      	mov	r3, r0
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	4a13      	ldr	r2, [pc, #76]	; (8004410 <HAL_InitTick+0xa8>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	0c9b      	lsrs	r3, r3, #18
 80043c8:	3b01      	subs	r3, #1
 80043ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <HAL_InitTick+0xac>)
 80043ce:	4a12      	ldr	r2, [pc, #72]	; (8004418 <HAL_InitTick+0xb0>)
 80043d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80043d2:	4b10      	ldr	r3, [pc, #64]	; (8004414 <HAL_InitTick+0xac>)
 80043d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80043da:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <HAL_InitTick+0xac>)
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <HAL_InitTick+0xac>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_InitTick+0xac>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80043ec:	4809      	ldr	r0, [pc, #36]	; (8004414 <HAL_InitTick+0xac>)
 80043ee:	f001 f81b 	bl	8005428 <HAL_TIM_Base_Init>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d104      	bne.n	8004402 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80043f8:	4806      	ldr	r0, [pc, #24]	; (8004414 <HAL_InitTick+0xac>)
 80043fa:	f001 f86f 	bl	80054dc <HAL_TIM_Base_Start_IT>
 80043fe:	4603      	mov	r3, r0
 8004400:	e000      	b.n	8004404 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
}
 8004404:	4618      	mov	r0, r3
 8004406:	3730      	adds	r7, #48	; 0x30
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40023800 	.word	0x40023800
 8004410:	431bde83 	.word	0x431bde83
 8004414:	200143e4 	.word	0x200143e4
 8004418:	40001000 	.word	0x40001000

0800441c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004420:	e7fe      	b.n	8004420 <NMI_Handler+0x4>

08004422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004422:	b480      	push	{r7}
 8004424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004426:	e7fe      	b.n	8004426 <HardFault_Handler+0x4>

08004428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800442c:	e7fe      	b.n	800442c <MemManage_Handler+0x4>

0800442e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800442e:	b480      	push	{r7}
 8004430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004432:	e7fe      	b.n	8004432 <BusFault_Handler+0x4>

08004434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004438:	e7fe      	b.n	8004438 <UsageFault_Handler+0x4>

0800443a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800443a:	b480      	push	{r7}
 800443c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800443e:	bf00      	nop
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800444c:	4802      	ldr	r0, [pc, #8]	; (8004458 <TIM6_DAC_IRQHandler+0x10>)
 800444e:	f001 f8b5 	bl	80055bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004452:	bf00      	nop
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	200143e4 	.word	0x200143e4

0800445c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <SystemInit+0x20>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	4a05      	ldr	r2, [pc, #20]	; (800447c <SystemInit+0x20>)
 8004468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800446c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	e000ed00 	.word	0xe000ed00

08004480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004484:	480d      	ldr	r0, [pc, #52]	; (80044bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004486:	490e      	ldr	r1, [pc, #56]	; (80044c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004488:	4a0e      	ldr	r2, [pc, #56]	; (80044c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800448a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800448c:	e002      	b.n	8004494 <LoopCopyDataInit>

0800448e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800448e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004492:	3304      	adds	r3, #4

08004494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004498:	d3f9      	bcc.n	800448e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800449a:	4a0b      	ldr	r2, [pc, #44]	; (80044c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800449c:	4c0b      	ldr	r4, [pc, #44]	; (80044cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800449e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044a0:	e001      	b.n	80044a6 <LoopFillZerobss>

080044a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044a4:	3204      	adds	r2, #4

080044a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044a8:	d3fb      	bcc.n	80044a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044aa:	f7ff ffd7 	bl	800445c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044ae:	f001 fa69 	bl	8005984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044b2:	f7ff fc99 	bl	8003de8 <main>
  bx  lr    
 80044b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80044b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044c0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80044c4:	08005bbc 	.word	0x08005bbc
  ldr r2, =_sbss
 80044c8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80044cc:	20014430 	.word	0x20014430

080044d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044d0:	e7fe      	b.n	80044d0 <ADC_IRQHandler>
	...

080044d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <HAL_Init+0x40>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a0d      	ldr	r2, [pc, #52]	; (8004514 <HAL_Init+0x40>)
 80044de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <HAL_Init+0x40>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a0a      	ldr	r2, [pc, #40]	; (8004514 <HAL_Init+0x40>)
 80044ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044f0:	4b08      	ldr	r3, [pc, #32]	; (8004514 <HAL_Init+0x40>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a07      	ldr	r2, [pc, #28]	; (8004514 <HAL_Init+0x40>)
 80044f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044fc:	2003      	movs	r0, #3
 80044fe:	f000 f8fc 	bl	80046fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004502:	2000      	movs	r0, #0
 8004504:	f7ff ff30 	bl	8004368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004508:	f7ff ff06 	bl	8004318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40023c00 	.word	0x40023c00

08004518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_IncTick+0x20>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_IncTick+0x24>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4413      	add	r3, r2
 8004528:	4a04      	ldr	r2, [pc, #16]	; (800453c <HAL_IncTick+0x24>)
 800452a:	6013      	str	r3, [r2, #0]
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000018 	.word	0x20000018
 800453c:	2001442c 	.word	0x2001442c

08004540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  return uwTick;
 8004544:	4b03      	ldr	r3, [pc, #12]	; (8004554 <HAL_GetTick+0x14>)
 8004546:	681b      	ldr	r3, [r3, #0]
}
 8004548:	4618      	mov	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	2001442c 	.word	0x2001442c

08004558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004560:	f7ff ffee 	bl	8004540 <HAL_GetTick>
 8004564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004570:	d005      	beq.n	800457e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004572:	4b0a      	ldr	r3, [pc, #40]	; (800459c <HAL_Delay+0x44>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800457e:	bf00      	nop
 8004580:	f7ff ffde 	bl	8004540 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	429a      	cmp	r2, r3
 800458e:	d8f7      	bhi.n	8004580 <HAL_Delay+0x28>
  {
  }
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000018 	.word	0x20000018

080045a0 <__NVIC_SetPriorityGrouping>:
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <__NVIC_SetPriorityGrouping+0x44>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045bc:	4013      	ands	r3, r2
 80045be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045d2:	4a04      	ldr	r2, [pc, #16]	; (80045e4 <__NVIC_SetPriorityGrouping+0x44>)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	60d3      	str	r3, [r2, #12]
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <__NVIC_GetPriorityGrouping>:
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045ec:	4b04      	ldr	r3, [pc, #16]	; (8004600 <__NVIC_GetPriorityGrouping+0x18>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	f003 0307 	and.w	r3, r3, #7
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	e000ed00 	.word	0xe000ed00

08004604 <__NVIC_EnableIRQ>:
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800460e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004612:	2b00      	cmp	r3, #0
 8004614:	db0b      	blt.n	800462e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	f003 021f 	and.w	r2, r3, #31
 800461c:	4907      	ldr	r1, [pc, #28]	; (800463c <__NVIC_EnableIRQ+0x38>)
 800461e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	2001      	movs	r0, #1
 8004626:	fa00 f202 	lsl.w	r2, r0, r2
 800462a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	e000e100 	.word	0xe000e100

08004640 <__NVIC_SetPriority>:
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	6039      	str	r1, [r7, #0]
 800464a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800464c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004650:	2b00      	cmp	r3, #0
 8004652:	db0a      	blt.n	800466a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	490c      	ldr	r1, [pc, #48]	; (800468c <__NVIC_SetPriority+0x4c>)
 800465a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465e:	0112      	lsls	r2, r2, #4
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	440b      	add	r3, r1
 8004664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004668:	e00a      	b.n	8004680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4908      	ldr	r1, [pc, #32]	; (8004690 <__NVIC_SetPriority+0x50>)
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	3b04      	subs	r3, #4
 8004678:	0112      	lsls	r2, r2, #4
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	440b      	add	r3, r1
 800467e:	761a      	strb	r2, [r3, #24]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e000e100 	.word	0xe000e100
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004694:	b480      	push	{r7}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f1c3 0307 	rsb	r3, r3, #7
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	bf28      	it	cs
 80046b2:	2304      	movcs	r3, #4
 80046b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3304      	adds	r3, #4
 80046ba:	2b06      	cmp	r3, #6
 80046bc:	d902      	bls.n	80046c4 <NVIC_EncodePriority+0x30>
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3b03      	subs	r3, #3
 80046c2:	e000      	b.n	80046c6 <NVIC_EncodePriority+0x32>
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43da      	mvns	r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	401a      	ands	r2, r3
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	fa01 f303 	lsl.w	r3, r1, r3
 80046e6:	43d9      	mvns	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046ec:	4313      	orrs	r3, r2
         );
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3724      	adds	r7, #36	; 0x24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff ff4c 	bl	80045a0 <__NVIC_SetPriorityGrouping>
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004722:	f7ff ff61 	bl	80045e8 <__NVIC_GetPriorityGrouping>
 8004726:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	6978      	ldr	r0, [r7, #20]
 800472e:	f7ff ffb1 	bl	8004694 <NVIC_EncodePriority>
 8004732:	4602      	mov	r2, r0
 8004734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004738:	4611      	mov	r1, r2
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff ff80 	bl	8004640 <__NVIC_SetPriority>
}
 8004740:	bf00      	nop
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff ff54 	bl	8004604 <__NVIC_EnableIRQ>
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004764:	b480      	push	{r7}
 8004766:	b089      	sub	sp, #36	; 0x24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004772:	2300      	movs	r3, #0
 8004774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	e16b      	b.n	8004a58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004780:	2201      	movs	r2, #1
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4013      	ands	r3, r2
 8004792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	429a      	cmp	r2, r3
 800479a:	f040 815a 	bne.w	8004a52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d005      	beq.n	80047b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d130      	bne.n	8004818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	2203      	movs	r2, #3
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047ec:	2201      	movs	r2, #1
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4013      	ands	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 0201 	and.w	r2, r3, #1
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4313      	orrs	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	2b03      	cmp	r3, #3
 8004822:	d017      	beq.n	8004854 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	2203      	movs	r2, #3
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4313      	orrs	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d123      	bne.n	80048a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	08da      	lsrs	r2, r3, #3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3208      	adds	r2, #8
 8004868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	220f      	movs	r2, #15
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	08da      	lsrs	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3208      	adds	r2, #8
 80048a2:	69b9      	ldr	r1, [r7, #24]
 80048a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	2203      	movs	r2, #3
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43db      	mvns	r3, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4013      	ands	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0203 	and.w	r2, r3, #3
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80b4 	beq.w	8004a52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	4b60      	ldr	r3, [pc, #384]	; (8004a70 <HAL_GPIO_Init+0x30c>)
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	4a5f      	ldr	r2, [pc, #380]	; (8004a70 <HAL_GPIO_Init+0x30c>)
 80048f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048f8:	6453      	str	r3, [r2, #68]	; 0x44
 80048fa:	4b5d      	ldr	r3, [pc, #372]	; (8004a70 <HAL_GPIO_Init+0x30c>)
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004906:	4a5b      	ldr	r2, [pc, #364]	; (8004a74 <HAL_GPIO_Init+0x310>)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	089b      	lsrs	r3, r3, #2
 800490c:	3302      	adds	r3, #2
 800490e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	220f      	movs	r2, #15
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a52      	ldr	r2, [pc, #328]	; (8004a78 <HAL_GPIO_Init+0x314>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d02b      	beq.n	800498a <HAL_GPIO_Init+0x226>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a51      	ldr	r2, [pc, #324]	; (8004a7c <HAL_GPIO_Init+0x318>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d025      	beq.n	8004986 <HAL_GPIO_Init+0x222>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a50      	ldr	r2, [pc, #320]	; (8004a80 <HAL_GPIO_Init+0x31c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d01f      	beq.n	8004982 <HAL_GPIO_Init+0x21e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a4f      	ldr	r2, [pc, #316]	; (8004a84 <HAL_GPIO_Init+0x320>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d019      	beq.n	800497e <HAL_GPIO_Init+0x21a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a4e      	ldr	r2, [pc, #312]	; (8004a88 <HAL_GPIO_Init+0x324>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_GPIO_Init+0x216>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a4d      	ldr	r2, [pc, #308]	; (8004a8c <HAL_GPIO_Init+0x328>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00d      	beq.n	8004976 <HAL_GPIO_Init+0x212>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a4c      	ldr	r2, [pc, #304]	; (8004a90 <HAL_GPIO_Init+0x32c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d007      	beq.n	8004972 <HAL_GPIO_Init+0x20e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a4b      	ldr	r2, [pc, #300]	; (8004a94 <HAL_GPIO_Init+0x330>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d101      	bne.n	800496e <HAL_GPIO_Init+0x20a>
 800496a:	2307      	movs	r3, #7
 800496c:	e00e      	b.n	800498c <HAL_GPIO_Init+0x228>
 800496e:	2308      	movs	r3, #8
 8004970:	e00c      	b.n	800498c <HAL_GPIO_Init+0x228>
 8004972:	2306      	movs	r3, #6
 8004974:	e00a      	b.n	800498c <HAL_GPIO_Init+0x228>
 8004976:	2305      	movs	r3, #5
 8004978:	e008      	b.n	800498c <HAL_GPIO_Init+0x228>
 800497a:	2304      	movs	r3, #4
 800497c:	e006      	b.n	800498c <HAL_GPIO_Init+0x228>
 800497e:	2303      	movs	r3, #3
 8004980:	e004      	b.n	800498c <HAL_GPIO_Init+0x228>
 8004982:	2302      	movs	r3, #2
 8004984:	e002      	b.n	800498c <HAL_GPIO_Init+0x228>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <HAL_GPIO_Init+0x228>
 800498a:	2300      	movs	r3, #0
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	f002 0203 	and.w	r2, r2, #3
 8004992:	0092      	lsls	r2, r2, #2
 8004994:	4093      	lsls	r3, r2
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4313      	orrs	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800499c:	4935      	ldr	r1, [pc, #212]	; (8004a74 <HAL_GPIO_Init+0x310>)
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	089b      	lsrs	r3, r3, #2
 80049a2:	3302      	adds	r3, #2
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049aa:	4b3b      	ldr	r3, [pc, #236]	; (8004a98 <HAL_GPIO_Init+0x334>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049ce:	4a32      	ldr	r2, [pc, #200]	; (8004a98 <HAL_GPIO_Init+0x334>)
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80049d4:	4b30      	ldr	r3, [pc, #192]	; (8004a98 <HAL_GPIO_Init+0x334>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	43db      	mvns	r3, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4013      	ands	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049f8:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <HAL_GPIO_Init+0x334>)
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049fe:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <HAL_GPIO_Init+0x334>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	43db      	mvns	r3, r3
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a22:	4a1d      	ldr	r2, [pc, #116]	; (8004a98 <HAL_GPIO_Init+0x334>)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a28:	4b1b      	ldr	r3, [pc, #108]	; (8004a98 <HAL_GPIO_Init+0x334>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	43db      	mvns	r3, r3
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	4013      	ands	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a4c:	4a12      	ldr	r2, [pc, #72]	; (8004a98 <HAL_GPIO_Init+0x334>)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	3301      	adds	r3, #1
 8004a56:	61fb      	str	r3, [r7, #28]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2b0f      	cmp	r3, #15
 8004a5c:	f67f ae90 	bls.w	8004780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a60:	bf00      	nop
 8004a62:	bf00      	nop
 8004a64:	3724      	adds	r7, #36	; 0x24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800
 8004a74:	40013800 	.word	0x40013800
 8004a78:	40020000 	.word	0x40020000
 8004a7c:	40020400 	.word	0x40020400
 8004a80:	40020800 	.word	0x40020800
 8004a84:	40020c00 	.word	0x40020c00
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40021400 	.word	0x40021400
 8004a90:	40021800 	.word	0x40021800
 8004a94:	40021c00 	.word	0x40021c00
 8004a98:	40013c00 	.word	0x40013c00

08004a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	807b      	strh	r3, [r7, #2]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aac:	787b      	ldrb	r3, [r7, #1]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ab8:	e003      	b.n	8004ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004aba:	887b      	ldrh	r3, [r7, #2]
 8004abc:	041a      	lsls	r2, r3, #16
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	619a      	str	r2, [r3, #24]
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ae0:	887a      	ldrh	r2, [r7, #2]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	041a      	lsls	r2, r3, #16
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	43d9      	mvns	r1, r3
 8004aec:	887b      	ldrh	r3, [r7, #2]
 8004aee:	400b      	ands	r3, r1
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	619a      	str	r2, [r3, #24]
}
 8004af6:	bf00      	nop
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e264      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d075      	beq.n	8004c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b22:	4ba3      	ldr	r3, [pc, #652]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d00c      	beq.n	8004b48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2e:	4ba0      	ldr	r3, [pc, #640]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d112      	bne.n	8004b60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b3a:	4b9d      	ldr	r3, [pc, #628]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b46:	d10b      	bne.n	8004b60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	4b99      	ldr	r3, [pc, #612]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d05b      	beq.n	8004c0c <HAL_RCC_OscConfig+0x108>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d157      	bne.n	8004c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e23f      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b68:	d106      	bne.n	8004b78 <HAL_RCC_OscConfig+0x74>
 8004b6a:	4b91      	ldr	r3, [pc, #580]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a90      	ldr	r2, [pc, #576]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	e01d      	b.n	8004bb4 <HAL_RCC_OscConfig+0xb0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x98>
 8004b82:	4b8b      	ldr	r3, [pc, #556]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a8a      	ldr	r2, [pc, #552]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b88      	ldr	r3, [pc, #544]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a87      	ldr	r2, [pc, #540]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e00b      	b.n	8004bb4 <HAL_RCC_OscConfig+0xb0>
 8004b9c:	4b84      	ldr	r3, [pc, #528]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a83      	ldr	r2, [pc, #524]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	4b81      	ldr	r3, [pc, #516]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a80      	ldr	r2, [pc, #512]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d013      	beq.n	8004be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7ff fcc0 	bl	8004540 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc4:	f7ff fcbc 	bl	8004540 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	; 0x64
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e204      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd6:	4b76      	ldr	r3, [pc, #472]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0xc0>
 8004be2:	e014      	b.n	8004c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7ff fcac 	bl	8004540 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bec:	f7ff fca8 	bl	8004540 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b64      	cmp	r3, #100	; 0x64
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e1f0      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfe:	4b6c      	ldr	r3, [pc, #432]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0xe8>
 8004c0a:	e000      	b.n	8004c0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d063      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c1a:	4b65      	ldr	r3, [pc, #404]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c26:	4b62      	ldr	r3, [pc, #392]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d11c      	bne.n	8004c6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c32:	4b5f      	ldr	r3, [pc, #380]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d116      	bne.n	8004c6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3e:	4b5c      	ldr	r3, [pc, #368]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_RCC_OscConfig+0x152>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d001      	beq.n	8004c56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e1c4      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c56:	4b56      	ldr	r3, [pc, #344]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	4952      	ldr	r1, [pc, #328]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c6a:	e03a      	b.n	8004ce2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c74:	4b4f      	ldr	r3, [pc, #316]	; (8004db4 <HAL_RCC_OscConfig+0x2b0>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7a:	f7ff fc61 	bl	8004540 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c82:	f7ff fc5d 	bl	8004540 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e1a5      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c94:	4b46      	ldr	r3, [pc, #280]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0f0      	beq.n	8004c82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca0:	4b43      	ldr	r3, [pc, #268]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	4940      	ldr	r1, [pc, #256]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	600b      	str	r3, [r1, #0]
 8004cb4:	e015      	b.n	8004ce2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb6:	4b3f      	ldr	r3, [pc, #252]	; (8004db4 <HAL_RCC_OscConfig+0x2b0>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbc:	f7ff fc40 	bl	8004540 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cc4:	f7ff fc3c 	bl	8004540 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e184      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d030      	beq.n	8004d50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d016      	beq.n	8004d24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf6:	4b30      	ldr	r3, [pc, #192]	; (8004db8 <HAL_RCC_OscConfig+0x2b4>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfc:	f7ff fc20 	bl	8004540 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d04:	f7ff fc1c 	bl	8004540 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e164      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d16:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0x200>
 8004d22:	e015      	b.n	8004d50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d24:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <HAL_RCC_OscConfig+0x2b4>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2a:	f7ff fc09 	bl	8004540 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d32:	f7ff fc05 	bl	8004540 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e14d      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d44:	4b1a      	ldr	r3, [pc, #104]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 80a0 	beq.w	8004e9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d62:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10f      	bne.n	8004d8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	4a0e      	ldr	r2, [pc, #56]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8e:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <HAL_RCC_OscConfig+0x2b8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d121      	bne.n	8004dde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d9a:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <HAL_RCC_OscConfig+0x2b8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a07      	ldr	r2, [pc, #28]	; (8004dbc <HAL_RCC_OscConfig+0x2b8>)
 8004da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004da6:	f7ff fbcb 	bl	8004540 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dac:	e011      	b.n	8004dd2 <HAL_RCC_OscConfig+0x2ce>
 8004dae:	bf00      	nop
 8004db0:	40023800 	.word	0x40023800
 8004db4:	42470000 	.word	0x42470000
 8004db8:	42470e80 	.word	0x42470e80
 8004dbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc0:	f7ff fbbe 	bl	8004540 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e106      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd2:	4b85      	ldr	r3, [pc, #532]	; (8004fe8 <HAL_RCC_OscConfig+0x4e4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d106      	bne.n	8004df4 <HAL_RCC_OscConfig+0x2f0>
 8004de6:	4b81      	ldr	r3, [pc, #516]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a80      	ldr	r2, [pc, #512]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	6713      	str	r3, [r2, #112]	; 0x70
 8004df2:	e01c      	b.n	8004e2e <HAL_RCC_OscConfig+0x32a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b05      	cmp	r3, #5
 8004dfa:	d10c      	bne.n	8004e16 <HAL_RCC_OscConfig+0x312>
 8004dfc:	4b7b      	ldr	r3, [pc, #492]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a7a      	ldr	r2, [pc, #488]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e02:	f043 0304 	orr.w	r3, r3, #4
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
 8004e08:	4b78      	ldr	r3, [pc, #480]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	4a77      	ldr	r2, [pc, #476]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	6713      	str	r3, [r2, #112]	; 0x70
 8004e14:	e00b      	b.n	8004e2e <HAL_RCC_OscConfig+0x32a>
 8004e16:	4b75      	ldr	r3, [pc, #468]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	4a74      	ldr	r2, [pc, #464]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	6713      	str	r3, [r2, #112]	; 0x70
 8004e22:	4b72      	ldr	r3, [pc, #456]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	4a71      	ldr	r2, [pc, #452]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e28:	f023 0304 	bic.w	r3, r3, #4
 8004e2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d015      	beq.n	8004e62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e36:	f7ff fb83 	bl	8004540 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e3e:	f7ff fb7f 	bl	8004540 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e0c5      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e54:	4b65      	ldr	r3, [pc, #404]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0ee      	beq.n	8004e3e <HAL_RCC_OscConfig+0x33a>
 8004e60:	e014      	b.n	8004e8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e62:	f7ff fb6d 	bl	8004540 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7ff fb69 	bl	8004540 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e0af      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e80:	4b5a      	ldr	r3, [pc, #360]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ee      	bne.n	8004e6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d105      	bne.n	8004e9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e92:	4b56      	ldr	r3, [pc, #344]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	4a55      	ldr	r2, [pc, #340]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 809b 	beq.w	8004fde <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ea8:	4b50      	ldr	r3, [pc, #320]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 030c 	and.w	r3, r3, #12
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d05c      	beq.n	8004f6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d141      	bne.n	8004f40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ebc:	4b4c      	ldr	r3, [pc, #304]	; (8004ff0 <HAL_RCC_OscConfig+0x4ec>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec2:	f7ff fb3d 	bl	8004540 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eca:	f7ff fb39 	bl	8004540 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e081      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004edc:	4b43      	ldr	r3, [pc, #268]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f0      	bne.n	8004eca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	019b      	lsls	r3, r3, #6
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	3b01      	subs	r3, #1
 8004f02:	041b      	lsls	r3, r3, #16
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	4937      	ldr	r1, [pc, #220]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f12:	4b37      	ldr	r3, [pc, #220]	; (8004ff0 <HAL_RCC_OscConfig+0x4ec>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f18:	f7ff fb12 	bl	8004540 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f20:	f7ff fb0e 	bl	8004540 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e056      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f32:	4b2e      	ldr	r3, [pc, #184]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x41c>
 8004f3e:	e04e      	b.n	8004fde <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f40:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <HAL_RCC_OscConfig+0x4ec>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f46:	f7ff fafb 	bl	8004540 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4e:	f7ff faf7 	bl	8004540 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e03f      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f60:	4b22      	ldr	r3, [pc, #136]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x44a>
 8004f6c:	e037      	b.n	8004fde <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e032      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f7a:	4b1c      	ldr	r3, [pc, #112]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d028      	beq.n	8004fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d121      	bne.n	8004fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d11a      	bne.n	8004fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004faa:	4013      	ands	r3, r2
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d111      	bne.n	8004fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d107      	bne.n	8004fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d001      	beq.n	8004fde <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40007000 	.word	0x40007000
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	42470060 	.word	0x42470060

08004ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0cc      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005008:	4b68      	ldr	r3, [pc, #416]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d90c      	bls.n	8005030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005016:	4b65      	ldr	r3, [pc, #404]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b63      	ldr	r3, [pc, #396]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0b8      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d020      	beq.n	800507e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005048:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a58      	ldr	r2, [pc, #352]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005060:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a52      	ldr	r2, [pc, #328]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800506a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506c:	4b50      	ldr	r3, [pc, #320]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	494d      	ldr	r1, [pc, #308]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d044      	beq.n	8005114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005092:	4b47      	ldr	r3, [pc, #284]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d119      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e07f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d003      	beq.n	80050b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d107      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b2:	4b3f      	ldr	r3, [pc, #252]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e06f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c2:	4b3b      	ldr	r3, [pc, #236]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e067      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050d2:	4b37      	ldr	r3, [pc, #220]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f023 0203 	bic.w	r2, r3, #3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4934      	ldr	r1, [pc, #208]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e4:	f7ff fa2c 	bl	8004540 <HAL_GetTick>
 80050e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ea:	e00a      	b.n	8005102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ec:	f7ff fa28 	bl	8004540 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e04f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 020c 	and.w	r2, r3, #12
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	429a      	cmp	r2, r3
 8005112:	d1eb      	bne.n	80050ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005114:	4b25      	ldr	r3, [pc, #148]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d20c      	bcs.n	800513c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005122:	4b22      	ldr	r3, [pc, #136]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e032      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4916      	ldr	r1, [pc, #88]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	490e      	ldr	r1, [pc, #56]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800517a:	f000 f821 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 800517e:	4602      	mov	r2, r0
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	490a      	ldr	r1, [pc, #40]	; (80051b4 <HAL_RCC_ClockConfig+0x1c0>)
 800518c:	5ccb      	ldrb	r3, [r1, r3]
 800518e:	fa22 f303 	lsr.w	r3, r2, r3
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff f8e4 	bl	8004368 <HAL_InitTick>

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40023c00 	.word	0x40023c00
 80051b0:	40023800 	.word	0x40023800
 80051b4:	08005b94 	.word	0x08005b94
 80051b8:	20000010 	.word	0x20000010
 80051bc:	20000014 	.word	0x20000014

080051c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	2300      	movs	r3, #0
 80051d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d8:	4b67      	ldr	r3, [pc, #412]	; (8005378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 030c 	and.w	r3, r3, #12
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d00d      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x40>
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	f200 80bd 	bhi.w	8005364 <HAL_RCC_GetSysClockFreq+0x1a4>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d003      	beq.n	80051fa <HAL_RCC_GetSysClockFreq+0x3a>
 80051f2:	e0b7      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f4:	4b61      	ldr	r3, [pc, #388]	; (800537c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051f6:	60bb      	str	r3, [r7, #8]
       break;
 80051f8:	e0b7      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051fa:	4b61      	ldr	r3, [pc, #388]	; (8005380 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80051fc:	60bb      	str	r3, [r7, #8]
      break;
 80051fe:	e0b4      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005200:	4b5d      	ldr	r3, [pc, #372]	; (8005378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005208:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800520a:	4b5b      	ldr	r3, [pc, #364]	; (8005378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d04d      	beq.n	80052b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005216:	4b58      	ldr	r3, [pc, #352]	; (8005378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	099b      	lsrs	r3, r3, #6
 800521c:	461a      	mov	r2, r3
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005226:	f04f 0100 	mov.w	r1, #0
 800522a:	ea02 0800 	and.w	r8, r2, r0
 800522e:	ea03 0901 	and.w	r9, r3, r1
 8005232:	4640      	mov	r0, r8
 8005234:	4649      	mov	r1, r9
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	014b      	lsls	r3, r1, #5
 8005240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005244:	0142      	lsls	r2, r0, #5
 8005246:	4610      	mov	r0, r2
 8005248:	4619      	mov	r1, r3
 800524a:	ebb0 0008 	subs.w	r0, r0, r8
 800524e:	eb61 0109 	sbc.w	r1, r1, r9
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	018b      	lsls	r3, r1, #6
 800525c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005260:	0182      	lsls	r2, r0, #6
 8005262:	1a12      	subs	r2, r2, r0
 8005264:	eb63 0301 	sbc.w	r3, r3, r1
 8005268:	f04f 0000 	mov.w	r0, #0
 800526c:	f04f 0100 	mov.w	r1, #0
 8005270:	00d9      	lsls	r1, r3, #3
 8005272:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005276:	00d0      	lsls	r0, r2, #3
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	eb12 0208 	adds.w	r2, r2, r8
 8005280:	eb43 0309 	adc.w	r3, r3, r9
 8005284:	f04f 0000 	mov.w	r0, #0
 8005288:	f04f 0100 	mov.w	r1, #0
 800528c:	0259      	lsls	r1, r3, #9
 800528e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005292:	0250      	lsls	r0, r2, #9
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4610      	mov	r0, r2
 800529a:	4619      	mov	r1, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	461a      	mov	r2, r3
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	f7fa ffde 	bl	8000264 <__aeabi_uldivmod>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4613      	mov	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e04a      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b2:	4b31      	ldr	r3, [pc, #196]	; (8005378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	099b      	lsrs	r3, r3, #6
 80052b8:	461a      	mov	r2, r3
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052c2:	f04f 0100 	mov.w	r1, #0
 80052c6:	ea02 0400 	and.w	r4, r2, r0
 80052ca:	ea03 0501 	and.w	r5, r3, r1
 80052ce:	4620      	mov	r0, r4
 80052d0:	4629      	mov	r1, r5
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	014b      	lsls	r3, r1, #5
 80052dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052e0:	0142      	lsls	r2, r0, #5
 80052e2:	4610      	mov	r0, r2
 80052e4:	4619      	mov	r1, r3
 80052e6:	1b00      	subs	r0, r0, r4
 80052e8:	eb61 0105 	sbc.w	r1, r1, r5
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	018b      	lsls	r3, r1, #6
 80052f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052fa:	0182      	lsls	r2, r0, #6
 80052fc:	1a12      	subs	r2, r2, r0
 80052fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	f04f 0100 	mov.w	r1, #0
 800530a:	00d9      	lsls	r1, r3, #3
 800530c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005310:	00d0      	lsls	r0, r2, #3
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	1912      	adds	r2, r2, r4
 8005318:	eb45 0303 	adc.w	r3, r5, r3
 800531c:	f04f 0000 	mov.w	r0, #0
 8005320:	f04f 0100 	mov.w	r1, #0
 8005324:	0299      	lsls	r1, r3, #10
 8005326:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800532a:	0290      	lsls	r0, r2, #10
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4610      	mov	r0, r2
 8005332:	4619      	mov	r1, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	461a      	mov	r2, r3
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	f7fa ff92 	bl	8000264 <__aeabi_uldivmod>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4613      	mov	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	3301      	adds	r3, #1
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005360:	60bb      	str	r3, [r7, #8]
      break;
 8005362:	e002      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005366:	60bb      	str	r3, [r7, #8]
      break;
 8005368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800536a:	68bb      	ldr	r3, [r7, #8]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800
 800537c:	00f42400 	.word	0x00f42400
 8005380:	007a1200 	.word	0x007a1200

08005384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005388:	4b03      	ldr	r3, [pc, #12]	; (8005398 <HAL_RCC_GetHCLKFreq+0x14>)
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20000010 	.word	0x20000010

0800539c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053a0:	f7ff fff0 	bl	8005384 <HAL_RCC_GetHCLKFreq>
 80053a4:	4602      	mov	r2, r0
 80053a6:	4b05      	ldr	r3, [pc, #20]	; (80053bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	0a9b      	lsrs	r3, r3, #10
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	4903      	ldr	r1, [pc, #12]	; (80053c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053b2:	5ccb      	ldrb	r3, [r1, r3]
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40023800 	.word	0x40023800
 80053c0:	08005ba4 	.word	0x08005ba4

080053c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	220f      	movs	r2, #15
 80053d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053d4:	4b12      	ldr	r3, [pc, #72]	; (8005420 <HAL_RCC_GetClockConfig+0x5c>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 0203 	and.w	r2, r3, #3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053e0:	4b0f      	ldr	r3, [pc, #60]	; (8005420 <HAL_RCC_GetClockConfig+0x5c>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053ec:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <HAL_RCC_GetClockConfig+0x5c>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053f8:	4b09      	ldr	r3, [pc, #36]	; (8005420 <HAL_RCC_GetClockConfig+0x5c>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	08db      	lsrs	r3, r3, #3
 80053fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005406:	4b07      	ldr	r3, [pc, #28]	; (8005424 <HAL_RCC_GetClockConfig+0x60>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0207 	and.w	r2, r3, #7
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	601a      	str	r2, [r3, #0]
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40023800 	.word	0x40023800
 8005424:	40023c00 	.word	0x40023c00

08005428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e041      	b.n	80054be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f839 	bl	80054c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3304      	adds	r3, #4
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f000 f9d8 	bl	800581c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
	...

080054dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d001      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e04e      	b.n	8005592 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a23      	ldr	r2, [pc, #140]	; (80055a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d022      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x80>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551e:	d01d      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x80>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d018      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x80>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1e      	ldr	r2, [pc, #120]	; (80055a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d013      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x80>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <HAL_TIM_Base_Start_IT+0xd0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00e      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x80>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d009      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x80>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a19      	ldr	r2, [pc, #100]	; (80055b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d004      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x80>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d111      	bne.n	8005580 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b06      	cmp	r3, #6
 800556c:	d010      	beq.n	8005590 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0201 	orr.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557e:	e007      	b.n	8005590 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40010000 	.word	0x40010000
 80055a4:	40000400 	.word	0x40000400
 80055a8:	40000800 	.word	0x40000800
 80055ac:	40000c00 	.word	0x40000c00
 80055b0:	40010400 	.word	0x40010400
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40001800 	.word	0x40001800

080055bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d122      	bne.n	8005618 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d11b      	bne.n	8005618 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0202 	mvn.w	r2, #2
 80055e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8ee 	bl	80057e0 <HAL_TIM_IC_CaptureCallback>
 8005604:	e005      	b.n	8005612 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f8e0 	bl	80057cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f8f1 	bl	80057f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b04      	cmp	r3, #4
 8005624:	d122      	bne.n	800566c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b04      	cmp	r3, #4
 8005632:	d11b      	bne.n	800566c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0204 	mvn.w	r2, #4
 800563c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f8c4 	bl	80057e0 <HAL_TIM_IC_CaptureCallback>
 8005658:	e005      	b.n	8005666 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f8b6 	bl	80057cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f8c7 	bl	80057f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b08      	cmp	r3, #8
 8005678:	d122      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b08      	cmp	r3, #8
 8005686:	d11b      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0208 	mvn.w	r2, #8
 8005690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2204      	movs	r2, #4
 8005696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f89a 	bl	80057e0 <HAL_TIM_IC_CaptureCallback>
 80056ac:	e005      	b.n	80056ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f88c 	bl	80057cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f89d 	bl	80057f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	2b10      	cmp	r3, #16
 80056cc:	d122      	bne.n	8005714 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d11b      	bne.n	8005714 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0210 	mvn.w	r2, #16
 80056e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2208      	movs	r2, #8
 80056ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f870 	bl	80057e0 <HAL_TIM_IC_CaptureCallback>
 8005700:	e005      	b.n	800570e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f862 	bl	80057cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f873 	bl	80057f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b01      	cmp	r3, #1
 8005720:	d10e      	bne.n	8005740 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b01      	cmp	r3, #1
 800572e:	d107      	bne.n	8005740 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0201 	mvn.w	r2, #1
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fe fdd4 	bl	80042e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574a:	2b80      	cmp	r3, #128	; 0x80
 800574c:	d10e      	bne.n	800576c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005758:	2b80      	cmp	r3, #128	; 0x80
 800575a:	d107      	bne.n	800576c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f902 	bl	8005970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d10e      	bne.n	8005798 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	2b40      	cmp	r3, #64	; 0x40
 8005786:	d107      	bne.n	8005798 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f838 	bl	8005808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d10e      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d107      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0220 	mvn.w	r2, #32
 80057bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f8cc 	bl	800595c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057c4:	bf00      	nop
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a40      	ldr	r2, [pc, #256]	; (8005930 <TIM_Base_SetConfig+0x114>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d013      	beq.n	800585c <TIM_Base_SetConfig+0x40>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583a:	d00f      	beq.n	800585c <TIM_Base_SetConfig+0x40>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a3d      	ldr	r2, [pc, #244]	; (8005934 <TIM_Base_SetConfig+0x118>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00b      	beq.n	800585c <TIM_Base_SetConfig+0x40>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a3c      	ldr	r2, [pc, #240]	; (8005938 <TIM_Base_SetConfig+0x11c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d007      	beq.n	800585c <TIM_Base_SetConfig+0x40>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a3b      	ldr	r2, [pc, #236]	; (800593c <TIM_Base_SetConfig+0x120>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <TIM_Base_SetConfig+0x40>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a3a      	ldr	r2, [pc, #232]	; (8005940 <TIM_Base_SetConfig+0x124>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d108      	bne.n	800586e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a2f      	ldr	r2, [pc, #188]	; (8005930 <TIM_Base_SetConfig+0x114>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d02b      	beq.n	80058ce <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587c:	d027      	beq.n	80058ce <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a2c      	ldr	r2, [pc, #176]	; (8005934 <TIM_Base_SetConfig+0x118>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d023      	beq.n	80058ce <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a2b      	ldr	r2, [pc, #172]	; (8005938 <TIM_Base_SetConfig+0x11c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01f      	beq.n	80058ce <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a2a      	ldr	r2, [pc, #168]	; (800593c <TIM_Base_SetConfig+0x120>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d01b      	beq.n	80058ce <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a29      	ldr	r2, [pc, #164]	; (8005940 <TIM_Base_SetConfig+0x124>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d017      	beq.n	80058ce <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a28      	ldr	r2, [pc, #160]	; (8005944 <TIM_Base_SetConfig+0x128>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a27      	ldr	r2, [pc, #156]	; (8005948 <TIM_Base_SetConfig+0x12c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00f      	beq.n	80058ce <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a26      	ldr	r2, [pc, #152]	; (800594c <TIM_Base_SetConfig+0x130>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00b      	beq.n	80058ce <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a25      	ldr	r2, [pc, #148]	; (8005950 <TIM_Base_SetConfig+0x134>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a24      	ldr	r2, [pc, #144]	; (8005954 <TIM_Base_SetConfig+0x138>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a23      	ldr	r2, [pc, #140]	; (8005958 <TIM_Base_SetConfig+0x13c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d108      	bne.n	80058e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <TIM_Base_SetConfig+0x114>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d003      	beq.n	8005914 <TIM_Base_SetConfig+0xf8>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a0c      	ldr	r2, [pc, #48]	; (8005940 <TIM_Base_SetConfig+0x124>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d103      	bne.n	800591c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	615a      	str	r2, [r3, #20]
}
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40010000 	.word	0x40010000
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	40010400 	.word	0x40010400
 8005944:	40014000 	.word	0x40014000
 8005948:	40014400 	.word	0x40014400
 800594c:	40014800 	.word	0x40014800
 8005950:	40001800 	.word	0x40001800
 8005954:	40001c00 	.word	0x40001c00
 8005958:	40002000 	.word	0x40002000

0800595c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <__libc_init_array>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	4d0d      	ldr	r5, [pc, #52]	; (80059bc <__libc_init_array+0x38>)
 8005988:	4c0d      	ldr	r4, [pc, #52]	; (80059c0 <__libc_init_array+0x3c>)
 800598a:	1b64      	subs	r4, r4, r5
 800598c:	10a4      	asrs	r4, r4, #2
 800598e:	2600      	movs	r6, #0
 8005990:	42a6      	cmp	r6, r4
 8005992:	d109      	bne.n	80059a8 <__libc_init_array+0x24>
 8005994:	4d0b      	ldr	r5, [pc, #44]	; (80059c4 <__libc_init_array+0x40>)
 8005996:	4c0c      	ldr	r4, [pc, #48]	; (80059c8 <__libc_init_array+0x44>)
 8005998:	f000 f83c 	bl	8005a14 <_init>
 800599c:	1b64      	subs	r4, r4, r5
 800599e:	10a4      	asrs	r4, r4, #2
 80059a0:	2600      	movs	r6, #0
 80059a2:	42a6      	cmp	r6, r4
 80059a4:	d105      	bne.n	80059b2 <__libc_init_array+0x2e>
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
 80059a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ac:	4798      	blx	r3
 80059ae:	3601      	adds	r6, #1
 80059b0:	e7ee      	b.n	8005990 <__libc_init_array+0xc>
 80059b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b6:	4798      	blx	r3
 80059b8:	3601      	adds	r6, #1
 80059ba:	e7f2      	b.n	80059a2 <__libc_init_array+0x1e>
 80059bc:	08005bb4 	.word	0x08005bb4
 80059c0:	08005bb4 	.word	0x08005bb4
 80059c4:	08005bb4 	.word	0x08005bb4
 80059c8:	08005bb8 	.word	0x08005bb8

080059cc <memcmp>:
 80059cc:	b530      	push	{r4, r5, lr}
 80059ce:	3901      	subs	r1, #1
 80059d0:	2400      	movs	r4, #0
 80059d2:	42a2      	cmp	r2, r4
 80059d4:	d101      	bne.n	80059da <memcmp+0xe>
 80059d6:	2000      	movs	r0, #0
 80059d8:	e005      	b.n	80059e6 <memcmp+0x1a>
 80059da:	5d03      	ldrb	r3, [r0, r4]
 80059dc:	3401      	adds	r4, #1
 80059de:	5d0d      	ldrb	r5, [r1, r4]
 80059e0:	42ab      	cmp	r3, r5
 80059e2:	d0f6      	beq.n	80059d2 <memcmp+0x6>
 80059e4:	1b58      	subs	r0, r3, r5
 80059e6:	bd30      	pop	{r4, r5, pc}

080059e8 <memcpy>:
 80059e8:	440a      	add	r2, r1
 80059ea:	4291      	cmp	r1, r2
 80059ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80059f0:	d100      	bne.n	80059f4 <memcpy+0xc>
 80059f2:	4770      	bx	lr
 80059f4:	b510      	push	{r4, lr}
 80059f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059fe:	4291      	cmp	r1, r2
 8005a00:	d1f9      	bne.n	80059f6 <memcpy+0xe>
 8005a02:	bd10      	pop	{r4, pc}

08005a04 <memset>:
 8005a04:	4402      	add	r2, r0
 8005a06:	4603      	mov	r3, r0
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d100      	bne.n	8005a0e <memset+0xa>
 8005a0c:	4770      	bx	lr
 8005a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a12:	e7f9      	b.n	8005a08 <memset+0x4>

08005a14 <_init>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	bf00      	nop
 8005a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1a:	bc08      	pop	{r3}
 8005a1c:	469e      	mov	lr, r3
 8005a1e:	4770      	bx	lr

08005a20 <_fini>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	bf00      	nop
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr
