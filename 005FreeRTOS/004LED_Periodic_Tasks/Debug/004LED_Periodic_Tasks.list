
004LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed8  08005ed8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee0  08005ee0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014414  2000001c  08005f04  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014430  08005f04  00024430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166e8  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df7  00000000  00000000  00036734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00039530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  0003a660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002120b  00000000  00000000  0003b628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013289  00000000  00000000  0005c833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d68b3  00000000  00000000  0006fabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014636f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000474c  00000000  00000000  001463c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d40 	.word	0x08005d40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005d40 	.word	0x08005d40

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001433c 	.word	0x2001433c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f103 0208 	add.w	r2, r3, #8
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000574:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f103 0208 	add.w	r2, r3, #8
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f103 0208 	add.w	r2, r3, #8
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005b6:	b480      	push	{r7}
 80005b8:	b085      	sub	sp, #20
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1c5a      	adds	r2, r3, #1
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	601a      	str	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000614:	d103      	bne.n	800061e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	691b      	ldr	r3, [r3, #16]
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e00c      	b.n	8000638 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3308      	adds	r3, #8
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e002      	b.n	800062c <vListInsert+0x2e>
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	429a      	cmp	r2, r3
 8000636:	d2f6      	bcs.n	8000626 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	691b      	ldr	r3, [r3, #16]
 800067c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	6892      	ldr	r2, [r2, #8]
 8000686:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	6852      	ldr	r2, [r2, #4]
 8000690:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	d103      	bne.n	80006a4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689a      	ldr	r2, [r3, #8]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af04      	add	r7, sp, #16
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4613      	mov	r3, r2
 80006d2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f82f 	bl	800173c <pvPortMalloc>
 80006de:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00e      	beq.n	8000704 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80006e6:	2058      	movs	r0, #88	; 0x58
 80006e8:	f001 f828 	bl	800173c <pvPortMalloc>
 80006ec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
 80006fa:	e005      	b.n	8000708 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80006fc:	6978      	ldr	r0, [r7, #20]
 80006fe:	f001 f8fd 	bl	80018fc <vPortFree>
 8000702:	e001      	b.n	8000708 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d013      	beq.n	8000736 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800070e:	88fa      	ldrh	r2, [r7, #6]
 8000710:	2300      	movs	r3, #0
 8000712:	9303      	str	r3, [sp, #12]
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	9302      	str	r3, [sp, #8]
 8000718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	68b9      	ldr	r1, [r7, #8]
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f000 f80e 	bl	8000746 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800072a:	69f8      	ldr	r0, [r7, #28]
 800072c:	f000 f8a2 	bl	8000874 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000730:	2301      	movs	r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	e002      	b.n	800073c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800073a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800073c:	69bb      	ldr	r3, [r7, #24]
    }
 800073e:	4618      	mov	r0, r3
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b088      	sub	sp, #32
 800074a:	af00      	add	r7, sp, #0
 800074c:	60f8      	str	r0, [r7, #12]
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000756:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	461a      	mov	r2, r3
 800075e:	21a5      	movs	r1, #165	; 0xa5
 8000760:	f005 fae6 	bl	8005d30 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800076e:	3b01      	subs	r3, #1
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	f023 0307 	bic.w	r3, r3, #7
 800077c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00a      	beq.n	800079e <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800078c:	f383 8811 	msr	BASEPRI, r3
 8000790:	f3bf 8f6f 	isb	sy
 8000794:	f3bf 8f4f 	dsb	sy
 8000798:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800079a:	bf00      	nop
 800079c:	e7fe      	b.n	800079c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d01f      	beq.n	80007e4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
 80007a8:	e012      	b.n	80007d0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	4413      	add	r3, r2
 80007b0:	7819      	ldrb	r1, [r3, #0]
 80007b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	4413      	add	r3, r2
 80007b8:	3334      	adds	r3, #52	; 0x34
 80007ba:	460a      	mov	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d006      	beq.n	80007d8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3301      	adds	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	2b09      	cmp	r3, #9
 80007d4:	d9e9      	bls.n	80007aa <prvInitialiseNewTask+0x64>
 80007d6:	e000      	b.n	80007da <prvInitialiseNewTask+0x94>
            {
                break;
 80007d8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80007da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80007e2:	e003      	b.n	80007ec <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80007e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80007ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	d901      	bls.n	80007f6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80007f2:	2304      	movs	r3, #4
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80007f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80007fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000800:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000804:	2200      	movs	r2, #0
 8000806:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800080a:	3304      	adds	r3, #4
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fec5 	bl	800059c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000814:	3318      	adds	r3, #24
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fec0 	bl	800059c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800081c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800081e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000820:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000824:	f1c3 0205 	rsb	r2, r3, #5
 8000828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800082c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000834:	3350      	adds	r3, #80	; 0x50
 8000836:	2204      	movs	r2, #4
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f005 fa78 	bl	8005d30 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000842:	3354      	adds	r3, #84	; 0x54
 8000844:	2201      	movs	r2, #1
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f005 fa71 	bl	8005d30 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	68f9      	ldr	r1, [r7, #12]
 8000852:	69b8      	ldr	r0, [r7, #24]
 8000854:	f000 fc98 	bl	8001188 <pxPortInitialiseStack>
 8000858:	4602      	mov	r2, r0
 800085a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800085c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800085e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000860:	2b00      	cmp	r3, #0
 8000862:	d002      	beq.n	800086a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000868:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af02      	add	r7, sp, #8
 800087a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800087c:	f000 fe32 	bl	80014e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000880:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <prvAddNewTaskToReadyList+0xfc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a3a      	ldr	r2, [pc, #232]	; (8000970 <prvAddNewTaskToReadyList+0xfc>)
 8000888:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800088a:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d109      	bne.n	80008a6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000892:	4a38      	ldr	r2, [pc, #224]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000898:	4b35      	ldr	r3, [pc, #212]	; (8000970 <prvAddNewTaskToReadyList+0xfc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d110      	bne.n	80008c2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80008a0:	f000 fb60 	bl	8000f64 <prvInitialiseTaskLists>
 80008a4:	e00d      	b.n	80008c2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <prvAddNewTaskToReadyList+0x104>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d109      	bne.n	80008c2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d802      	bhi.n	80008c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80008bc:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <prvAddNewTaskToReadyList+0x108>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	4a2c      	ldr	r2, [pc, #176]	; (800097c <prvAddNewTaskToReadyList+0x108>)
 80008ca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <prvAddNewTaskToReadyList+0x108>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d016      	beq.n	8000908 <prvAddNewTaskToReadyList+0x94>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 f98b 	bl	8003bf8 <SEGGER_SYSVIEW_OnTaskCreate>
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	461d      	mov	r5, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	461c      	mov	r4, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	1ae3      	subs	r3, r4, r3
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	462b      	mov	r3, r5
 8000904:	f001 f9c0 	bl	8001c88 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4618      	mov	r0, r3
 800090c:	f003 f9f8 	bl	8003d00 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	2201      	movs	r2, #1
 8000916:	409a      	lsls	r2, r3
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <prvAddNewTaskToReadyList+0x10c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4313      	orrs	r3, r2
 800091e:	4a18      	ldr	r2, [pc, #96]	; (8000980 <prvAddNewTaskToReadyList+0x10c>)
 8000920:	6013      	str	r3, [r2, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000926:	4613      	mov	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <prvAddNewTaskToReadyList+0x110>)
 8000930:	441a      	add	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4610      	mov	r0, r2
 800093a:	f7ff fe3c 	bl	80005b6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800093e:	f000 fe01 	bl	8001544 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <prvAddNewTaskToReadyList+0x104>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d00e      	beq.n	8000968 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <prvAddNewTaskToReadyList+0x114>)
 800095a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	f3bf 8f4f 	dsb	sy
 8000964:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bdb0      	pop	{r4, r5, r7, pc}
 8000970:	20000110 	.word	0x20000110
 8000974:	20000038 	.word	0x20000038
 8000978:	2000011c 	.word	0x2000011c
 800097c:	2000012c 	.word	0x2000012c
 8000980:	20000118 	.word	0x20000118
 8000984:	2000003c 	.word	0x2000003c
 8000988:	e000ed04 	.word	0xe000ed04

0800098c <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10a      	bne.n	80009b6 <xTaskDelayUntil+0x2a>
        __asm volatile
 80009a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009a4:	f383 8811 	msr	BASEPRI, r3
 80009a8:	f3bf 8f6f 	isb	sy
 80009ac:	f3bf 8f4f 	dsb	sy
 80009b0:	617b      	str	r3, [r7, #20]
    }
 80009b2:	bf00      	nop
 80009b4:	e7fe      	b.n	80009b4 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d10a      	bne.n	80009d2 <xTaskDelayUntil+0x46>
        __asm volatile
 80009bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c0:	f383 8811 	msr	BASEPRI, r3
 80009c4:	f3bf 8f6f 	isb	sy
 80009c8:	f3bf 8f4f 	dsb	sy
 80009cc:	613b      	str	r3, [r7, #16]
    }
 80009ce:	bf00      	nop
 80009d0:	e7fe      	b.n	80009d0 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80009d2:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <xTaskDelayUntil+0xf8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00a      	beq.n	80009f0 <xTaskDelayUntil+0x64>
        __asm volatile
 80009da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009de:	f383 8811 	msr	BASEPRI, r3
 80009e2:	f3bf 8f6f 	isb	sy
 80009e6:	f3bf 8f4f 	dsb	sy
 80009ea:	60fb      	str	r3, [r7, #12]
    }
 80009ec:	bf00      	nop
 80009ee:	e7fe      	b.n	80009ee <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80009f0:	f000 f8aa 	bl	8000b48 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <xTaskDelayUntil+0xfc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	4413      	add	r3, r2
 8000a02:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6a3a      	ldr	r2, [r7, #32]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d20b      	bcs.n	8000a26 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d211      	bcs.n	8000a3c <xTaskDelayUntil+0xb0>
 8000a18:	69fa      	ldr	r2, [r7, #28]
 8000a1a:	6a3b      	ldr	r3, [r7, #32]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d90d      	bls.n	8000a3c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
 8000a24:	e00a      	b.n	8000a3c <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d303      	bcc.n	8000a38 <xTaskDelayUntil+0xac>
 8000a30:	69fa      	ldr	r2, [r7, #28]
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d901      	bls.n	8000a3c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69fa      	ldr	r2, [r7, #28]
 8000a40:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d009      	beq.n	8000a5c <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8000a48:	2024      	movs	r0, #36	; 0x24
 8000a4a:	f002 fcc1 	bl	80033d0 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8000a4e:	69fa      	ldr	r2, [r7, #28]
 8000a50:	6a3b      	ldr	r3, [r7, #32]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fb1e 	bl	8001098 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8000a5c:	f000 f882 	bl	8000b64 <xTaskResumeAll>
 8000a60:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d107      	bne.n	8000a78 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <xTaskDelayUntil+0x100>)
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	f3bf 8f4f 	dsb	sy
 8000a74:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000138 	.word	0x20000138
 8000a88:	20000114 	.word	0x20000114
 8000a8c:	e000ed04 	.word	0xe000ed04

08000a90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000a96:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <vTaskStartScheduler+0x98>)
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	2282      	movs	r2, #130	; 0x82
 8000aa2:	4922      	ldr	r1, [pc, #136]	; (8000b2c <vTaskStartScheduler+0x9c>)
 8000aa4:	4822      	ldr	r0, [pc, #136]	; (8000b30 <vTaskStartScheduler+0xa0>)
 8000aa6:	f7ff fe0d 	bl	80006c4 <xTaskCreate>
 8000aaa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d124      	bne.n	8000afc <vTaskStartScheduler+0x6c>
        __asm volatile
 8000ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ab6:	f383 8811 	msr	BASEPRI, r3
 8000aba:	f3bf 8f6f 	isb	sy
 8000abe:	f3bf 8f4f 	dsb	sy
 8000ac2:	60bb      	str	r3, [r7, #8]
    }
 8000ac4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <vTaskStartScheduler+0xa4>)
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000acc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <vTaskStartScheduler+0xa8>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <vTaskStartScheduler+0xac>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <vTaskStartScheduler+0xb0>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <vTaskStartScheduler+0x98>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d102      	bne.n	8000aec <vTaskStartScheduler+0x5c>
 8000ae6:	f003 f86b 	bl	8003bc0 <SEGGER_SYSVIEW_OnIdle>
 8000aea:	e004      	b.n	8000af6 <vTaskStartScheduler+0x66>
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <vTaskStartScheduler+0xb0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f003 f8c3 	bl	8003c7c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000af6:	f000 fbd5 	bl	80012a4 <xPortStartScheduler>
 8000afa:	e00e      	b.n	8000b1a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b02:	d10a      	bne.n	8000b1a <vTaskStartScheduler+0x8a>
        __asm volatile
 8000b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b08:	f383 8811 	msr	BASEPRI, r3
 8000b0c:	f3bf 8f6f 	isb	sy
 8000b10:	f3bf 8f4f 	dsb	sy
 8000b14:	607b      	str	r3, [r7, #4]
    }
 8000b16:	bf00      	nop
 8000b18:	e7fe      	b.n	8000b18 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <vTaskStartScheduler+0xb4>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000134 	.word	0x20000134
 8000b2c:	08005d58 	.word	0x08005d58
 8000b30:	08000f35 	.word	0x08000f35
 8000b34:	20000130 	.word	0x20000130
 8000b38:	2000011c 	.word	0x2000011c
 8000b3c:	20000114 	.word	0x20000114
 8000b40:	20000038 	.word	0x20000038
 8000b44:	20000000 	.word	0x20000000

08000b48 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <vTaskSuspendAll+0x18>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <vTaskSuspendAll+0x18>)
 8000b54:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	20000138 	.word	0x20000138

08000b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000b72:	4b43      	ldr	r3, [pc, #268]	; (8000c80 <xTaskResumeAll+0x11c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10a      	bne.n	8000b90 <xTaskResumeAll+0x2c>
        __asm volatile
 8000b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b7e:	f383 8811 	msr	BASEPRI, r3
 8000b82:	f3bf 8f6f 	isb	sy
 8000b86:	f3bf 8f4f 	dsb	sy
 8000b8a:	603b      	str	r3, [r7, #0]
    }
 8000b8c:	bf00      	nop
 8000b8e:	e7fe      	b.n	8000b8e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000b90:	f000 fca8 	bl	80014e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000b94:	4b3a      	ldr	r3, [pc, #232]	; (8000c80 <xTaskResumeAll+0x11c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	4a39      	ldr	r2, [pc, #228]	; (8000c80 <xTaskResumeAll+0x11c>)
 8000b9c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b9e:	4b38      	ldr	r3, [pc, #224]	; (8000c80 <xTaskResumeAll+0x11c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d165      	bne.n	8000c72 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000ba6:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <xTaskResumeAll+0x120>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d061      	beq.n	8000c72 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000bae:	e032      	b.n	8000c16 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bb0:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <xTaskResumeAll+0x124>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3318      	adds	r3, #24
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fd57 	bl	8000670 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fd52 	bl	8000670 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 f896 	bl	8003d00 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd8:	2201      	movs	r2, #1
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <xTaskResumeAll+0x128>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	4a2a      	ldr	r2, [pc, #168]	; (8000c8c <xTaskResumeAll+0x128>)
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4a27      	ldr	r2, [pc, #156]	; (8000c90 <xTaskResumeAll+0x12c>)
 8000bf4:	441a      	add	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	f7ff fcda 	bl	80005b6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c06:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <xTaskResumeAll+0x130>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d302      	bcc.n	8000c16 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <xTaskResumeAll+0x134>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <xTaskResumeAll+0x124>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1c8      	bne.n	8000bb0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000c24:	f000 fa1c 	bl	8001060 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <xTaskResumeAll+0x138>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d010      	beq.n	8000c56 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000c34:	f000 f858 	bl	8000ce8 <xTaskIncrementTick>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <xTaskResumeAll+0x134>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1f1      	bne.n	8000c34 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <xTaskResumeAll+0x138>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <xTaskResumeAll+0x134>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d009      	beq.n	8000c72 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <xTaskResumeAll+0x13c>)
 8000c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	f3bf 8f4f 	dsb	sy
 8000c6e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000c72:	f000 fc67 	bl	8001544 <vPortExitCritical>

    return xAlreadyYielded;
 8000c76:	68bb      	ldr	r3, [r7, #8]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000138 	.word	0x20000138
 8000c84:	20000110 	.word	0x20000110
 8000c88:	200000d0 	.word	0x200000d0
 8000c8c:	20000118 	.word	0x20000118
 8000c90:	2000003c 	.word	0x2000003c
 8000c94:	20000038 	.word	0x20000038
 8000c98:	20000124 	.word	0x20000124
 8000c9c:	20000120 	.word	0x20000120
 8000ca0:	e000ed04 	.word	0xe000ed04

08000ca4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <xTaskGetTickCount+0x1c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000114 	.word	0x20000114

08000cc4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000cca:	f000 fcf7 	bl	80016bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <xTaskGetTickCountFromISR+0x20>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000cd8:	683b      	ldr	r3, [r7, #0]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000114 	.word	0x20000114

08000ce8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000cf2:	4b50      	ldr	r3, [pc, #320]	; (8000e34 <xTaskIncrementTick+0x14c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8092 	bne.w	8000e20 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000cfc:	4b4e      	ldr	r3, [pc, #312]	; (8000e38 <xTaskIncrementTick+0x150>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000d04:	4a4c      	ldr	r2, [pc, #304]	; (8000e38 <xTaskIncrementTick+0x150>)
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d120      	bne.n	8000d52 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000d10:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <xTaskIncrementTick+0x154>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00a      	beq.n	8000d30 <xTaskIncrementTick+0x48>
        __asm volatile
 8000d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d1e:	f383 8811 	msr	BASEPRI, r3
 8000d22:	f3bf 8f6f 	isb	sy
 8000d26:	f3bf 8f4f 	dsb	sy
 8000d2a:	603b      	str	r3, [r7, #0]
    }
 8000d2c:	bf00      	nop
 8000d2e:	e7fe      	b.n	8000d2e <xTaskIncrementTick+0x46>
 8000d30:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <xTaskIncrementTick+0x154>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <xTaskIncrementTick+0x158>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a40      	ldr	r2, [pc, #256]	; (8000e3c <xTaskIncrementTick+0x154>)
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	4a40      	ldr	r2, [pc, #256]	; (8000e40 <xTaskIncrementTick+0x158>)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4b3f      	ldr	r3, [pc, #252]	; (8000e44 <xTaskIncrementTick+0x15c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	4a3e      	ldr	r2, [pc, #248]	; (8000e44 <xTaskIncrementTick+0x15c>)
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	f000 f987 	bl	8001060 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <xTaskIncrementTick+0x160>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d34c      	bcc.n	8000df6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d5c:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <xTaskIncrementTick+0x154>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d104      	bne.n	8000d70 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d66:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <xTaskIncrementTick+0x160>)
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d6c:	601a      	str	r2, [r3, #0]
                    break;
 8000d6e:	e042      	b.n	8000df6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d70:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <xTaskIncrementTick+0x154>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d203      	bcs.n	8000d90 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000d88:	4a2f      	ldr	r2, [pc, #188]	; (8000e48 <xTaskIncrementTick+0x160>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000d8e:	e032      	b.n	8000df6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3304      	adds	r3, #4
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fc6b 	bl	8000670 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	3318      	adds	r3, #24
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc62 	bl	8000670 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 ffa6 	bl	8003d00 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db8:	2201      	movs	r2, #1
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <xTaskIncrementTick+0x164>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <xTaskIncrementTick+0x164>)
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <xTaskIncrementTick+0x168>)
 8000dd4:	441a      	add	r2, r3
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4610      	mov	r0, r2
 8000dde:	f7ff fbea 	bl	80005b6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <xTaskIncrementTick+0x16c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d3b5      	bcc.n	8000d5c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8000df0:	2301      	movs	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000df4:	e7b2      	b.n	8000d5c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <xTaskIncrementTick+0x16c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfc:	4914      	ldr	r1, [pc, #80]	; (8000e50 <xTaskIncrementTick+0x168>)
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	440b      	add	r3, r1
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d901      	bls.n	8000e12 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <xTaskIncrementTick+0x170>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d007      	beq.n	8000e2a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e004      	b.n	8000e2a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <xTaskIncrementTick+0x174>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <xTaskIncrementTick+0x174>)
 8000e28:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000e2a:	697b      	ldr	r3, [r7, #20]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000138 	.word	0x20000138
 8000e38:	20000114 	.word	0x20000114
 8000e3c:	200000c8 	.word	0x200000c8
 8000e40:	200000cc 	.word	0x200000cc
 8000e44:	20000128 	.word	0x20000128
 8000e48:	20000130 	.word	0x20000130
 8000e4c:	20000118 	.word	0x20000118
 8000e50:	2000003c 	.word	0x2000003c
 8000e54:	20000038 	.word	0x20000038
 8000e58:	20000124 	.word	0x20000124
 8000e5c:	20000120 	.word	0x20000120

08000e60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <vTaskSwitchContext+0xbc>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000e6e:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <vTaskSwitchContext+0xc0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000e74:	e04d      	b.n	8000f12 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8000e76:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <vTaskSwitchContext+0xc0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <vTaskSwitchContext+0xc4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	fab3 f383 	clz	r3, r3
 8000e88:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000e8a:	7afb      	ldrb	r3, [r7, #11]
 8000e8c:	f1c3 031f 	rsb	r3, r3, #31
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	4925      	ldr	r1, [pc, #148]	; (8000f28 <vTaskSwitchContext+0xc8>)
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10a      	bne.n	8000ebc <vTaskSwitchContext+0x5c>
        __asm volatile
 8000ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eaa:	f383 8811 	msr	BASEPRI, r3
 8000eae:	f3bf 8f6f 	isb	sy
 8000eb2:	f3bf 8f4f 	dsb	sy
 8000eb6:	607b      	str	r3, [r7, #4]
    }
 8000eb8:	bf00      	nop
 8000eba:	e7fe      	b.n	8000eba <vTaskSwitchContext+0x5a>
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <vTaskSwitchContext+0xc8>)
 8000ec8:	4413      	add	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	3308      	adds	r3, #8
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d104      	bne.n	8000eec <vTaskSwitchContext+0x8c>
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <vTaskSwitchContext+0xcc>)
 8000ef4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <vTaskSwitchContext+0xcc>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <vTaskSwitchContext+0xd0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d102      	bne.n	8000f08 <vTaskSwitchContext+0xa8>
 8000f02:	f002 fe5d 	bl	8003bc0 <SEGGER_SYSVIEW_OnIdle>
}
 8000f06:	e004      	b.n	8000f12 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <vTaskSwitchContext+0xcc>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 feb5 	bl	8003c7c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000138 	.word	0x20000138
 8000f20:	20000124 	.word	0x20000124
 8000f24:	20000118 	.word	0x20000118
 8000f28:	2000003c 	.word	0x2000003c
 8000f2c:	20000038 	.word	0x20000038
 8000f30:	20000134 	.word	0x20000134

08000f34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000f3c:	f000 f852 	bl	8000fe4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <prvIdleTask+0x28>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d9f9      	bls.n	8000f3c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <prvIdleTask+0x2c>)
 8000f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	f3bf 8f4f 	dsb	sy
 8000f54:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000f58:	e7f0      	b.n	8000f3c <prvIdleTask+0x8>
 8000f5a:	bf00      	nop
 8000f5c:	2000003c 	.word	0x2000003c
 8000f60:	e000ed04 	.word	0xe000ed04

08000f64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	e00c      	b.n	8000f8a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <prvInitialiseTaskLists+0x60>)
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff faec 	bl	800055c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3301      	adds	r3, #1
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d9ef      	bls.n	8000f70 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <prvInitialiseTaskLists+0x64>)
 8000f92:	f7ff fae3 	bl	800055c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000f96:	480d      	ldr	r0, [pc, #52]	; (8000fcc <prvInitialiseTaskLists+0x68>)
 8000f98:	f7ff fae0 	bl	800055c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <prvInitialiseTaskLists+0x6c>)
 8000f9e:	f7ff fadd 	bl	800055c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000fa2:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <prvInitialiseTaskLists+0x70>)
 8000fa4:	f7ff fada 	bl	800055c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <prvInitialiseTaskLists+0x74>)
 8000faa:	f7ff fad7 	bl	800055c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <prvInitialiseTaskLists+0x78>)
 8000fb0:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <prvInitialiseTaskLists+0x64>)
 8000fb2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <prvInitialiseTaskLists+0x7c>)
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <prvInitialiseTaskLists+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000003c 	.word	0x2000003c
 8000fc8:	200000a0 	.word	0x200000a0
 8000fcc:	200000b4 	.word	0x200000b4
 8000fd0:	200000d0 	.word	0x200000d0
 8000fd4:	200000e4 	.word	0x200000e4
 8000fd8:	200000fc 	.word	0x200000fc
 8000fdc:	200000c8 	.word	0x200000c8
 8000fe0:	200000cc 	.word	0x200000cc

08000fe4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fea:	e019      	b.n	8001020 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000fec:	f000 fa7a 	bl	80014e4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ff0:	4b10      	ldr	r3, [pc, #64]	; (8001034 <prvCheckTasksWaitingTermination+0x50>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fb37 	bl	8000670 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <prvCheckTasksWaitingTermination+0x54>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3b01      	subs	r3, #1
 8001008:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <prvCheckTasksWaitingTermination+0x54>)
 800100a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <prvCheckTasksWaitingTermination+0x58>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3b01      	subs	r3, #1
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <prvCheckTasksWaitingTermination+0x58>)
 8001014:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001016:	f000 fa95 	bl	8001544 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f810 	bl	8001040 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <prvCheckTasksWaitingTermination+0x58>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1e1      	bne.n	8000fec <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200000e4 	.word	0x200000e4
 8001038:	20000110 	.word	0x20000110
 800103c:	200000f8 	.word	0x200000f8

08001040 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fc55 	bl	80018fc <vPortFree>
                vPortFree( pxTCB );
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 fc52 	bl	80018fc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <prvResetNextTaskUnblockTime+0x30>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d104      	bne.n	8001078 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <prvResetNextTaskUnblockTime+0x34>)
 8001070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001074:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001076:	e005      	b.n	8001084 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <prvResetNextTaskUnblockTime+0x30>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <prvResetNextTaskUnblockTime+0x34>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200000c8 	.word	0x200000c8
 8001094:	20000130 	.word	0x20000130

08001098 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <prvAddCurrentTaskToDelayedList+0xd4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80010a8:	4b31      	ldr	r3, [pc, #196]	; (8001170 <prvAddCurrentTaskToDelayedList+0xd8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3304      	adds	r3, #4
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fade 	bl	8000670 <uxListRemove>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10b      	bne.n	80010d2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <prvAddCurrentTaskToDelayedList+0xd8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c0:	2201      	movs	r2, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <prvAddCurrentTaskToDelayedList+0xdc>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4013      	ands	r3, r2
 80010ce:	4a29      	ldr	r2, [pc, #164]	; (8001174 <prvAddCurrentTaskToDelayedList+0xdc>)
 80010d0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010d8:	d110      	bne.n	80010fc <prvAddCurrentTaskToDelayedList+0x64>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00d      	beq.n	80010fc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <prvAddCurrentTaskToDelayedList+0xd8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	211b      	movs	r1, #27
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fe4c 	bl	8003d84 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80010ec:	4b20      	ldr	r3, [pc, #128]	; (8001170 <prvAddCurrentTaskToDelayedList+0xd8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3304      	adds	r3, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4820      	ldr	r0, [pc, #128]	; (8001178 <prvAddCurrentTaskToDelayedList+0xe0>)
 80010f6:	f7ff fa5e 	bl	80005b6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80010fa:	e032      	b.n	8001162 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d20f      	bcs.n	8001134 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2104      	movs	r1, #4
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fe32 	bl	8003d84 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3304      	adds	r3, #4
 800112a:	4619      	mov	r1, r3
 800112c:	4610      	mov	r0, r2
 800112e:	f7ff fa66 	bl	80005fe <vListInsert>
}
 8001132:	e016      	b.n	8001162 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2104      	movs	r1, #4
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fe22 	bl	8003d84 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3304      	adds	r3, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4610      	mov	r0, r2
 800114e:	f7ff fa56 	bl	80005fe <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <prvAddCurrentTaskToDelayedList+0xec>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	429a      	cmp	r2, r3
 800115a:	d202      	bcs.n	8001162 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800115c:	4a09      	ldr	r2, [pc, #36]	; (8001184 <prvAddCurrentTaskToDelayedList+0xec>)
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	6013      	str	r3, [r2, #0]
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000114 	.word	0x20000114
 8001170:	20000038 	.word	0x20000038
 8001174:	20000118 	.word	0x20000118
 8001178:	200000fc 	.word	0x200000fc
 800117c:	200000cc 	.word	0x200000cc
 8001180:	200000c8 	.word	0x200000c8
 8001184:	20000130 	.word	0x20000130

08001188 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3b04      	subs	r3, #4
 8001198:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3b04      	subs	r3, #4
 80011a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f023 0201 	bic.w	r2, r3, #1
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3b04      	subs	r3, #4
 80011b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <pxPortInitialiseStack+0x64>)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3b14      	subs	r3, #20
 80011c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3b04      	subs	r3, #4
 80011ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f06f 0202 	mvn.w	r2, #2
 80011d6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3b20      	subs	r3, #32
 80011dc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	080011f1 	.word	0x080011f1

080011f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <prvTaskExitError+0x54>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001202:	d00a      	beq.n	800121a <prvTaskExitError+0x2a>
        __asm volatile
 8001204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001208:	f383 8811 	msr	BASEPRI, r3
 800120c:	f3bf 8f6f 	isb	sy
 8001210:	f3bf 8f4f 	dsb	sy
 8001214:	60fb      	str	r3, [r7, #12]
    }
 8001216:	bf00      	nop
 8001218:	e7fe      	b.n	8001218 <prvTaskExitError+0x28>
        __asm volatile
 800121a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800121e:	f383 8811 	msr	BASEPRI, r3
 8001222:	f3bf 8f6f 	isb	sy
 8001226:	f3bf 8f4f 	dsb	sy
 800122a:	60bb      	str	r3, [r7, #8]
    }
 800122c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800122e:	bf00      	nop
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0fc      	beq.n	8001230 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	20000004 	.word	0x20000004
	...

08001250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <pxCurrentTCBConst2>)
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	6808      	ldr	r0, [r1, #0]
 8001256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800125a:	f380 8809 	msr	PSP, r0
 800125e:	f3bf 8f6f 	isb	sy
 8001262:	f04f 0000 	mov.w	r0, #0
 8001266:	f380 8811 	msr	BASEPRI, r0
 800126a:	4770      	bx	lr
 800126c:	f3af 8000 	nop.w

08001270 <pxCurrentTCBConst2>:
 8001270:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop

08001278 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <prvPortStartFirstTask+0x24>)
 800127a:	6800      	ldr	r0, [r0, #0]
 800127c:	6800      	ldr	r0, [r0, #0]
 800127e:	f380 8808 	msr	MSP, r0
 8001282:	f04f 0000 	mov.w	r0, #0
 8001286:	f380 8814 	msr	CONTROL, r0
 800128a:	b662      	cpsie	i
 800128c:	b661      	cpsie	f
 800128e:	f3bf 8f4f 	dsb	sy
 8001292:	f3bf 8f6f 	isb	sy
 8001296:	df00      	svc	0
 8001298:	bf00      	nop
 800129a:	0000      	.short	0x0000
 800129c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop

080012a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80012aa:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <xPortStartScheduler+0x120>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a46      	ldr	r2, [pc, #280]	; (80013c8 <xPortStartScheduler+0x124>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d10a      	bne.n	80012ca <xPortStartScheduler+0x26>
        __asm volatile
 80012b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b8:	f383 8811 	msr	BASEPRI, r3
 80012bc:	f3bf 8f6f 	isb	sy
 80012c0:	f3bf 8f4f 	dsb	sy
 80012c4:	613b      	str	r3, [r7, #16]
    }
 80012c6:	bf00      	nop
 80012c8:	e7fe      	b.n	80012c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80012ca:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <xPortStartScheduler+0x120>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a3f      	ldr	r2, [pc, #252]	; (80013cc <xPortStartScheduler+0x128>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d10a      	bne.n	80012ea <xPortStartScheduler+0x46>
        __asm volatile
 80012d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d8:	f383 8811 	msr	BASEPRI, r3
 80012dc:	f3bf 8f6f 	isb	sy
 80012e0:	f3bf 8f4f 	dsb	sy
 80012e4:	60fb      	str	r3, [r7, #12]
    }
 80012e6:	bf00      	nop
 80012e8:	e7fe      	b.n	80012e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80012ea:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <xPortStartScheduler+0x12c>)
 80012ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <xPortStartScheduler+0x130>)
 8001310:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <xPortStartScheduler+0x134>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001318:	e009      	b.n	800132e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <xPortStartScheduler+0x134>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3b01      	subs	r3, #1
 8001320:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <xPortStartScheduler+0x134>)
 8001322:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800132e:	78fb      	ldrb	r3, [r7, #3]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001336:	2b80      	cmp	r3, #128	; 0x80
 8001338:	d0ef      	beq.n	800131a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800133a:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <xPortStartScheduler+0x134>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	d00a      	beq.n	800135c <xPortStartScheduler+0xb8>
        __asm volatile
 8001346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800134a:	f383 8811 	msr	BASEPRI, r3
 800134e:	f3bf 8f6f 	isb	sy
 8001352:	f3bf 8f4f 	dsb	sy
 8001356:	60bb      	str	r3, [r7, #8]
    }
 8001358:	bf00      	nop
 800135a:	e7fe      	b.n	800135a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <xPortStartScheduler+0x134>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <xPortStartScheduler+0x134>)
 8001364:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <xPortStartScheduler+0x134>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800136e:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <xPortStartScheduler+0x134>)
 8001370:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <xPortStartScheduler+0x138>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <xPortStartScheduler+0x138>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001384:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <xPortStartScheduler+0x138>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <xPortStartScheduler+0x138>)
 800138c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001390:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001392:	f000 f963 	bl	800165c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <xPortStartScheduler+0x13c>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800139c:	f000 f982 	bl	80016a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <xPortStartScheduler+0x140>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <xPortStartScheduler+0x140>)
 80013a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80013aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80013ac:	f7ff ff64 	bl	8001278 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80013b0:	f7ff fd56 	bl	8000e60 <vTaskSwitchContext>
    prvTaskExitError();
 80013b4:	f7ff ff1c 	bl	80011f0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	410fc271 	.word	0x410fc271
 80013cc:	410fc270 	.word	0x410fc270
 80013d0:	e000e400 	.word	0xe000e400
 80013d4:	2000013c 	.word	0x2000013c
 80013d8:	20000140 	.word	0x20000140
 80013dc:	e000ed20 	.word	0xe000ed20
 80013e0:	20000004 	.word	0x20000004
 80013e4:	e000ef34 	.word	0xe000ef34

080013e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80013ee:	4b37      	ldr	r3, [pc, #220]	; (80014cc <vInitPrioGroupValue+0xe4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a37      	ldr	r2, [pc, #220]	; (80014d0 <vInitPrioGroupValue+0xe8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d10a      	bne.n	800140e <vInitPrioGroupValue+0x26>
        __asm volatile
 80013f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013fc:	f383 8811 	msr	BASEPRI, r3
 8001400:	f3bf 8f6f 	isb	sy
 8001404:	f3bf 8f4f 	dsb	sy
 8001408:	613b      	str	r3, [r7, #16]
    }
 800140a:	bf00      	nop
 800140c:	e7fe      	b.n	800140c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <vInitPrioGroupValue+0xe4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a30      	ldr	r2, [pc, #192]	; (80014d4 <vInitPrioGroupValue+0xec>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d10a      	bne.n	800142e <vInitPrioGroupValue+0x46>
        __asm volatile
 8001418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800141c:	f383 8811 	msr	BASEPRI, r3
 8001420:	f3bf 8f6f 	isb	sy
 8001424:	f3bf 8f4f 	dsb	sy
 8001428:	60fb      	str	r3, [r7, #12]
    }
 800142a:	bf00      	nop
 800142c:	e7fe      	b.n	800142c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <vInitPrioGroupValue+0xf0>)
 8001430:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	22ff      	movs	r2, #255	; 0xff
 800143e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <vInitPrioGroupValue+0xf4>)
 8001454:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800145c:	e009      	b.n	8001472 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 8001466:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	2b80      	cmp	r3, #128	; 0x80
 800147c:	d0ef      	beq.n	800145e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	d00a      	beq.n	80014a0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800148a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800148e:	f383 8811 	msr	BASEPRI, r3
 8001492:	f3bf 8f6f 	isb	sy
 8001496:	f3bf 8f4f 	dsb	sy
 800149a:	60bb      	str	r3, [r7, #8]
    }
 800149c:	bf00      	nop
 800149e:	e7fe      	b.n	800149e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 80014a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <vInitPrioGroupValue+0xf8>)
 80014b4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80014be:	bf00      	nop
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00
 80014d0:	410fc271 	.word	0x410fc271
 80014d4:	410fc270 	.word	0x410fc270
 80014d8:	e000e400 	.word	0xe000e400
 80014dc:	2000013c 	.word	0x2000013c
 80014e0:	20000140 	.word	0x20000140

080014e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
        __asm volatile
 80014ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ee:	f383 8811 	msr	BASEPRI, r3
 80014f2:	f3bf 8f6f 	isb	sy
 80014f6:	f3bf 8f4f 	dsb	sy
 80014fa:	607b      	str	r3, [r7, #4]
    }
 80014fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <vPortEnterCritical+0x58>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	4a0d      	ldr	r2, [pc, #52]	; (800153c <vPortEnterCritical+0x58>)
 8001506:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <vPortEnterCritical+0x58>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d10f      	bne.n	8001530 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <vPortEnterCritical+0x5c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00a      	beq.n	8001530 <vPortEnterCritical+0x4c>
        __asm volatile
 800151a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151e:	f383 8811 	msr	BASEPRI, r3
 8001522:	f3bf 8f6f 	isb	sy
 8001526:	f3bf 8f4f 	dsb	sy
 800152a:	603b      	str	r3, [r7, #0]
    }
 800152c:	bf00      	nop
 800152e:	e7fe      	b.n	800152e <vPortEnterCritical+0x4a>
    }
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20000004 	.word	0x20000004
 8001540:	e000ed04 	.word	0xe000ed04

08001544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <vPortExitCritical+0x50>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10a      	bne.n	8001568 <vPortExitCritical+0x24>
        __asm volatile
 8001552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001556:	f383 8811 	msr	BASEPRI, r3
 800155a:	f3bf 8f6f 	isb	sy
 800155e:	f3bf 8f4f 	dsb	sy
 8001562:	607b      	str	r3, [r7, #4]
    }
 8001564:	bf00      	nop
 8001566:	e7fe      	b.n	8001566 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <vPortExitCritical+0x50>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3b01      	subs	r3, #1
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <vPortExitCritical+0x50>)
 8001570:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <vPortExitCritical+0x50>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d105      	bne.n	8001586 <vPortExitCritical+0x42>
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001584:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000004 	.word	0x20000004
	...

080015a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80015a0:	f3ef 8009 	mrs	r0, PSP
 80015a4:	f3bf 8f6f 	isb	sy
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <pxCurrentTCBConst>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	f01e 0f10 	tst.w	lr, #16
 80015b0:	bf08      	it	eq
 80015b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80015b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ba:	6010      	str	r0, [r2, #0]
 80015bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80015c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80015c4:	f380 8811 	msr	BASEPRI, r0
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	f3bf 8f6f 	isb	sy
 80015d0:	f7ff fc46 	bl	8000e60 <vTaskSwitchContext>
 80015d4:	f04f 0000 	mov.w	r0, #0
 80015d8:	f380 8811 	msr	BASEPRI, r0
 80015dc:	bc09      	pop	{r0, r3}
 80015de:	6819      	ldr	r1, [r3, #0]
 80015e0:	6808      	ldr	r0, [r1, #0]
 80015e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015e6:	f01e 0f10 	tst.w	lr, #16
 80015ea:	bf08      	it	eq
 80015ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80015f0:	f380 8809 	msr	PSP, r0
 80015f4:	f3bf 8f6f 	isb	sy
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	f3af 8000 	nop.w

08001600 <pxCurrentTCBConst>:
 8001600:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop

08001608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
        __asm volatile
 800160e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001612:	f383 8811 	msr	BASEPRI, r3
 8001616:	f3bf 8f6f 	isb	sy
 800161a:	f3bf 8f4f 	dsb	sy
 800161e:	607b      	str	r3, [r7, #4]
    }
 8001620:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001622:	f002 fa53 	bl	8003acc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001626:	f7ff fb5f 	bl	8000ce8 <xTaskIncrementTick>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001630:	f002 faaa 	bl	8003b88 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <SysTick_Handler+0x50>)
 8001636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e001      	b.n	8001642 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800163e:	f002 fa87 	bl	8003b50 <SEGGER_SYSVIEW_RecordExitISR>
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	f383 8811 	msr	BASEPRI, r3
    }
 800164c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000ed04 	.word	0xe000ed04

0800165c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <vPortSetupTimerInterrupt+0x34>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <vPortSetupTimerInterrupt+0x38>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <vPortSetupTimerInterrupt+0x3c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <vPortSetupTimerInterrupt+0x40>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <vPortSetupTimerInterrupt+0x44>)
 800167a:	3b01      	subs	r3, #1
 800167c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <vPortSetupTimerInterrupt+0x34>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010
 8001694:	e000e018 	.word	0xe000e018
 8001698:	20000010 	.word	0x20000010
 800169c:	10624dd3 	.word	0x10624dd3
 80016a0:	e000e014 	.word	0xe000e014

080016a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80016a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80016b4 <vPortEnableVFP+0x10>
 80016a8:	6801      	ldr	r1, [r0, #0]
 80016aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80016ae:	6001      	str	r1, [r0, #0]
 80016b0:	4770      	bx	lr
 80016b2:	0000      	.short	0x0000
 80016b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop

080016bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80016c2:	f3ef 8305 	mrs	r3, IPSR
 80016c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	d914      	bls.n	80016f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80016ce:	4a17      	ldr	r2, [pc, #92]	; (800172c <vPortValidateInterruptPriority+0x70>)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <vPortValidateInterruptPriority+0x74>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	7afa      	ldrb	r2, [r7, #11]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d20a      	bcs.n	80016f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80016e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016e6:	f383 8811 	msr	BASEPRI, r3
 80016ea:	f3bf 8f6f 	isb	sy
 80016ee:	f3bf 8f4f 	dsb	sy
 80016f2:	607b      	str	r3, [r7, #4]
    }
 80016f4:	bf00      	nop
 80016f6:	e7fe      	b.n	80016f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <vPortValidateInterruptPriority+0x78>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <vPortValidateInterruptPriority+0x7c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d90a      	bls.n	800171e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800170c:	f383 8811 	msr	BASEPRI, r3
 8001710:	f3bf 8f6f 	isb	sy
 8001714:	f3bf 8f4f 	dsb	sy
 8001718:	603b      	str	r3, [r7, #0]
    }
 800171a:	bf00      	nop
 800171c:	e7fe      	b.n	800171c <vPortValidateInterruptPriority+0x60>
    }
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e3f0 	.word	0xe000e3f0
 8001730:	2000013c 	.word	0x2000013c
 8001734:	e000ed0c 	.word	0xe000ed0c
 8001738:	20000140 	.word	0x20000140

0800173c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001748:	f7ff f9fe 	bl	8000b48 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800174c:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <pvPortMalloc+0x1a8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001754:	f000 f934 	bl	80019c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001758:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <pvPortMalloc+0x1ac>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 80a7 	bne.w	80018b4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d02d      	beq.n	80017c8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800176c:	2208      	movs	r2, #8
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	d227      	bcs.n	80017c8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8001778:	2208      	movs	r2, #8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	2b00      	cmp	r3, #0
 8001788:	d021      	beq.n	80017ce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f023 0307 	bic.w	r3, r3, #7
 8001790:	3308      	adds	r3, #8
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	d214      	bcs.n	80017c2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f023 0307 	bic.w	r3, r3, #7
 800179e:	3308      	adds	r3, #8
 80017a0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d010      	beq.n	80017ce <pvPortMalloc+0x92>
        __asm volatile
 80017ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b0:	f383 8811 	msr	BASEPRI, r3
 80017b4:	f3bf 8f6f 	isb	sy
 80017b8:	f3bf 8f4f 	dsb	sy
 80017bc:	617b      	str	r3, [r7, #20]
    }
 80017be:	bf00      	nop
 80017c0:	e7fe      	b.n	80017c0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017c6:	e002      	b.n	80017ce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	e000      	b.n	80017d0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017ce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d06e      	beq.n	80018b4 <pvPortMalloc+0x178>
 80017d6:	4b45      	ldr	r3, [pc, #276]	; (80018ec <pvPortMalloc+0x1b0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d869      	bhi.n	80018b4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80017e0:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <pvPortMalloc+0x1b4>)
 80017e2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80017e4:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <pvPortMalloc+0x1b4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017ea:	e004      	b.n	80017f6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d903      	bls.n	8001808 <pvPortMalloc+0xcc>
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f1      	bne.n	80017ec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001808:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <pvPortMalloc+0x1a8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180e:	429a      	cmp	r2, r3
 8001810:	d050      	beq.n	80018b4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2208      	movs	r2, #8
 8001818:	4413      	add	r3, r2
 800181a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	1ad2      	subs	r2, r2, r3
 800182c:	2308      	movs	r3, #8
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	429a      	cmp	r2, r3
 8001832:	d91f      	bls.n	8001874 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00a      	beq.n	800185c <pvPortMalloc+0x120>
        __asm volatile
 8001846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184a:	f383 8811 	msr	BASEPRI, r3
 800184e:	f3bf 8f6f 	isb	sy
 8001852:	f3bf 8f4f 	dsb	sy
 8001856:	613b      	str	r3, [r7, #16]
    }
 8001858:	bf00      	nop
 800185a:	e7fe      	b.n	800185a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	1ad2      	subs	r2, r2, r3
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800186e:	69b8      	ldr	r0, [r7, #24]
 8001870:	f000 f908 	bl	8001a84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <pvPortMalloc+0x1b0>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	4a1b      	ldr	r2, [pc, #108]	; (80018ec <pvPortMalloc+0x1b0>)
 8001880:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <pvPortMalloc+0x1b0>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <pvPortMalloc+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d203      	bcs.n	8001896 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <pvPortMalloc+0x1b0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <pvPortMalloc+0x1b8>)
 8001894:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <pvPortMalloc+0x1ac>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	431a      	orrs	r2, r3
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <pvPortMalloc+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <pvPortMalloc+0x1bc>)
 80018b2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80018b4:	f7ff f956 	bl	8000b64 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00a      	beq.n	80018d8 <pvPortMalloc+0x19c>
        __asm volatile
 80018c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c6:	f383 8811 	msr	BASEPRI, r3
 80018ca:	f3bf 8f6f 	isb	sy
 80018ce:	f3bf 8f4f 	dsb	sy
 80018d2:	60fb      	str	r3, [r7, #12]
    }
 80018d4:	bf00      	nop
 80018d6:	e7fe      	b.n	80018d6 <pvPortMalloc+0x19a>
    return pvReturn;
 80018d8:	69fb      	ldr	r3, [r7, #28]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20012d4c 	.word	0x20012d4c
 80018e8:	20012d60 	.word	0x20012d60
 80018ec:	20012d50 	.word	0x20012d50
 80018f0:	20012d44 	.word	0x20012d44
 80018f4:	20012d54 	.word	0x20012d54
 80018f8:	20012d58 	.word	0x20012d58

080018fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d04d      	beq.n	80019aa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800190e:	2308      	movs	r3, #8
 8001910:	425b      	negs	r3, r3
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4413      	add	r3, r2
 8001916:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <vPortFree+0xb8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10a      	bne.n	8001940 <vPortFree+0x44>
        __asm volatile
 800192a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800192e:	f383 8811 	msr	BASEPRI, r3
 8001932:	f3bf 8f6f 	isb	sy
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	60fb      	str	r3, [r7, #12]
    }
 800193c:	bf00      	nop
 800193e:	e7fe      	b.n	800193e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00a      	beq.n	800195e <vPortFree+0x62>
        __asm volatile
 8001948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194c:	f383 8811 	msr	BASEPRI, r3
 8001950:	f3bf 8f6f 	isb	sy
 8001954:	f3bf 8f4f 	dsb	sy
 8001958:	60bb      	str	r3, [r7, #8]
    }
 800195a:	bf00      	nop
 800195c:	e7fe      	b.n	800195c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <vPortFree+0xb8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01e      	beq.n	80019aa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d11a      	bne.n	80019aa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <vPortFree+0xb8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	43db      	mvns	r3, r3
 800197e:	401a      	ands	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001984:	f7ff f8e0 	bl	8000b48 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <vPortFree+0xbc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4413      	add	r3, r2
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <vPortFree+0xbc>)
 8001994:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001996:	6938      	ldr	r0, [r7, #16]
 8001998:	f000 f874 	bl	8001a84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <vPortFree+0xc0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a06      	ldr	r2, [pc, #24]	; (80019bc <vPortFree+0xc0>)
 80019a4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80019a6:	f7ff f8dd 	bl	8000b64 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20012d60 	.word	0x20012d60
 80019b8:	20012d50 	.word	0x20012d50
 80019bc:	20012d5c 	.word	0x20012d5c

080019c0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80019c6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80019ca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <prvHeapInit+0xac>)
 80019ce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00c      	beq.n	80019f4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3307      	adds	r3, #7
 80019de:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f023 0307 	bic.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <prvHeapInit+0xac>)
 80019f0:	4413      	add	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80019f8:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <prvHeapInit+0xb0>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <prvHeapInit+0xb0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	4413      	add	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 0307 	bic.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <prvHeapInit+0xb4>)
 8001a20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <prvHeapInit+0xb4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2200      	movs	r2, #0
 8001a28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <prvHeapInit+0xb4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	1ad2      	subs	r2, r2, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <prvHeapInit+0xb4>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <prvHeapInit+0xb8>)
 8001a4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <prvHeapInit+0xbc>)
 8001a56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <prvHeapInit+0xc0>)
 8001a5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a5e:	601a      	str	r2, [r3, #0]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	20000144 	.word	0x20000144
 8001a70:	20012d44 	.word	0x20012d44
 8001a74:	20012d4c 	.word	0x20012d4c
 8001a78:	20012d54 	.word	0x20012d54
 8001a7c:	20012d50 	.word	0x20012d50
 8001a80:	20012d60 	.word	0x20012d60

08001a84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <prvInsertBlockIntoFreeList+0xac>)
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e002      	b.n	8001a98 <prvInsertBlockIntoFreeList+0x14>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d8f7      	bhi.n	8001a92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	4413      	add	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d108      	bne.n	8001ac6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	441a      	add	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	441a      	add	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d118      	bne.n	8001b0c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <prvInsertBlockIntoFreeList+0xb0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d00d      	beq.n	8001b02 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	441a      	add	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e008      	b.n	8001b14 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <prvInsertBlockIntoFreeList+0xb0>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e003      	b.n	8001b14 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d002      	beq.n	8001b22 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20012d44 	.word	0x20012d44
 8001b34:	20012d4c 	.word	0x20012d4c

08001b38 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <_cbSendSystemDesc+0x14>)
 8001b3e:	f001 ff6f 	bl	8003a20 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <_cbSendSystemDesc+0x18>)
 8001b44:	f001 ff6c 	bl	8003a20 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	08005d60 	.word	0x08005d60
 8001b50:	08005da4 	.word	0x08005da4

08001b54 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <SEGGER_SYSVIEW_Conf+0x20>)
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <SEGGER_SYSVIEW_Conf+0x20>)
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <SEGGER_SYSVIEW_Conf+0x24>)
 8001b62:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <SEGGER_SYSVIEW_Conf+0x28>)
 8001b64:	f001 fbe0 	bl	8003328 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001b68:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b6c:	f001 fc20 	bl	80033b0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000010 	.word	0x20000010
 8001b78:	08001b39 	.word	0x08001b39
 8001b7c:	08005e98 	.word	0x08005e98

08001b80 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	e033      	b.n	8001bf4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001b8c:	491e      	ldr	r1, [pc, #120]	; (8001c08 <_cbSendTaskList+0x88>)
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	491a      	ldr	r1, [pc, #104]	; (8001c08 <_cbSendTaskList+0x88>)
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3304      	adds	r3, #4
 8001bac:	6819      	ldr	r1, [r3, #0]
 8001bae:	4c16      	ldr	r4, [pc, #88]	; (8001c08 <_cbSendTaskList+0x88>)
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4423      	add	r3, r4
 8001bbc:	3308      	adds	r3, #8
 8001bbe:	681c      	ldr	r4, [r3, #0]
 8001bc0:	4d11      	ldr	r5, [pc, #68]	; (8001c08 <_cbSendTaskList+0x88>)
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	442b      	add	r3, r5
 8001bce:	330c      	adds	r3, #12
 8001bd0:	681d      	ldr	r5, [r3, #0]
 8001bd2:	4e0d      	ldr	r6, [pc, #52]	; (8001c08 <_cbSendTaskList+0x88>)
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4433      	add	r3, r6
 8001be0:	3310      	adds	r3, #16
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	462b      	mov	r3, r5
 8001be8:	4622      	mov	r2, r4
 8001bea:	f000 f8b5 	bl	8001d58 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <_cbSendTaskList+0x8c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d3c6      	bcc.n	8001b8c <_cbSendTaskList+0xc>
  }
}
 8001bfe:	bf00      	nop
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c08:	20012d64 	.word	0x20012d64
 8001c0c:	20012e04 	.word	0x20012e04

08001c10 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001c10:	b5b0      	push	{r4, r5, r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001c16:	f7ff f855 	bl	8000cc4 <xTaskGetTickCountFromISR>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001c26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	f04f 0400 	mov.w	r4, #0
 8001c32:	f04f 0500 	mov.w	r5, #0
 8001c36:	015d      	lsls	r5, r3, #5
 8001c38:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001c3c:	0154      	lsls	r4, r2, #5
 8001c3e:	4622      	mov	r2, r4
 8001c40:	462b      	mov	r3, r5
 8001c42:	1a12      	subs	r2, r2, r0
 8001c44:	eb63 0301 	sbc.w	r3, r3, r1
 8001c48:	f04f 0400 	mov.w	r4, #0
 8001c4c:	f04f 0500 	mov.w	r5, #0
 8001c50:	009d      	lsls	r5, r3, #2
 8001c52:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8001c56:	0094      	lsls	r4, r2, #2
 8001c58:	4622      	mov	r2, r4
 8001c5a:	462b      	mov	r3, r5
 8001c5c:	1812      	adds	r2, r2, r0
 8001c5e:	eb41 0303 	adc.w	r3, r1, r3
 8001c62:	f04f 0000 	mov.w	r0, #0
 8001c66:	f04f 0100 	mov.w	r1, #0
 8001c6a:	00d9      	lsls	r1, r3, #3
 8001c6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c70:	00d0      	lsls	r0, r2, #3
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8001c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bdb0      	pop	{r4, r5, r7, pc}

08001c88 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001c96:	2205      	movs	r2, #5
 8001c98:	492b      	ldr	r1, [pc, #172]	; (8001d48 <SYSVIEW_AddTask+0xc0>)
 8001c9a:	68b8      	ldr	r0, [r7, #8]
 8001c9c:	f004 f82c 	bl	8005cf8 <memcmp>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d04b      	beq.n	8001d3e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001ca6:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <SYSVIEW_AddTask+0xc4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b07      	cmp	r3, #7
 8001cac:	d903      	bls.n	8001cb6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001cae:	4828      	ldr	r0, [pc, #160]	; (8001d50 <SYSVIEW_AddTask+0xc8>)
 8001cb0:	f002 f9b8 	bl	8004024 <SEGGER_SYSVIEW_Warn>
    return;
 8001cb4:	e044      	b.n	8001d40 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001cb6:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <SYSVIEW_AddTask+0xc4>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4926      	ldr	r1, [pc, #152]	; (8001d54 <SYSVIEW_AddTask+0xcc>)
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <SYSVIEW_AddTask+0xc4>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4921      	ldr	r1, [pc, #132]	; (8001d54 <SYSVIEW_AddTask+0xcc>)
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	3304      	adds	r3, #4
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <SYSVIEW_AddTask+0xc4>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	491b      	ldr	r1, [pc, #108]	; (8001d54 <SYSVIEW_AddTask+0xcc>)
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	3308      	adds	r3, #8
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <SYSVIEW_AddTask+0xc4>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4916      	ldr	r1, [pc, #88]	; (8001d54 <SYSVIEW_AddTask+0xcc>)
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	330c      	adds	r3, #12
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <SYSVIEW_AddTask+0xc4>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4910      	ldr	r1, [pc, #64]	; (8001d54 <SYSVIEW_AddTask+0xcc>)
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3310      	adds	r3, #16
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <SYSVIEW_AddTask+0xc4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <SYSVIEW_AddTask+0xc4>)
 8001d2a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f80e 	bl	8001d58 <SYSVIEW_SendTaskInfo>
 8001d3c:	e000      	b.n	8001d40 <SYSVIEW_AddTask+0xb8>
    return;
 8001d3e:	bf00      	nop

}
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	08005db4 	.word	0x08005db4
 8001d4c:	20012e04 	.word	0x20012e04
 8001d50:	08005dbc 	.word	0x08005dbc
 8001d54:	20012d64 	.word	0x20012d64

08001d58 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	2214      	movs	r2, #20
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 ffde 	bl	8005d30 <memset>
  TaskInfo.TaskID     = TaskID;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f001 fd4f 	bl	8003830 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db0b      	blt.n	8001dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4907      	ldr	r1, [pc, #28]	; (8001dd4 <__NVIC_EnableIRQ+0x38>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db0a      	blt.n	8001e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	490c      	ldr	r1, [pc, #48]	; (8001e24 <__NVIC_SetPriority+0x4c>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e00:	e00a      	b.n	8001e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4908      	ldr	r1, [pc, #32]	; (8001e28 <__NVIC_SetPriority+0x50>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	440b      	add	r3, r1
 8001e16:	761a      	strb	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000e100 	.word	0xe000e100
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8001e32:	f002 f953 	bl	80040dc <SEGGER_SYSVIEW_IsStarted>
 8001e36:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8001e3e:	f001 fb7b 	bl	8003538 <SEGGER_SYSVIEW_Start>
  }
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <_cbOnUARTRx+0x3c>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d806      	bhi.n	8001e6c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <_cbOnUARTRx+0x3c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <_cbOnUARTRx+0x3c>)
 8001e68:	701a      	strb	r2, [r3, #0]
    goto Done;
 8001e6a:	e009      	b.n	8001e80 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8001e6c:	f7ff ffde 	bl	8001e2c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <_cbOnUARTRx+0x3c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4618      	mov	r0, r3
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f000 fb9a 	bl	80025b4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8001e80:	bf00      	nop
}
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000008 	.word	0x20000008

08001e8c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <_cbOnUARTTx+0x5c>)
 8001e96:	785b      	ldrb	r3, [r3, #1]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d80f      	bhi.n	8001ebc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <_cbOnUARTTx+0x5c>)
 8001e9e:	785b      	ldrb	r3, [r3, #1]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <_cbOnUARTTx+0x60>)
 8001ea4:	5c9a      	ldrb	r2, [r3, r2]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <_cbOnUARTTx+0x5c>)
 8001eac:	785b      	ldrb	r3, [r3, #1]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <_cbOnUARTTx+0x5c>)
 8001eb4:	705a      	strb	r2, [r3, #1]
    r = 1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
    goto Done;
 8001eba:	e00f      	b.n	8001edc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <_cbOnUARTTx+0x5c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fa19 	bl	80022fc <SEGGER_RTT_ReadUpBufferNoLock>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da02      	bge.n	8001eda <_cbOnUARTTx+0x4e>
    r = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e000      	b.n	8001edc <_cbOnUARTTx+0x50>
  }
Done:
 8001eda:	bf00      	nop
  return r;
 8001edc:	68fb      	ldr	r3, [r7, #12]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	08005ea0 	.word	0x08005ea0

08001ef0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <SEGGER_UART_init+0x1c>)
 8001efa:	4905      	ldr	r1, [pc, #20]	; (8001f10 <SEGGER_UART_init+0x20>)
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f863 	bl	8001fc8 <HIF_UART_Init>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	08001e4d 	.word	0x08001e4d
 8001f10:	08001e8d 	.word	0x08001e8d

08001f14 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <USART2_IRQHandler+0x80>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d011      	beq.n	8001f4e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <USART2_IRQHandler+0x84>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 030b 	and.w	r3, r3, #11
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d108      	bne.n	8001f4e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <USART2_IRQHandler+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <USART2_IRQHandler+0x88>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	79fa      	ldrb	r2, [r7, #7]
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01a      	beq.n	8001f8e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <USART2_IRQHandler+0x8c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d015      	beq.n	8001f8c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <USART2_IRQHandler+0x8c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	1dfa      	adds	r2, r7, #7
 8001f66:	4610      	mov	r0, r2
 8001f68:	4798      	blx	r3
 8001f6a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <USART2_IRQHandler+0x90>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <USART2_IRQHandler+0x90>)
 8001f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e006      	b.n	8001f8e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <USART2_IRQHandler+0x80>)
 8001f82:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8001f84:	79fa      	ldrb	r2, [r7, #7]
 8001f86:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <USART2_IRQHandler+0x84>)
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e000      	b.n	8001f8e <USART2_IRQHandler+0x7a>
      return;
 8001f8c:	bf00      	nop
    }
  }
}
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40004400 	.word	0x40004400
 8001f98:	40004404 	.word	0x40004404
 8001f9c:	20012e08 	.word	0x20012e08
 8001fa0:	20012e0c 	.word	0x20012e0c
 8001fa4:	4000440c 	.word	0x4000440c

08001fa8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	4000440c 	.word	0x4000440c

08001fc8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8001fd4:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <HIF_UART_Init+0xc8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a2d      	ldr	r2, [pc, #180]	; (8002090 <HIF_UART_Init+0xc8>)
 8001fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fde:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8001fe0:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HIF_UART_Init+0xcc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2b      	ldr	r2, [pc, #172]	; (8002094 <HIF_UART_Init+0xcc>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <HIF_UART_Init+0xd0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ff8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8002000:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8002002:	4a25      	ldr	r2, [pc, #148]	; (8002098 <HIF_UART_Init+0xd0>)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8002008:	4b24      	ldr	r3, [pc, #144]	; (800209c <HIF_UART_Init+0xd4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002014:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800201c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800201e:	4a1f      	ldr	r2, [pc, #124]	; (800209c <HIF_UART_Init+0xd4>)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HIF_UART_Init+0xd8>)
 8002026:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800202a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HIF_UART_Init+0xdc>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HIF_UART_Init+0xe0>)
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800203e:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <HIF_UART_Init+0xe4>)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002056:	d302      	bcc.n	800205e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8002058:	f640 73ff 	movw	r3, #4095	; 0xfff
 800205c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d004      	beq.n	800206e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <HIF_UART_Init+0xe8>)
 800206a:	b29b      	uxth	r3, r3
 800206c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800206e:	4a11      	ldr	r2, [pc, #68]	; (80020b4 <HIF_UART_Init+0xec>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8002074:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <HIF_UART_Init+0xf0>)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800207a:	2106      	movs	r1, #6
 800207c:	2026      	movs	r0, #38	; 0x26
 800207e:	f7ff feab 	bl	8001dd8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8002082:	2026      	movs	r0, #38	; 0x26
 8002084:	f7ff fe8a 	bl	8001d9c <__NVIC_EnableIRQ>
}
 8002088:	bf00      	nop
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40023840 	.word	0x40023840
 8002094:	40023830 	.word	0x40023830
 8002098:	40020020 	.word	0x40020020
 800209c:	40020000 	.word	0x40020000
 80020a0:	4000440c 	.word	0x4000440c
 80020a4:	40004410 	.word	0x40004410
 80020a8:	40004414 	.word	0x40004414
 80020ac:	0501bd00 	.word	0x0501bd00
 80020b0:	40004408 	.word	0x40004408
 80020b4:	20012e08 	.word	0x20012e08
 80020b8:	20012e0c 	.word	0x20012e0c

080020bc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <_DoInit+0x98>)
 80020c4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2203      	movs	r2, #3
 80020ca:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2203      	movs	r2, #3
 80020d0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a20      	ldr	r2, [pc, #128]	; (8002158 <_DoInit+0x9c>)
 80020d6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a20      	ldr	r2, [pc, #128]	; (800215c <_DoInit+0xa0>)
 80020dc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020e4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a17      	ldr	r2, [pc, #92]	; (8002158 <_DoInit+0x9c>)
 80020fc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a17      	ldr	r2, [pc, #92]	; (8002160 <_DoInit+0xa4>)
 8002102:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2210      	movs	r2, #16
 8002108:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3307      	adds	r3, #7
 8002120:	4a10      	ldr	r2, [pc, #64]	; (8002164 <_DoInit+0xa8>)
 8002122:	6810      	ldr	r0, [r2, #0]
 8002124:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002126:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <_DoInit+0xac>)
 800212e:	6810      	ldr	r0, [r2, #0]
 8002130:	6018      	str	r0, [r3, #0]
 8002132:	8891      	ldrh	r1, [r2, #4]
 8002134:	7992      	ldrb	r2, [r2, #6]
 8002136:	8099      	strh	r1, [r3, #4]
 8002138:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800213a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2220      	movs	r2, #32
 8002142:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002144:	f3bf 8f5f 	dmb	sy
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	2001433c 	.word	0x2001433c
 8002158:	08005e0c 	.word	0x08005e0c
 800215c:	20012e10 	.word	0x20012e10
 8002160:	20013210 	.word	0x20013210
 8002164:	08005e18 	.word	0x08005e18
 8002168:	08005e1c 	.word	0x08005e1c

0800216c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	429a      	cmp	r2, r3
 800218e:	d905      	bls.n	800219c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
 800219a:	e007      	b.n	80021ac <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	69b9      	ldr	r1, [r7, #24]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	1acb      	subs	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3b01      	subs	r3, #1
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b6:	4293      	cmp	r3, r2
 80021b8:	bf28      	it	cs
 80021ba:	4613      	movcs	r3, r2
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80021be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4293      	cmp	r3, r2
 80021c4:	bf28      	it	cs
 80021c6:	4613      	movcs	r3, r2
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	4413      	add	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80021d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d6:	68b9      	ldr	r1, [r7, #8]
 80021d8:	6978      	ldr	r0, [r7, #20]
 80021da:	f003 fd9b 	bl	8005d14 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80021de:	6a3a      	ldr	r2, [r7, #32]
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	4413      	add	r3, r2
 80021e4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	4413      	add	r3, r2
 80021ec:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	4413      	add	r3, r2
 80021fc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	429a      	cmp	r2, r3
 8002206:	d101      	bne.n	800220c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800220c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1b2      	bne.n	8002182 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800221c:	6a3b      	ldr	r3, [r7, #32]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3728      	adds	r7, #40	; 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002226:	b580      	push	{r7, lr}
 8002228:	b088      	sub	sp, #32
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	d911      	bls.n	800226e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4413      	add	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	6938      	ldr	r0, [r7, #16]
 800225a:	f003 fd5b 	bl	8005d14 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800225e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	441a      	add	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800226c:	e01f      	b.n	80022ae <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	68b9      	ldr	r1, [r7, #8]
 8002280:	6938      	ldr	r0, [r7, #16]
 8002282:	f003 fd47 	bl	8005d14 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	4413      	add	r3, r2
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4619      	mov	r1, r3
 800229e:	6938      	ldr	r0, [r7, #16]
 80022a0:	f003 fd38 	bl	8005d14 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80022a4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	60da      	str	r2, [r3, #12]
}
 80022ae:	bf00      	nop
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80022b6:	b480      	push	{r7}
 80022b8:	b087      	sub	sp, #28
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d808      	bhi.n	80022e4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad2      	subs	r2, r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	3b01      	subs	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e004      	b.n	80022ee <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
  }
  return r;
 80022ee:	697b      	ldr	r3, [r7, #20]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	; 0x30
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8002308:	4b3e      	ldr	r3, [pc, #248]	; (8002404 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800230a:	623b      	str	r3, [r7, #32]
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8002316:	f7ff fed1 	bl	80020bc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4a37      	ldr	r2, [pc, #220]	; (8002404 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002328:	4413      	add	r3, r2
 800232a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800233c:	2300      	movs	r3, #0
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	429a      	cmp	r2, r3
 8002346:	d92b      	bls.n	80023a0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4293      	cmp	r3, r2
 8002358:	bf28      	it	cs
 800235a:	4613      	movcs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	4413      	add	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	6939      	ldr	r1, [r7, #16]
 800236c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800236e:	f003 fcd1 	bl	8005d14 <memcpy>
    NumBytesRead += NumBytesRem;
 8002372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	4413      	add	r3, r2
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800237a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	4413      	add	r3, r2
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800238a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	4413      	add	r3, r2
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002398:	429a      	cmp	r2, r3
 800239a:	d101      	bne.n	80023a0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800239c:	2300      	movs	r3, #0
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4293      	cmp	r3, r2
 80023ae:	bf28      	it	cs
 80023b0:	4613      	movcs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d019      	beq.n	80023ee <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	4413      	add	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	6939      	ldr	r1, [r7, #16]
 80023c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023ca:	f003 fca3 	bl	8005d14 <memcpy>
    NumBytesRead += NumBytesRem;
 80023ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	4413      	add	r3, r2
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80023d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	4413      	add	r3, r2
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80023e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	4413      	add	r3, r2
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023f8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3730      	adds	r7, #48	; 0x30
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2001433c 	.word	0x2001433c

08002408 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	; 0x30
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002414:	4b3e      	ldr	r3, [pc, #248]	; (8002510 <SEGGER_RTT_ReadNoLock+0x108>)
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <SEGGER_RTT_ReadNoLock+0x1e>
 8002422:	f7ff fe4b 	bl	80020bc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	3360      	adds	r3, #96	; 0x60
 8002432:	4a37      	ldr	r2, [pc, #220]	; (8002510 <SEGGER_RTT_ReadNoLock+0x108>)
 8002434:	4413      	add	r3, r2
 8002436:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002448:	2300      	movs	r3, #0
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800244c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	429a      	cmp	r2, r3
 8002452:	d92b      	bls.n	80024ac <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4293      	cmp	r3, r2
 8002464:	bf28      	it	cs
 8002466:	4613      	movcs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	4413      	add	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	6939      	ldr	r1, [r7, #16]
 8002478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800247a:	f003 fc4b 	bl	8005d14 <memcpy>
    NumBytesRead += NumBytesRem;
 800247e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	4413      	add	r3, r2
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	4413      	add	r3, r2
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	4413      	add	r3, r2
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d101      	bne.n	80024ac <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80024a8:	2300      	movs	r3, #0
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4293      	cmp	r3, r2
 80024ba:	bf28      	it	cs
 80024bc:	4613      	movcs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d019      	beq.n	80024fa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	4413      	add	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	6939      	ldr	r1, [r7, #16]
 80024d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024d6:	f003 fc1d 	bl	8005d14 <memcpy>
    NumBytesRead += NumBytesRem;
 80024da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	4413      	add	r3, r2
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80024e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	4413      	add	r3, r2
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80024f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	4413      	add	r3, r2
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002504:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002508:	4618      	mov	r0, r3
 800250a:	3730      	adds	r7, #48	; 0x30
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	2001433c 	.word	0x2001433c

08002514 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	3360      	adds	r3, #96	; 0x60
 8002530:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8002532:	4413      	add	r3, r2
 8002534:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d029      	beq.n	8002592 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800253e:	2b02      	cmp	r3, #2
 8002540:	d82e      	bhi.n	80025a0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8002546:	2b01      	cmp	r3, #1
 8002548:	d013      	beq.n	8002572 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800254a:	e029      	b.n	80025a0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800254c:	6978      	ldr	r0, [r7, #20]
 800254e:	f7ff feb2 	bl	80022b6 <_GetAvailWriteSpace>
 8002552:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	d202      	bcs.n	8002562 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002560:	e021      	b.n	80025a6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	69b9      	ldr	r1, [r7, #24]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff fe5b 	bl	8002226 <_WriteNoCheck>
    break;
 8002570:	e019      	b.n	80025a6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002572:	6978      	ldr	r0, [r7, #20]
 8002574:	f7ff fe9f 	bl	80022b6 <_GetAvailWriteSpace>
 8002578:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4293      	cmp	r3, r2
 8002580:	bf28      	it	cs
 8002582:	4613      	movcs	r3, r2
 8002584:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	69b9      	ldr	r1, [r7, #24]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff fe4b 	bl	8002226 <_WriteNoCheck>
    break;
 8002590:	e009      	b.n	80025a6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	69b9      	ldr	r1, [r7, #24]
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff fde8 	bl	800216c <_WriteBlocking>
 800259c:	61f8      	str	r0, [r7, #28]
    break;
 800259e:	e002      	b.n	80025a6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
    break;
 80025a4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80025a6:	69fb      	ldr	r3, [r7, #28]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	2001433c 	.word	0x2001433c

080025b4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <SEGGER_RTT_WriteDownBuffer+0x48>)
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80025ce:	f7ff fd75 	bl	80020bc <_DoInit>
  SEGGER_RTT_LOCK();
 80025d2:	f3ef 8311 	mrs	r3, BASEPRI
 80025d6:	f04f 0120 	mov.w	r1, #32
 80025da:	f381 8811 	msr	BASEPRI, r1
 80025de:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f7ff ff95 	bl	8002514 <SEGGER_RTT_WriteDownBufferNoLock>
 80025ea:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80025f2:	697b      	ldr	r3, [r7, #20]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	2001433c 	.word	0x2001433c

08002600 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <SEGGER_RTT_AllocUpBuffer+0x20>
 800261c:	f7ff fd4e 	bl	80020bc <_DoInit>
  SEGGER_RTT_LOCK();
 8002620:	f3ef 8311 	mrs	r3, BASEPRI
 8002624:	f04f 0120 	mov.w	r1, #32
 8002628:	f381 8811 	msr	BASEPRI, r1
 800262c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800262e:	4b35      	ldr	r3, [pc, #212]	; (8002704 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002630:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002636:	6939      	ldr	r1, [r7, #16]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	3304      	adds	r3, #4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3301      	adds	r3, #1
 8002652:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	429a      	cmp	r2, r3
 800265c:	dbeb      	blt.n	8002636 <SEGGER_RTT_AllocUpBuffer+0x36>
 800265e:	e000      	b.n	8002662 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002660:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	429a      	cmp	r2, r3
 800266a:	da3f      	bge.n	80026ec <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800266c:	6939      	ldr	r1, [r7, #16]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002680:	6939      	ldr	r1, [r7, #16]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	440b      	add	r3, r1
 8002690:	3304      	adds	r3, #4
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002696:	6939      	ldr	r1, [r7, #16]
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	440b      	add	r3, r1
 80026a4:	3320      	adds	r3, #32
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80026aa:	6939      	ldr	r1, [r7, #16]
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	440b      	add	r3, r1
 80026b8:	3328      	adds	r3, #40	; 0x28
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80026be:	6939      	ldr	r1, [r7, #16]
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	440b      	add	r3, r1
 80026cc:	3324      	adds	r3, #36	; 0x24
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80026d2:	6939      	ldr	r1, [r7, #16]
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	440b      	add	r3, r1
 80026e0:	332c      	adds	r3, #44	; 0x2c
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80026e6:	f3bf 8f5f 	dmb	sy
 80026ea:	e002      	b.n	80026f2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026f0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80026f8:	69fb      	ldr	r3, [r7, #28]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3720      	adds	r7, #32
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	2001433c 	.word	0x2001433c

08002708 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8002716:	4b21      	ldr	r3, [pc, #132]	; (800279c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002724:	f7ff fcca 	bl	80020bc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002728:	4b1c      	ldr	r3, [pc, #112]	; (800279c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800272a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d82c      	bhi.n	800278c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8002732:	f3ef 8311 	mrs	r3, BASEPRI
 8002736:	f04f 0120 	mov.w	r1, #32
 800273a:	f381 8811 	msr	BASEPRI, r1
 800273e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	3360      	adds	r3, #96	; 0x60
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	4413      	add	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00e      	beq.n	8002776 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800277a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800277c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	e002      	b.n	8002792 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800278c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002794:	4618      	mov	r0, r3
 8002796:	3728      	adds	r7, #40	; 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	2001433c 	.word	0x2001433c

080027a0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00f      	beq.n	80027d6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80027b6:	e002      	b.n	80027be <_EncodeStr+0x1e>
      Len++;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	3301      	adds	r3, #1
 80027bc:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f6      	bne.n	80027b8 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d901      	bls.n	80027d6 <_EncodeStr+0x36>
      Len = Limit;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2bfe      	cmp	r3, #254	; 0xfe
 80027da:	d806      	bhi.n	80027ea <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	60fa      	str	r2, [r7, #12]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e011      	b.n	800280e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	60fa      	str	r2, [r7, #12]
 80027f0:	22ff      	movs	r2, #255	; 0xff
 80027f2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	60fa      	str	r2, [r7, #12]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	0a19      	lsrs	r1, r3, #8
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	60fa      	str	r2, [r7, #12]
 800280a:	b2ca      	uxtb	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002812:	e00a      	b.n	800282a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	1c53      	adds	r3, r2, #1
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1c59      	adds	r1, r3, #1
 800281e:	60f9      	str	r1, [r7, #12]
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	701a      	strb	r2, [r3, #0]
    n++;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	429a      	cmp	r2, r3
 8002830:	d3f0      	bcc.n	8002814 <_EncodeStr+0x74>
  }
  return pPayload;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3304      	adds	r3, #4
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800285e:	4b36      	ldr	r3, [pc, #216]	; (8002938 <_HandleIncomingPacket+0xe0>)
 8002860:	7e1b      	ldrb	r3, [r3, #24]
 8002862:	4618      	mov	r0, r3
 8002864:	1cfb      	adds	r3, r7, #3
 8002866:	2201      	movs	r2, #1
 8002868:	4619      	mov	r1, r3
 800286a:	f7ff fdcd 	bl	8002408 <SEGGER_RTT_ReadNoLock>
 800286e:	4603      	mov	r3, r0
 8002870:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	dd54      	ble.n	8002922 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	2b80      	cmp	r3, #128	; 0x80
 800287c:	d032      	beq.n	80028e4 <_HandleIncomingPacket+0x8c>
 800287e:	2b80      	cmp	r3, #128	; 0x80
 8002880:	dc42      	bgt.n	8002908 <_HandleIncomingPacket+0xb0>
 8002882:	2b07      	cmp	r3, #7
 8002884:	dc16      	bgt.n	80028b4 <_HandleIncomingPacket+0x5c>
 8002886:	2b00      	cmp	r3, #0
 8002888:	dd3e      	ble.n	8002908 <_HandleIncomingPacket+0xb0>
 800288a:	3b01      	subs	r3, #1
 800288c:	2b06      	cmp	r3, #6
 800288e:	d83b      	bhi.n	8002908 <_HandleIncomingPacket+0xb0>
 8002890:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <_HandleIncomingPacket+0x40>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028bb 	.word	0x080028bb
 800289c:	080028c1 	.word	0x080028c1
 80028a0:	080028c7 	.word	0x080028c7
 80028a4:	080028cd 	.word	0x080028cd
 80028a8:	080028d3 	.word	0x080028d3
 80028ac:	080028d9 	.word	0x080028d9
 80028b0:	080028df 	.word	0x080028df
 80028b4:	2b7f      	cmp	r3, #127	; 0x7f
 80028b6:	d036      	beq.n	8002926 <_HandleIncomingPacket+0xce>
 80028b8:	e026      	b.n	8002908 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80028ba:	f000 fe3d 	bl	8003538 <SEGGER_SYSVIEW_Start>
      break;
 80028be:	e037      	b.n	8002930 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80028c0:	f000 fef6 	bl	80036b0 <SEGGER_SYSVIEW_Stop>
      break;
 80028c4:	e034      	b.n	8002930 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80028c6:	f001 f8cf 	bl	8003a68 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80028ca:	e031      	b.n	8002930 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80028cc:	f001 f894 	bl	80039f8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80028d0:	e02e      	b.n	8002930 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80028d2:	f000 ff13 	bl	80036fc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80028d6:	e02b      	b.n	8002930 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80028d8:	f001 fb52 	bl	8003f80 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80028dc:	e028      	b.n	8002930 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80028de:	f001 fb31 	bl	8003f44 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80028e2:	e025      	b.n	8002930 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80028e4:	4b14      	ldr	r3, [pc, #80]	; (8002938 <_HandleIncomingPacket+0xe0>)
 80028e6:	7e1b      	ldrb	r3, [r3, #24]
 80028e8:	4618      	mov	r0, r3
 80028ea:	1cfb      	adds	r3, r7, #3
 80028ec:	2201      	movs	r2, #1
 80028ee:	4619      	mov	r1, r3
 80028f0:	f7ff fd8a 	bl	8002408 <SEGGER_RTT_ReadNoLock>
 80028f4:	4603      	mov	r3, r0
 80028f6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	dd15      	ble.n	800292a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	4618      	mov	r0, r3
 8002902:	f001 fa9f 	bl	8003e44 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002906:	e010      	b.n	800292a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	b25b      	sxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	da0e      	bge.n	800292e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <_HandleIncomingPacket+0xe0>)
 8002912:	7e1b      	ldrb	r3, [r3, #24]
 8002914:	4618      	mov	r0, r3
 8002916:	1cfb      	adds	r3, r7, #3
 8002918:	2201      	movs	r2, #1
 800291a:	4619      	mov	r1, r3
 800291c:	f7ff fd74 	bl	8002408 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002920:	e005      	b.n	800292e <_HandleIncomingPacket+0xd6>
    }
  }
 8002922:	bf00      	nop
 8002924:	e004      	b.n	8002930 <_HandleIncomingPacket+0xd8>
      break;
 8002926:	bf00      	nop
 8002928:	e002      	b.n	8002930 <_HandleIncomingPacket+0xd8>
      break;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <_HandleIncomingPacket+0xd8>
      break;
 800292e:	bf00      	nop
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20014228 	.word	0x20014228

0800293c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b08c      	sub	sp, #48	; 0x30
 8002940:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002942:	2301      	movs	r3, #1
 8002944:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002946:	1d3b      	adds	r3, r7, #4
 8002948:	3301      	adds	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <_TrySendOverflowPacket+0xe0>)
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
 8002956:	e00b      	b.n	8002970 <_TrySendOverflowPacket+0x34>
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	b2da      	uxtb	r2, r3
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	1c59      	adds	r1, r3, #1
 8002960:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002962:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	09db      	lsrs	r3, r3, #7
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	2b7f      	cmp	r3, #127	; 0x7f
 8002974:	d8f0      	bhi.n	8002958 <_TrySendOverflowPacket+0x1c>
 8002976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800297c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <_TrySendOverflowPacket+0xe4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800298c:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <_TrySendOverflowPacket+0xe0>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	e00b      	b.n	80029b8 <_TrySendOverflowPacket+0x7c>
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	1c59      	adds	r1, r3, #1
 80029a8:	6279      	str	r1, [r7, #36]	; 0x24
 80029aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	09db      	lsrs	r3, r3, #7
 80029b6:	623b      	str	r3, [r7, #32]
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	2b7f      	cmp	r3, #127	; 0x7f
 80029bc:	d8f0      	bhi.n	80029a0 <_TrySendOverflowPacket+0x64>
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	627a      	str	r2, [r7, #36]	; 0x24
 80029c4:	6a3a      	ldr	r2, [r7, #32]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <_TrySendOverflowPacket+0xe0>)
 80029d0:	785b      	ldrb	r3, [r3, #1]
 80029d2:	4618      	mov	r0, r3
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	f7fd fbf6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80029e4:	4603      	mov	r3, r0
 80029e6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80029e8:	f7ff fade 	bl	8001fa8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <_TrySendOverflowPacket+0xe0>)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <_TrySendOverflowPacket+0xe0>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <_TrySendOverflowPacket+0xe0>)
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e004      	b.n	8002a10 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <_TrySendOverflowPacket+0xe0>)
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	4a03      	ldr	r2, [pc, #12]	; (8002a1c <_TrySendOverflowPacket+0xe0>)
 8002a0e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002a10:	693b      	ldr	r3, [r7, #16]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3730      	adds	r7, #48	; 0x30
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20014228 	.word	0x20014228
 8002a20:	e0001004 	.word	0xe0001004

08002a24 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002a30:	4b6d      	ldr	r3, [pc, #436]	; (8002be8 <_SendPacket+0x1c4>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d010      	beq.n	8002a5a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002a38:	4b6b      	ldr	r3, [pc, #428]	; (8002be8 <_SendPacket+0x1c4>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80a5 	beq.w	8002b8c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002a42:	4b69      	ldr	r3, [pc, #420]	; (8002be8 <_SendPacket+0x1c4>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d109      	bne.n	8002a5e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002a4a:	f7ff ff77 	bl	800293c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002a4e:	4b66      	ldr	r3, [pc, #408]	; (8002be8 <_SendPacket+0x1c4>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	f040 809c 	bne.w	8002b90 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8002a58:	e001      	b.n	8002a5e <_SendPacket+0x3a>
    goto Send;
 8002a5a:	bf00      	nop
 8002a5c:	e000      	b.n	8002a60 <_SendPacket+0x3c>
Send:
 8002a5e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b1f      	cmp	r3, #31
 8002a64:	d809      	bhi.n	8002a7a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002a66:	4b60      	ldr	r3, [pc, #384]	; (8002be8 <_SendPacket+0x1c4>)
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f040 808d 	bne.w	8002b94 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b17      	cmp	r3, #23
 8002a7e:	d807      	bhi.n	8002a90 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e03d      	b.n	8002b0c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a9c:	d912      	bls.n	8002ac4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	09da      	lsrs	r2, r3, #7
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	3a01      	subs	r2, #1
 8002ab6:	60fa      	str	r2, [r7, #12]
 8002ab8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	e006      	b.n	8002ad2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ad6:	d912      	bls.n	8002afe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	09da      	lsrs	r2, r3, #7
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	3a01      	subs	r2, #1
 8002af0:	60fa      	str	r2, [r7, #12]
 8002af2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e006      	b.n	8002b0c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002b0c:	4b37      	ldr	r3, [pc, #220]	; (8002bec <_SendPacket+0x1c8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002b12:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <_SendPacket+0x1c4>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	623b      	str	r3, [r7, #32]
 8002b24:	e00b      	b.n	8002b3e <_SendPacket+0x11a>
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	1c59      	adds	r1, r3, #1
 8002b2e:	6279      	str	r1, [r7, #36]	; 0x24
 8002b30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	09db      	lsrs	r3, r3, #7
 8002b3c:	623b      	str	r3, [r7, #32]
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	2b7f      	cmp	r3, #127	; 0x7f
 8002b42:	d8f0      	bhi.n	8002b26 <_SendPacket+0x102>
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	627a      	str	r2, [r7, #36]	; 0x24
 8002b4a:	6a3a      	ldr	r2, [r7, #32]
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002b54:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <_SendPacket+0x1c4>)
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	68f9      	ldr	r1, [r7, #12]
 8002b64:	f7fd fb34 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8002b6c:	f7ff fa1c 	bl	8001fa8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <_SendPacket+0x1c4>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	60d3      	str	r3, [r2, #12]
 8002b7c:	e00b      	b.n	8002b96 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <_SendPacket+0x1c4>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	3301      	adds	r3, #1
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <_SendPacket+0x1c4>)
 8002b88:	701a      	strb	r2, [r3, #0]
 8002b8a:	e004      	b.n	8002b96 <_SendPacket+0x172>
    goto SendDone;
 8002b8c:	bf00      	nop
 8002b8e:	e002      	b.n	8002b96 <_SendPacket+0x172>
      goto SendDone;
 8002b90:	bf00      	nop
 8002b92:	e000      	b.n	8002b96 <_SendPacket+0x172>
      goto SendDone;
 8002b94:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <_SendPacket+0x1c4>)
 8002b98:	7e1b      	ldrb	r3, [r3, #24]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <_SendPacket+0x1cc>)
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	440b      	add	r3, r1
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	336c      	adds	r3, #108	; 0x6c
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <_SendPacket+0x1c4>)
 8002bae:	7e1b      	ldrb	r3, [r3, #24]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	490f      	ldr	r1, [pc, #60]	; (8002bf0 <_SendPacket+0x1cc>)
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4403      	add	r3, r0
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3370      	adds	r3, #112	; 0x70
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d00b      	beq.n	8002bde <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <_SendPacket+0x1c4>)
 8002bc8:	789b      	ldrb	r3, [r3, #2]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d107      	bne.n	8002bde <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <_SendPacket+0x1c4>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002bd4:	f7ff fe40 	bl	8002858 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <_SendPacket+0x1c4>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20014228 	.word	0x20014228
 8002bec:	e0001004 	.word	0xe0001004
 8002bf0:	2001433c 	.word	0x2001433c

08002bf4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	; 0x28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	2b80      	cmp	r3, #128	; 0x80
 8002c0c:	d80a      	bhi.n	8002c24 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	1c59      	adds	r1, r3, #1
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6051      	str	r1, [r2, #4]
 8002c18:	78fa      	ldrb	r2, [r7, #3]
 8002c1a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b80      	cmp	r3, #128	; 0x80
 8002c2a:	d15a      	bne.n	8002ce2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	e00b      	b.n	8002c66 <_StoreChar+0x72>
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	1c59      	adds	r1, r3, #1
 8002c56:	6279      	str	r1, [r7, #36]	; 0x24
 8002c58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	09db      	lsrs	r3, r3, #7
 8002c64:	623b      	str	r3, [r7, #32]
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	2b7f      	cmp	r3, #127	; 0x7f
 8002c6a:	d8f0      	bhi.n	8002c4e <_StoreChar+0x5a>
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	627a      	str	r2, [r7, #36]	; 0x24
 8002c72:	6a3a      	ldr	r2, [r7, #32]
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	2300      	movs	r3, #0
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	e00b      	b.n	8002c9e <_StoreChar+0xaa>
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	1c59      	adds	r1, r3, #1
 8002c8e:	61f9      	str	r1, [r7, #28]
 8002c90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	09db      	lsrs	r3, r3, #7
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ca2:	d8f0      	bhi.n	8002c86 <_StoreChar+0x92>
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	61fa      	str	r2, [r7, #28]
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	221a      	movs	r2, #26
 8002cba:	6939      	ldr	r1, [r7, #16]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff feb1 	bl	8002a24 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fdba 	bl	8002840 <_PreparePacket>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	611a      	str	r2, [r3, #16]
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	3728      	adds	r7, #40	; 0x28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8002d02:	2301      	movs	r3, #1
 8002d04:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002d06:	e007      	b.n	8002d18 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8002d08:	6a3a      	ldr	r2, [r7, #32]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	623b      	str	r3, [r7, #32]
    Width++;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3301      	adds	r3, #1
 8002d16:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002d18:	6a3a      	ldr	r2, [r7, #32]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d2f3      	bcs.n	8002d08 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d901      	bls.n	8002d2c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11f      	bne.n	8002d76 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01c      	beq.n	8002d76 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <_PrintUnsigned+0x66>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <_PrintUnsigned+0x66>
        c = '0';
 8002d4c:	2330      	movs	r3, #48	; 0x30
 8002d4e:	76fb      	strb	r3, [r7, #27]
 8002d50:	e001      	b.n	8002d56 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8002d52:	2320      	movs	r3, #32
 8002d54:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002d56:	e007      	b.n	8002d68 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8002d5e:	7efb      	ldrb	r3, [r7, #27]
 8002d60:	4619      	mov	r1, r3
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f7ff ff46 	bl	8002bf4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <_PrintUnsigned+0x8a>
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d3f0      	bcc.n	8002d58 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d903      	bls.n	8002d84 <_PrintUnsigned+0x98>
      NumDigits--;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	e009      	b.n	8002d98 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d200      	bcs.n	8002d98 <_PrintUnsigned+0xac>
        break;
 8002d96:	e005      	b.n	8002da4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002da2:	e7e8      	b.n	8002d76 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <_PrintUnsigned+0x128>)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f7ff ff14 	bl	8002bf4 <_StoreChar>
    Digit /= Base;
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e3      	bne.n	8002da4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d011      	beq.n	8002e0a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00e      	beq.n	8002e0a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002dec:	e006      	b.n	8002dfc <_PrintUnsigned+0x110>
        FieldWidth--;
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	3b01      	subs	r3, #1
 8002df2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8002df4:	2120      	movs	r1, #32
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff fefc 	bl	8002bf4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <_PrintUnsigned+0x11e>
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d3f1      	bcc.n	8002dee <_PrintUnsigned+0x102>
      }
    }
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	3728      	adds	r7, #40	; 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	08005eb0 	.word	0x08005eb0

08002e18 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bfb8      	it	lt
 8002e2c:	425b      	neglt	r3, r3
 8002e2e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8002e30:	2301      	movs	r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002e34:	e007      	b.n	8002e46 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e3e:	613b      	str	r3, [r7, #16]
    Width++;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	3301      	adds	r3, #1
 8002e44:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	daf3      	bge.n	8002e36 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d901      	bls.n	8002e5a <_PrintInt+0x42>
    Width = NumDigits;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <_PrintInt+0x5e>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db04      	blt.n	8002e70 <_PrintInt+0x58>
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <_PrintInt+0x5e>
    FieldWidth--;
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <_PrintInt+0x6e>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d016      	beq.n	8002eb4 <_PrintInt+0x9c>
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d111      	bne.n	8002eb4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00e      	beq.n	8002eb4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002e96:	e006      	b.n	8002ea6 <_PrintInt+0x8e>
        FieldWidth--;
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8002e9e:	2120      	movs	r1, #32
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f7ff fea7 	bl	8002bf4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <_PrintInt+0x9c>
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d3f1      	bcc.n	8002e98 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	da07      	bge.n	8002eca <_PrintInt+0xb2>
    v = -v;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	425b      	negs	r3, r3
 8002ebe:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8002ec0:	212d      	movs	r1, #45	; 0x2d
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7ff fe96 	bl	8002bf4 <_StoreChar>
 8002ec8:	e008      	b.n	8002edc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8002ed4:	212b      	movs	r1, #43	; 0x2b
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7ff fe8c 	bl	8002bf4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d019      	beq.n	8002f1a <_PrintInt+0x102>
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d114      	bne.n	8002f1a <_PrintInt+0x102>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d111      	bne.n	8002f1a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00e      	beq.n	8002f1a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002efc:	e006      	b.n	8002f0c <_PrintInt+0xf4>
        FieldWidth--;
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8002f04:	2130      	movs	r1, #48	; 0x30
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff fe74 	bl	8002bf4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <_PrintInt+0x102>
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d3f1      	bcc.n	8002efe <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f7ff fedf 	bl	8002cec <_PrintUnsigned>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b098      	sub	sp, #96	; 0x60
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002f44:	f3ef 8311 	mrs	r3, BASEPRI
 8002f48:	f04f 0120 	mov.w	r1, #32
 8002f4c:	f381 8811 	msr	BASEPRI, r1
 8002f50:	633b      	str	r3, [r7, #48]	; 0x30
 8002f52:	48b7      	ldr	r0, [pc, #732]	; (8003230 <_VPrintTarget+0x2f8>)
 8002f54:	f7ff fc74 	bl	8002840 <_PreparePacket>
 8002f58:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8002f5a:	4bb5      	ldr	r3, [pc, #724]	; (8003230 <_VPrintTarget+0x2f8>)
 8002f5c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8002f7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8183 	beq.w	800328e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8002f88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f8c:	2b25      	cmp	r3, #37	; 0x25
 8002f8e:	f040 8170 	bne.w	8003272 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8002f92:	2300      	movs	r3, #0
 8002f94:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8002f96:	2301      	movs	r3, #1
 8002f98:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8002fa2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fa6:	3b23      	subs	r3, #35	; 0x23
 8002fa8:	2b0d      	cmp	r3, #13
 8002faa:	d83f      	bhi.n	800302c <_VPrintTarget+0xf4>
 8002fac:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <_VPrintTarget+0x7c>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	0800301d 	.word	0x0800301d
 8002fb8:	0800302d 	.word	0x0800302d
 8002fbc:	0800302d 	.word	0x0800302d
 8002fc0:	0800302d 	.word	0x0800302d
 8002fc4:	0800302d 	.word	0x0800302d
 8002fc8:	0800302d 	.word	0x0800302d
 8002fcc:	0800302d 	.word	0x0800302d
 8002fd0:	0800302d 	.word	0x0800302d
 8002fd4:	0800300d 	.word	0x0800300d
 8002fd8:	0800302d 	.word	0x0800302d
 8002fdc:	08002fed 	.word	0x08002fed
 8002fe0:	0800302d 	.word	0x0800302d
 8002fe4:	0800302d 	.word	0x0800302d
 8002fe8:	08002ffd 	.word	0x08002ffd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8002fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e01a      	b.n	8003032 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8002ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ffe:	f043 0302 	orr.w	r3, r3, #2
 8003002:	64bb      	str	r3, [r7, #72]	; 0x48
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3301      	adds	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	e012      	b.n	8003032 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800300c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	64bb      	str	r3, [r7, #72]	; 0x48
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3301      	adds	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	e00a      	b.n	8003032 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800301c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800301e:	f043 0308 	orr.w	r3, r3, #8
 8003022:	64bb      	str	r3, [r7, #72]	; 0x48
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3301      	adds	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	e002      	b.n	8003032 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800302c:	2300      	movs	r3, #0
 800302e:	653b      	str	r3, [r7, #80]	; 0x50
 8003030:	bf00      	nop
        }
      } while (v);
 8003032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1b0      	bne.n	8002f9a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003038:	2300      	movs	r3, #0
 800303a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8003044:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003048:	2b2f      	cmp	r3, #47	; 0x2f
 800304a:	d912      	bls.n	8003072 <_VPrintTarget+0x13a>
 800304c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003050:	2b39      	cmp	r3, #57	; 0x39
 8003052:	d80e      	bhi.n	8003072 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	3301      	adds	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800305a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	461a      	mov	r2, r3
 8003066:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800306a:	4413      	add	r3, r2
 800306c:	3b30      	subs	r3, #48	; 0x30
 800306e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8003070:	e7e4      	b.n	800303c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8003072:	2300      	movs	r3, #0
 8003074:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800307e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003082:	2b2e      	cmp	r3, #46	; 0x2e
 8003084:	d11d      	bne.n	80030c2 <_VPrintTarget+0x18a>
        sFormat++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3301      	adds	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8003094:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003098:	2b2f      	cmp	r3, #47	; 0x2f
 800309a:	d912      	bls.n	80030c2 <_VPrintTarget+0x18a>
 800309c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80030a0:	2b39      	cmp	r3, #57	; 0x39
 80030a2:	d80e      	bhi.n	80030c2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3301      	adds	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80030aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	461a      	mov	r2, r3
 80030b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80030ba:	4413      	add	r3, r2
 80030bc:	3b30      	subs	r3, #48	; 0x30
 80030be:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80030c0:	e7e4      	b.n	800308c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80030ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80030ce:	2b6c      	cmp	r3, #108	; 0x6c
 80030d0:	d003      	beq.n	80030da <_VPrintTarget+0x1a2>
 80030d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80030d6:	2b68      	cmp	r3, #104	; 0x68
 80030d8:	d107      	bne.n	80030ea <_VPrintTarget+0x1b2>
          c = *sFormat;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80030e8:	e7ef      	b.n	80030ca <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80030ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80030ee:	2b25      	cmp	r3, #37	; 0x25
 80030f0:	f000 80b3 	beq.w	800325a <_VPrintTarget+0x322>
 80030f4:	2b25      	cmp	r3, #37	; 0x25
 80030f6:	f2c0 80b7 	blt.w	8003268 <_VPrintTarget+0x330>
 80030fa:	2b78      	cmp	r3, #120	; 0x78
 80030fc:	f300 80b4 	bgt.w	8003268 <_VPrintTarget+0x330>
 8003100:	2b58      	cmp	r3, #88	; 0x58
 8003102:	f2c0 80b1 	blt.w	8003268 <_VPrintTarget+0x330>
 8003106:	3b58      	subs	r3, #88	; 0x58
 8003108:	2b20      	cmp	r3, #32
 800310a:	f200 80ad 	bhi.w	8003268 <_VPrintTarget+0x330>
 800310e:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <_VPrintTarget+0x1dc>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	0800320b 	.word	0x0800320b
 8003118:	08003269 	.word	0x08003269
 800311c:	08003269 	.word	0x08003269
 8003120:	08003269 	.word	0x08003269
 8003124:	08003269 	.word	0x08003269
 8003128:	08003269 	.word	0x08003269
 800312c:	08003269 	.word	0x08003269
 8003130:	08003269 	.word	0x08003269
 8003134:	08003269 	.word	0x08003269
 8003138:	08003269 	.word	0x08003269
 800313c:	08003269 	.word	0x08003269
 8003140:	08003199 	.word	0x08003199
 8003144:	080031bf 	.word	0x080031bf
 8003148:	08003269 	.word	0x08003269
 800314c:	08003269 	.word	0x08003269
 8003150:	08003269 	.word	0x08003269
 8003154:	08003269 	.word	0x08003269
 8003158:	08003269 	.word	0x08003269
 800315c:	08003269 	.word	0x08003269
 8003160:	08003269 	.word	0x08003269
 8003164:	08003269 	.word	0x08003269
 8003168:	08003269 	.word	0x08003269
 800316c:	08003269 	.word	0x08003269
 8003170:	08003269 	.word	0x08003269
 8003174:	08003235 	.word	0x08003235
 8003178:	08003269 	.word	0x08003269
 800317c:	08003269 	.word	0x08003269
 8003180:	08003269 	.word	0x08003269
 8003184:	08003269 	.word	0x08003269
 8003188:	080031e5 	.word	0x080031e5
 800318c:	08003269 	.word	0x08003269
 8003190:	08003269 	.word	0x08003269
 8003194:	0800320b 	.word	0x0800320b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	1d19      	adds	r1, r3, #4
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6011      	str	r1, [r2, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80031a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80031ac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fd1c 	bl	8002bf4 <_StoreChar>
        break;
 80031bc:	e055      	b.n	800326a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	1d19      	adds	r1, r3, #4
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6011      	str	r1, [r2, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80031cc:	f107 0014 	add.w	r0, r7, #20
 80031d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031da:	220a      	movs	r2, #10
 80031dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80031de:	f7ff fe1b 	bl	8002e18 <_PrintInt>
        break;
 80031e2:	e042      	b.n	800326a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	1d19      	adds	r1, r3, #4
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6011      	str	r1, [r2, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80031f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80031f4:	f107 0014 	add.w	r0, r7, #20
 80031f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003202:	220a      	movs	r2, #10
 8003204:	f7ff fd72 	bl	8002cec <_PrintUnsigned>
        break;
 8003208:	e02f      	b.n	800326a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	1d19      	adds	r1, r3, #4
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6011      	str	r1, [r2, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8003218:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800321a:	f107 0014 	add.w	r0, r7, #20
 800321e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003228:	2210      	movs	r2, #16
 800322a:	f7ff fd5f 	bl	8002cec <_PrintUnsigned>
        break;
 800322e:	e01c      	b.n	800326a <_VPrintTarget+0x332>
 8003230:	20014258 	.word	0x20014258
      case 'p':
        v = va_arg(*pParamList, int);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	1d19      	adds	r1, r3, #4
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6011      	str	r1, [r2, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8003242:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003244:	f107 0014 	add.w	r0, r7, #20
 8003248:	2300      	movs	r3, #0
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	2308      	movs	r3, #8
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2308      	movs	r3, #8
 8003252:	2210      	movs	r2, #16
 8003254:	f7ff fd4a 	bl	8002cec <_PrintUnsigned>
        break;
 8003258:	e007      	b.n	800326a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	2125      	movs	r1, #37	; 0x25
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fcc7 	bl	8002bf4 <_StoreChar>
        break;
 8003266:	e000      	b.n	800326a <_VPrintTarget+0x332>
      default:
        break;
 8003268:	bf00      	nop
      }
      sFormat++;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3301      	adds	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	e007      	b.n	8003282 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8003272:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003276:	f107 0314 	add.w	r3, r7, #20
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fcb9 	bl	8002bf4 <_StoreChar>
    }
  } while (*sFormat);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f47f ae72 	bne.w	8002f70 <_VPrintTarget+0x38>
 800328c:	e000      	b.n	8003290 <_VPrintTarget+0x358>
      break;
 800328e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	2b00      	cmp	r3, #0
 8003294:	d041      	beq.n	800331a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8003296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	643b      	str	r3, [r7, #64]	; 0x40
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a6:	e00b      	b.n	80032c0 <_VPrintTarget+0x388>
 80032a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ae:	1c59      	adds	r1, r3, #1
 80032b0:	6439      	str	r1, [r7, #64]	; 0x40
 80032b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032bc:	09db      	lsrs	r3, r3, #7
 80032be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c2:	2b7f      	cmp	r3, #127	; 0x7f
 80032c4:	d8f0      	bhi.n	80032a8 <_VPrintTarget+0x370>
 80032c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	643a      	str	r2, [r7, #64]	; 0x40
 80032cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80032da:	2300      	movs	r3, #0
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
 80032de:	e00b      	b.n	80032f8 <_VPrintTarget+0x3c0>
 80032e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	1c59      	adds	r1, r3, #1
 80032e8:	63b9      	str	r1, [r7, #56]	; 0x38
 80032ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f4:	09db      	lsrs	r3, r3, #7
 80032f6:	637b      	str	r3, [r7, #52]	; 0x34
 80032f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fa:	2b7f      	cmp	r3, #127	; 0x7f
 80032fc:	d8f0      	bhi.n	80032e0 <_VPrintTarget+0x3a8>
 80032fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	63ba      	str	r2, [r7, #56]	; 0x38
 8003304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	69b9      	ldr	r1, [r7, #24]
 8003312:	221a      	movs	r2, #26
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fb85 	bl	8002a24 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8003320:	bf00      	nop
 8003322:	3758      	adds	r7, #88	; 0x58
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003336:	2300      	movs	r3, #0
 8003338:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800333c:	4917      	ldr	r1, [pc, #92]	; (800339c <SEGGER_SYSVIEW_Init+0x74>)
 800333e:	4818      	ldr	r0, [pc, #96]	; (80033a0 <SEGGER_SYSVIEW_Init+0x78>)
 8003340:	f7ff f95e 	bl	8002600 <SEGGER_RTT_AllocUpBuffer>
 8003344:	4603      	mov	r3, r0
 8003346:	b2da      	uxtb	r2, r3
 8003348:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800334a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800334c:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800334e:	785a      	ldrb	r2, [r3, #1]
 8003350:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003352:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003354:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003356:	7e1b      	ldrb	r3, [r3, #24]
 8003358:	4618      	mov	r0, r3
 800335a:	2300      	movs	r3, #0
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	2308      	movs	r3, #8
 8003360:	4a11      	ldr	r2, [pc, #68]	; (80033a8 <SEGGER_SYSVIEW_Init+0x80>)
 8003362:	490f      	ldr	r1, [pc, #60]	; (80033a0 <SEGGER_SYSVIEW_Init+0x78>)
 8003364:	f7ff f9d0 	bl	8002708 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003368:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <SEGGER_SYSVIEW_Init+0x84>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a0c      	ldr	r2, [pc, #48]	; (80033a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003374:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003376:	4a0b      	ldr	r2, [pc, #44]	; (80033a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800337c:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003382:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003388:	4a06      	ldr	r2, [pc, #24]	; (80033a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20013220 	.word	0x20013220
 80033a0:	08005e24 	.word	0x08005e24
 80033a4:	20014228 	.word	0x20014228
 80033a8:	20014220 	.word	0x20014220
 80033ac:	e0001004 	.word	0xe0001004

080033b0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80033b8:	4a04      	ldr	r2, [pc, #16]	; (80033cc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6113      	str	r3, [r2, #16]
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20014228 	.word	0x20014228

080033d0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80033d8:	f3ef 8311 	mrs	r3, BASEPRI
 80033dc:	f04f 0120 	mov.w	r1, #32
 80033e0:	f381 8811 	msr	BASEPRI, r1
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	4808      	ldr	r0, [pc, #32]	; (8003408 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80033e8:	f7ff fa2a 	bl	8002840 <_PreparePacket>
 80033ec:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	68b8      	ldr	r0, [r7, #8]
 80033f4:	f7ff fb16 	bl	8002a24 <_SendPacket>
  RECORD_END();
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f383 8811 	msr	BASEPRI, r3
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20014258 	.word	0x20014258

0800340c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003416:	f3ef 8311 	mrs	r3, BASEPRI
 800341a:	f04f 0120 	mov.w	r1, #32
 800341e:	f381 8811 	msr	BASEPRI, r1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	4816      	ldr	r0, [pc, #88]	; (8003480 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003426:	f7ff fa0b 	bl	8002840 <_PreparePacket>
 800342a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	e00b      	b.n	8003452 <SEGGER_SYSVIEW_RecordU32+0x46>
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	1c59      	adds	r1, r3, #1
 8003442:	61f9      	str	r1, [r7, #28]
 8003444:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	09db      	lsrs	r3, r3, #7
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b7f      	cmp	r3, #127	; 0x7f
 8003456:	d8f0      	bhi.n	800343a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	61fa      	str	r2, [r7, #28]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68f9      	ldr	r1, [r7, #12]
 800346c:	6938      	ldr	r0, [r7, #16]
 800346e:	f7ff fad9 	bl	8002a24 <_SendPacket>
  RECORD_END();
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f383 8811 	msr	BASEPRI, r3
}
 8003478:	bf00      	nop
 800347a:	3720      	adds	r7, #32
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20014258 	.word	0x20014258

08003484 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b08c      	sub	sp, #48	; 0x30
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003490:	f3ef 8311 	mrs	r3, BASEPRI
 8003494:	f04f 0120 	mov.w	r1, #32
 8003498:	f381 8811 	msr	BASEPRI, r1
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	4825      	ldr	r0, [pc, #148]	; (8003534 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80034a0:	f7ff f9ce 	bl	8002840 <_PreparePacket>
 80034a4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b2:	e00b      	b.n	80034cc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ba:	1c59      	adds	r1, r3, #1
 80034bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80034be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c8:	09db      	lsrs	r3, r3, #7
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	2b7f      	cmp	r3, #127	; 0x7f
 80034d0:	d8f0      	bhi.n	80034b4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	623b      	str	r3, [r7, #32]
 80034ea:	e00b      	b.n	8003504 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	1c59      	adds	r1, r3, #1
 80034f4:	6279      	str	r1, [r7, #36]	; 0x24
 80034f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	09db      	lsrs	r3, r3, #7
 8003502:	623b      	str	r3, [r7, #32]
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	2b7f      	cmp	r3, #127	; 0x7f
 8003508:	d8f0      	bhi.n	80034ec <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	627a      	str	r2, [r7, #36]	; 0x24
 8003510:	6a3a      	ldr	r2, [r7, #32]
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	6979      	ldr	r1, [r7, #20]
 800351e:	69b8      	ldr	r0, [r7, #24]
 8003520:	f7ff fa80 	bl	8002a24 <_SendPacket>
  RECORD_END();
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f383 8811 	msr	BASEPRI, r3
}
 800352a:	bf00      	nop
 800352c:	3730      	adds	r7, #48	; 0x30
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20014258 	.word	0x20014258

08003538 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b08c      	sub	sp, #48	; 0x30
 800353c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800353e:	4b59      	ldr	r3, [pc, #356]	; (80036a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003540:	2201      	movs	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003544:	f3ef 8311 	mrs	r3, BASEPRI
 8003548:	f04f 0120 	mov.w	r1, #32
 800354c:	f381 8811 	msr	BASEPRI, r1
 8003550:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003552:	4b54      	ldr	r3, [pc, #336]	; (80036a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003554:	785b      	ldrb	r3, [r3, #1]
 8003556:	220a      	movs	r2, #10
 8003558:	4953      	ldr	r1, [pc, #332]	; (80036a8 <SEGGER_SYSVIEW_Start+0x170>)
 800355a:	4618      	mov	r0, r3
 800355c:	f7fc fe38 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003566:	f7fe fd1f 	bl	8001fa8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800356a:	200a      	movs	r0, #10
 800356c:	f7ff ff30 	bl	80033d0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003570:	f3ef 8311 	mrs	r3, BASEPRI
 8003574:	f04f 0120 	mov.w	r1, #32
 8003578:	f381 8811 	msr	BASEPRI, r1
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	484b      	ldr	r0, [pc, #300]	; (80036ac <SEGGER_SYSVIEW_Start+0x174>)
 8003580:	f7ff f95e 	bl	8002840 <_PreparePacket>
 8003584:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358e:	4b45      	ldr	r3, [pc, #276]	; (80036a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	62bb      	str	r3, [r7, #40]	; 0x28
 8003594:	e00b      	b.n	80035ae <SEGGER_SYSVIEW_Start+0x76>
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	b2da      	uxtb	r2, r3
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	1c59      	adds	r1, r3, #1
 800359e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80035a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	09db      	lsrs	r3, r3, #7
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	2b7f      	cmp	r3, #127	; 0x7f
 80035b2:	d8f0      	bhi.n	8003596 <SEGGER_SYSVIEW_Start+0x5e>
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	701a      	strb	r2, [r3, #0]
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
 80035c8:	4b36      	ldr	r3, [pc, #216]	; (80036a4 <SEGGER_SYSVIEW_Start+0x16c>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	623b      	str	r3, [r7, #32]
 80035ce:	e00b      	b.n	80035e8 <SEGGER_SYSVIEW_Start+0xb0>
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	1c59      	adds	r1, r3, #1
 80035d8:	6279      	str	r1, [r7, #36]	; 0x24
 80035da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	09db      	lsrs	r3, r3, #7
 80035e6:	623b      	str	r3, [r7, #32]
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	2b7f      	cmp	r3, #127	; 0x7f
 80035ec:	d8f0      	bhi.n	80035d0 <SEGGER_SYSVIEW_Start+0x98>
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	627a      	str	r2, [r7, #36]	; 0x24
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	e00b      	b.n	8003622 <SEGGER_SYSVIEW_Start+0xea>
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	1c59      	adds	r1, r3, #1
 8003612:	61f9      	str	r1, [r7, #28]
 8003614:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	09db      	lsrs	r3, r3, #7
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b7f      	cmp	r3, #127	; 0x7f
 8003626:	d8f0      	bhi.n	800360a <SEGGER_SYSVIEW_Start+0xd2>
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	61fa      	str	r2, [r7, #28]
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	2300      	movs	r3, #0
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	e00b      	b.n	800365a <SEGGER_SYSVIEW_Start+0x122>
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	1c59      	adds	r1, r3, #1
 800364a:	6179      	str	r1, [r7, #20]
 800364c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	09db      	lsrs	r3, r3, #7
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2b7f      	cmp	r3, #127	; 0x7f
 800365e:	d8f0      	bhi.n	8003642 <SEGGER_SYSVIEW_Start+0x10a>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	617a      	str	r2, [r7, #20]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003670:	2218      	movs	r2, #24
 8003672:	6839      	ldr	r1, [r7, #0]
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff f9d5 	bl	8002a24 <_SendPacket>
      RECORD_END();
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <SEGGER_SYSVIEW_Start+0x16c>)
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800368e:	f000 f9eb 	bl	8003a68 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003692:	f000 f9b1 	bl	80039f8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003696:	f000 fc73 	bl	8003f80 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800369a:	bf00      	nop
 800369c:	3730      	adds	r7, #48	; 0x30
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20014228 	.word	0x20014228
 80036a8:	08005ea4 	.word	0x08005ea4
 80036ac:	20014258 	.word	0x20014258

080036b0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80036b6:	f3ef 8311 	mrs	r3, BASEPRI
 80036ba:	f04f 0120 	mov.w	r1, #32
 80036be:	f381 8811 	msr	BASEPRI, r1
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	480b      	ldr	r0, [pc, #44]	; (80036f4 <SEGGER_SYSVIEW_Stop+0x44>)
 80036c6:	f7ff f8bb 	bl	8002840 <_PreparePacket>
 80036ca:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <SEGGER_SYSVIEW_Stop+0x48>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80036d4:	220b      	movs	r2, #11
 80036d6:	6839      	ldr	r1, [r7, #0]
 80036d8:	6838      	ldr	r0, [r7, #0]
 80036da:	f7ff f9a3 	bl	8002a24 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <SEGGER_SYSVIEW_Stop+0x48>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f383 8811 	msr	BASEPRI, r3
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20014258 	.word	0x20014258
 80036f8:	20014228 	.word	0x20014228

080036fc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08c      	sub	sp, #48	; 0x30
 8003700:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003702:	f3ef 8311 	mrs	r3, BASEPRI
 8003706:	f04f 0120 	mov.w	r1, #32
 800370a:	f381 8811 	msr	BASEPRI, r1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	4845      	ldr	r0, [pc, #276]	; (8003828 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003712:	f7ff f895 	bl	8002840 <_PreparePacket>
 8003716:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003720:	4b42      	ldr	r3, [pc, #264]	; (800382c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	62bb      	str	r3, [r7, #40]	; 0x28
 8003726:	e00b      	b.n	8003740 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	b2da      	uxtb	r2, r3
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	1c59      	adds	r1, r3, #1
 8003730:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003732:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	09db      	lsrs	r3, r3, #7
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003742:	2b7f      	cmp	r3, #127	; 0x7f
 8003744:	d8f0      	bhi.n	8003728 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800374c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
 800375a:	4b34      	ldr	r3, [pc, #208]	; (800382c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	623b      	str	r3, [r7, #32]
 8003760:	e00b      	b.n	800377a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	1c59      	adds	r1, r3, #1
 800376a:	6279      	str	r1, [r7, #36]	; 0x24
 800376c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	09db      	lsrs	r3, r3, #7
 8003778:	623b      	str	r3, [r7, #32]
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	2b7f      	cmp	r3, #127	; 0x7f
 800377e:	d8f0      	bhi.n	8003762 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	627a      	str	r2, [r7, #36]	; 0x24
 8003786:	6a3a      	ldr	r2, [r7, #32]
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	4b25      	ldr	r3, [pc, #148]	; (800382c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e00b      	b.n	80037b4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	1c59      	adds	r1, r3, #1
 80037a4:	61f9      	str	r1, [r7, #28]
 80037a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	09db      	lsrs	r3, r3, #7
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b7f      	cmp	r3, #127	; 0x7f
 80037b8:	d8f0      	bhi.n	800379c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	61fa      	str	r2, [r7, #28]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	e00b      	b.n	80037ec <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	1c59      	adds	r1, r3, #1
 80037dc:	6179      	str	r1, [r7, #20]
 80037de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	09db      	lsrs	r3, r3, #7
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b7f      	cmp	r3, #127	; 0x7f
 80037f0:	d8f0      	bhi.n	80037d4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	617a      	str	r2, [r7, #20]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003802:	2218      	movs	r2, #24
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	68b8      	ldr	r0, [r7, #8]
 8003808:	f7ff f90c 	bl	8002a24 <_SendPacket>
  RECORD_END();
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800381a:	4b04      	ldr	r3, [pc, #16]	; (800382c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	4798      	blx	r3
  }
}
 8003820:	bf00      	nop
 8003822:	3730      	adds	r7, #48	; 0x30
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20014258 	.word	0x20014258
 800382c:	20014228 	.word	0x20014228

08003830 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b092      	sub	sp, #72	; 0x48
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003838:	f3ef 8311 	mrs	r3, BASEPRI
 800383c:	f04f 0120 	mov.w	r1, #32
 8003840:	f381 8811 	msr	BASEPRI, r1
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	486a      	ldr	r0, [pc, #424]	; (80039f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003848:	f7fe fffa 	bl	8002840 <_PreparePacket>
 800384c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	647b      	str	r3, [r7, #68]	; 0x44
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4b66      	ldr	r3, [pc, #408]	; (80039f4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	643b      	str	r3, [r7, #64]	; 0x40
 8003862:	e00b      	b.n	800387c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003866:	b2da      	uxtb	r2, r3
 8003868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800386a:	1c59      	adds	r1, r3, #1
 800386c:	6479      	str	r1, [r7, #68]	; 0x44
 800386e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003878:	09db      	lsrs	r3, r3, #7
 800387a:	643b      	str	r3, [r7, #64]	; 0x40
 800387c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800387e:	2b7f      	cmp	r3, #127	; 0x7f
 8003880:	d8f0      	bhi.n	8003864 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	647a      	str	r2, [r7, #68]	; 0x44
 8003888:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003890:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	63bb      	str	r3, [r7, #56]	; 0x38
 800389c:	e00b      	b.n	80038b6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800389e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a4:	1c59      	adds	r1, r3, #1
 80038a6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80038a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b2:	09db      	lsrs	r3, r3, #7
 80038b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80038b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b8:	2b7f      	cmp	r3, #127	; 0x7f
 80038ba:	d8f0      	bhi.n	800389e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80038bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	701a      	strb	r2, [r3, #0]
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	4619      	mov	r1, r3
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f7fe ff63 	bl	80027a0 <_EncodeStr>
 80038da:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80038dc:	2209      	movs	r2, #9
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	6938      	ldr	r0, [r7, #16]
 80038e2:	f7ff f89f 	bl	8002a24 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b40      	ldr	r3, [pc, #256]	; (80039f4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	633b      	str	r3, [r7, #48]	; 0x30
 80038fa:	e00b      	b.n	8003914 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003902:	1c59      	adds	r1, r3, #1
 8003904:	6379      	str	r1, [r7, #52]	; 0x34
 8003906:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	09db      	lsrs	r3, r3, #7
 8003912:	633b      	str	r3, [r7, #48]	; 0x30
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	2b7f      	cmp	r3, #127	; 0x7f
 8003918:	d8f0      	bhi.n	80038fc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800391a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	637a      	str	r2, [r7, #52]	; 0x34
 8003920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003928:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
 8003934:	e00b      	b.n	800394e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	b2da      	uxtb	r2, r3
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	1c59      	adds	r1, r3, #1
 800393e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003940:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	09db      	lsrs	r3, r3, #7
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	2b7f      	cmp	r3, #127	; 0x7f
 8003952:	d8f0      	bhi.n	8003936 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800395a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	623b      	str	r3, [r7, #32]
 800396e:	e00b      	b.n	8003988 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	1c59      	adds	r1, r3, #1
 8003978:	6279      	str	r1, [r7, #36]	; 0x24
 800397a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	09db      	lsrs	r3, r3, #7
 8003986:	623b      	str	r3, [r7, #32]
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	2b7f      	cmp	r3, #127	; 0x7f
 800398c:	d8f0      	bhi.n	8003970 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	627a      	str	r2, [r7, #36]	; 0x24
 8003994:	6a3a      	ldr	r2, [r7, #32]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	e00b      	b.n	80039c0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	1c59      	adds	r1, r3, #1
 80039b0:	61f9      	str	r1, [r7, #28]
 80039b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	09db      	lsrs	r3, r3, #7
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b7f      	cmp	r3, #127	; 0x7f
 80039c4:	d8f0      	bhi.n	80039a8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	61fa      	str	r2, [r7, #28]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80039d6:	2215      	movs	r2, #21
 80039d8:	68f9      	ldr	r1, [r7, #12]
 80039da:	6938      	ldr	r0, [r7, #16]
 80039dc:	f7ff f822 	bl	8002a24 <_SendPacket>
  RECORD_END();
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f383 8811 	msr	BASEPRI, r3
}
 80039e6:	bf00      	nop
 80039e8:	3748      	adds	r7, #72	; 0x48
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20014258 	.word	0x20014258
 80039f4:	20014228 	.word	0x20014228

080039f8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80039fc:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003a0e:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4798      	blx	r3
  }
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20014228 	.word	0x20014228

08003a20 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003a28:	f3ef 8311 	mrs	r3, BASEPRI
 8003a2c:	f04f 0120 	mov.w	r1, #32
 8003a30:	f381 8811 	msr	BASEPRI, r1
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	480b      	ldr	r0, [pc, #44]	; (8003a64 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003a38:	f7fe ff02 	bl	8002840 <_PreparePacket>
 8003a3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003a3e:	2280      	movs	r2, #128	; 0x80
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	6938      	ldr	r0, [r7, #16]
 8003a44:	f7fe feac 	bl	80027a0 <_EncodeStr>
 8003a48:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003a4a:	220e      	movs	r2, #14
 8003a4c:	68f9      	ldr	r1, [r7, #12]
 8003a4e:	6938      	ldr	r0, [r7, #16]
 8003a50:	f7fe ffe8 	bl	8002a24 <_SendPacket>
  RECORD_END();
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f383 8811 	msr	BASEPRI, r3
}
 8003a5a:	bf00      	nop
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20014258 	.word	0x20014258

08003a68 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d01a      	beq.n	8003aac <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003a76:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d015      	beq.n	8003aac <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003a80:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4798      	blx	r3
 8003a88:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003a8c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	000a      	movs	r2, r1
 8003a9c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	200d      	movs	r0, #13
 8003aa6:	f7ff fced 	bl	8003484 <SEGGER_SYSVIEW_RecordU32x2>
 8003aaa:	e006      	b.n	8003aba <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	200c      	movs	r0, #12
 8003ab4:	f7ff fcaa 	bl	800340c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd90      	pop	{r4, r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20014228 	.word	0x20014228
 8003ac8:	e0001004 	.word	0xe0001004

08003acc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003ad2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ad6:	f04f 0120 	mov.w	r1, #32
 8003ada:	f381 8811 	msr	BASEPRI, r1
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	4819      	ldr	r0, [pc, #100]	; (8003b48 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003ae2:	f7fe fead 	bl	8002840 <_PreparePacket>
 8003ae6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003aec:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	e00b      	b.n	8003b18 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1c59      	adds	r1, r3, #1
 8003b08:	6179      	str	r1, [r7, #20]
 8003b0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	09db      	lsrs	r3, r3, #7
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b1c:	d8f0      	bhi.n	8003b00 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	617a      	str	r2, [r7, #20]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003b2e:	2202      	movs	r2, #2
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	68b8      	ldr	r0, [r7, #8]
 8003b34:	f7fe ff76 	bl	8002a24 <_SendPacket>
  RECORD_END();
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f383 8811 	msr	BASEPRI, r3
}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20014258 	.word	0x20014258
 8003b4c:	e000ed04 	.word	0xe000ed04

08003b50 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003b56:	f3ef 8311 	mrs	r3, BASEPRI
 8003b5a:	f04f 0120 	mov.w	r1, #32
 8003b5e:	f381 8811 	msr	BASEPRI, r1
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	4807      	ldr	r0, [pc, #28]	; (8003b84 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003b66:	f7fe fe6b 	bl	8002840 <_PreparePacket>
 8003b6a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	6839      	ldr	r1, [r7, #0]
 8003b70:	6838      	ldr	r0, [r7, #0]
 8003b72:	f7fe ff57 	bl	8002a24 <_SendPacket>
  RECORD_END();
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f383 8811 	msr	BASEPRI, r3
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20014258 	.word	0x20014258

08003b88 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b92:	f04f 0120 	mov.w	r1, #32
 8003b96:	f381 8811 	msr	BASEPRI, r1
 8003b9a:	607b      	str	r3, [r7, #4]
 8003b9c:	4807      	ldr	r0, [pc, #28]	; (8003bbc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003b9e:	f7fe fe4f 	bl	8002840 <_PreparePacket>
 8003ba2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003ba4:	2212      	movs	r2, #18
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	6838      	ldr	r0, [r7, #0]
 8003baa:	f7fe ff3b 	bl	8002a24 <_SendPacket>
  RECORD_END();
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f383 8811 	msr	BASEPRI, r3
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20014258 	.word	0x20014258

08003bc0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8003bca:	f04f 0120 	mov.w	r1, #32
 8003bce:	f381 8811 	msr	BASEPRI, r1
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	4807      	ldr	r0, [pc, #28]	; (8003bf4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003bd6:	f7fe fe33 	bl	8002840 <_PreparePacket>
 8003bda:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003bdc:	2211      	movs	r2, #17
 8003bde:	6839      	ldr	r1, [r7, #0]
 8003be0:	6838      	ldr	r0, [r7, #0]
 8003be2:	f7fe ff1f 	bl	8002a24 <_SendPacket>
  RECORD_END();
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f383 8811 	msr	BASEPRI, r3
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20014258 	.word	0x20014258

08003bf8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003c00:	f3ef 8311 	mrs	r3, BASEPRI
 8003c04:	f04f 0120 	mov.w	r1, #32
 8003c08:	f381 8811 	msr	BASEPRI, r1
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	4819      	ldr	r0, [pc, #100]	; (8003c74 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8003c10:	f7fe fe16 	bl	8002840 <_PreparePacket>
 8003c14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003c1a:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	e00b      	b.n	8003c46 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	1c59      	adds	r1, r3, #1
 8003c36:	61f9      	str	r1, [r7, #28]
 8003c38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	09db      	lsrs	r3, r3, #7
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b7f      	cmp	r3, #127	; 0x7f
 8003c4a:	d8f0      	bhi.n	8003c2e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	61fa      	str	r2, [r7, #28]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	6938      	ldr	r0, [r7, #16]
 8003c62:	f7fe fedf 	bl	8002a24 <_SendPacket>
  RECORD_END();
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f383 8811 	msr	BASEPRI, r3
}
 8003c6c:	bf00      	nop
 8003c6e:	3720      	adds	r7, #32
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20014258 	.word	0x20014258
 8003c78:	20014228 	.word	0x20014228

08003c7c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003c84:	f3ef 8311 	mrs	r3, BASEPRI
 8003c88:	f04f 0120 	mov.w	r1, #32
 8003c8c:	f381 8811 	msr	BASEPRI, r1
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	4819      	ldr	r0, [pc, #100]	; (8003cf8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003c94:	f7fe fdd4 	bl	8002840 <_PreparePacket>
 8003c98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003c9e:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e00b      	b.n	8003cca <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	1c59      	adds	r1, r3, #1
 8003cba:	61f9      	str	r1, [r7, #28]
 8003cbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	701a      	strb	r2, [r3, #0]
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	09db      	lsrs	r3, r3, #7
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b7f      	cmp	r3, #127	; 0x7f
 8003cce:	d8f0      	bhi.n	8003cb2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	61fa      	str	r2, [r7, #28]
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	68f9      	ldr	r1, [r7, #12]
 8003ce4:	6938      	ldr	r0, [r7, #16]
 8003ce6:	f7fe fe9d 	bl	8002a24 <_SendPacket>
  RECORD_END();
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f383 8811 	msr	BASEPRI, r3
}
 8003cf0:	bf00      	nop
 8003cf2:	3720      	adds	r7, #32
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20014258 	.word	0x20014258
 8003cfc:	20014228 	.word	0x20014228

08003d00 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003d08:	f3ef 8311 	mrs	r3, BASEPRI
 8003d0c:	f04f 0120 	mov.w	r1, #32
 8003d10:	f381 8811 	msr	BASEPRI, r1
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	4819      	ldr	r0, [pc, #100]	; (8003d7c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8003d18:	f7fe fd92 	bl	8002840 <_PreparePacket>
 8003d1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003d22:	4b17      	ldr	r3, [pc, #92]	; (8003d80 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	e00b      	b.n	8003d4e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	1c59      	adds	r1, r3, #1
 8003d3e:	61f9      	str	r1, [r7, #28]
 8003d40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	701a      	strb	r2, [r3, #0]
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	09db      	lsrs	r3, r3, #7
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b7f      	cmp	r3, #127	; 0x7f
 8003d52:	d8f0      	bhi.n	8003d36 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	61fa      	str	r2, [r7, #28]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003d64:	2206      	movs	r2, #6
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	6938      	ldr	r0, [r7, #16]
 8003d6a:	f7fe fe5b 	bl	8002a24 <_SendPacket>
  RECORD_END();
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f383 8811 	msr	BASEPRI, r3
}
 8003d74:	bf00      	nop
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20014258 	.word	0x20014258
 8003d80:	20014228 	.word	0x20014228

08003d84 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d92:	f04f 0120 	mov.w	r1, #32
 8003d96:	f381 8811 	msr	BASEPRI, r1
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	4827      	ldr	r0, [pc, #156]	; (8003e3c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8003d9e:	f7fe fd4f 	bl	8002840 <_PreparePacket>
 8003da2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003da8:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	623b      	str	r3, [r7, #32]
 8003dba:	e00b      	b.n	8003dd4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	1c59      	adds	r1, r3, #1
 8003dc4:	6279      	str	r1, [r7, #36]	; 0x24
 8003dc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	09db      	lsrs	r3, r3, #7
 8003dd2:	623b      	str	r3, [r7, #32]
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8003dd8:	d8f0      	bhi.n	8003dbc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	627a      	str	r2, [r7, #36]	; 0x24
 8003de0:	6a3a      	ldr	r2, [r7, #32]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	e00b      	b.n	8003e0c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	1c59      	adds	r1, r3, #1
 8003dfc:	61f9      	str	r1, [r7, #28]
 8003dfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	09db      	lsrs	r3, r3, #7
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8003e10:	d8f0      	bhi.n	8003df4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	61fa      	str	r2, [r7, #28]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8003e22:	2207      	movs	r2, #7
 8003e24:	68f9      	ldr	r1, [r7, #12]
 8003e26:	6938      	ldr	r0, [r7, #16]
 8003e28:	f7fe fdfc 	bl	8002a24 <_SendPacket>
  RECORD_END();
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f383 8811 	msr	BASEPRI, r3
}
 8003e32:	bf00      	nop
 8003e34:	3728      	adds	r7, #40	; 0x28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20014258 	.word	0x20014258
 8003e40:	20014228 	.word	0x20014228

08003e44 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08c      	sub	sp, #48	; 0x30
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003e4e:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d06d      	beq.n	8003f32 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003e56:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e60:	e008      	b.n	8003e74 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	3301      	adds	r3, #1
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d3f2      	bcc.n	8003e62 <SEGGER_SYSVIEW_SendModule+0x1e>
 8003e7c:	e000      	b.n	8003e80 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003e7e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d055      	beq.n	8003f32 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e86:	f3ef 8311 	mrs	r3, BASEPRI
 8003e8a:	f04f 0120 	mov.w	r1, #32
 8003e8e:	f381 8811 	msr	BASEPRI, r1
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	482a      	ldr	r0, [pc, #168]	; (8003f40 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003e96:	f7fe fcd3 	bl	8002840 <_PreparePacket>
 8003e9a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	623b      	str	r3, [r7, #32]
 8003ea8:	e00b      	b.n	8003ec2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	1c59      	adds	r1, r3, #1
 8003eb2:	6279      	str	r1, [r7, #36]	; 0x24
 8003eb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	09db      	lsrs	r3, r3, #7
 8003ec0:	623b      	str	r3, [r7, #32]
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ec6:	d8f0      	bhi.n	8003eaa <SEGGER_SYSVIEW_SendModule+0x66>
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	627a      	str	r2, [r7, #36]	; 0x24
 8003ece:	6a3a      	ldr	r2, [r7, #32]
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	e00b      	b.n	8003efc <SEGGER_SYSVIEW_SendModule+0xb8>
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	1c59      	adds	r1, r3, #1
 8003eec:	61f9      	str	r1, [r7, #28]
 8003eee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	09db      	lsrs	r3, r3, #7
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b7f      	cmp	r3, #127	; 0x7f
 8003f00:	d8f0      	bhi.n	8003ee4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	61fa      	str	r2, [r7, #28]
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	4619      	mov	r1, r3
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7fe fc40 	bl	80027a0 <_EncodeStr>
 8003f20:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003f22:	2216      	movs	r2, #22
 8003f24:	68f9      	ldr	r1, [r7, #12]
 8003f26:	6938      	ldr	r0, [r7, #16]
 8003f28:	f7fe fd7c 	bl	8002a24 <_SendPacket>
      RECORD_END();
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003f32:	bf00      	nop
 8003f34:	3730      	adds	r7, #48	; 0x30
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20014250 	.word	0x20014250
 8003f40:	20014258 	.word	0x20014258

08003f44 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00f      	beq.n	8003f72 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f2      	bne.n	8003f58 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20014250 	.word	0x20014250

08003f80 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003f86:	f3ef 8311 	mrs	r3, BASEPRI
 8003f8a:	f04f 0120 	mov.w	r1, #32
 8003f8e:	f381 8811 	msr	BASEPRI, r1
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	4817      	ldr	r0, [pc, #92]	; (8003ff4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003f96:	f7fe fc53 	bl	8002840 <_PreparePacket>
 8003f9a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	e00b      	b.n	8003fc4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	1c59      	adds	r1, r3, #1
 8003fb4:	6179      	str	r1, [r7, #20]
 8003fb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	09db      	lsrs	r3, r3, #7
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8003fc8:	d8f0      	bhi.n	8003fac <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	617a      	str	r2, [r7, #20]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003fda:	221b      	movs	r2, #27
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	68b8      	ldr	r0, [r7, #8]
 8003fe0:	f7fe fd20 	bl	8002a24 <_SendPacket>
  RECORD_END();
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f383 8811 	msr	BASEPRI, r3
}
 8003fea:	bf00      	nop
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20014258 	.word	0x20014258
 8003ff8:	20014254 	.word	0x20014254

08003ffc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8003ffc:	b40f      	push	{r0, r1, r2, r3}
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8004004:	f107 0314 	add.w	r3, r7, #20
 8004008:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	461a      	mov	r2, r3
 800400e:	2100      	movs	r1, #0
 8004010:	6938      	ldr	r0, [r7, #16]
 8004012:	f7fe ff91 	bl	8002f38 <_VPrintTarget>
  va_end(ParamList);
}
 8004016:	bf00      	nop
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004020:	b004      	add	sp, #16
 8004022:	4770      	bx	lr

08004024 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	; 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800402c:	f3ef 8311 	mrs	r3, BASEPRI
 8004030:	f04f 0120 	mov.w	r1, #32
 8004034:	f381 8811 	msr	BASEPRI, r1
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	4827      	ldr	r0, [pc, #156]	; (80040d8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800403c:	f7fe fc00 	bl	8002840 <_PreparePacket>
 8004040:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004042:	2280      	movs	r2, #128	; 0x80
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	6938      	ldr	r0, [r7, #16]
 8004048:	f7fe fbaa 	bl	80027a0 <_EncodeStr>
 800404c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
 8004052:	2301      	movs	r3, #1
 8004054:	623b      	str	r3, [r7, #32]
 8004056:	e00b      	b.n	8004070 <SEGGER_SYSVIEW_Warn+0x4c>
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	b2da      	uxtb	r2, r3
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	1c59      	adds	r1, r3, #1
 8004060:	6279      	str	r1, [r7, #36]	; 0x24
 8004062:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	09db      	lsrs	r3, r3, #7
 800406e:	623b      	str	r3, [r7, #32]
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	2b7f      	cmp	r3, #127	; 0x7f
 8004074:	d8f0      	bhi.n	8004058 <SEGGER_SYSVIEW_Warn+0x34>
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	627a      	str	r2, [r7, #36]	; 0x24
 800407c:	6a3a      	ldr	r2, [r7, #32]
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	e00b      	b.n	80040a8 <SEGGER_SYSVIEW_Warn+0x84>
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	b2da      	uxtb	r2, r3
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	1c59      	adds	r1, r3, #1
 8004098:	61f9      	str	r1, [r7, #28]
 800409a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	09db      	lsrs	r3, r3, #7
 80040a6:	61bb      	str	r3, [r7, #24]
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b7f      	cmp	r3, #127	; 0x7f
 80040ac:	d8f0      	bhi.n	8004090 <SEGGER_SYSVIEW_Warn+0x6c>
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	61fa      	str	r2, [r7, #28]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80040be:	221a      	movs	r2, #26
 80040c0:	68f9      	ldr	r1, [r7, #12]
 80040c2:	6938      	ldr	r0, [r7, #16]
 80040c4:	f7fe fcae 	bl	8002a24 <_SendPacket>
  RECORD_END();
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f383 8811 	msr	BASEPRI, r3
}
 80040ce:	bf00      	nop
 80040d0:	3728      	adds	r7, #40	; 0x28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20014258 	.word	0x20014258

080040dc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80040e0:	4b13      	ldr	r3, [pc, #76]	; (8004130 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80040e2:	7e1b      	ldrb	r3, [r3, #24]
 80040e4:	4619      	mov	r1, r3
 80040e6:	4a13      	ldr	r2, [pc, #76]	; (8004134 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80040e8:	460b      	mov	r3, r1
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	440b      	add	r3, r1
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	336c      	adds	r3, #108	; 0x6c
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80040f8:	7e1b      	ldrb	r3, [r3, #24]
 80040fa:	4618      	mov	r0, r3
 80040fc:	490d      	ldr	r1, [pc, #52]	; (8004134 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80040fe:	4603      	mov	r3, r0
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4403      	add	r3, r0
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	440b      	add	r3, r1
 8004108:	3370      	adds	r3, #112	; 0x70
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d00b      	beq.n	8004128 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004112:	789b      	ldrb	r3, [r3, #2]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d107      	bne.n	8004128 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800411a:	2201      	movs	r2, #1
 800411c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800411e:	f7fe fb9b 	bl	8002858 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004122:	4b03      	ldr	r3, [pc, #12]	; (8004130 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004124:	2200      	movs	r2, #0
 8004126:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8004128:	4b01      	ldr	r3, [pc, #4]	; (8004130 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800412a:	781b      	ldrb	r3, [r3, #0]
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20014228 	.word	0x20014228
 8004134:	2001433c 	.word	0x2001433c

08004138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800413e:	f000 fb83 	bl	8004848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004142:	f000 f86d 	bl	8004220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004146:	f000 f8d5 	bl	80042f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter (for SEGGER)
  DWT_CTRL |= (1 << 0);
 800414a:	4b2d      	ldr	r3, [pc, #180]	; (8004200 <main+0xc8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a2c      	ldr	r2, [pc, #176]	; (8004200 <main+0xc8>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6013      	str	r3, [r2, #0]

  // Config. uart based SEGGER communication
  SEGGER_UART_init(250000);
 8004156:	482b      	ldr	r0, [pc, #172]	; (8004204 <main+0xcc>)
 8004158:	f7fd feca 	bl	8001ef0 <SEGGER_UART_init>

  // Starting the recording (for SEGGER)
  SEGGER_SYSVIEW_Conf();
 800415c:	f7fd fcfa 	bl	8001b54 <SEGGER_SYSVIEW_Conf>

  // Config. Task 1
  status = xTaskCreate(&led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8004160:	f107 030c 	add.w	r3, r7, #12
 8004164:	9301      	str	r3, [sp, #4]
 8004166:	2302      	movs	r3, #2
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	2300      	movs	r3, #0
 800416c:	22c8      	movs	r2, #200	; 0xc8
 800416e:	4926      	ldr	r1, [pc, #152]	; (8004208 <main+0xd0>)
 8004170:	4826      	ldr	r0, [pc, #152]	; (800420c <main+0xd4>)
 8004172:	f7fc faa7 	bl	80006c4 <xTaskCreate>
 8004176:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d00a      	beq.n	8004194 <main+0x5c>
        __asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	61bb      	str	r3, [r7, #24]
    }
 8004190:	bf00      	nop
 8004192:	e7fe      	b.n	8004192 <main+0x5a>

  // Config. Task 2
  status = xTaskCreate(&led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 8004194:	f107 0308 	add.w	r3, r7, #8
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	2302      	movs	r3, #2
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	2300      	movs	r3, #0
 80041a0:	22c8      	movs	r2, #200	; 0xc8
 80041a2:	491b      	ldr	r1, [pc, #108]	; (8004210 <main+0xd8>)
 80041a4:	481b      	ldr	r0, [pc, #108]	; (8004214 <main+0xdc>)
 80041a6:	f7fc fa8d 	bl	80006c4 <xTaskCreate>
 80041aa:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d00a      	beq.n	80041c8 <main+0x90>
        __asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	617b      	str	r3, [r7, #20]
    }
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <main+0x8e>

  // Config. Task 3
  status = xTaskCreate(&led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80041c8:	1d3b      	adds	r3, r7, #4
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	2302      	movs	r3, #2
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	2300      	movs	r3, #0
 80041d2:	22c8      	movs	r2, #200	; 0xc8
 80041d4:	4910      	ldr	r1, [pc, #64]	; (8004218 <main+0xe0>)
 80041d6:	4811      	ldr	r0, [pc, #68]	; (800421c <main+0xe4>)
 80041d8:	f7fc fa74 	bl	80006c4 <xTaskCreate>
 80041dc:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d00a      	beq.n	80041fa <main+0xc2>
        __asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	613b      	str	r3, [r7, #16]
    }
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <main+0xc0>

  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 80041fa:	f7fc fc49 	bl	8000a90 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80041fe:	e7fe      	b.n	80041fe <main+0xc6>
 8004200:	e0001000 	.word	0xe0001000
 8004204:	0003d090 	.word	0x0003d090
 8004208:	08005e2c 	.word	0x08005e2c
 800420c:	080045b5 	.word	0x080045b5
 8004210:	08005e3c 	.word	0x08005e3c
 8004214:	08004625 	.word	0x08004625
 8004218:	08005e4c 	.word	0x08005e4c
 800421c:	080045ed 	.word	0x080045ed

08004220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b094      	sub	sp, #80	; 0x50
 8004224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004226:	f107 0320 	add.w	r3, r7, #32
 800422a:	2230      	movs	r2, #48	; 0x30
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f001 fd7e 	bl	8005d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004234:	f107 030c 	add.w	r3, r7, #12
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004244:	2300      	movs	r3, #0
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	4b28      	ldr	r3, [pc, #160]	; (80042ec <SystemClock_Config+0xcc>)
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	4a27      	ldr	r2, [pc, #156]	; (80042ec <SystemClock_Config+0xcc>)
 800424e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004252:	6413      	str	r3, [r2, #64]	; 0x40
 8004254:	4b25      	ldr	r3, [pc, #148]	; (80042ec <SystemClock_Config+0xcc>)
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004260:	2300      	movs	r3, #0
 8004262:	607b      	str	r3, [r7, #4]
 8004264:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <SystemClock_Config+0xd0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a21      	ldr	r2, [pc, #132]	; (80042f0 <SystemClock_Config+0xd0>)
 800426a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <SystemClock_Config+0xd0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800427c:	2302      	movs	r3, #2
 800427e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004280:	2301      	movs	r3, #1
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004284:	2310      	movs	r3, #16
 8004286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004288:	2302      	movs	r3, #2
 800428a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800428c:	2300      	movs	r3, #0
 800428e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004290:	2308      	movs	r3, #8
 8004292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004294:	23a8      	movs	r3, #168	; 0xa8
 8004296:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004298:	2302      	movs	r3, #2
 800429a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800429c:	2307      	movs	r3, #7
 800429e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042a0:	f107 0320 	add.w	r3, r7, #32
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fdc3 	bl	8004e30 <HAL_RCC_OscConfig>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80042b0:	f000 f9e6 	bl	8004680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042b4:	230f      	movs	r3, #15
 80042b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042b8:	2302      	movs	r3, #2
 80042ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80042c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80042c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80042c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80042cc:	f107 030c 	add.w	r3, r7, #12
 80042d0:	2105      	movs	r1, #5
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 f824 	bl	8005320 <HAL_RCC_ClockConfig>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80042de:	f000 f9cf 	bl	8004680 <Error_Handler>
  }
}
 80042e2:	bf00      	nop
 80042e4:	3750      	adds	r7, #80	; 0x50
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40007000 	.word	0x40007000

080042f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08c      	sub	sp, #48	; 0x30
 80042f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042fa:	f107 031c 	add.w	r3, r7, #28
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	605a      	str	r2, [r3, #4]
 8004304:	609a      	str	r2, [r3, #8]
 8004306:	60da      	str	r2, [r3, #12]
 8004308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	4ba1      	ldr	r3, [pc, #644]	; (8004594 <MX_GPIO_Init+0x2a0>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	4aa0      	ldr	r2, [pc, #640]	; (8004594 <MX_GPIO_Init+0x2a0>)
 8004314:	f043 0310 	orr.w	r3, r3, #16
 8004318:	6313      	str	r3, [r2, #48]	; 0x30
 800431a:	4b9e      	ldr	r3, [pc, #632]	; (8004594 <MX_GPIO_Init+0x2a0>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	4b9a      	ldr	r3, [pc, #616]	; (8004594 <MX_GPIO_Init+0x2a0>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	4a99      	ldr	r2, [pc, #612]	; (8004594 <MX_GPIO_Init+0x2a0>)
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	6313      	str	r3, [r2, #48]	; 0x30
 8004336:	4b97      	ldr	r3, [pc, #604]	; (8004594 <MX_GPIO_Init+0x2a0>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	4b93      	ldr	r3, [pc, #588]	; (8004594 <MX_GPIO_Init+0x2a0>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	4a92      	ldr	r2, [pc, #584]	; (8004594 <MX_GPIO_Init+0x2a0>)
 800434c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004350:	6313      	str	r3, [r2, #48]	; 0x30
 8004352:	4b90      	ldr	r3, [pc, #576]	; (8004594 <MX_GPIO_Init+0x2a0>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	4b8c      	ldr	r3, [pc, #560]	; (8004594 <MX_GPIO_Init+0x2a0>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	4a8b      	ldr	r2, [pc, #556]	; (8004594 <MX_GPIO_Init+0x2a0>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6313      	str	r3, [r2, #48]	; 0x30
 800436e:	4b89      	ldr	r3, [pc, #548]	; (8004594 <MX_GPIO_Init+0x2a0>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	4b85      	ldr	r3, [pc, #532]	; (8004594 <MX_GPIO_Init+0x2a0>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	4a84      	ldr	r2, [pc, #528]	; (8004594 <MX_GPIO_Init+0x2a0>)
 8004384:	f043 0302 	orr.w	r3, r3, #2
 8004388:	6313      	str	r3, [r2, #48]	; 0x30
 800438a:	4b82      	ldr	r3, [pc, #520]	; (8004594 <MX_GPIO_Init+0x2a0>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	60bb      	str	r3, [r7, #8]
 8004394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	4b7e      	ldr	r3, [pc, #504]	; (8004594 <MX_GPIO_Init+0x2a0>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	4a7d      	ldr	r2, [pc, #500]	; (8004594 <MX_GPIO_Init+0x2a0>)
 80043a0:	f043 0308 	orr.w	r3, r3, #8
 80043a4:	6313      	str	r3, [r2, #48]	; 0x30
 80043a6:	4b7b      	ldr	r3, [pc, #492]	; (8004594 <MX_GPIO_Init+0x2a0>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	607b      	str	r3, [r7, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80043b2:	2200      	movs	r2, #0
 80043b4:	2108      	movs	r1, #8
 80043b6:	4878      	ldr	r0, [pc, #480]	; (8004598 <MX_GPIO_Init+0x2a4>)
 80043b8:	f000 fd06 	bl	8004dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80043bc:	2201      	movs	r2, #1
 80043be:	2101      	movs	r1, #1
 80043c0:	4876      	ldr	r0, [pc, #472]	; (800459c <MX_GPIO_Init+0x2a8>)
 80043c2:	f000 fd01 	bl	8004dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80043c6:	2200      	movs	r2, #0
 80043c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80043cc:	4874      	ldr	r0, [pc, #464]	; (80045a0 <MX_GPIO_Init+0x2ac>)
 80043ce:	f000 fcfb 	bl	8004dc8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80043d2:	2308      	movs	r3, #8
 80043d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043d6:	2301      	movs	r3, #1
 80043d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043de:	2300      	movs	r3, #0
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80043e2:	f107 031c 	add.w	r3, r7, #28
 80043e6:	4619      	mov	r1, r3
 80043e8:	486b      	ldr	r0, [pc, #428]	; (8004598 <MX_GPIO_Init+0x2a4>)
 80043ea:	f000 fb51 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80043ee:	2301      	movs	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043f2:	2301      	movs	r3, #1
 80043f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043fa:	2300      	movs	r3, #0
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80043fe:	f107 031c 	add.w	r3, r7, #28
 8004402:	4619      	mov	r1, r3
 8004404:	4865      	ldr	r0, [pc, #404]	; (800459c <MX_GPIO_Init+0x2a8>)
 8004406:	f000 fb43 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800440a:	2308      	movs	r3, #8
 800440c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440e:	2302      	movs	r3, #2
 8004410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004412:	2300      	movs	r3, #0
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004416:	2300      	movs	r3, #0
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800441a:	2305      	movs	r3, #5
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800441e:	f107 031c 	add.w	r3, r7, #28
 8004422:	4619      	mov	r1, r3
 8004424:	485d      	ldr	r0, [pc, #372]	; (800459c <MX_GPIO_Init+0x2a8>)
 8004426:	f000 fb33 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800442a:	2301      	movs	r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800442e:	4b5d      	ldr	r3, [pc, #372]	; (80045a4 <MX_GPIO_Init+0x2b0>)
 8004430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004432:	2300      	movs	r3, #0
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004436:	f107 031c 	add.w	r3, r7, #28
 800443a:	4619      	mov	r1, r3
 800443c:	485a      	ldr	r0, [pc, #360]	; (80045a8 <MX_GPIO_Init+0x2b4>)
 800443e:	f000 fb27 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8004442:	2310      	movs	r3, #16
 8004444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004446:	2302      	movs	r3, #2
 8004448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	2300      	movs	r3, #0
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444e:	2300      	movs	r3, #0
 8004450:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004452:	2306      	movs	r3, #6
 8004454:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004456:	f107 031c 	add.w	r3, r7, #28
 800445a:	4619      	mov	r1, r3
 800445c:	4852      	ldr	r0, [pc, #328]	; (80045a8 <MX_GPIO_Init+0x2b4>)
 800445e:	f000 fb17 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004462:	23e0      	movs	r3, #224	; 0xe0
 8004464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004466:	2302      	movs	r3, #2
 8004468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446e:	2300      	movs	r3, #0
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004472:	2305      	movs	r3, #5
 8004474:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004476:	f107 031c 	add.w	r3, r7, #28
 800447a:	4619      	mov	r1, r3
 800447c:	484a      	ldr	r0, [pc, #296]	; (80045a8 <MX_GPIO_Init+0x2b4>)
 800447e:	f000 fb07 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004482:	2304      	movs	r3, #4
 8004484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004486:	2300      	movs	r3, #0
 8004488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448a:	2300      	movs	r3, #0
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800448e:	f107 031c 	add.w	r3, r7, #28
 8004492:	4619      	mov	r1, r3
 8004494:	4845      	ldr	r0, [pc, #276]	; (80045ac <MX_GPIO_Init+0x2b8>)
 8004496:	f000 fafb 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800449a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800449e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a0:	2302      	movs	r3, #2
 80044a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a8:	2300      	movs	r3, #0
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80044ac:	2305      	movs	r3, #5
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80044b0:	f107 031c 	add.w	r3, r7, #28
 80044b4:	4619      	mov	r1, r3
 80044b6:	483d      	ldr	r0, [pc, #244]	; (80045ac <MX_GPIO_Init+0x2b8>)
 80044b8:	f000 faea 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80044bc:	f24f 0310 	movw	r3, #61456	; 0xf010
 80044c0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044c2:	2301      	movs	r3, #1
 80044c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ca:	2300      	movs	r3, #0
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044ce:	f107 031c 	add.w	r3, r7, #28
 80044d2:	4619      	mov	r1, r3
 80044d4:	4832      	ldr	r0, [pc, #200]	; (80045a0 <MX_GPIO_Init+0x2ac>)
 80044d6:	f000 fadb 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80044da:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80044de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e0:	2302      	movs	r3, #2
 80044e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e8:	2300      	movs	r3, #0
 80044ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80044ec:	2306      	movs	r3, #6
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044f0:	f107 031c 	add.w	r3, r7, #28
 80044f4:	4619      	mov	r1, r3
 80044f6:	4829      	ldr	r0, [pc, #164]	; (800459c <MX_GPIO_Init+0x2a8>)
 80044f8:	f000 faca 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80044fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004502:	2300      	movs	r3, #0
 8004504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004506:	2300      	movs	r3, #0
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800450a:	f107 031c 	add.w	r3, r7, #28
 800450e:	4619      	mov	r1, r3
 8004510:	4825      	ldr	r0, [pc, #148]	; (80045a8 <MX_GPIO_Init+0x2b4>)
 8004512:	f000 fabd 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004516:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800451a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451c:	2302      	movs	r3, #2
 800451e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004520:	2300      	movs	r3, #0
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004524:	2300      	movs	r3, #0
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004528:	230a      	movs	r3, #10
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800452c:	f107 031c 	add.w	r3, r7, #28
 8004530:	4619      	mov	r1, r3
 8004532:	481d      	ldr	r0, [pc, #116]	; (80045a8 <MX_GPIO_Init+0x2b4>)
 8004534:	f000 faac 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004538:	2320      	movs	r3, #32
 800453a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800453c:	2300      	movs	r3, #0
 800453e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	2300      	movs	r3, #0
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004544:	f107 031c 	add.w	r3, r7, #28
 8004548:	4619      	mov	r1, r3
 800454a:	4815      	ldr	r0, [pc, #84]	; (80045a0 <MX_GPIO_Init+0x2ac>)
 800454c:	f000 faa0 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004550:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004556:	2312      	movs	r3, #18
 8004558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800455a:	2301      	movs	r3, #1
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800455e:	2300      	movs	r3, #0
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004562:	2304      	movs	r3, #4
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004566:	f107 031c 	add.w	r3, r7, #28
 800456a:	4619      	mov	r1, r3
 800456c:	480f      	ldr	r0, [pc, #60]	; (80045ac <MX_GPIO_Init+0x2b8>)
 800456e:	f000 fa8f 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004572:	2302      	movs	r3, #2
 8004574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004576:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <MX_GPIO_Init+0x2bc>)
 8004578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457a:	2300      	movs	r3, #0
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800457e:	f107 031c 	add.w	r3, r7, #28
 8004582:	4619      	mov	r1, r3
 8004584:	4804      	ldr	r0, [pc, #16]	; (8004598 <MX_GPIO_Init+0x2a4>)
 8004586:	f000 fa83 	bl	8004a90 <HAL_GPIO_Init>

}
 800458a:	bf00      	nop
 800458c:	3730      	adds	r7, #48	; 0x30
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40023800 	.word	0x40023800
 8004598:	40021000 	.word	0x40021000
 800459c:	40020800 	.word	0x40020800
 80045a0:	40020c00 	.word	0x40020c00
 80045a4:	10110000 	.word	0x10110000
 80045a8:	40020000 	.word	0x40020000
 80045ac:	40020400 	.word	0x40020400
 80045b0:	10120000 	.word	0x10120000

080045b4 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters){
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80045bc:	f7fc fb72 	bl	8000ca4 <xTaskGetTickCount>
 80045c0:	4603      	mov	r3, r0
 80045c2:	60fb      	str	r3, [r7, #12]

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80045c4:	4807      	ldr	r0, [pc, #28]	; (80045e4 <led_green_handler+0x30>)
 80045c6:	f7ff fd19 	bl	8003ffc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80045ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045ce:	4806      	ldr	r0, [pc, #24]	; (80045e8 <led_green_handler+0x34>)
 80045d0:	f000 fc13 	bl	8004dfa <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000));  // Esse tipo de delay preserva a fase do sinal, mesmo que outras tarefas eventualmente atrasem a execução desta.
 80045d4:	f107 030c 	add.w	r3, r7, #12
 80045d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fc f9d5 	bl	800098c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80045e2:	e7ef      	b.n	80045c4 <led_green_handler+0x10>
 80045e4:	08005e5c 	.word	0x08005e5c
 80045e8:	40020c00 	.word	0x40020c00

080045ec <led_orange_handler>:
	}

}

static void led_orange_handler(void* parameters){
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]

	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80045f4:	f7fc fb56 	bl	8000ca4 <xTaskGetTickCount>
 80045f8:	4603      	mov	r3, r0
 80045fa:	60fb      	str	r3, [r7, #12]

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80045fc:	4807      	ldr	r0, [pc, #28]	; (800461c <led_orange_handler+0x30>)
 80045fe:	f7ff fcfd 	bl	8003ffc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8004602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004606:	4806      	ldr	r0, [pc, #24]	; (8004620 <led_orange_handler+0x34>)
 8004608:	f000 fbf7 	bl	8004dfa <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(800));
 800460c:	f107 030c 	add.w	r3, r7, #12
 8004610:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004614:	4618      	mov	r0, r3
 8004616:	f7fc f9b9 	bl	800098c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800461a:	e7ef      	b.n	80045fc <led_orange_handler+0x10>
 800461c:	08005e70 	.word	0x08005e70
 8004620:	40020c00 	.word	0x40020c00

08004624 <led_red_handler>:
	}

}

static void led_red_handler(void* parameters){
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]


	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 800462c:	f7fc fb3a 	bl	8000ca4 <xTaskGetTickCount>
 8004630:	4603      	mov	r3, r0
 8004632:	60fb      	str	r3, [r7, #12]

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8004634:	4807      	ldr	r0, [pc, #28]	; (8004654 <led_red_handler+0x30>)
 8004636:	f7ff fce1 	bl	8003ffc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 800463a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800463e:	4806      	ldr	r0, [pc, #24]	; (8004658 <led_red_handler+0x34>)
 8004640:	f000 fbdb 	bl	8004dfa <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400));
 8004644:	f107 030c 	add.w	r3, r7, #12
 8004648:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800464c:	4618      	mov	r0, r3
 800464e:	f7fc f99d 	bl	800098c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8004652:	e7ef      	b.n	8004634 <led_red_handler+0x10>
 8004654:	08005e84 	.word	0x08005e84
 8004658:	40020c00 	.word	0x40020c00

0800465c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a04      	ldr	r2, [pc, #16]	; (800467c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d101      	bne.n	8004672 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800466e:	f000 f90d 	bl	800488c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40001000 	.word	0x40001000

08004680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004684:	b672      	cpsid	i
}
 8004686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004688:	e7fe      	b.n	8004688 <Error_Handler+0x8>
	...

0800468c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <HAL_MspInit+0x4c>)
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	4a0f      	ldr	r2, [pc, #60]	; (80046d8 <HAL_MspInit+0x4c>)
 800469c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046a0:	6453      	str	r3, [r2, #68]	; 0x44
 80046a2:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <HAL_MspInit+0x4c>)
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <HAL_MspInit+0x4c>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <HAL_MspInit+0x4c>)
 80046b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046bc:	6413      	str	r3, [r2, #64]	; 0x40
 80046be:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <HAL_MspInit+0x4c>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 80046ca:	f7fc fe8d 	bl	80013e8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800

080046dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08c      	sub	sp, #48	; 0x30
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80046ec:	2200      	movs	r2, #0
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	2036      	movs	r0, #54	; 0x36
 80046f2:	f000 f9a3 	bl	8004a3c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80046f6:	2036      	movs	r0, #54	; 0x36
 80046f8:	f000 f9bc 	bl	8004a74 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <HAL_InitTick+0xa4>)
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <HAL_InitTick+0xa4>)
 8004706:	f043 0310 	orr.w	r3, r3, #16
 800470a:	6413      	str	r3, [r2, #64]	; 0x40
 800470c:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <HAL_InitTick+0xa4>)
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004718:	f107 0210 	add.w	r2, r7, #16
 800471c:	f107 0314 	add.w	r3, r7, #20
 8004720:	4611      	mov	r1, r2
 8004722:	4618      	mov	r0, r3
 8004724:	f000 ffe4 	bl	80056f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004728:	f000 ffce 	bl	80056c8 <HAL_RCC_GetPCLK1Freq>
 800472c:	4603      	mov	r3, r0
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	4a13      	ldr	r2, [pc, #76]	; (8004784 <HAL_InitTick+0xa8>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	0c9b      	lsrs	r3, r3, #18
 800473c:	3b01      	subs	r3, #1
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004740:	4b11      	ldr	r3, [pc, #68]	; (8004788 <HAL_InitTick+0xac>)
 8004742:	4a12      	ldr	r2, [pc, #72]	; (800478c <HAL_InitTick+0xb0>)
 8004744:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <HAL_InitTick+0xac>)
 8004748:	f240 32e7 	movw	r2, #999	; 0x3e7
 800474c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800474e:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <HAL_InitTick+0xac>)
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_InitTick+0xac>)
 8004756:	2200      	movs	r2, #0
 8004758:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_InitTick+0xac>)
 800475c:	2200      	movs	r2, #0
 800475e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004760:	4809      	ldr	r0, [pc, #36]	; (8004788 <HAL_InitTick+0xac>)
 8004762:	f000 fff7 	bl	8005754 <HAL_TIM_Base_Init>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800476c:	4806      	ldr	r0, [pc, #24]	; (8004788 <HAL_InitTick+0xac>)
 800476e:	f001 f84b 	bl	8005808 <HAL_TIM_Base_Start_IT>
 8004772:	4603      	mov	r3, r0
 8004774:	e000      	b.n	8004778 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
}
 8004778:	4618      	mov	r0, r3
 800477a:	3730      	adds	r7, #48	; 0x30
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40023800 	.word	0x40023800
 8004784:	431bde83 	.word	0x431bde83
 8004788:	200143e4 	.word	0x200143e4
 800478c:	40001000 	.word	0x40001000

08004790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004794:	e7fe      	b.n	8004794 <NMI_Handler+0x4>

08004796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004796:	b480      	push	{r7}
 8004798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800479a:	e7fe      	b.n	800479a <HardFault_Handler+0x4>

0800479c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047a0:	e7fe      	b.n	80047a0 <MemManage_Handler+0x4>

080047a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047a2:	b480      	push	{r7}
 80047a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047a6:	e7fe      	b.n	80047a6 <BusFault_Handler+0x4>

080047a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047ac:	e7fe      	b.n	80047ac <UsageFault_Handler+0x4>

080047ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047ae:	b480      	push	{r7}
 80047b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047b2:	bf00      	nop
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80047c0:	4802      	ldr	r0, [pc, #8]	; (80047cc <TIM6_DAC_IRQHandler+0x10>)
 80047c2:	f001 f891 	bl	80058e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80047c6:	bf00      	nop
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200143e4 	.word	0x200143e4

080047d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <SystemInit+0x20>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	4a05      	ldr	r2, [pc, #20]	; (80047f0 <SystemInit+0x20>)
 80047dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80047f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800482c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047f8:	480d      	ldr	r0, [pc, #52]	; (8004830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80047fa:	490e      	ldr	r1, [pc, #56]	; (8004834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80047fc:	4a0e      	ldr	r2, [pc, #56]	; (8004838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80047fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004800:	e002      	b.n	8004808 <LoopCopyDataInit>

08004802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004806:	3304      	adds	r3, #4

08004808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800480a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800480c:	d3f9      	bcc.n	8004802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800480e:	4a0b      	ldr	r2, [pc, #44]	; (800483c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004810:	4c0b      	ldr	r4, [pc, #44]	; (8004840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004814:	e001      	b.n	800481a <LoopFillZerobss>

08004816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004818:	3204      	adds	r2, #4

0800481a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800481a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800481c:	d3fb      	bcc.n	8004816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800481e:	f7ff ffd7 	bl	80047d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004822:	f001 fa45 	bl	8005cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004826:	f7ff fc87 	bl	8004138 <main>
  bx  lr    
 800482a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800482c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004834:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8004838:	08005ee8 	.word	0x08005ee8
  ldr r2, =_sbss
 800483c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8004840:	20014430 	.word	0x20014430

08004844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004844:	e7fe      	b.n	8004844 <ADC_IRQHandler>
	...

08004848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800484c:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <HAL_Init+0x40>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0d      	ldr	r2, [pc, #52]	; (8004888 <HAL_Init+0x40>)
 8004852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_Init+0x40>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <HAL_Init+0x40>)
 800485e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004864:	4b08      	ldr	r3, [pc, #32]	; (8004888 <HAL_Init+0x40>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a07      	ldr	r2, [pc, #28]	; (8004888 <HAL_Init+0x40>)
 800486a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004870:	2003      	movs	r0, #3
 8004872:	f000 f8d8 	bl	8004a26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004876:	2000      	movs	r0, #0
 8004878:	f7ff ff30 	bl	80046dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800487c:	f7ff ff06 	bl	800468c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40023c00 	.word	0x40023c00

0800488c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_IncTick+0x20>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <HAL_IncTick+0x24>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4413      	add	r3, r2
 800489c:	4a04      	ldr	r2, [pc, #16]	; (80048b0 <HAL_IncTick+0x24>)
 800489e:	6013      	str	r3, [r2, #0]
}
 80048a0:	bf00      	nop
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000018 	.word	0x20000018
 80048b0:	2001442c 	.word	0x2001442c

080048b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return uwTick;
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_GetTick+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	2001442c 	.word	0x2001442c

080048cc <__NVIC_SetPriorityGrouping>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048dc:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <__NVIC_SetPriorityGrouping+0x44>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048e8:	4013      	ands	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048fe:	4a04      	ldr	r2, [pc, #16]	; (8004910 <__NVIC_SetPriorityGrouping+0x44>)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	60d3      	str	r3, [r2, #12]
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	e000ed00 	.word	0xe000ed00

08004914 <__NVIC_GetPriorityGrouping>:
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004918:	4b04      	ldr	r3, [pc, #16]	; (800492c <__NVIC_GetPriorityGrouping+0x18>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	f003 0307 	and.w	r3, r3, #7
}
 8004922:	4618      	mov	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	e000ed00 	.word	0xe000ed00

08004930 <__NVIC_EnableIRQ>:
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800493a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493e:	2b00      	cmp	r3, #0
 8004940:	db0b      	blt.n	800495a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	f003 021f 	and.w	r2, r3, #31
 8004948:	4907      	ldr	r1, [pc, #28]	; (8004968 <__NVIC_EnableIRQ+0x38>)
 800494a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	2001      	movs	r0, #1
 8004952:	fa00 f202 	lsl.w	r2, r0, r2
 8004956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	e000e100 	.word	0xe000e100

0800496c <__NVIC_SetPriority>:
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	6039      	str	r1, [r7, #0]
 8004976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497c:	2b00      	cmp	r3, #0
 800497e:	db0a      	blt.n	8004996 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	490c      	ldr	r1, [pc, #48]	; (80049b8 <__NVIC_SetPriority+0x4c>)
 8004986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498a:	0112      	lsls	r2, r2, #4
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	440b      	add	r3, r1
 8004990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004994:	e00a      	b.n	80049ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	b2da      	uxtb	r2, r3
 800499a:	4908      	ldr	r1, [pc, #32]	; (80049bc <__NVIC_SetPriority+0x50>)
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	3b04      	subs	r3, #4
 80049a4:	0112      	lsls	r2, r2, #4
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	440b      	add	r3, r1
 80049aa:	761a      	strb	r2, [r3, #24]
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000e100 	.word	0xe000e100
 80049bc:	e000ed00 	.word	0xe000ed00

080049c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	; 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f1c3 0307 	rsb	r3, r3, #7
 80049da:	2b04      	cmp	r3, #4
 80049dc:	bf28      	it	cs
 80049de:	2304      	movcs	r3, #4
 80049e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	3304      	adds	r3, #4
 80049e6:	2b06      	cmp	r3, #6
 80049e8:	d902      	bls.n	80049f0 <NVIC_EncodePriority+0x30>
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	3b03      	subs	r3, #3
 80049ee:	e000      	b.n	80049f2 <NVIC_EncodePriority+0x32>
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43da      	mvns	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	401a      	ands	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a12:	43d9      	mvns	r1, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a18:	4313      	orrs	r3, r2
         );
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3724      	adds	r7, #36	; 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff ff4c 	bl	80048cc <__NVIC_SetPriorityGrouping>
}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a4e:	f7ff ff61 	bl	8004914 <__NVIC_GetPriorityGrouping>
 8004a52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	6978      	ldr	r0, [r7, #20]
 8004a5a:	f7ff ffb1 	bl	80049c0 <NVIC_EncodePriority>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a64:	4611      	mov	r1, r2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ff80 	bl	800496c <__NVIC_SetPriority>
}
 8004a6c:	bf00      	nop
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff ff54 	bl	8004930 <__NVIC_EnableIRQ>
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	; 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	e16b      	b.n	8004d84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004aac:	2201      	movs	r2, #1
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4013      	ands	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	f040 815a 	bne.w	8004d7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d005      	beq.n	8004ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d130      	bne.n	8004b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	2203      	movs	r2, #3
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	43db      	mvns	r3, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4013      	ands	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b18:	2201      	movs	r2, #1
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	4013      	ands	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	f003 0201 	and.w	r2, r3, #1
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d017      	beq.n	8004b80 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	2203      	movs	r2, #3
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	43db      	mvns	r3, r3
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	4013      	ands	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d123      	bne.n	8004bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	08da      	lsrs	r2, r3, #3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3208      	adds	r2, #8
 8004b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	220f      	movs	r2, #15
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	08da      	lsrs	r2, r3, #3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3208      	adds	r2, #8
 8004bce:	69b9      	ldr	r1, [r7, #24]
 8004bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	2203      	movs	r2, #3
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	43db      	mvns	r3, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4013      	ands	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f003 0203 	and.w	r2, r3, #3
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80b4 	beq.w	8004d7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	4b60      	ldr	r3, [pc, #384]	; (8004d9c <HAL_GPIO_Init+0x30c>)
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	4a5f      	ldr	r2, [pc, #380]	; (8004d9c <HAL_GPIO_Init+0x30c>)
 8004c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c24:	6453      	str	r3, [r2, #68]	; 0x44
 8004c26:	4b5d      	ldr	r3, [pc, #372]	; (8004d9c <HAL_GPIO_Init+0x30c>)
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c32:	4a5b      	ldr	r2, [pc, #364]	; (8004da0 <HAL_GPIO_Init+0x310>)
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	3302      	adds	r3, #2
 8004c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	220f      	movs	r2, #15
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	4013      	ands	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a52      	ldr	r2, [pc, #328]	; (8004da4 <HAL_GPIO_Init+0x314>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d02b      	beq.n	8004cb6 <HAL_GPIO_Init+0x226>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a51      	ldr	r2, [pc, #324]	; (8004da8 <HAL_GPIO_Init+0x318>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d025      	beq.n	8004cb2 <HAL_GPIO_Init+0x222>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a50      	ldr	r2, [pc, #320]	; (8004dac <HAL_GPIO_Init+0x31c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01f      	beq.n	8004cae <HAL_GPIO_Init+0x21e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a4f      	ldr	r2, [pc, #316]	; (8004db0 <HAL_GPIO_Init+0x320>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d019      	beq.n	8004caa <HAL_GPIO_Init+0x21a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a4e      	ldr	r2, [pc, #312]	; (8004db4 <HAL_GPIO_Init+0x324>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d013      	beq.n	8004ca6 <HAL_GPIO_Init+0x216>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a4d      	ldr	r2, [pc, #308]	; (8004db8 <HAL_GPIO_Init+0x328>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00d      	beq.n	8004ca2 <HAL_GPIO_Init+0x212>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a4c      	ldr	r2, [pc, #304]	; (8004dbc <HAL_GPIO_Init+0x32c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d007      	beq.n	8004c9e <HAL_GPIO_Init+0x20e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a4b      	ldr	r2, [pc, #300]	; (8004dc0 <HAL_GPIO_Init+0x330>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d101      	bne.n	8004c9a <HAL_GPIO_Init+0x20a>
 8004c96:	2307      	movs	r3, #7
 8004c98:	e00e      	b.n	8004cb8 <HAL_GPIO_Init+0x228>
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	e00c      	b.n	8004cb8 <HAL_GPIO_Init+0x228>
 8004c9e:	2306      	movs	r3, #6
 8004ca0:	e00a      	b.n	8004cb8 <HAL_GPIO_Init+0x228>
 8004ca2:	2305      	movs	r3, #5
 8004ca4:	e008      	b.n	8004cb8 <HAL_GPIO_Init+0x228>
 8004ca6:	2304      	movs	r3, #4
 8004ca8:	e006      	b.n	8004cb8 <HAL_GPIO_Init+0x228>
 8004caa:	2303      	movs	r3, #3
 8004cac:	e004      	b.n	8004cb8 <HAL_GPIO_Init+0x228>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e002      	b.n	8004cb8 <HAL_GPIO_Init+0x228>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <HAL_GPIO_Init+0x228>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	f002 0203 	and.w	r2, r2, #3
 8004cbe:	0092      	lsls	r2, r2, #2
 8004cc0:	4093      	lsls	r3, r2
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cc8:	4935      	ldr	r1, [pc, #212]	; (8004da0 <HAL_GPIO_Init+0x310>)
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	089b      	lsrs	r3, r3, #2
 8004cce:	3302      	adds	r3, #2
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cd6:	4b3b      	ldr	r3, [pc, #236]	; (8004dc4 <HAL_GPIO_Init+0x334>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cfa:	4a32      	ldr	r2, [pc, #200]	; (8004dc4 <HAL_GPIO_Init+0x334>)
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d00:	4b30      	ldr	r3, [pc, #192]	; (8004dc4 <HAL_GPIO_Init+0x334>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d24:	4a27      	ldr	r2, [pc, #156]	; (8004dc4 <HAL_GPIO_Init+0x334>)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d2a:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <HAL_GPIO_Init+0x334>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	43db      	mvns	r3, r3
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4013      	ands	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d4e:	4a1d      	ldr	r2, [pc, #116]	; (8004dc4 <HAL_GPIO_Init+0x334>)
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d54:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <HAL_GPIO_Init+0x334>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4013      	ands	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d78:	4a12      	ldr	r2, [pc, #72]	; (8004dc4 <HAL_GPIO_Init+0x334>)
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	3301      	adds	r3, #1
 8004d82:	61fb      	str	r3, [r7, #28]
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b0f      	cmp	r3, #15
 8004d88:	f67f ae90 	bls.w	8004aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	bf00      	nop
 8004d90:	3724      	adds	r7, #36	; 0x24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40013800 	.word	0x40013800
 8004da4:	40020000 	.word	0x40020000
 8004da8:	40020400 	.word	0x40020400
 8004dac:	40020800 	.word	0x40020800
 8004db0:	40020c00 	.word	0x40020c00
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40021400 	.word	0x40021400
 8004dbc:	40021800 	.word	0x40021800
 8004dc0:	40021c00 	.word	0x40021c00
 8004dc4:	40013c00 	.word	0x40013c00

08004dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	807b      	strh	r3, [r7, #2]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dd8:	787b      	ldrb	r3, [r7, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dde:	887a      	ldrh	r2, [r7, #2]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004de4:	e003      	b.n	8004dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004de6:	887b      	ldrh	r3, [r7, #2]
 8004de8:	041a      	lsls	r2, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	619a      	str	r2, [r3, #24]
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e0c:	887a      	ldrh	r2, [r7, #2]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4013      	ands	r3, r2
 8004e12:	041a      	lsls	r2, r3, #16
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	43d9      	mvns	r1, r3
 8004e18:	887b      	ldrh	r3, [r7, #2]
 8004e1a:	400b      	ands	r3, r1
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	619a      	str	r2, [r3, #24]
}
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e264      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d075      	beq.n	8004f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e4e:	4ba3      	ldr	r3, [pc, #652]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d00c      	beq.n	8004e74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e5a:	4ba0      	ldr	r3, [pc, #640]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d112      	bne.n	8004e8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e66:	4b9d      	ldr	r3, [pc, #628]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e72:	d10b      	bne.n	8004e8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e74:	4b99      	ldr	r3, [pc, #612]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d05b      	beq.n	8004f38 <HAL_RCC_OscConfig+0x108>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d157      	bne.n	8004f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e23f      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e94:	d106      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x74>
 8004e96:	4b91      	ldr	r3, [pc, #580]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a90      	ldr	r2, [pc, #576]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e01d      	b.n	8004ee0 <HAL_RCC_OscConfig+0xb0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x98>
 8004eae:	4b8b      	ldr	r3, [pc, #556]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a8a      	ldr	r2, [pc, #552]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	4b88      	ldr	r3, [pc, #544]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a87      	ldr	r2, [pc, #540]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCC_OscConfig+0xb0>
 8004ec8:	4b84      	ldr	r3, [pc, #528]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a83      	ldr	r2, [pc, #524]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	4b81      	ldr	r3, [pc, #516]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a80      	ldr	r2, [pc, #512]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d013      	beq.n	8004f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee8:	f7ff fce4 	bl	80048b4 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7ff fce0 	bl	80048b4 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	; 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e204      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f02:	4b76      	ldr	r3, [pc, #472]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0xc0>
 8004f0e:	e014      	b.n	8004f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7ff fcd0 	bl	80048b4 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f18:	f7ff fccc 	bl	80048b4 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	; 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e1f0      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2a:	4b6c      	ldr	r3, [pc, #432]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0xe8>
 8004f36:	e000      	b.n	8004f3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d063      	beq.n	800500e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f46:	4b65      	ldr	r3, [pc, #404]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 030c 	and.w	r3, r3, #12
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00b      	beq.n	8004f6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f52:	4b62      	ldr	r3, [pc, #392]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d11c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f5e:	4b5f      	ldr	r3, [pc, #380]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d116      	bne.n	8004f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6a:	4b5c      	ldr	r3, [pc, #368]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_RCC_OscConfig+0x152>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d001      	beq.n	8004f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e1c4      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f82:	4b56      	ldr	r3, [pc, #344]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4952      	ldr	r1, [pc, #328]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f96:	e03a      	b.n	800500e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d020      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fa0:	4b4f      	ldr	r3, [pc, #316]	; (80050e0 <HAL_RCC_OscConfig+0x2b0>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa6:	f7ff fc85 	bl	80048b4 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fae:	f7ff fc81 	bl	80048b4 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e1a5      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc0:	4b46      	ldr	r3, [pc, #280]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fcc:	4b43      	ldr	r3, [pc, #268]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4940      	ldr	r1, [pc, #256]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	600b      	str	r3, [r1, #0]
 8004fe0:	e015      	b.n	800500e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fe2:	4b3f      	ldr	r3, [pc, #252]	; (80050e0 <HAL_RCC_OscConfig+0x2b0>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7ff fc64 	bl	80048b4 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff0:	f7ff fc60 	bl	80048b4 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e184      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005002:	4b36      	ldr	r3, [pc, #216]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f0      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d030      	beq.n	800507c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d016      	beq.n	8005050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005022:	4b30      	ldr	r3, [pc, #192]	; (80050e4 <HAL_RCC_OscConfig+0x2b4>)
 8005024:	2201      	movs	r2, #1
 8005026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7ff fc44 	bl	80048b4 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005030:	f7ff fc40 	bl	80048b4 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e164      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005042:	4b26      	ldr	r3, [pc, #152]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8005044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <HAL_RCC_OscConfig+0x200>
 800504e:	e015      	b.n	800507c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005050:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <HAL_RCC_OscConfig+0x2b4>)
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005056:	f7ff fc2d 	bl	80048b4 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800505e:	f7ff fc29 	bl	80048b4 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e14d      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8005072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f0      	bne.n	800505e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80a0 	beq.w	80051ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800508a:	2300      	movs	r3, #0
 800508c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800508e:	4b13      	ldr	r3, [pc, #76]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10f      	bne.n	80050ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	4a0e      	ldr	r2, [pc, #56]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 80050a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a8:	6413      	str	r3, [r2, #64]	; 0x40
 80050aa:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <HAL_RCC_OscConfig+0x2ac>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b6:	2301      	movs	r3, #1
 80050b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ba:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <HAL_RCC_OscConfig+0x2b8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d121      	bne.n	800510a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050c6:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <HAL_RCC_OscConfig+0x2b8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a07      	ldr	r2, [pc, #28]	; (80050e8 <HAL_RCC_OscConfig+0x2b8>)
 80050cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050d2:	f7ff fbef 	bl	80048b4 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d8:	e011      	b.n	80050fe <HAL_RCC_OscConfig+0x2ce>
 80050da:	bf00      	nop
 80050dc:	40023800 	.word	0x40023800
 80050e0:	42470000 	.word	0x42470000
 80050e4:	42470e80 	.word	0x42470e80
 80050e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ec:	f7ff fbe2 	bl	80048b4 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e106      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fe:	4b85      	ldr	r3, [pc, #532]	; (8005314 <HAL_RCC_OscConfig+0x4e4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d106      	bne.n	8005120 <HAL_RCC_OscConfig+0x2f0>
 8005112:	4b81      	ldr	r3, [pc, #516]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a80      	ldr	r2, [pc, #512]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
 800511e:	e01c      	b.n	800515a <HAL_RCC_OscConfig+0x32a>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b05      	cmp	r3, #5
 8005126:	d10c      	bne.n	8005142 <HAL_RCC_OscConfig+0x312>
 8005128:	4b7b      	ldr	r3, [pc, #492]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512c:	4a7a      	ldr	r2, [pc, #488]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 800512e:	f043 0304 	orr.w	r3, r3, #4
 8005132:	6713      	str	r3, [r2, #112]	; 0x70
 8005134:	4b78      	ldr	r3, [pc, #480]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	4a77      	ldr	r2, [pc, #476]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	6713      	str	r3, [r2, #112]	; 0x70
 8005140:	e00b      	b.n	800515a <HAL_RCC_OscConfig+0x32a>
 8005142:	4b75      	ldr	r3, [pc, #468]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005146:	4a74      	ldr	r2, [pc, #464]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	6713      	str	r3, [r2, #112]	; 0x70
 800514e:	4b72      	ldr	r3, [pc, #456]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	4a71      	ldr	r2, [pc, #452]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 8005154:	f023 0304 	bic.w	r3, r3, #4
 8005158:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d015      	beq.n	800518e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005162:	f7ff fba7 	bl	80048b4 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005168:	e00a      	b.n	8005180 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800516a:	f7ff fba3 	bl	80048b4 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f241 3288 	movw	r2, #5000	; 0x1388
 8005178:	4293      	cmp	r3, r2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e0c5      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005180:	4b65      	ldr	r3, [pc, #404]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 8005182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0ee      	beq.n	800516a <HAL_RCC_OscConfig+0x33a>
 800518c:	e014      	b.n	80051b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518e:	f7ff fb91 	bl	80048b4 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005194:	e00a      	b.n	80051ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005196:	f7ff fb8d 	bl	80048b4 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e0af      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ac:	4b5a      	ldr	r3, [pc, #360]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1ee      	bne.n	8005196 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d105      	bne.n	80051ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051be:	4b56      	ldr	r3, [pc, #344]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	4a55      	ldr	r2, [pc, #340]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 80051c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 809b 	beq.w	800530a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051d4:	4b50      	ldr	r3, [pc, #320]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d05c      	beq.n	800529a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d141      	bne.n	800526c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e8:	4b4c      	ldr	r3, [pc, #304]	; (800531c <HAL_RCC_OscConfig+0x4ec>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ee:	f7ff fb61 	bl	80048b4 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f6:	f7ff fb5d 	bl	80048b4 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e081      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005208:	4b43      	ldr	r3, [pc, #268]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1f0      	bne.n	80051f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	019b      	lsls	r3, r3, #6
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	3b01      	subs	r3, #1
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	061b      	lsls	r3, r3, #24
 8005238:	4937      	ldr	r1, [pc, #220]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 800523a:	4313      	orrs	r3, r2
 800523c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800523e:	4b37      	ldr	r3, [pc, #220]	; (800531c <HAL_RCC_OscConfig+0x4ec>)
 8005240:	2201      	movs	r2, #1
 8005242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005244:	f7ff fb36 	bl	80048b4 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800524c:	f7ff fb32 	bl	80048b4 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e056      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525e:	4b2e      	ldr	r3, [pc, #184]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0f0      	beq.n	800524c <HAL_RCC_OscConfig+0x41c>
 800526a:	e04e      	b.n	800530a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800526c:	4b2b      	ldr	r3, [pc, #172]	; (800531c <HAL_RCC_OscConfig+0x4ec>)
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005272:	f7ff fb1f 	bl	80048b4 <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800527a:	f7ff fb1b 	bl	80048b4 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e03f      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528c:	4b22      	ldr	r3, [pc, #136]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f0      	bne.n	800527a <HAL_RCC_OscConfig+0x44a>
 8005298:	e037      	b.n	800530a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e032      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052a6:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <HAL_RCC_OscConfig+0x4e8>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d028      	beq.n	8005306 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052be:	429a      	cmp	r2, r3
 80052c0:	d121      	bne.n	8005306 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d11a      	bne.n	8005306 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052d6:	4013      	ands	r3, r2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052de:	4293      	cmp	r3, r2
 80052e0:	d111      	bne.n	8005306 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	3b01      	subs	r3, #1
 80052f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d107      	bne.n	8005306 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005302:	429a      	cmp	r2, r3
 8005304:	d001      	beq.n	800530a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40007000 	.word	0x40007000
 8005318:	40023800 	.word	0x40023800
 800531c:	42470060 	.word	0x42470060

08005320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0cc      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005334:	4b68      	ldr	r3, [pc, #416]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d90c      	bls.n	800535c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005342:	4b65      	ldr	r3, [pc, #404]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b63      	ldr	r3, [pc, #396]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0b8      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d020      	beq.n	80053aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005374:	4b59      	ldr	r3, [pc, #356]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	4a58      	ldr	r2, [pc, #352]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800537e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800538c:	4b53      	ldr	r3, [pc, #332]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a52      	ldr	r2, [pc, #328]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005398:	4b50      	ldr	r3, [pc, #320]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	494d      	ldr	r1, [pc, #308]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d044      	beq.n	8005440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d107      	bne.n	80053ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053be:	4b47      	ldr	r3, [pc, #284]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d119      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e07f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d003      	beq.n	80053de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d107      	bne.n	80053ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053de:	4b3f      	ldr	r3, [pc, #252]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e06f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ee:	4b3b      	ldr	r3, [pc, #236]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e067      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053fe:	4b37      	ldr	r3, [pc, #220]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f023 0203 	bic.w	r2, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	4934      	ldr	r1, [pc, #208]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	4313      	orrs	r3, r2
 800540e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005410:	f7ff fa50 	bl	80048b4 <HAL_GetTick>
 8005414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005416:	e00a      	b.n	800542e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005418:	f7ff fa4c 	bl	80048b4 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	; 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e04f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542e:	4b2b      	ldr	r3, [pc, #172]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 020c 	and.w	r2, r3, #12
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	429a      	cmp	r2, r3
 800543e:	d1eb      	bne.n	8005418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005440:	4b25      	ldr	r3, [pc, #148]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d20c      	bcs.n	8005468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	4b20      	ldr	r3, [pc, #128]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e032      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005474:	4b19      	ldr	r3, [pc, #100]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4916      	ldr	r1, [pc, #88]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005492:	4b12      	ldr	r3, [pc, #72]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	490e      	ldr	r1, [pc, #56]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054a6:	f000 f821 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 80054aa:	4602      	mov	r2, r0
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	091b      	lsrs	r3, r3, #4
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	490a      	ldr	r1, [pc, #40]	; (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 80054b8:	5ccb      	ldrb	r3, [r1, r3]
 80054ba:	fa22 f303 	lsr.w	r3, r2, r3
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80054c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <HAL_RCC_ClockConfig+0x1c8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff f908 	bl	80046dc <HAL_InitTick>

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40023c00 	.word	0x40023c00
 80054dc:	40023800 	.word	0x40023800
 80054e0:	08005ec0 	.word	0x08005ec0
 80054e4:	20000010 	.word	0x20000010
 80054e8:	20000014 	.word	0x20000014

080054ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	607b      	str	r3, [r7, #4]
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	2300      	movs	r3, #0
 80054fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005504:	4b67      	ldr	r3, [pc, #412]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b08      	cmp	r3, #8
 800550e:	d00d      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0x40>
 8005510:	2b08      	cmp	r3, #8
 8005512:	f200 80bd 	bhi.w	8005690 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_RCC_GetSysClockFreq+0x34>
 800551a:	2b04      	cmp	r3, #4
 800551c:	d003      	beq.n	8005526 <HAL_RCC_GetSysClockFreq+0x3a>
 800551e:	e0b7      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005520:	4b61      	ldr	r3, [pc, #388]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005522:	60bb      	str	r3, [r7, #8]
       break;
 8005524:	e0b7      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005526:	4b61      	ldr	r3, [pc, #388]	; (80056ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005528:	60bb      	str	r3, [r7, #8]
      break;
 800552a:	e0b4      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800552c:	4b5d      	ldr	r3, [pc, #372]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005534:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005536:	4b5b      	ldr	r3, [pc, #364]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d04d      	beq.n	80055de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005542:	4b58      	ldr	r3, [pc, #352]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	099b      	lsrs	r3, r3, #6
 8005548:	461a      	mov	r2, r3
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005552:	f04f 0100 	mov.w	r1, #0
 8005556:	ea02 0800 	and.w	r8, r2, r0
 800555a:	ea03 0901 	and.w	r9, r3, r1
 800555e:	4640      	mov	r0, r8
 8005560:	4649      	mov	r1, r9
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	014b      	lsls	r3, r1, #5
 800556c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005570:	0142      	lsls	r2, r0, #5
 8005572:	4610      	mov	r0, r2
 8005574:	4619      	mov	r1, r3
 8005576:	ebb0 0008 	subs.w	r0, r0, r8
 800557a:	eb61 0109 	sbc.w	r1, r1, r9
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	018b      	lsls	r3, r1, #6
 8005588:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800558c:	0182      	lsls	r2, r0, #6
 800558e:	1a12      	subs	r2, r2, r0
 8005590:	eb63 0301 	sbc.w	r3, r3, r1
 8005594:	f04f 0000 	mov.w	r0, #0
 8005598:	f04f 0100 	mov.w	r1, #0
 800559c:	00d9      	lsls	r1, r3, #3
 800559e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055a2:	00d0      	lsls	r0, r2, #3
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	eb12 0208 	adds.w	r2, r2, r8
 80055ac:	eb43 0309 	adc.w	r3, r3, r9
 80055b0:	f04f 0000 	mov.w	r0, #0
 80055b4:	f04f 0100 	mov.w	r1, #0
 80055b8:	0259      	lsls	r1, r3, #9
 80055ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80055be:	0250      	lsls	r0, r2, #9
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4610      	mov	r0, r2
 80055c6:	4619      	mov	r1, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	f7fa fe48 	bl	8000264 <__aeabi_uldivmod>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4613      	mov	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	e04a      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055de:	4b31      	ldr	r3, [pc, #196]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	099b      	lsrs	r3, r3, #6
 80055e4:	461a      	mov	r2, r3
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055ee:	f04f 0100 	mov.w	r1, #0
 80055f2:	ea02 0400 	and.w	r4, r2, r0
 80055f6:	ea03 0501 	and.w	r5, r3, r1
 80055fa:	4620      	mov	r0, r4
 80055fc:	4629      	mov	r1, r5
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	014b      	lsls	r3, r1, #5
 8005608:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800560c:	0142      	lsls	r2, r0, #5
 800560e:	4610      	mov	r0, r2
 8005610:	4619      	mov	r1, r3
 8005612:	1b00      	subs	r0, r0, r4
 8005614:	eb61 0105 	sbc.w	r1, r1, r5
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	f04f 0300 	mov.w	r3, #0
 8005620:	018b      	lsls	r3, r1, #6
 8005622:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005626:	0182      	lsls	r2, r0, #6
 8005628:	1a12      	subs	r2, r2, r0
 800562a:	eb63 0301 	sbc.w	r3, r3, r1
 800562e:	f04f 0000 	mov.w	r0, #0
 8005632:	f04f 0100 	mov.w	r1, #0
 8005636:	00d9      	lsls	r1, r3, #3
 8005638:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800563c:	00d0      	lsls	r0, r2, #3
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	1912      	adds	r2, r2, r4
 8005644:	eb45 0303 	adc.w	r3, r5, r3
 8005648:	f04f 0000 	mov.w	r0, #0
 800564c:	f04f 0100 	mov.w	r1, #0
 8005650:	0299      	lsls	r1, r3, #10
 8005652:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005656:	0290      	lsls	r0, r2, #10
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4610      	mov	r0, r2
 800565e:	4619      	mov	r1, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	461a      	mov	r2, r3
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	f7fa fdfc 	bl	8000264 <__aeabi_uldivmod>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4613      	mov	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005674:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	3301      	adds	r3, #1
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	fbb2 f3f3 	udiv	r3, r2, r3
 800568c:	60bb      	str	r3, [r7, #8]
      break;
 800568e:	e002      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005692:	60bb      	str	r3, [r7, #8]
      break;
 8005694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005696:	68bb      	ldr	r3, [r7, #8]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056a2:	bf00      	nop
 80056a4:	40023800 	.word	0x40023800
 80056a8:	00f42400 	.word	0x00f42400
 80056ac:	007a1200 	.word	0x007a1200

080056b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056b6:	681b      	ldr	r3, [r3, #0]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000010 	.word	0x20000010

080056c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056cc:	f7ff fff0 	bl	80056b0 <HAL_RCC_GetHCLKFreq>
 80056d0:	4602      	mov	r2, r0
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	0a9b      	lsrs	r3, r3, #10
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	4903      	ldr	r1, [pc, #12]	; (80056ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80056de:	5ccb      	ldrb	r3, [r1, r3]
 80056e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40023800 	.word	0x40023800
 80056ec:	08005ed0 	.word	0x08005ed0

080056f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	220f      	movs	r2, #15
 80056fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005700:	4b12      	ldr	r3, [pc, #72]	; (800574c <HAL_RCC_GetClockConfig+0x5c>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 0203 	and.w	r2, r3, #3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800570c:	4b0f      	ldr	r3, [pc, #60]	; (800574c <HAL_RCC_GetClockConfig+0x5c>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005718:	4b0c      	ldr	r3, [pc, #48]	; (800574c <HAL_RCC_GetClockConfig+0x5c>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005724:	4b09      	ldr	r3, [pc, #36]	; (800574c <HAL_RCC_GetClockConfig+0x5c>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	08db      	lsrs	r3, r3, #3
 800572a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005732:	4b07      	ldr	r3, [pc, #28]	; (8005750 <HAL_RCC_GetClockConfig+0x60>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0207 	and.w	r2, r3, #7
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	601a      	str	r2, [r3, #0]
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800
 8005750:	40023c00 	.word	0x40023c00

08005754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e041      	b.n	80057ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f839 	bl	80057f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3304      	adds	r3, #4
 8005790:	4619      	mov	r1, r3
 8005792:	4610      	mov	r0, r2
 8005794:	f000 f9d8 	bl	8005b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	d001      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e04e      	b.n	80058be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a23      	ldr	r2, [pc, #140]	; (80058cc <HAL_TIM_Base_Start_IT+0xc4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d022      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584a:	d01d      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d018      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1e      	ldr	r2, [pc, #120]	; (80058d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d013      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1c      	ldr	r2, [pc, #112]	; (80058d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00e      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d009      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d004      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d111      	bne.n	80058ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b06      	cmp	r3, #6
 8005898:	d010      	beq.n	80058bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0201 	orr.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058aa:	e007      	b.n	80058bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40010000 	.word	0x40010000
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800
 80058d8:	40000c00 	.word	0x40000c00
 80058dc:	40010400 	.word	0x40010400
 80058e0:	40014000 	.word	0x40014000
 80058e4:	40001800 	.word	0x40001800

080058e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d122      	bne.n	8005944 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b02      	cmp	r3, #2
 800590a:	d11b      	bne.n	8005944 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0202 	mvn.w	r2, #2
 8005914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f8ee 	bl	8005b0c <HAL_TIM_IC_CaptureCallback>
 8005930:	e005      	b.n	800593e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8e0 	bl	8005af8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f8f1 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b04      	cmp	r3, #4
 8005950:	d122      	bne.n	8005998 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b04      	cmp	r3, #4
 800595e:	d11b      	bne.n	8005998 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0204 	mvn.w	r2, #4
 8005968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8c4 	bl	8005b0c <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f8b6 	bl	8005af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8c7 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d122      	bne.n	80059ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d11b      	bne.n	80059ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0208 	mvn.w	r2, #8
 80059bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2204      	movs	r2, #4
 80059c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f89a 	bl	8005b0c <HAL_TIM_IC_CaptureCallback>
 80059d8:	e005      	b.n	80059e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f88c 	bl	8005af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f89d 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b10      	cmp	r3, #16
 80059f8:	d122      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d11b      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0210 	mvn.w	r2, #16
 8005a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2208      	movs	r2, #8
 8005a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f870 	bl	8005b0c <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e005      	b.n	8005a3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f862 	bl	8005af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f873 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d10e      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d107      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0201 	mvn.w	r2, #1
 8005a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fe fdf8 	bl	800465c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a76:	2b80      	cmp	r3, #128	; 0x80
 8005a78:	d10e      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	2b80      	cmp	r3, #128	; 0x80
 8005a86:	d107      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f902 	bl	8005c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b40      	cmp	r3, #64	; 0x40
 8005aa4:	d10e      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d107      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f838 	bl	8005b34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d10e      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d107      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0220 	mvn.w	r2, #32
 8005ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f8cc 	bl	8005c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005af0:	bf00      	nop
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a40      	ldr	r2, [pc, #256]	; (8005c5c <TIM_Base_SetConfig+0x114>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d013      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b66:	d00f      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a3d      	ldr	r2, [pc, #244]	; (8005c60 <TIM_Base_SetConfig+0x118>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00b      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a3c      	ldr	r2, [pc, #240]	; (8005c64 <TIM_Base_SetConfig+0x11c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d007      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a3b      	ldr	r2, [pc, #236]	; (8005c68 <TIM_Base_SetConfig+0x120>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_Base_SetConfig+0x40>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a3a      	ldr	r2, [pc, #232]	; (8005c6c <TIM_Base_SetConfig+0x124>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d108      	bne.n	8005b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2f      	ldr	r2, [pc, #188]	; (8005c5c <TIM_Base_SetConfig+0x114>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d02b      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba8:	d027      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2c      	ldr	r2, [pc, #176]	; (8005c60 <TIM_Base_SetConfig+0x118>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d023      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a2b      	ldr	r2, [pc, #172]	; (8005c64 <TIM_Base_SetConfig+0x11c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d01f      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a2a      	ldr	r2, [pc, #168]	; (8005c68 <TIM_Base_SetConfig+0x120>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d01b      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a29      	ldr	r2, [pc, #164]	; (8005c6c <TIM_Base_SetConfig+0x124>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d017      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a28      	ldr	r2, [pc, #160]	; (8005c70 <TIM_Base_SetConfig+0x128>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d013      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a27      	ldr	r2, [pc, #156]	; (8005c74 <TIM_Base_SetConfig+0x12c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00f      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a26      	ldr	r2, [pc, #152]	; (8005c78 <TIM_Base_SetConfig+0x130>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00b      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a25      	ldr	r2, [pc, #148]	; (8005c7c <TIM_Base_SetConfig+0x134>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d007      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a24      	ldr	r2, [pc, #144]	; (8005c80 <TIM_Base_SetConfig+0x138>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d003      	beq.n	8005bfa <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a23      	ldr	r2, [pc, #140]	; (8005c84 <TIM_Base_SetConfig+0x13c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d108      	bne.n	8005c0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a0a      	ldr	r2, [pc, #40]	; (8005c5c <TIM_Base_SetConfig+0x114>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_Base_SetConfig+0xf8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a0c      	ldr	r2, [pc, #48]	; (8005c6c <TIM_Base_SetConfig+0x124>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d103      	bne.n	8005c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	615a      	str	r2, [r3, #20]
}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40000c00 	.word	0x40000c00
 8005c6c:	40010400 	.word	0x40010400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800
 8005c7c:	40001800 	.word	0x40001800
 8005c80:	40001c00 	.word	0x40001c00
 8005c84:	40002000 	.word	0x40002000

08005c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <__libc_init_array>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	4d0d      	ldr	r5, [pc, #52]	; (8005ce8 <__libc_init_array+0x38>)
 8005cb4:	4c0d      	ldr	r4, [pc, #52]	; (8005cec <__libc_init_array+0x3c>)
 8005cb6:	1b64      	subs	r4, r4, r5
 8005cb8:	10a4      	asrs	r4, r4, #2
 8005cba:	2600      	movs	r6, #0
 8005cbc:	42a6      	cmp	r6, r4
 8005cbe:	d109      	bne.n	8005cd4 <__libc_init_array+0x24>
 8005cc0:	4d0b      	ldr	r5, [pc, #44]	; (8005cf0 <__libc_init_array+0x40>)
 8005cc2:	4c0c      	ldr	r4, [pc, #48]	; (8005cf4 <__libc_init_array+0x44>)
 8005cc4:	f000 f83c 	bl	8005d40 <_init>
 8005cc8:	1b64      	subs	r4, r4, r5
 8005cca:	10a4      	asrs	r4, r4, #2
 8005ccc:	2600      	movs	r6, #0
 8005cce:	42a6      	cmp	r6, r4
 8005cd0:	d105      	bne.n	8005cde <__libc_init_array+0x2e>
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}
 8005cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd8:	4798      	blx	r3
 8005cda:	3601      	adds	r6, #1
 8005cdc:	e7ee      	b.n	8005cbc <__libc_init_array+0xc>
 8005cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce2:	4798      	blx	r3
 8005ce4:	3601      	adds	r6, #1
 8005ce6:	e7f2      	b.n	8005cce <__libc_init_array+0x1e>
 8005ce8:	08005ee0 	.word	0x08005ee0
 8005cec:	08005ee0 	.word	0x08005ee0
 8005cf0:	08005ee0 	.word	0x08005ee0
 8005cf4:	08005ee4 	.word	0x08005ee4

08005cf8 <memcmp>:
 8005cf8:	b530      	push	{r4, r5, lr}
 8005cfa:	3901      	subs	r1, #1
 8005cfc:	2400      	movs	r4, #0
 8005cfe:	42a2      	cmp	r2, r4
 8005d00:	d101      	bne.n	8005d06 <memcmp+0xe>
 8005d02:	2000      	movs	r0, #0
 8005d04:	e005      	b.n	8005d12 <memcmp+0x1a>
 8005d06:	5d03      	ldrb	r3, [r0, r4]
 8005d08:	3401      	adds	r4, #1
 8005d0a:	5d0d      	ldrb	r5, [r1, r4]
 8005d0c:	42ab      	cmp	r3, r5
 8005d0e:	d0f6      	beq.n	8005cfe <memcmp+0x6>
 8005d10:	1b58      	subs	r0, r3, r5
 8005d12:	bd30      	pop	{r4, r5, pc}

08005d14 <memcpy>:
 8005d14:	440a      	add	r2, r1
 8005d16:	4291      	cmp	r1, r2
 8005d18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005d1c:	d100      	bne.n	8005d20 <memcpy+0xc>
 8005d1e:	4770      	bx	lr
 8005d20:	b510      	push	{r4, lr}
 8005d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d2a:	4291      	cmp	r1, r2
 8005d2c:	d1f9      	bne.n	8005d22 <memcpy+0xe>
 8005d2e:	bd10      	pop	{r4, pc}

08005d30 <memset>:
 8005d30:	4402      	add	r2, r0
 8005d32:	4603      	mov	r3, r0
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d100      	bne.n	8005d3a <memset+0xa>
 8005d38:	4770      	bx	lr
 8005d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d3e:	e7f9      	b.n	8005d34 <memset+0x4>

08005d40 <_init>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	bf00      	nop
 8005d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d46:	bc08      	pop	{r3}
 8005d48:	469e      	mov	lr, r3
 8005d4a:	4770      	bx	lr

08005d4c <_fini>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	bf00      	nop
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr
