
006LED_Btn_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800665c  0800665c  0001665c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006828  08006828  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006828  08006828  00016828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006830  08006830  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006830  08006830  00016830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014424  2000001c  08006854  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014440  08006854  00024440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169ac  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e13  00000000  00000000  000369f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00039810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  0003a950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021223  00000000  00000000  0003b928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132d3  00000000  00000000  0005cb4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6944  00000000  00000000  0006fe1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146762  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000478c  00000000  00000000  001467b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006644 	.word	0x08006644

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006644 	.word	0x08006644

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001433c 	.word	0x2001433c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f103 0208 	add.w	r2, r3, #8
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000574:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f103 0208 	add.w	r2, r3, #8
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f103 0208 	add.w	r2, r3, #8
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005b6:	b480      	push	{r7}
 80005b8:	b085      	sub	sp, #20
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1c5a      	adds	r2, r3, #1
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	601a      	str	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000614:	d103      	bne.n	800061e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	691b      	ldr	r3, [r3, #16]
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e00c      	b.n	8000638 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3308      	adds	r3, #8
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e002      	b.n	800062c <vListInsert+0x2e>
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	429a      	cmp	r2, r3
 8000636:	d2f6      	bcs.n	8000626 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	691b      	ldr	r3, [r3, #16]
 800067c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	6892      	ldr	r2, [r2, #8]
 8000686:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	6852      	ldr	r2, [r2, #4]
 8000690:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	d103      	bne.n	80006a4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689a      	ldr	r2, [r3, #8]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af04      	add	r7, sp, #16
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4613      	mov	r3, r2
 80006d2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f9e7 	bl	8001aac <pvPortMalloc>
 80006de:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00e      	beq.n	8000704 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80006e6:	2058      	movs	r0, #88	; 0x58
 80006e8:	f001 f9e0 	bl	8001aac <pvPortMalloc>
 80006ec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
 80006fa:	e005      	b.n	8000708 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80006fc:	6978      	ldr	r0, [r7, #20]
 80006fe:	f001 fab5 	bl	8001c6c <vPortFree>
 8000702:	e001      	b.n	8000708 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d013      	beq.n	8000736 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800070e:	88fa      	ldrh	r2, [r7, #6]
 8000710:	2300      	movs	r3, #0
 8000712:	9303      	str	r3, [sp, #12]
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	9302      	str	r3, [sp, #8]
 8000718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	68b9      	ldr	r1, [r7, #8]
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f000 f80e 	bl	8000746 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800072a:	69f8      	ldr	r0, [r7, #28]
 800072c:	f000 f8a2 	bl	8000874 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000730:	2301      	movs	r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	e002      	b.n	800073c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800073a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800073c:	69bb      	ldr	r3, [r7, #24]
    }
 800073e:	4618      	mov	r0, r3
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b088      	sub	sp, #32
 800074a:	af00      	add	r7, sp, #0
 800074c:	60f8      	str	r0, [r7, #12]
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000756:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	461a      	mov	r2, r3
 800075e:	21a5      	movs	r1, #165	; 0xa5
 8000760:	f005 ff68 	bl	8006634 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800076e:	3b01      	subs	r3, #1
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	f023 0307 	bic.w	r3, r3, #7
 800077c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00a      	beq.n	800079e <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800078c:	f383 8811 	msr	BASEPRI, r3
 8000790:	f3bf 8f6f 	isb	sy
 8000794:	f3bf 8f4f 	dsb	sy
 8000798:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800079a:	bf00      	nop
 800079c:	e7fe      	b.n	800079c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d01f      	beq.n	80007e4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
 80007a8:	e012      	b.n	80007d0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	4413      	add	r3, r2
 80007b0:	7819      	ldrb	r1, [r3, #0]
 80007b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	4413      	add	r3, r2
 80007b8:	3334      	adds	r3, #52	; 0x34
 80007ba:	460a      	mov	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d006      	beq.n	80007d8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3301      	adds	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	2b09      	cmp	r3, #9
 80007d4:	d9e9      	bls.n	80007aa <prvInitialiseNewTask+0x64>
 80007d6:	e000      	b.n	80007da <prvInitialiseNewTask+0x94>
            {
                break;
 80007d8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80007da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80007e2:	e003      	b.n	80007ec <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80007e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80007ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	d901      	bls.n	80007f6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80007f2:	2304      	movs	r3, #4
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80007f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80007fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000800:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000804:	2200      	movs	r2, #0
 8000806:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800080a:	3304      	adds	r3, #4
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fec5 	bl	800059c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000814:	3318      	adds	r3, #24
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fec0 	bl	800059c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800081c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800081e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000820:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000824:	f1c3 0205 	rsb	r2, r3, #5
 8000828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800082c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000834:	3350      	adds	r3, #80	; 0x50
 8000836:	2204      	movs	r2, #4
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f005 fefa 	bl	8006634 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000842:	3354      	adds	r3, #84	; 0x54
 8000844:	2201      	movs	r2, #1
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f005 fef3 	bl	8006634 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	68f9      	ldr	r1, [r7, #12]
 8000852:	69b8      	ldr	r0, [r7, #24]
 8000854:	f000 fe4e 	bl	80014f4 <pxPortInitialiseStack>
 8000858:	4602      	mov	r2, r0
 800085a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800085c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800085e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000860:	2b00      	cmp	r3, #0
 8000862:	d002      	beq.n	800086a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000868:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af02      	add	r7, sp, #8
 800087a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800087c:	f000 ffea 	bl	8001854 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000880:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <prvAddNewTaskToReadyList+0xfc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a3a      	ldr	r2, [pc, #232]	; (8000970 <prvAddNewTaskToReadyList+0xfc>)
 8000888:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800088a:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d109      	bne.n	80008a6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000892:	4a38      	ldr	r2, [pc, #224]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000898:	4b35      	ldr	r3, [pc, #212]	; (8000970 <prvAddNewTaskToReadyList+0xfc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d110      	bne.n	80008c2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80008a0:	f000 fb78 	bl	8000f94 <prvInitialiseTaskLists>
 80008a4:	e00d      	b.n	80008c2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <prvAddNewTaskToReadyList+0x104>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d109      	bne.n	80008c2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d802      	bhi.n	80008c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80008bc:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <prvAddNewTaskToReadyList+0x108>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	4a2c      	ldr	r2, [pc, #176]	; (800097c <prvAddNewTaskToReadyList+0x108>)
 80008ca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <prvAddNewTaskToReadyList+0x108>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d016      	beq.n	8000908 <prvAddNewTaskToReadyList+0x94>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fd3f 	bl	8004360 <SEGGER_SYSVIEW_OnTaskCreate>
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	461d      	mov	r5, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	461c      	mov	r4, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	1ae3      	subs	r3, r4, r3
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	462b      	mov	r3, r5
 8000904:	f001 fb78 	bl	8001ff8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4618      	mov	r0, r3
 800090c:	f003 fdac 	bl	8004468 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	2201      	movs	r2, #1
 8000916:	409a      	lsls	r2, r3
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <prvAddNewTaskToReadyList+0x10c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4313      	orrs	r3, r2
 800091e:	4a18      	ldr	r2, [pc, #96]	; (8000980 <prvAddNewTaskToReadyList+0x10c>)
 8000920:	6013      	str	r3, [r2, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000926:	4613      	mov	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <prvAddNewTaskToReadyList+0x110>)
 8000930:	441a      	add	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4610      	mov	r0, r2
 800093a:	f7ff fe3c 	bl	80005b6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800093e:	f000 ffb9 	bl	80018b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <prvAddNewTaskToReadyList+0x104>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d00e      	beq.n	8000968 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <prvAddNewTaskToReadyList+0x114>)
 800095a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	f3bf 8f4f 	dsb	sy
 8000964:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bdb0      	pop	{r4, r5, r7, pc}
 8000970:	20000110 	.word	0x20000110
 8000974:	20000038 	.word	0x20000038
 8000978:	2000011c 	.word	0x2000011c
 800097c:	2000012c 	.word	0x2000012c
 8000980:	20000118 	.word	0x20000118
 8000984:	2000003c 	.word	0x2000003c
 8000988:	e000ed04 	.word	0xe000ed04

0800098c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000994:	f000 ff5e 	bl	8001854 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d102      	bne.n	80009a4 <vTaskDelete+0x18>
 800099e:	4b46      	ldr	r3, [pc, #280]	; (8000ab8 <vTaskDelete+0x12c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	e000      	b.n	80009a6 <vTaskDelete+0x1a>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3304      	adds	r3, #4
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe5f 	bl	8000670 <uxListRemove>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d115      	bne.n	80009e4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009bc:	493f      	ldr	r1, [pc, #252]	; (8000abc <vTaskDelete+0x130>)
 80009be:	4613      	mov	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	440b      	add	r3, r1
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10a      	bne.n	80009e4 <vTaskDelete+0x58>
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d2:	2201      	movs	r2, #1
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43da      	mvns	r2, r3
 80009da:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <vTaskDelete+0x134>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4013      	ands	r3, r2
 80009e0:	4a37      	ldr	r2, [pc, #220]	; (8000ac0 <vTaskDelete+0x134>)
 80009e2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d004      	beq.n	80009f6 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3318      	adds	r3, #24
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fe3d 	bl	8000670 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80009f6:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <vTaskDelete+0x138>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a31      	ldr	r2, [pc, #196]	; (8000ac4 <vTaskDelete+0x138>)
 80009fe:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8000a00:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <vTaskDelete+0x12c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d118      	bne.n	8000a3c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	482d      	ldr	r0, [pc, #180]	; (8000ac8 <vTaskDelete+0x13c>)
 8000a12:	f7ff fdd0 	bl	80005b6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <vTaskDelete+0x140>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a2b      	ldr	r2, [pc, #172]	; (8000acc <vTaskDelete+0x140>)
 8000a1e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fdc2 	bl	80045ac <SEGGER_SYSVIEW_ShrinkId>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	2022      	movs	r0, #34	; 0x22
 8000a2e:	f002 ff61 	bl	80038f4 <SEGGER_SYSVIEW_RecordU32>
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fb47 	bl	80020c8 <SYSVIEW_DeleteTask>
 8000a3a:	e016      	b.n	8000a6a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8000a3c:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <vTaskDelete+0x144>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <vTaskDelete+0x144>)
 8000a44:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 fdaf 	bl	80045ac <SEGGER_SYSVIEW_ShrinkId>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4619      	mov	r1, r3
 8000a52:	2022      	movs	r0, #34	; 0x22
 8000a54:	f002 ff4e 	bl	80038f4 <SEGGER_SYSVIEW_RecordU32>
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 fb34 	bl	80020c8 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f000 fb05 	bl	8001070 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8000a66:	f000 fb13 	bl	8001090 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8000a6a:	f000 ff23 	bl	80018b4 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <vTaskDelete+0x148>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d01b      	beq.n	8000aae <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <vTaskDelete+0x12c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d116      	bne.n	8000aae <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <vTaskDelete+0x14c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00a      	beq.n	8000a9e <vTaskDelete+0x112>
        __asm volatile
 8000a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a8c:	f383 8811 	msr	BASEPRI, r3
 8000a90:	f3bf 8f6f 	isb	sy
 8000a94:	f3bf 8f4f 	dsb	sy
 8000a98:	60bb      	str	r3, [r7, #8]
    }
 8000a9a:	bf00      	nop
 8000a9c:	e7fe      	b.n	8000a9c <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <vTaskDelete+0x150>)
 8000aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	f3bf 8f4f 	dsb	sy
 8000aaa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000038 	.word	0x20000038
 8000abc:	2000003c 	.word	0x2000003c
 8000ac0:	20000118 	.word	0x20000118
 8000ac4:	2000012c 	.word	0x2000012c
 8000ac8:	200000e4 	.word	0x200000e4
 8000acc:	200000f8 	.word	0x200000f8
 8000ad0:	20000110 	.word	0x20000110
 8000ad4:	2000011c 	.word	0x2000011c
 8000ad8:	20000138 	.word	0x20000138
 8000adc:	e000ed04 	.word	0xe000ed04

08000ae0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <vTaskStartScheduler+0x98>)
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	2300      	movs	r3, #0
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2300      	movs	r3, #0
 8000af0:	2282      	movs	r2, #130	; 0x82
 8000af2:	4922      	ldr	r1, [pc, #136]	; (8000b7c <vTaskStartScheduler+0x9c>)
 8000af4:	4822      	ldr	r0, [pc, #136]	; (8000b80 <vTaskStartScheduler+0xa0>)
 8000af6:	f7ff fde5 	bl	80006c4 <xTaskCreate>
 8000afa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d124      	bne.n	8000b4c <vTaskStartScheduler+0x6c>
        __asm volatile
 8000b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b06:	f383 8811 	msr	BASEPRI, r3
 8000b0a:	f3bf 8f6f 	isb	sy
 8000b0e:	f3bf 8f4f 	dsb	sy
 8000b12:	60bb      	str	r3, [r7, #8]
    }
 8000b14:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <vTaskStartScheduler+0xa4>)
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b1c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <vTaskStartScheduler+0xa8>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <vTaskStartScheduler+0xac>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <vTaskStartScheduler+0xb0>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <vTaskStartScheduler+0x98>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d102      	bne.n	8000b3c <vTaskStartScheduler+0x5c>
 8000b36:	f003 fbf7 	bl	8004328 <SEGGER_SYSVIEW_OnIdle>
 8000b3a:	e004      	b.n	8000b46 <vTaskStartScheduler+0x66>
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <vTaskStartScheduler+0xb0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 fc4f 	bl	80043e4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000b46:	f000 fd65 	bl	8001614 <xPortStartScheduler>
 8000b4a:	e00e      	b.n	8000b6a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b52:	d10a      	bne.n	8000b6a <vTaskStartScheduler+0x8a>
        __asm volatile
 8000b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b58:	f383 8811 	msr	BASEPRI, r3
 8000b5c:	f3bf 8f6f 	isb	sy
 8000b60:	f3bf 8f4f 	dsb	sy
 8000b64:	607b      	str	r3, [r7, #4]
    }
 8000b66:	bf00      	nop
 8000b68:	e7fe      	b.n	8000b68 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <vTaskStartScheduler+0xb4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000134 	.word	0x20000134
 8000b7c:	0800665c 	.word	0x0800665c
 8000b80:	08000f65 	.word	0x08000f65
 8000b84:	20000130 	.word	0x20000130
 8000b88:	2000011c 	.word	0x2000011c
 8000b8c:	20000114 	.word	0x20000114
 8000b90:	20000038 	.word	0x20000038
 8000b94:	20000000 	.word	0x20000000

08000b98 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <vTaskSuspendAll+0x18>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <vTaskSuspendAll+0x18>)
 8000ba4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	20000138 	.word	0x20000138

08000bb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000bc2:	4b43      	ldr	r3, [pc, #268]	; (8000cd0 <xTaskResumeAll+0x11c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10a      	bne.n	8000be0 <xTaskResumeAll+0x2c>
        __asm volatile
 8000bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bce:	f383 8811 	msr	BASEPRI, r3
 8000bd2:	f3bf 8f6f 	isb	sy
 8000bd6:	f3bf 8f4f 	dsb	sy
 8000bda:	603b      	str	r3, [r7, #0]
    }
 8000bdc:	bf00      	nop
 8000bde:	e7fe      	b.n	8000bde <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000be0:	f000 fe38 	bl	8001854 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000be4:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <xTaskResumeAll+0x11c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	4a39      	ldr	r2, [pc, #228]	; (8000cd0 <xTaskResumeAll+0x11c>)
 8000bec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000bee:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <xTaskResumeAll+0x11c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d165      	bne.n	8000cc2 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000bf6:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <xTaskResumeAll+0x120>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d061      	beq.n	8000cc2 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000bfe:	e032      	b.n	8000c66 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c00:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <xTaskResumeAll+0x124>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3318      	adds	r3, #24
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fd2f 	bl	8000670 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3304      	adds	r3, #4
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fd2a 	bl	8000670 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fc22 	bl	8004468 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c28:	2201      	movs	r2, #1
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <xTaskResumeAll+0x128>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	4a2a      	ldr	r2, [pc, #168]	; (8000cdc <xTaskResumeAll+0x128>)
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4a27      	ldr	r2, [pc, #156]	; (8000ce0 <xTaskResumeAll+0x12c>)
 8000c44:	441a      	add	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4610      	mov	r0, r2
 8000c4e:	f7ff fcb2 	bl	80005b6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c56:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <xTaskResumeAll+0x130>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d302      	bcc.n	8000c66 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <xTaskResumeAll+0x134>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <xTaskResumeAll+0x124>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1c8      	bne.n	8000c00 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000c74:	f000 fa0c 	bl	8001090 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <xTaskResumeAll+0x138>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d010      	beq.n	8000ca6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000c84:	f000 f848 	bl	8000d18 <xTaskIncrementTick>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <xTaskResumeAll+0x134>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1f1      	bne.n	8000c84 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <xTaskResumeAll+0x138>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <xTaskResumeAll+0x134>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d009      	beq.n	8000cc2 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <xTaskResumeAll+0x13c>)
 8000cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	f3bf 8f4f 	dsb	sy
 8000cbe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000cc2:	f000 fdf7 	bl	80018b4 <vPortExitCritical>

    return xAlreadyYielded;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000138 	.word	0x20000138
 8000cd4:	20000110 	.word	0x20000110
 8000cd8:	200000d0 	.word	0x200000d0
 8000cdc:	20000118 	.word	0x20000118
 8000ce0:	2000003c 	.word	0x2000003c
 8000ce4:	20000038 	.word	0x20000038
 8000ce8:	20000124 	.word	0x20000124
 8000cec:	20000120 	.word	0x20000120
 8000cf0:	e000ed04 	.word	0xe000ed04

08000cf4 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000cfa:	f000 fe97 	bl	8001a2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <xTaskGetTickCountFromISR+0x20>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000d08:	683b      	ldr	r3, [r7, #0]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000114 	.word	0x20000114

08000d18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d22:	4b50      	ldr	r3, [pc, #320]	; (8000e64 <xTaskIncrementTick+0x14c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 8092 	bne.w	8000e50 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000d2c:	4b4e      	ldr	r3, [pc, #312]	; (8000e68 <xTaskIncrementTick+0x150>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000d34:	4a4c      	ldr	r2, [pc, #304]	; (8000e68 <xTaskIncrementTick+0x150>)
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d120      	bne.n	8000d82 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000d40:	4b4a      	ldr	r3, [pc, #296]	; (8000e6c <xTaskIncrementTick+0x154>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00a      	beq.n	8000d60 <xTaskIncrementTick+0x48>
        __asm volatile
 8000d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d4e:	f383 8811 	msr	BASEPRI, r3
 8000d52:	f3bf 8f6f 	isb	sy
 8000d56:	f3bf 8f4f 	dsb	sy
 8000d5a:	603b      	str	r3, [r7, #0]
    }
 8000d5c:	bf00      	nop
 8000d5e:	e7fe      	b.n	8000d5e <xTaskIncrementTick+0x46>
 8000d60:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <xTaskIncrementTick+0x154>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b42      	ldr	r3, [pc, #264]	; (8000e70 <xTaskIncrementTick+0x158>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a40      	ldr	r2, [pc, #256]	; (8000e6c <xTaskIncrementTick+0x154>)
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	4a40      	ldr	r2, [pc, #256]	; (8000e70 <xTaskIncrementTick+0x158>)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <xTaskIncrementTick+0x15c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	4a3e      	ldr	r2, [pc, #248]	; (8000e74 <xTaskIncrementTick+0x15c>)
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	f000 f987 	bl	8001090 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000d82:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <xTaskIncrementTick+0x160>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d34c      	bcc.n	8000e26 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d8c:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <xTaskIncrementTick+0x154>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d104      	bne.n	8000da0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <xTaskIncrementTick+0x160>)
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d9c:	601a      	str	r2, [r3, #0]
                    break;
 8000d9e:	e042      	b.n	8000e26 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000da0:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <xTaskIncrementTick+0x154>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d203      	bcs.n	8000dc0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000db8:	4a2f      	ldr	r2, [pc, #188]	; (8000e78 <xTaskIncrementTick+0x160>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000dbe:	e032      	b.n	8000e26 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fc53 	bl	8000670 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	3318      	adds	r3, #24
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fc4a 	bl	8000670 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f003 fb42 	bl	8004468 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de8:	2201      	movs	r2, #1
 8000dea:	409a      	lsls	r2, r3
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <xTaskIncrementTick+0x164>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	4a22      	ldr	r2, [pc, #136]	; (8000e7c <xTaskIncrementTick+0x164>)
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <xTaskIncrementTick+0x168>)
 8000e04:	441a      	add	r2, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	f7ff fbd2 	bl	80005b6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <xTaskIncrementTick+0x16c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d3b5      	bcc.n	8000d8c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8000e20:	2301      	movs	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e24:	e7b2      	b.n	8000d8c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <xTaskIncrementTick+0x16c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2c:	4914      	ldr	r1, [pc, #80]	; (8000e80 <xTaskIncrementTick+0x168>)
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	440b      	add	r3, r1
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d901      	bls.n	8000e42 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <xTaskIncrementTick+0x170>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d007      	beq.n	8000e5a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e004      	b.n	8000e5a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <xTaskIncrementTick+0x174>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <xTaskIncrementTick+0x174>)
 8000e58:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000e5a:	697b      	ldr	r3, [r7, #20]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000138 	.word	0x20000138
 8000e68:	20000114 	.word	0x20000114
 8000e6c:	200000c8 	.word	0x200000c8
 8000e70:	200000cc 	.word	0x200000cc
 8000e74:	20000128 	.word	0x20000128
 8000e78:	20000130 	.word	0x20000130
 8000e7c:	20000118 	.word	0x20000118
 8000e80:	2000003c 	.word	0x2000003c
 8000e84:	20000038 	.word	0x20000038
 8000e88:	20000124 	.word	0x20000124
 8000e8c:	20000120 	.word	0x20000120

08000e90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <vTaskSwitchContext+0xbc>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000e9e:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <vTaskSwitchContext+0xc0>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000ea4:	e04d      	b.n	8000f42 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <vTaskSwitchContext+0xc0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <vTaskSwitchContext+0xc4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	fab3 f383 	clz	r3, r3
 8000eb8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000eba:	7afb      	ldrb	r3, [r7, #11]
 8000ebc:	f1c3 031f 	rsb	r3, r3, #31
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	4925      	ldr	r1, [pc, #148]	; (8000f58 <vTaskSwitchContext+0xc8>)
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10a      	bne.n	8000eec <vTaskSwitchContext+0x5c>
        __asm volatile
 8000ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eda:	f383 8811 	msr	BASEPRI, r3
 8000ede:	f3bf 8f6f 	isb	sy
 8000ee2:	f3bf 8f4f 	dsb	sy
 8000ee6:	607b      	str	r3, [r7, #4]
    }
 8000ee8:	bf00      	nop
 8000eea:	e7fe      	b.n	8000eea <vTaskSwitchContext+0x5a>
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <vTaskSwitchContext+0xc8>)
 8000ef8:	4413      	add	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	3308      	adds	r3, #8
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d104      	bne.n	8000f1c <vTaskSwitchContext+0x8c>
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <vTaskSwitchContext+0xcc>)
 8000f24:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <vTaskSwitchContext+0xcc>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <vTaskSwitchContext+0xd0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d102      	bne.n	8000f38 <vTaskSwitchContext+0xa8>
 8000f32:	f003 f9f9 	bl	8004328 <SEGGER_SYSVIEW_OnIdle>
}
 8000f36:	e004      	b.n	8000f42 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <vTaskSwitchContext+0xcc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 fa51 	bl	80043e4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000138 	.word	0x20000138
 8000f50:	20000124 	.word	0x20000124
 8000f54:	20000118 	.word	0x20000118
 8000f58:	2000003c 	.word	0x2000003c
 8000f5c:	20000038 	.word	0x20000038
 8000f60:	20000134 	.word	0x20000134

08000f64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000f6c:	f000 f852 	bl	8001014 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <prvIdleTask+0x28>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d9f9      	bls.n	8000f6c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <prvIdleTask+0x2c>)
 8000f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	f3bf 8f4f 	dsb	sy
 8000f84:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000f88:	e7f0      	b.n	8000f6c <prvIdleTask+0x8>
 8000f8a:	bf00      	nop
 8000f8c:	2000003c 	.word	0x2000003c
 8000f90:	e000ed04 	.word	0xe000ed04

08000f94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	e00c      	b.n	8000fba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <prvInitialiseTaskLists+0x60>)
 8000fac:	4413      	add	r3, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fad4 	bl	800055c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d9ef      	bls.n	8000fa0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <prvInitialiseTaskLists+0x64>)
 8000fc2:	f7ff facb 	bl	800055c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000fc6:	480d      	ldr	r0, [pc, #52]	; (8000ffc <prvInitialiseTaskLists+0x68>)
 8000fc8:	f7ff fac8 	bl	800055c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <prvInitialiseTaskLists+0x6c>)
 8000fce:	f7ff fac5 	bl	800055c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000fd2:	480c      	ldr	r0, [pc, #48]	; (8001004 <prvInitialiseTaskLists+0x70>)
 8000fd4:	f7ff fac2 	bl	800055c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <prvInitialiseTaskLists+0x74>)
 8000fda:	f7ff fabf 	bl	800055c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <prvInitialiseTaskLists+0x78>)
 8000fe0:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <prvInitialiseTaskLists+0x64>)
 8000fe2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <prvInitialiseTaskLists+0x7c>)
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <prvInitialiseTaskLists+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000003c 	.word	0x2000003c
 8000ff8:	200000a0 	.word	0x200000a0
 8000ffc:	200000b4 	.word	0x200000b4
 8001000:	200000d0 	.word	0x200000d0
 8001004:	200000e4 	.word	0x200000e4
 8001008:	200000fc 	.word	0x200000fc
 800100c:	200000c8 	.word	0x200000c8
 8001010:	200000cc 	.word	0x200000cc

08001014 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800101a:	e019      	b.n	8001050 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800101c:	f000 fc1a 	bl	8001854 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <prvCheckTasksWaitingTermination+0x50>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3304      	adds	r3, #4
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fb1f 	bl	8000670 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <prvCheckTasksWaitingTermination+0x54>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3b01      	subs	r3, #1
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <prvCheckTasksWaitingTermination+0x54>)
 800103a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <prvCheckTasksWaitingTermination+0x58>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3b01      	subs	r3, #1
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <prvCheckTasksWaitingTermination+0x58>)
 8001044:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001046:	f000 fc35 	bl	80018b4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f810 	bl	8001070 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <prvCheckTasksWaitingTermination+0x58>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1e1      	bne.n	800101c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000e4 	.word	0x200000e4
 8001068:	20000110 	.word	0x20000110
 800106c:	200000f8 	.word	0x200000f8

08001070 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fdf5 	bl	8001c6c <vPortFree>
                vPortFree( pxTCB );
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 fdf2 	bl	8001c6c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <prvResetNextTaskUnblockTime+0x30>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d104      	bne.n	80010a8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <prvResetNextTaskUnblockTime+0x34>)
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80010a6:	e005      	b.n	80010b4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <prvResetNextTaskUnblockTime+0x30>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <prvResetNextTaskUnblockTime+0x34>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200000c8 	.word	0x200000c8
 80010c4:	20000130 	.word	0x20000130

080010c8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00a      	beq.n	80010f2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80010dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010e0:	f383 8811 	msr	BASEPRI, r3
 80010e4:	f3bf 8f6f 	isb	sy
 80010e8:	f3bf 8f4f 	dsb	sy
 80010ec:	613b      	str	r3, [r7, #16]
    }
 80010ee:	bf00      	nop
 80010f0:	e7fe      	b.n	80010f0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80010f2:	f000 fbaf 	bl	8001854 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80010f6:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <xTaskGenericNotifyWait+0x108>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4413      	add	r3, r2
 80010fe:	3354      	adds	r3, #84	; 0x54
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d022      	beq.n	800114e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <xTaskGenericNotifyWait+0x108>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	3214      	adds	r2, #20
 8001110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	43d2      	mvns	r2, r2
 8001118:	4011      	ands	r1, r2
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	3214      	adds	r2, #20
 800111e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <xTaskGenericNotifyWait+0x108>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	3354      	adds	r3, #84	; 0x54
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001136:	2101      	movs	r1, #1
 8001138:	6a38      	ldr	r0, [r7, #32]
 800113a:	f000 f963 	bl	8001404 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <xTaskGenericNotifyWait+0x10c>)
 8001140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	f3bf 8f4f 	dsb	sy
 800114a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800114e:	f000 fbb1 	bl	80018b4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001152:	f000 fb7f 	bl	8001854 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	4613      	mov	r3, r2
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	2040      	movs	r0, #64	; 0x40
 8001164:	f002 fc5c 	bl	8003a20 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <xTaskGenericNotifyWait+0x108>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	3214      	adds	r2, #20
 8001176:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <xTaskGenericNotifyWait+0x108>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4413      	add	r3, r2
 8001186:	3354      	adds	r3, #84	; 0x54
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d002      	beq.n	8001196 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e00e      	b.n	80011b4 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <xTaskGenericNotifyWait+0x108>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	3214      	adds	r2, #20
 800119e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	43d2      	mvns	r2, r2
 80011a6:	4011      	ands	r1, r2
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	3214      	adds	r2, #20
 80011ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80011b0:	2301      	movs	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <xTaskGenericNotifyWait+0x108>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	3354      	adds	r3, #84	; 0x54
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80011c2:	f000 fb77 	bl	80018b4 <vPortExitCritical>

        return xReturn;
 80011c6:	697b      	ldr	r3, [r7, #20]
    }
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000038 	.word	0x20000038
 80011d4:	e000ed04 	.word	0xe000ed04

080011d8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b092      	sub	sp, #72	; 0x48
 80011dc:	af02      	add	r7, sp, #8
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80011e6:	2301      	movs	r3, #1
 80011e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10a      	bne.n	8001206 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80011f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f4:	f383 8811 	msr	BASEPRI, r3
 80011f8:	f3bf 8f6f 	isb	sy
 80011fc:	f3bf 8f4f 	dsb	sy
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8001202:	bf00      	nop
 8001204:	e7fe      	b.n	8001204 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00a      	beq.n	8001222 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800120c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001210:	f383 8811 	msr	BASEPRI, r3
 8001214:	f3bf 8f6f 	isb	sy
 8001218:	f3bf 8f4f 	dsb	sy
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800121e:	bf00      	nop
 8001220:	e7fe      	b.n	8001220 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001222:	f000 fc03 	bl	8001a2c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	63bb      	str	r3, [r7, #56]	; 0x38

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800122a:	f3ef 8211 	mrs	r2, BASEPRI
 800122e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001232:	f383 8811 	msr	BASEPRI, r3
 8001236:	f3bf 8f6f 	isb	sy
 800123a:	f3bf 8f4f 	dsb	sy
 800123e:	627a      	str	r2, [r7, #36]	; 0x24
 8001240:	623b      	str	r3, [r7, #32]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8001246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800124c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	3214      	adds	r2, #20
 8001252:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001258:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800125a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4413      	add	r3, r2
 8001260:	3354      	adds	r3, #84	; 0x54
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	4413      	add	r3, r2
 800126e:	3354      	adds	r3, #84	; 0x54
 8001270:	2202      	movs	r2, #2
 8001272:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	2b04      	cmp	r3, #4
 8001278:	d83b      	bhi.n	80012f2 <xTaskGenericNotifyFromISR+0x11a>
 800127a:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <xTaskGenericNotifyFromISR+0xa8>)
 800127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001280:	08001311 	.word	0x08001311
 8001284:	08001295 	.word	0x08001295
 8001288:	080012b1 	.word	0x080012b1
 800128c:	080012c9 	.word	0x080012c9
 8001290:	080012d7 	.word	0x080012d7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	3214      	adds	r2, #20
 800129a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	ea42 0103 	orr.w	r1, r2, r3
 80012a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	3214      	adds	r2, #20
 80012aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80012ae:	e032      	b.n	8001316 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80012b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	3214      	adds	r2, #20
 80012b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ba:	1c59      	adds	r1, r3, #1
 80012bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	3214      	adds	r2, #20
 80012c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80012c6:	e026      	b.n	8001316 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80012c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	3214      	adds	r2, #20
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80012d4:	e01f      	b.n	8001316 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80012d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d006      	beq.n	80012ec <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80012de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	3214      	adds	r2, #20
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80012ea:	e014      	b.n	8001316 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80012f0:	e011      	b.n	8001316 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80012f2:	4b3d      	ldr	r3, [pc, #244]	; (80013e8 <xTaskGenericNotifyFromISR+0x210>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00c      	beq.n	8001314 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80012fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012fe:	f383 8811 	msr	BASEPRI, r3
 8001302:	f3bf 8f6f 	isb	sy
 8001306:	f3bf 8f4f 	dsb	sy
 800130a:	61fb      	str	r3, [r7, #28]
    }
 800130c:	bf00      	nop
 800130e:	e7fe      	b.n	800130e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8001310:	bf00      	nop
 8001312:	e000      	b.n	8001316 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8001314:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8001316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001318:	4618      	mov	r0, r3
 800131a:	f003 f947 	bl	80045ac <SEGGER_SYSVIEW_ShrinkId>
 800131e:	78f9      	ldrb	r1, [r7, #3]
 8001320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001324:	9201      	str	r2, [sp, #4]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	460b      	mov	r3, r1
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4601      	mov	r1, r0
 800132e:	203f      	movs	r0, #63	; 0x3f
 8001330:	f002 fc08 	bl	8003b44 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001334:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001338:	2b01      	cmp	r3, #1
 800133a:	d149      	bne.n	80013d0 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800133c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00a      	beq.n	800135a <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 8001344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001348:	f383 8811 	msr	BASEPRI, r3
 800134c:	f3bf 8f6f 	isb	sy
 8001350:	f3bf 8f4f 	dsb	sy
 8001354:	61bb      	str	r3, [r7, #24]
    }
 8001356:	bf00      	nop
 8001358:	e7fe      	b.n	8001358 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800135a:	4b24      	ldr	r3, [pc, #144]	; (80013ec <xTaskGenericNotifyFromISR+0x214>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d120      	bne.n	80013a4 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001364:	3304      	adds	r3, #4
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f982 	bl	8000670 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800136e:	4618      	mov	r0, r3
 8001370:	f003 f87a 	bl	8004468 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	2201      	movs	r2, #1
 800137a:	409a      	lsls	r2, r3
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <xTaskGenericNotifyFromISR+0x218>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4313      	orrs	r3, r2
 8001382:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <xTaskGenericNotifyFromISR+0x218>)
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <xTaskGenericNotifyFromISR+0x21c>)
 8001394:	441a      	add	r2, r3
 8001396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001398:	3304      	adds	r3, #4
 800139a:	4619      	mov	r1, r3
 800139c:	4610      	mov	r0, r2
 800139e:	f7ff f90a 	bl	80005b6 <vListInsertEnd>
 80013a2:	e005      	b.n	80013b0 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80013a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a6:	3318      	adds	r3, #24
 80013a8:	4619      	mov	r1, r3
 80013aa:	4813      	ldr	r0, [pc, #76]	; (80013f8 <xTaskGenericNotifyFromISR+0x220>)
 80013ac:	f7ff f903 	bl	80005b6 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80013b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <xTaskGenericNotifyFromISR+0x224>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d908      	bls.n	80013d0 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80013be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80013c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <xTaskGenericNotifyFromISR+0x228>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d2:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80013da:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80013dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80013de:	4618      	mov	r0, r3
 80013e0:	3740      	adds	r7, #64	; 0x40
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000114 	.word	0x20000114
 80013ec:	20000138 	.word	0x20000138
 80013f0:	20000118 	.word	0x20000118
 80013f4:	2000003c 	.word	0x2000003c
 80013f8:	200000d0 	.word	0x200000d0
 80013fc:	20000038 	.word	0x20000038
 8001400:	20000124 	.word	0x20000124

08001404 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800140e:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001414:	4b31      	ldr	r3, [pc, #196]	; (80014dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3304      	adds	r3, #4
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f928 	bl	8000670 <uxListRemove>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10b      	bne.n	800143e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	2201      	movs	r2, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4013      	ands	r3, r2
 800143a:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800143c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001444:	d110      	bne.n	8001468 <prvAddCurrentTaskToDelayedList+0x64>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00d      	beq.n	8001468 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <prvAddCurrentTaskToDelayedList+0xd8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	211b      	movs	r1, #27
 8001452:	4618      	mov	r0, r3
 8001454:	f003 f84a 	bl	80044ec <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <prvAddCurrentTaskToDelayedList+0xd8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3304      	adds	r3, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4820      	ldr	r0, [pc, #128]	; (80014e4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001462:	f7ff f8a8 	bl	80005b6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001466:	e032      	b.n	80014ce <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	429a      	cmp	r2, r3
 800147e:	d20f      	bcs.n	80014a0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2104      	movs	r1, #4
 8001486:	4618      	mov	r0, r3
 8001488:	f003 f830 	bl	80044ec <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3304      	adds	r3, #4
 8001496:	4619      	mov	r1, r3
 8001498:	4610      	mov	r0, r2
 800149a:	f7ff f8b0 	bl	80005fe <vListInsert>
}
 800149e:	e016      	b.n	80014ce <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <prvAddCurrentTaskToDelayedList+0xd8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2104      	movs	r1, #4
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 f820 	bl	80044ec <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <prvAddCurrentTaskToDelayedList+0xe8>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <prvAddCurrentTaskToDelayedList+0xd8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3304      	adds	r3, #4
 80014b6:	4619      	mov	r1, r3
 80014b8:	4610      	mov	r0, r2
 80014ba:	f7ff f8a0 	bl	80005fe <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <prvAddCurrentTaskToDelayedList+0xec>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d202      	bcs.n	80014ce <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80014c8:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <prvAddCurrentTaskToDelayedList+0xec>)
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	6013      	str	r3, [r2, #0]
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000114 	.word	0x20000114
 80014dc:	20000038 	.word	0x20000038
 80014e0:	20000118 	.word	0x20000118
 80014e4:	200000fc 	.word	0x200000fc
 80014e8:	200000cc 	.word	0x200000cc
 80014ec:	200000c8 	.word	0x200000c8
 80014f0:	20000130 	.word	0x20000130

080014f4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3b04      	subs	r3, #4
 8001504:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800150c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3b04      	subs	r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f023 0201 	bic.w	r2, r3, #1
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3b04      	subs	r3, #4
 8001522:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001524:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <pxPortInitialiseStack+0x64>)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3b14      	subs	r3, #20
 800152e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3b04      	subs	r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f06f 0202 	mvn.w	r2, #2
 8001542:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	3b20      	subs	r3, #32
 8001548:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	0800155d 	.word	0x0800155d

0800155c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <prvTaskExitError+0x54>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800156e:	d00a      	beq.n	8001586 <prvTaskExitError+0x2a>
        __asm volatile
 8001570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001574:	f383 8811 	msr	BASEPRI, r3
 8001578:	f3bf 8f6f 	isb	sy
 800157c:	f3bf 8f4f 	dsb	sy
 8001580:	60fb      	str	r3, [r7, #12]
    }
 8001582:	bf00      	nop
 8001584:	e7fe      	b.n	8001584 <prvTaskExitError+0x28>
        __asm volatile
 8001586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158a:	f383 8811 	msr	BASEPRI, r3
 800158e:	f3bf 8f6f 	isb	sy
 8001592:	f3bf 8f4f 	dsb	sy
 8001596:	60bb      	str	r3, [r7, #8]
    }
 8001598:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800159a:	bf00      	nop
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0fc      	beq.n	800159c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	20000004 	.word	0x20000004
	...

080015c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <pxCurrentTCBConst2>)
 80015c2:	6819      	ldr	r1, [r3, #0]
 80015c4:	6808      	ldr	r0, [r1, #0]
 80015c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ca:	f380 8809 	msr	PSP, r0
 80015ce:	f3bf 8f6f 	isb	sy
 80015d2:	f04f 0000 	mov.w	r0, #0
 80015d6:	f380 8811 	msr	BASEPRI, r0
 80015da:	4770      	bx	lr
 80015dc:	f3af 8000 	nop.w

080015e0 <pxCurrentTCBConst2>:
 80015e0:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop

080015e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <prvPortStartFirstTask+0x24>)
 80015ea:	6800      	ldr	r0, [r0, #0]
 80015ec:	6800      	ldr	r0, [r0, #0]
 80015ee:	f380 8808 	msr	MSP, r0
 80015f2:	f04f 0000 	mov.w	r0, #0
 80015f6:	f380 8814 	msr	CONTROL, r0
 80015fa:	b662      	cpsie	i
 80015fc:	b661      	cpsie	f
 80015fe:	f3bf 8f4f 	dsb	sy
 8001602:	f3bf 8f6f 	isb	sy
 8001606:	df00      	svc	0
 8001608:	bf00      	nop
 800160a:	0000      	.short	0x0000
 800160c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop

08001614 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <xPortStartScheduler+0x120>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a46      	ldr	r2, [pc, #280]	; (8001738 <xPortStartScheduler+0x124>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d10a      	bne.n	800163a <xPortStartScheduler+0x26>
        __asm volatile
 8001624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001628:	f383 8811 	msr	BASEPRI, r3
 800162c:	f3bf 8f6f 	isb	sy
 8001630:	f3bf 8f4f 	dsb	sy
 8001634:	613b      	str	r3, [r7, #16]
    }
 8001636:	bf00      	nop
 8001638:	e7fe      	b.n	8001638 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800163a:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <xPortStartScheduler+0x120>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a3f      	ldr	r2, [pc, #252]	; (800173c <xPortStartScheduler+0x128>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d10a      	bne.n	800165a <xPortStartScheduler+0x46>
        __asm volatile
 8001644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001648:	f383 8811 	msr	BASEPRI, r3
 800164c:	f3bf 8f6f 	isb	sy
 8001650:	f3bf 8f4f 	dsb	sy
 8001654:	60fb      	str	r3, [r7, #12]
    }
 8001656:	bf00      	nop
 8001658:	e7fe      	b.n	8001658 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800165a:	4b39      	ldr	r3, [pc, #228]	; (8001740 <xPortStartScheduler+0x12c>)
 800165c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	22ff      	movs	r2, #255	; 0xff
 800166a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b31      	ldr	r3, [pc, #196]	; (8001744 <xPortStartScheduler+0x130>)
 8001680:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <xPortStartScheduler+0x134>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001688:	e009      	b.n	800169e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800168a:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <xPortStartScheduler+0x134>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3b01      	subs	r3, #1
 8001690:	4a2d      	ldr	r2, [pc, #180]	; (8001748 <xPortStartScheduler+0x134>)
 8001692:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a6:	2b80      	cmp	r3, #128	; 0x80
 80016a8:	d0ef      	beq.n	800168a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80016aa:	4b27      	ldr	r3, [pc, #156]	; (8001748 <xPortStartScheduler+0x134>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d00a      	beq.n	80016cc <xPortStartScheduler+0xb8>
        __asm volatile
 80016b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ba:	f383 8811 	msr	BASEPRI, r3
 80016be:	f3bf 8f6f 	isb	sy
 80016c2:	f3bf 8f4f 	dsb	sy
 80016c6:	60bb      	str	r3, [r7, #8]
    }
 80016c8:	bf00      	nop
 80016ca:	e7fe      	b.n	80016ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <xPortStartScheduler+0x134>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <xPortStartScheduler+0x134>)
 80016d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <xPortStartScheduler+0x134>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80016de:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <xPortStartScheduler+0x134>)
 80016e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <xPortStartScheduler+0x138>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <xPortStartScheduler+0x138>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <xPortStartScheduler+0x138>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <xPortStartScheduler+0x138>)
 80016fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001700:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001702:	f000 f963 	bl	80019cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <xPortStartScheduler+0x13c>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800170c:	f000 f982 	bl	8001a14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <xPortStartScheduler+0x140>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <xPortStartScheduler+0x140>)
 8001716:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800171a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800171c:	f7ff ff64 	bl	80015e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001720:	f7ff fbb6 	bl	8000e90 <vTaskSwitchContext>
    prvTaskExitError();
 8001724:	f7ff ff1a 	bl	800155c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00
 8001738:	410fc271 	.word	0x410fc271
 800173c:	410fc270 	.word	0x410fc270
 8001740:	e000e400 	.word	0xe000e400
 8001744:	2000013c 	.word	0x2000013c
 8001748:	20000140 	.word	0x20000140
 800174c:	e000ed20 	.word	0xe000ed20
 8001750:	20000004 	.word	0x20000004
 8001754:	e000ef34 	.word	0xe000ef34

08001758 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800175e:	4b37      	ldr	r3, [pc, #220]	; (800183c <vInitPrioGroupValue+0xe4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a37      	ldr	r2, [pc, #220]	; (8001840 <vInitPrioGroupValue+0xe8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d10a      	bne.n	800177e <vInitPrioGroupValue+0x26>
        __asm volatile
 8001768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800176c:	f383 8811 	msr	BASEPRI, r3
 8001770:	f3bf 8f6f 	isb	sy
 8001774:	f3bf 8f4f 	dsb	sy
 8001778:	613b      	str	r3, [r7, #16]
    }
 800177a:	bf00      	nop
 800177c:	e7fe      	b.n	800177c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800177e:	4b2f      	ldr	r3, [pc, #188]	; (800183c <vInitPrioGroupValue+0xe4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a30      	ldr	r2, [pc, #192]	; (8001844 <vInitPrioGroupValue+0xec>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d10a      	bne.n	800179e <vInitPrioGroupValue+0x46>
        __asm volatile
 8001788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800178c:	f383 8811 	msr	BASEPRI, r3
 8001790:	f3bf 8f6f 	isb	sy
 8001794:	f3bf 8f4f 	dsb	sy
 8001798:	60fb      	str	r3, [r7, #12]
    }
 800179a:	bf00      	nop
 800179c:	e7fe      	b.n	800179c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800179e:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <vInitPrioGroupValue+0xf0>)
 80017a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	22ff      	movs	r2, #255	; 0xff
 80017ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b22      	ldr	r3, [pc, #136]	; (800184c <vInitPrioGroupValue+0xf4>)
 80017c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <vInitPrioGroupValue+0xf8>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80017cc:	e009      	b.n	80017e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <vInitPrioGroupValue+0xf8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	4a1e      	ldr	r2, [pc, #120]	; (8001850 <vInitPrioGroupValue+0xf8>)
 80017d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	2b80      	cmp	r3, #128	; 0x80
 80017ec:	d0ef      	beq.n	80017ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <vInitPrioGroupValue+0xf8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d00a      	beq.n	8001810 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80017fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fe:	f383 8811 	msr	BASEPRI, r3
 8001802:	f3bf 8f6f 	isb	sy
 8001806:	f3bf 8f4f 	dsb	sy
 800180a:	60bb      	str	r3, [r7, #8]
    }
 800180c:	bf00      	nop
 800180e:	e7fe      	b.n	800180e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <vInitPrioGroupValue+0xf8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <vInitPrioGroupValue+0xf8>)
 8001818:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <vInitPrioGroupValue+0xf8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <vInitPrioGroupValue+0xf8>)
 8001824:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800182e:	bf00      	nop
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00
 8001840:	410fc271 	.word	0x410fc271
 8001844:	410fc270 	.word	0x410fc270
 8001848:	e000e400 	.word	0xe000e400
 800184c:	2000013c 	.word	0x2000013c
 8001850:	20000140 	.word	0x20000140

08001854 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
        __asm volatile
 800185a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185e:	f383 8811 	msr	BASEPRI, r3
 8001862:	f3bf 8f6f 	isb	sy
 8001866:	f3bf 8f4f 	dsb	sy
 800186a:	607b      	str	r3, [r7, #4]
    }
 800186c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <vPortEnterCritical+0x58>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <vPortEnterCritical+0x58>)
 8001876:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <vPortEnterCritical+0x58>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d10f      	bne.n	80018a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <vPortEnterCritical+0x5c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00a      	beq.n	80018a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800188a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800188e:	f383 8811 	msr	BASEPRI, r3
 8001892:	f3bf 8f6f 	isb	sy
 8001896:	f3bf 8f4f 	dsb	sy
 800189a:	603b      	str	r3, [r7, #0]
    }
 800189c:	bf00      	nop
 800189e:	e7fe      	b.n	800189e <vPortEnterCritical+0x4a>
    }
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	20000004 	.word	0x20000004
 80018b0:	e000ed04 	.word	0xe000ed04

080018b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <vPortExitCritical+0x50>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10a      	bne.n	80018d8 <vPortExitCritical+0x24>
        __asm volatile
 80018c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c6:	f383 8811 	msr	BASEPRI, r3
 80018ca:	f3bf 8f6f 	isb	sy
 80018ce:	f3bf 8f4f 	dsb	sy
 80018d2:	607b      	str	r3, [r7, #4]
    }
 80018d4:	bf00      	nop
 80018d6:	e7fe      	b.n	80018d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <vPortExitCritical+0x50>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3b01      	subs	r3, #1
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <vPortExitCritical+0x50>)
 80018e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <vPortExitCritical+0x50>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d105      	bne.n	80018f6 <vPortExitCritical+0x42>
 80018ea:	2300      	movs	r3, #0
 80018ec:	603b      	str	r3, [r7, #0]
        __asm volatile
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f383 8811 	msr	BASEPRI, r3
    }
 80018f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000004 	.word	0x20000004
	...

08001910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001910:	f3ef 8009 	mrs	r0, PSP
 8001914:	f3bf 8f6f 	isb	sy
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <pxCurrentTCBConst>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f01e 0f10 	tst.w	lr, #16
 8001920:	bf08      	it	eq
 8001922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800192a:	6010      	str	r0, [r2, #0]
 800192c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001934:	f380 8811 	msr	BASEPRI, r0
 8001938:	f3bf 8f4f 	dsb	sy
 800193c:	f3bf 8f6f 	isb	sy
 8001940:	f7ff faa6 	bl	8000e90 <vTaskSwitchContext>
 8001944:	f04f 0000 	mov.w	r0, #0
 8001948:	f380 8811 	msr	BASEPRI, r0
 800194c:	bc09      	pop	{r0, r3}
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	6808      	ldr	r0, [r1, #0]
 8001952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001956:	f01e 0f10 	tst.w	lr, #16
 800195a:	bf08      	it	eq
 800195c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001960:	f380 8809 	msr	PSP, r0
 8001964:	f3bf 8f6f 	isb	sy
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	f3af 8000 	nop.w

08001970 <pxCurrentTCBConst>:
 8001970:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop

08001978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
        __asm volatile
 800197e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001982:	f383 8811 	msr	BASEPRI, r3
 8001986:	f3bf 8f6f 	isb	sy
 800198a:	f3bf 8f4f 	dsb	sy
 800198e:	607b      	str	r3, [r7, #4]
    }
 8001990:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001992:	f002 fc4f 	bl	8004234 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001996:	f7ff f9bf 	bl	8000d18 <xTaskIncrementTick>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80019a0:	f002 fca6 	bl	80042f0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <SysTick_Handler+0x50>)
 80019a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e001      	b.n	80019b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80019ae:	f002 fc83 	bl	80042b8 <SEGGER_SYSVIEW_RecordExitISR>
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f383 8811 	msr	BASEPRI, r3
    }
 80019bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000ed04 	.word	0xe000ed04

080019cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <vPortSetupTimerInterrupt+0x34>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <vPortSetupTimerInterrupt+0x38>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <vPortSetupTimerInterrupt+0x3c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <vPortSetupTimerInterrupt+0x40>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	099b      	lsrs	r3, r3, #6
 80019e8:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <vPortSetupTimerInterrupt+0x44>)
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <vPortSetupTimerInterrupt+0x34>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010
 8001a04:	e000e018 	.word	0xe000e018
 8001a08:	20000010 	.word	0x20000010
 8001a0c:	10624dd3 	.word	0x10624dd3
 8001a10:	e000e014 	.word	0xe000e014

08001a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001a24 <vPortEnableVFP+0x10>
 8001a18:	6801      	ldr	r1, [r0, #0]
 8001a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001a1e:	6001      	str	r1, [r0, #0]
 8001a20:	4770      	bx	lr
 8001a22:	0000      	.short	0x0000
 8001a24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop

08001a2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001a32:	f3ef 8305 	mrs	r3, IPSR
 8001a36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b0f      	cmp	r3, #15
 8001a3c:	d914      	bls.n	8001a68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001a3e:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <vPortValidateInterruptPriority+0x70>)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <vPortValidateInterruptPriority+0x74>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	7afa      	ldrb	r2, [r7, #11]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d20a      	bcs.n	8001a68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8001a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a56:	f383 8811 	msr	BASEPRI, r3
 8001a5a:	f3bf 8f6f 	isb	sy
 8001a5e:	f3bf 8f4f 	dsb	sy
 8001a62:	607b      	str	r3, [r7, #4]
    }
 8001a64:	bf00      	nop
 8001a66:	e7fe      	b.n	8001a66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <vPortValidateInterruptPriority+0x78>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <vPortValidateInterruptPriority+0x7c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d90a      	bls.n	8001a8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7c:	f383 8811 	msr	BASEPRI, r3
 8001a80:	f3bf 8f6f 	isb	sy
 8001a84:	f3bf 8f4f 	dsb	sy
 8001a88:	603b      	str	r3, [r7, #0]
    }
 8001a8a:	bf00      	nop
 8001a8c:	e7fe      	b.n	8001a8c <vPortValidateInterruptPriority+0x60>
    }
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e3f0 	.word	0xe000e3f0
 8001aa0:	2000013c 	.word	0x2000013c
 8001aa4:	e000ed0c 	.word	0xe000ed0c
 8001aa8:	20000140 	.word	0x20000140

08001aac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001ab8:	f7ff f86e 	bl	8000b98 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001abc:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <pvPortMalloc+0x1a8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001ac4:	f000 f934 	bl	8001d30 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001ac8:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <pvPortMalloc+0x1ac>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f040 80a7 	bne.w	8001c24 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d02d      	beq.n	8001b38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001adc:	2208      	movs	r2, #8
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d227      	bcs.n	8001b38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8001ae8:	2208      	movs	r2, #8
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d021      	beq.n	8001b3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f023 0307 	bic.w	r3, r3, #7
 8001b00:	3308      	adds	r3, #8
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d214      	bcs.n	8001b32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f023 0307 	bic.w	r3, r3, #7
 8001b0e:	3308      	adds	r3, #8
 8001b10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d010      	beq.n	8001b3e <pvPortMalloc+0x92>
        __asm volatile
 8001b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b20:	f383 8811 	msr	BASEPRI, r3
 8001b24:	f3bf 8f6f 	isb	sy
 8001b28:	f3bf 8f4f 	dsb	sy
 8001b2c:	617b      	str	r3, [r7, #20]
    }
 8001b2e:	bf00      	nop
 8001b30:	e7fe      	b.n	8001b30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b36:	e002      	b.n	8001b3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	e000      	b.n	8001b40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d06e      	beq.n	8001c24 <pvPortMalloc+0x178>
 8001b46:	4b45      	ldr	r3, [pc, #276]	; (8001c5c <pvPortMalloc+0x1b0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d869      	bhi.n	8001c24 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001b50:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <pvPortMalloc+0x1b4>)
 8001b52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001b54:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <pvPortMalloc+0x1b4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b5a:	e004      	b.n	8001b66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d903      	bls.n	8001b78 <pvPortMalloc+0xcc>
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f1      	bne.n	8001b5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001b78:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <pvPortMalloc+0x1a8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d050      	beq.n	8001c24 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2208      	movs	r2, #8
 8001b88:	4413      	add	r3, r2
 8001b8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	1ad2      	subs	r2, r2, r3
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d91f      	bls.n	8001be4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <pvPortMalloc+0x120>
        __asm volatile
 8001bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bba:	f383 8811 	msr	BASEPRI, r3
 8001bbe:	f3bf 8f6f 	isb	sy
 8001bc2:	f3bf 8f4f 	dsb	sy
 8001bc6:	613b      	str	r3, [r7, #16]
    }
 8001bc8:	bf00      	nop
 8001bca:	e7fe      	b.n	8001bca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	1ad2      	subs	r2, r2, r3
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001bde:	69b8      	ldr	r0, [r7, #24]
 8001be0:	f000 f908 	bl	8001df4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <pvPortMalloc+0x1b0>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <pvPortMalloc+0x1b0>)
 8001bf0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <pvPortMalloc+0x1b0>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <pvPortMalloc+0x1b8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d203      	bcs.n	8001c06 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <pvPortMalloc+0x1b0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <pvPortMalloc+0x1b8>)
 8001c04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <pvPortMalloc+0x1ac>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <pvPortMalloc+0x1bc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <pvPortMalloc+0x1bc>)
 8001c22:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001c24:	f7fe ffc6 	bl	8000bb4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00a      	beq.n	8001c48 <pvPortMalloc+0x19c>
        __asm volatile
 8001c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c36:	f383 8811 	msr	BASEPRI, r3
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	60fb      	str	r3, [r7, #12]
    }
 8001c44:	bf00      	nop
 8001c46:	e7fe      	b.n	8001c46 <pvPortMalloc+0x19a>
    return pvReturn;
 8001c48:	69fb      	ldr	r3, [r7, #28]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20012d4c 	.word	0x20012d4c
 8001c58:	20012d60 	.word	0x20012d60
 8001c5c:	20012d50 	.word	0x20012d50
 8001c60:	20012d44 	.word	0x20012d44
 8001c64:	20012d54 	.word	0x20012d54
 8001c68:	20012d58 	.word	0x20012d58

08001c6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d04d      	beq.n	8001d1a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001c7e:	2308      	movs	r3, #8
 8001c80:	425b      	negs	r3, r3
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4413      	add	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <vPortFree+0xb8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10a      	bne.n	8001cb0 <vPortFree+0x44>
        __asm volatile
 8001c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9e:	f383 8811 	msr	BASEPRI, r3
 8001ca2:	f3bf 8f6f 	isb	sy
 8001ca6:	f3bf 8f4f 	dsb	sy
 8001caa:	60fb      	str	r3, [r7, #12]
    }
 8001cac:	bf00      	nop
 8001cae:	e7fe      	b.n	8001cae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00a      	beq.n	8001cce <vPortFree+0x62>
        __asm volatile
 8001cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cbc:	f383 8811 	msr	BASEPRI, r3
 8001cc0:	f3bf 8f6f 	isb	sy
 8001cc4:	f3bf 8f4f 	dsb	sy
 8001cc8:	60bb      	str	r3, [r7, #8]
    }
 8001cca:	bf00      	nop
 8001ccc:	e7fe      	b.n	8001ccc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <vPortFree+0xb8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01e      	beq.n	8001d1a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d11a      	bne.n	8001d1a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <vPortFree+0xb8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001cf4:	f7fe ff50 	bl	8000b98 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <vPortFree+0xbc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <vPortFree+0xbc>)
 8001d04:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d06:	6938      	ldr	r0, [r7, #16]
 8001d08:	f000 f874 	bl	8001df4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <vPortFree+0xc0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	4a06      	ldr	r2, [pc, #24]	; (8001d2c <vPortFree+0xc0>)
 8001d14:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001d16:	f7fe ff4d 	bl	8000bb4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20012d60 	.word	0x20012d60
 8001d28:	20012d50 	.word	0x20012d50
 8001d2c:	20012d5c 	.word	0x20012d5c

08001d30 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001d36:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001d3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <prvHeapInit+0xac>)
 8001d3e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00c      	beq.n	8001d64 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3307      	adds	r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f023 0307 	bic.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <prvHeapInit+0xac>)
 8001d60:	4413      	add	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d68:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <prvHeapInit+0xb0>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <prvHeapInit+0xb0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	4413      	add	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 0307 	bic.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <prvHeapInit+0xb4>)
 8001d90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <prvHeapInit+0xb4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2200      	movs	r2, #0
 8001d98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <prvHeapInit+0xb4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	1ad2      	subs	r2, r2, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <prvHeapInit+0xb4>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <prvHeapInit+0xb8>)
 8001dbe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4a09      	ldr	r2, [pc, #36]	; (8001dec <prvHeapInit+0xbc>)
 8001dc6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <prvHeapInit+0xc0>)
 8001dca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001dce:	601a      	str	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	20000144 	.word	0x20000144
 8001de0:	20012d44 	.word	0x20012d44
 8001de4:	20012d4c 	.word	0x20012d4c
 8001de8:	20012d54 	.word	0x20012d54
 8001dec:	20012d50 	.word	0x20012d50
 8001df0:	20012d60 	.word	0x20012d60

08001df4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <prvInsertBlockIntoFreeList+0xac>)
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	e002      	b.n	8001e08 <prvInsertBlockIntoFreeList+0x14>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d8f7      	bhi.n	8001e02 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d108      	bne.n	8001e36 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	441a      	add	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	441a      	add	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d118      	bne.n	8001e7c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d00d      	beq.n	8001e72 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	441a      	add	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e008      	b.n	8001e84 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e003      	b.n	8001e84 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d002      	beq.n	8001e92 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20012d44 	.word	0x20012d44
 8001ea4:	20012d4c 	.word	0x20012d4c

08001ea8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001eac:	4803      	ldr	r0, [pc, #12]	; (8001ebc <_cbSendSystemDesc+0x14>)
 8001eae:	f002 f96b 	bl	8004188 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001eb2:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <_cbSendSystemDesc+0x18>)
 8001eb4:	f002 f968 	bl	8004188 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	08006664 	.word	0x08006664
 8001ec0:	080066a8 	.word	0x080066a8

08001ec4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001ece:	6819      	ldr	r1, [r3, #0]
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SEGGER_SYSVIEW_Conf+0x24>)
 8001ed2:	4a06      	ldr	r2, [pc, #24]	; (8001eec <SEGGER_SYSVIEW_Conf+0x28>)
 8001ed4:	f001 fc9c 	bl	8003810 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001ed8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001edc:	f001 fcdc 	bl	8003898 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000010 	.word	0x20000010
 8001ee8:	08001ea9 	.word	0x08001ea9
 8001eec:	080067e8 	.word	0x080067e8

08001ef0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	e033      	b.n	8001f64 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001efc:	491e      	ldr	r1, [pc, #120]	; (8001f78 <_cbSendTaskList+0x88>)
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	491a      	ldr	r1, [pc, #104]	; (8001f78 <_cbSendTaskList+0x88>)
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	4c16      	ldr	r4, [pc, #88]	; (8001f78 <_cbSendTaskList+0x88>)
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4423      	add	r3, r4
 8001f2c:	3308      	adds	r3, #8
 8001f2e:	681c      	ldr	r4, [r3, #0]
 8001f30:	4d11      	ldr	r5, [pc, #68]	; (8001f78 <_cbSendTaskList+0x88>)
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	442b      	add	r3, r5
 8001f3e:	330c      	adds	r3, #12
 8001f40:	681d      	ldr	r5, [r3, #0]
 8001f42:	4e0d      	ldr	r6, [pc, #52]	; (8001f78 <_cbSendTaskList+0x88>)
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4433      	add	r3, r6
 8001f50:	3310      	adds	r3, #16
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	462b      	mov	r3, r5
 8001f58:	4622      	mov	r2, r4
 8001f5a:	f000 f971 	bl	8002240 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3301      	adds	r3, #1
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <_cbSendTaskList+0x8c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d3c6      	bcc.n	8001efc <_cbSendTaskList+0xc>
  }
}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f78:	20012d64 	.word	0x20012d64
 8001f7c:	20012e04 	.word	0x20012e04

08001f80 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001f86:	f7fe feb5 	bl	8000cf4 <xTaskGetTickCountFromISR>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	f04f 0400 	mov.w	r4, #0
 8001fa2:	f04f 0500 	mov.w	r5, #0
 8001fa6:	015d      	lsls	r5, r3, #5
 8001fa8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001fac:	0154      	lsls	r4, r2, #5
 8001fae:	4622      	mov	r2, r4
 8001fb0:	462b      	mov	r3, r5
 8001fb2:	1a12      	subs	r2, r2, r0
 8001fb4:	eb63 0301 	sbc.w	r3, r3, r1
 8001fb8:	f04f 0400 	mov.w	r4, #0
 8001fbc:	f04f 0500 	mov.w	r5, #0
 8001fc0:	009d      	lsls	r5, r3, #2
 8001fc2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8001fc6:	0094      	lsls	r4, r2, #2
 8001fc8:	4622      	mov	r2, r4
 8001fca:	462b      	mov	r3, r5
 8001fcc:	1812      	adds	r2, r2, r0
 8001fce:	eb41 0303 	adc.w	r3, r1, r3
 8001fd2:	f04f 0000 	mov.w	r0, #0
 8001fd6:	f04f 0100 	mov.w	r1, #0
 8001fda:	00d9      	lsls	r1, r3, #3
 8001fdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fe0:	00d0      	lsls	r0, r2, #3
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8001fea:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bdb0      	pop	{r4, r5, r7, pc}

08001ff8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002006:	2205      	movs	r2, #5
 8002008:	492b      	ldr	r1, [pc, #172]	; (80020b8 <SYSVIEW_AddTask+0xc0>)
 800200a:	68b8      	ldr	r0, [r7, #8]
 800200c:	f004 faf6 	bl	80065fc <memcmp>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d04b      	beq.n	80020ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002016:	4b29      	ldr	r3, [pc, #164]	; (80020bc <SYSVIEW_AddTask+0xc4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b07      	cmp	r3, #7
 800201c:	d903      	bls.n	8002026 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800201e:	4828      	ldr	r0, [pc, #160]	; (80020c0 <SYSVIEW_AddTask+0xc8>)
 8002020:	f002 fbc4 	bl	80047ac <SEGGER_SYSVIEW_Warn>
    return;
 8002024:	e044      	b.n	80020b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <SYSVIEW_AddTask+0xc4>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4926      	ldr	r1, [pc, #152]	; (80020c4 <SYSVIEW_AddTask+0xcc>)
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <SYSVIEW_AddTask+0xc4>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4921      	ldr	r1, [pc, #132]	; (80020c4 <SYSVIEW_AddTask+0xcc>)
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3304      	adds	r3, #4
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <SYSVIEW_AddTask+0xc4>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	491b      	ldr	r1, [pc, #108]	; (80020c4 <SYSVIEW_AddTask+0xcc>)
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	3308      	adds	r3, #8
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <SYSVIEW_AddTask+0xc4>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4916      	ldr	r1, [pc, #88]	; (80020c4 <SYSVIEW_AddTask+0xcc>)
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	330c      	adds	r3, #12
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <SYSVIEW_AddTask+0xc4>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4910      	ldr	r1, [pc, #64]	; (80020c4 <SYSVIEW_AddTask+0xcc>)
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	3310      	adds	r3, #16
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <SYSVIEW_AddTask+0xc4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	4a08      	ldr	r2, [pc, #32]	; (80020bc <SYSVIEW_AddTask+0xc4>)
 800209a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f8ca 	bl	8002240 <SYSVIEW_SendTaskInfo>
 80020ac:	e000      	b.n	80020b0 <SYSVIEW_AddTask+0xb8>
    return;
 80020ae:	bf00      	nop

}
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	080066b8 	.word	0x080066b8
 80020bc:	20012e04 	.word	0x20012e04
 80020c0:	080066c0 	.word	0x080066c0
 80020c4:	20012d64 	.word	0x20012d64

080020c8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80020d0:	4b59      	ldr	r3, [pc, #356]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80ab 	beq.w	8002230 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	e00d      	b.n	80020fc <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80020e0:	4956      	ldr	r1, [pc, #344]	; (800223c <SYSVIEW_DeleteTask+0x174>)
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d008      	beq.n	8002108 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	3301      	adds	r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	4b4e      	ldr	r3, [pc, #312]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3ec      	bcc.n	80020e0 <SYSVIEW_DeleteTask+0x18>
 8002106:	e000      	b.n	800210a <SYSVIEW_DeleteTask+0x42>
      break;
 8002108:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800210a:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3b01      	subs	r3, #1
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	429a      	cmp	r2, r3
 8002114:	d111      	bne.n	800213a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4a46      	ldr	r2, [pc, #280]	; (800223c <SYSVIEW_DeleteTask+0x174>)
 8002122:	4413      	add	r3, r2
 8002124:	2214      	movs	r2, #20
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f004 fa83 	bl	8006634 <memset>
    _NumTasks--;
 800212e:	4b42      	ldr	r3, [pc, #264]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3b01      	subs	r3, #1
 8002134:	4a40      	ldr	r2, [pc, #256]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	e07b      	b.n	8002232 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800213a:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	429a      	cmp	r2, r3
 8002142:	d276      	bcs.n	8002232 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8002144:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	1e5a      	subs	r2, r3, #1
 800214a:	493c      	ldr	r1, [pc, #240]	; (800223c <SYSVIEW_DeleteTask+0x174>)
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	6819      	ldr	r1, [r3, #0]
 8002158:	4838      	ldr	r0, [pc, #224]	; (800223c <SYSVIEW_DeleteTask+0x174>)
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4403      	add	r3, r0
 8002166:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8002168:	4b33      	ldr	r3, [pc, #204]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	4933      	ldr	r1, [pc, #204]	; (800223c <SYSVIEW_DeleteTask+0x174>)
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	3304      	adds	r3, #4
 800217c:	6819      	ldr	r1, [r3, #0]
 800217e:	482f      	ldr	r0, [pc, #188]	; (800223c <SYSVIEW_DeleteTask+0x174>)
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4403      	add	r3, r0
 800218c:	3304      	adds	r3, #4
 800218e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8002190:	4b29      	ldr	r3, [pc, #164]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	1e5a      	subs	r2, r3, #1
 8002196:	4929      	ldr	r1, [pc, #164]	; (800223c <SYSVIEW_DeleteTask+0x174>)
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	3308      	adds	r3, #8
 80021a4:	6819      	ldr	r1, [r3, #0]
 80021a6:	4825      	ldr	r0, [pc, #148]	; (800223c <SYSVIEW_DeleteTask+0x174>)
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4403      	add	r3, r0
 80021b4:	3308      	adds	r3, #8
 80021b6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80021b8:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	491f      	ldr	r1, [pc, #124]	; (800223c <SYSVIEW_DeleteTask+0x174>)
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	330c      	adds	r3, #12
 80021cc:	6819      	ldr	r1, [r3, #0]
 80021ce:	481b      	ldr	r0, [pc, #108]	; (800223c <SYSVIEW_DeleteTask+0x174>)
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4403      	add	r3, r0
 80021dc:	330c      	adds	r3, #12
 80021de:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80021e0:	4b15      	ldr	r3, [pc, #84]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	4915      	ldr	r1, [pc, #84]	; (800223c <SYSVIEW_DeleteTask+0x174>)
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3310      	adds	r3, #16
 80021f4:	6819      	ldr	r1, [r3, #0]
 80021f6:	4811      	ldr	r0, [pc, #68]	; (800223c <SYSVIEW_DeleteTask+0x174>)
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4403      	add	r3, r0
 8002204:	3310      	adds	r3, #16
 8002206:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4a09      	ldr	r2, [pc, #36]	; (800223c <SYSVIEW_DeleteTask+0x174>)
 8002218:	4413      	add	r3, r2
 800221a:	2214      	movs	r2, #20
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f004 fa08 	bl	8006634 <memset>
    _NumTasks--;
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3b01      	subs	r3, #1
 800222a:	4a03      	ldr	r2, [pc, #12]	; (8002238 <SYSVIEW_DeleteTask+0x170>)
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e000      	b.n	8002232 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8002230:	bf00      	nop
  }
}
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20012e04 	.word	0x20012e04
 800223c:	20012d64 	.word	0x20012d64

08002240 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	2214      	movs	r2, #20
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f004 f9ec 	bl	8006634 <memset>
  TaskInfo.TaskID     = TaskID;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4618      	mov	r0, r3
 8002276:	f001 fe8f 	bl	8003f98 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800227a:	bf00      	nop
 800227c:	3728      	adds	r7, #40	; 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	db0b      	blt.n	80022ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	4907      	ldr	r1, [pc, #28]	; (80022bc <__NVIC_EnableIRQ+0x38>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2001      	movs	r0, #1
 80022a6:	fa00 f202 	lsl.w	r2, r0, r2
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000e100 	.word	0xe000e100

080022c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	db0a      	blt.n	80022ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	490c      	ldr	r1, [pc, #48]	; (800230c <__NVIC_SetPriority+0x4c>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	0112      	lsls	r2, r2, #4
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	440b      	add	r3, r1
 80022e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e8:	e00a      	b.n	8002300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4908      	ldr	r1, [pc, #32]	; (8002310 <__NVIC_SetPriority+0x50>)
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	3b04      	subs	r3, #4
 80022f8:	0112      	lsls	r2, r2, #4
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	440b      	add	r3, r1
 80022fe:	761a      	strb	r2, [r3, #24]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000e100 	.word	0xe000e100
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800231a:	f002 faa3 	bl	8004864 <SEGGER_SYSVIEW_IsStarted>
 800231e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8002326:	f001 fcbb 	bl	8003ca0 <SEGGER_SYSVIEW_Start>
  }
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <_cbOnUARTRx+0x3c>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b03      	cmp	r3, #3
 8002344:	d806      	bhi.n	8002354 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <_cbOnUARTRx+0x3c>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	3301      	adds	r3, #1
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <_cbOnUARTRx+0x3c>)
 8002350:	701a      	strb	r2, [r3, #0]
    goto Done;
 8002352:	e009      	b.n	8002368 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8002354:	f7ff ffde 	bl	8002314 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <_cbOnUARTRx+0x3c>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4618      	mov	r0, r3
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	2201      	movs	r2, #1
 8002362:	4619      	mov	r1, r3
 8002364:	f000 fb9a 	bl	8002a9c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8002368:	bf00      	nop
}
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000008 	.word	0x20000008

08002374 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <_cbOnUARTTx+0x5c>)
 800237e:	785b      	ldrb	r3, [r3, #1]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d80f      	bhi.n	80023a4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <_cbOnUARTTx+0x5c>)
 8002386:	785b      	ldrb	r3, [r3, #1]
 8002388:	461a      	mov	r2, r3
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <_cbOnUARTTx+0x60>)
 800238c:	5c9a      	ldrb	r2, [r3, r2]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <_cbOnUARTTx+0x5c>)
 8002394:	785b      	ldrb	r3, [r3, #1]
 8002396:	3301      	adds	r3, #1
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <_cbOnUARTTx+0x5c>)
 800239c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800239e:	2301      	movs	r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
    goto Done;
 80023a2:	e00f      	b.n	80023c4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <_cbOnUARTTx+0x5c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fa19 	bl	80027e4 <SEGGER_RTT_ReadUpBufferNoLock>
 80023b2:	4603      	mov	r3, r0
 80023b4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	da02      	bge.n	80023c2 <_cbOnUARTTx+0x4e>
    r = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e000      	b.n	80023c4 <_cbOnUARTTx+0x50>
  }
Done:
 80023c2:	bf00      	nop
  return r;
 80023c4:	68fb      	ldr	r3, [r7, #12]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000008 	.word	0x20000008
 80023d4:	080067f0 	.word	0x080067f0

080023d8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <SEGGER_UART_init+0x1c>)
 80023e2:	4905      	ldr	r1, [pc, #20]	; (80023f8 <SEGGER_UART_init+0x20>)
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f863 	bl	80024b0 <HIF_UART_Init>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	08002335 	.word	0x08002335
 80023f8:	08002375 	.word	0x08002375

080023fc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002402:	4b1e      	ldr	r3, [pc, #120]	; (800247c <USART2_IRQHandler+0x80>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	2b00      	cmp	r3, #0
 8002410:	d011      	beq.n	8002436 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8002412:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <USART2_IRQHandler+0x84>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f003 030b 	and.w	r3, r3, #11
 8002420:	2b00      	cmp	r3, #0
 8002422:	d108      	bne.n	8002436 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <USART2_IRQHandler+0x88>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <USART2_IRQHandler+0x88>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	79fa      	ldrb	r2, [r7, #7]
 8002432:	4610      	mov	r0, r2
 8002434:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01a      	beq.n	8002476 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <USART2_IRQHandler+0x8c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d015      	beq.n	8002474 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <USART2_IRQHandler+0x8c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	1dfa      	adds	r2, r7, #7
 800244e:	4610      	mov	r0, r2
 8002450:	4798      	blx	r3
 8002452:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <USART2_IRQHandler+0x90>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <USART2_IRQHandler+0x90>)
 8002460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e006      	b.n	8002476 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <USART2_IRQHandler+0x80>)
 800246a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800246c:	79fa      	ldrb	r2, [r7, #7]
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <USART2_IRQHandler+0x84>)
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e000      	b.n	8002476 <USART2_IRQHandler+0x7a>
      return;
 8002474:	bf00      	nop
    }
  }
}
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40004400 	.word	0x40004400
 8002480:	40004404 	.word	0x40004404
 8002484:	20012e08 	.word	0x20012e08
 8002488:	20012e0c 	.word	0x20012e0c
 800248c:	4000440c 	.word	0x4000440c

08002490 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <HIF_UART_EnableTXEInterrupt+0x1c>)
 800249a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249e:	6013      	str	r3, [r2, #0]
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	4000440c 	.word	0x4000440c

080024b0 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80024bc:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <HIF_UART_Init+0xc8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2d      	ldr	r2, [pc, #180]	; (8002578 <HIF_UART_Init+0xc8>)
 80024c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c6:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80024c8:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HIF_UART_Init+0xcc>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2b      	ldr	r2, [pc, #172]	; (800257c <HIF_UART_Init+0xcc>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <HIF_UART_Init+0xd0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024e0:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80024e8:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80024ea:	4a25      	ldr	r2, [pc, #148]	; (8002580 <HIF_UART_Init+0xd0>)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80024f0:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HIF_UART_Init+0xd4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024fc:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002504:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8002506:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <HIF_UART_Init+0xd4>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HIF_UART_Init+0xd8>)
 800250e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8002512:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HIF_UART_Init+0xdc>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HIF_UART_Init+0xe0>)
 800251c:	2280      	movs	r2, #128	; 0x80
 800251e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8002526:	4a1b      	ldr	r2, [pc, #108]	; (8002594 <HIF_UART_Init+0xe4>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	3301      	adds	r3, #1
 8002530:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253e:	d302      	bcc.n	8002546 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8002540:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002544:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d004      	beq.n	8002556 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HIF_UART_Init+0xe8>)
 8002552:	b29b      	uxth	r3, r3
 8002554:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8002556:	4a11      	ldr	r2, [pc, #68]	; (800259c <HIF_UART_Init+0xec>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800255c:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <HIF_UART_Init+0xf0>)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8002562:	2106      	movs	r1, #6
 8002564:	2026      	movs	r0, #38	; 0x26
 8002566:	f7ff feab 	bl	80022c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800256a:	2026      	movs	r0, #38	; 0x26
 800256c:	f7ff fe8a 	bl	8002284 <__NVIC_EnableIRQ>
}
 8002570:	bf00      	nop
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40023840 	.word	0x40023840
 800257c:	40023830 	.word	0x40023830
 8002580:	40020020 	.word	0x40020020
 8002584:	40020000 	.word	0x40020000
 8002588:	4000440c 	.word	0x4000440c
 800258c:	40004410 	.word	0x40004410
 8002590:	40004414 	.word	0x40004414
 8002594:	0501bd00 	.word	0x0501bd00
 8002598:	40004408 	.word	0x40004408
 800259c:	20012e08 	.word	0x20012e08
 80025a0:	20012e0c 	.word	0x20012e0c

080025a4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <_DoInit+0x98>)
 80025ac:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2203      	movs	r2, #3
 80025b2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2203      	movs	r2, #3
 80025b8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a20      	ldr	r2, [pc, #128]	; (8002640 <_DoInit+0x9c>)
 80025be:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a20      	ldr	r2, [pc, #128]	; (8002644 <_DoInit+0xa0>)
 80025c4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025cc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a17      	ldr	r2, [pc, #92]	; (8002640 <_DoInit+0x9c>)
 80025e4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a17      	ldr	r2, [pc, #92]	; (8002648 <_DoInit+0xa4>)
 80025ea:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2210      	movs	r2, #16
 80025f0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3307      	adds	r3, #7
 8002608:	4a10      	ldr	r2, [pc, #64]	; (800264c <_DoInit+0xa8>)
 800260a:	6810      	ldr	r0, [r2, #0]
 800260c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800260e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <_DoInit+0xac>)
 8002616:	6810      	ldr	r0, [r2, #0]
 8002618:	6018      	str	r0, [r3, #0]
 800261a:	8891      	ldrh	r1, [r2, #4]
 800261c:	7992      	ldrb	r2, [r2, #6]
 800261e:	8099      	strh	r1, [r3, #4]
 8002620:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002622:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2220      	movs	r2, #32
 800262a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800262c:	f3bf 8f5f 	dmb	sy
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	2001433c 	.word	0x2001433c
 8002640:	08006710 	.word	0x08006710
 8002644:	20012e10 	.word	0x20012e10
 8002648:	20013210 	.word	0x20013210
 800264c:	0800671c 	.word	0x0800671c
 8002650:	08006720 	.word	0x08006720

08002654 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002660:	2300      	movs	r3, #0
 8002662:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	429a      	cmp	r2, r3
 8002676:	d905      	bls.n	8002684 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
 8002682:	e007      	b.n	8002694 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	69b9      	ldr	r1, [r7, #24]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	1acb      	subs	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	3b01      	subs	r3, #1
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269e:	4293      	cmp	r3, r2
 80026a0:	bf28      	it	cs
 80026a2:	4613      	movcs	r3, r2
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80026a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4293      	cmp	r3, r2
 80026ac:	bf28      	it	cs
 80026ae:	4613      	movcs	r3, r2
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4413      	add	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80026bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	6978      	ldr	r0, [r7, #20]
 80026c2:	f003 ffa9 	bl	8006618 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80026c6:	6a3a      	ldr	r2, [r7, #32]
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	4413      	add	r3, r2
 80026cc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	4413      	add	r3, r2
 80026d4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	4413      	add	r3, r2
 80026e4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d101      	bne.n	80026f4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80026f4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1b2      	bne.n	800266a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8002704:	6a3b      	ldr	r3, [r7, #32]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3728      	adds	r7, #40	; 0x28
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800270e:	b580      	push	{r7, lr}
 8002710:	b088      	sub	sp, #32
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	429a      	cmp	r2, r3
 8002730:	d911      	bls.n	8002756 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4413      	add	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	6938      	ldr	r0, [r7, #16]
 8002742:	f003 ff69 	bl	8006618 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002746:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	441a      	add	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002754:	e01f      	b.n	8002796 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	4413      	add	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	6938      	ldr	r0, [r7, #16]
 800276a:	f003 ff55 	bl	8006618 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4413      	add	r3, r2
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4619      	mov	r1, r3
 8002786:	6938      	ldr	r0, [r7, #16]
 8002788:	f003 ff46 	bl	8006618 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800278c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	60da      	str	r2, [r3, #12]
}
 8002796:	bf00      	nop
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800279e:	b480      	push	{r7}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d808      	bhi.n	80027cc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad2      	subs	r2, r2, r3
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	3b01      	subs	r3, #1
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	e004      	b.n	80027d6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80027d6:	697b      	ldr	r3, [r7, #20]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08c      	sub	sp, #48	; 0x30
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80027f0:	4b3e      	ldr	r3, [pc, #248]	; (80028ec <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80027f2:	623b      	str	r3, [r7, #32]
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80027fe:	f7ff fed1 	bl	80025a4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4a37      	ldr	r2, [pc, #220]	; (80028ec <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002810:	4413      	add	r3, r2
 8002812:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	429a      	cmp	r2, r3
 800282e:	d92b      	bls.n	8002888 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4293      	cmp	r3, r2
 8002840:	bf28      	it	cs
 8002842:	4613      	movcs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284c:	4413      	add	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	6939      	ldr	r1, [r7, #16]
 8002854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002856:	f003 fedf 	bl	8006618 <memcpy>
    NumBytesRead += NumBytesRem;
 800285a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	4413      	add	r3, r2
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	4413      	add	r3, r2
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	4413      	add	r3, r2
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002880:	429a      	cmp	r2, r3
 8002882:	d101      	bne.n	8002888 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8002884:	2300      	movs	r3, #0
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4293      	cmp	r3, r2
 8002896:	bf28      	it	cs
 8002898:	4613      	movcs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d019      	beq.n	80028d6 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	4413      	add	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	6939      	ldr	r1, [r7, #16]
 80028b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028b2:	f003 feb1 	bl	8006618 <memcpy>
    NumBytesRead += NumBytesRem;
 80028b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	4413      	add	r3, r2
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	4413      	add	r3, r2
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80028ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	4413      	add	r3, r2
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028e0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3730      	adds	r7, #48	; 0x30
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	2001433c 	.word	0x2001433c

080028f0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	; 0x30
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80028fc:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <SEGGER_RTT_ReadNoLock+0x108>)
 80028fe:	623b      	str	r3, [r7, #32]
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <SEGGER_RTT_ReadNoLock+0x1e>
 800290a:	f7ff fe4b 	bl	80025a4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	3360      	adds	r3, #96	; 0x60
 800291a:	4a37      	ldr	r2, [pc, #220]	; (80029f8 <SEGGER_RTT_ReadNoLock+0x108>)
 800291c:	4413      	add	r3, r2
 800291e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	429a      	cmp	r2, r3
 800293a:	d92b      	bls.n	8002994 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4293      	cmp	r3, r2
 800294c:	bf28      	it	cs
 800294e:	4613      	movcs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	4413      	add	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	6939      	ldr	r1, [r7, #16]
 8002960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002962:	f003 fe59 	bl	8006618 <memcpy>
    NumBytesRead += NumBytesRem;
 8002966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	4413      	add	r3, r2
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800296e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	4413      	add	r3, r2
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800297e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	4413      	add	r3, r2
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800298c:	429a      	cmp	r2, r3
 800298e:	d101      	bne.n	8002994 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002990:	2300      	movs	r3, #0
 8002992:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4293      	cmp	r3, r2
 80029a2:	bf28      	it	cs
 80029a4:	4613      	movcs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d019      	beq.n	80029e2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	4413      	add	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	6939      	ldr	r1, [r7, #16]
 80029bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029be:	f003 fe2b 	bl	8006618 <memcpy>
    NumBytesRead += NumBytesRem;
 80029c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	4413      	add	r3, r2
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80029ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	4413      	add	r3, r2
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80029da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	4413      	add	r3, r2
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029ec:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3730      	adds	r7, #48	; 0x30
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	2001433c 	.word	0x2001433c

080029fc <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	3360      	adds	r3, #96	; 0x60
 8002a18:	4a1f      	ldr	r2, [pc, #124]	; (8002a98 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8002a1a:	4413      	add	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d029      	beq.n	8002a7a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d82e      	bhi.n	8002a88 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d013      	beq.n	8002a5a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8002a32:	e029      	b.n	8002a88 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002a34:	6978      	ldr	r0, [r7, #20]
 8002a36:	f7ff feb2 	bl	800279e <_GetAvailWriteSpace>
 8002a3a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d202      	bcs.n	8002a4a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002a48:	e021      	b.n	8002a8e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	69b9      	ldr	r1, [r7, #24]
 8002a52:	6978      	ldr	r0, [r7, #20]
 8002a54:	f7ff fe5b 	bl	800270e <_WriteNoCheck>
    break;
 8002a58:	e019      	b.n	8002a8e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002a5a:	6978      	ldr	r0, [r7, #20]
 8002a5c:	f7ff fe9f 	bl	800279e <_GetAvailWriteSpace>
 8002a60:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4293      	cmp	r3, r2
 8002a68:	bf28      	it	cs
 8002a6a:	4613      	movcs	r3, r2
 8002a6c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	69b9      	ldr	r1, [r7, #24]
 8002a72:	6978      	ldr	r0, [r7, #20]
 8002a74:	f7ff fe4b 	bl	800270e <_WriteNoCheck>
    break;
 8002a78:	e009      	b.n	8002a8e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	69b9      	ldr	r1, [r7, #24]
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff fde8 	bl	8002654 <_WriteBlocking>
 8002a84:	61f8      	str	r0, [r7, #28]
    break;
 8002a86:	e002      	b.n	8002a8e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
    break;
 8002a8c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	2001433c 	.word	0x2001433c

08002a9c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <SEGGER_RTT_WriteDownBuffer+0x1e>
 8002ab6:	f7ff fd75 	bl	80025a4 <_DoInit>
  SEGGER_RTT_LOCK();
 8002aba:	f3ef 8311 	mrs	r3, BASEPRI
 8002abe:	f04f 0120 	mov.w	r1, #32
 8002ac2:	f381 8811 	msr	BASEPRI, r1
 8002ac6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7ff ff95 	bl	80029fc <SEGGER_RTT_WriteDownBufferNoLock>
 8002ad2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8002ada:	697b      	ldr	r3, [r7, #20]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3720      	adds	r7, #32
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	2001433c 	.word	0x2001433c

08002ae8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002af6:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <SEGGER_RTT_AllocUpBuffer+0x20>
 8002b04:	f7ff fd4e 	bl	80025a4 <_DoInit>
  SEGGER_RTT_LOCK();
 8002b08:	f3ef 8311 	mrs	r3, BASEPRI
 8002b0c:	f04f 0120 	mov.w	r1, #32
 8002b10:	f381 8811 	msr	BASEPRI, r1
 8002b14:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002b16:	4b35      	ldr	r3, [pc, #212]	; (8002bec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002b18:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002b1e:	6939      	ldr	r1, [r7, #16]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	3304      	adds	r3, #4
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	dbeb      	blt.n	8002b1e <SEGGER_RTT_AllocUpBuffer+0x36>
 8002b46:	e000      	b.n	8002b4a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002b48:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	da3f      	bge.n	8002bd4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8002b54:	6939      	ldr	r1, [r7, #16]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002b68:	6939      	ldr	r1, [r7, #16]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	3304      	adds	r3, #4
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002b7e:	6939      	ldr	r1, [r7, #16]
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3320      	adds	r3, #32
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8002b92:	6939      	ldr	r1, [r7, #16]
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3328      	adds	r3, #40	; 0x28
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8002ba6:	6939      	ldr	r1, [r7, #16]
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	4613      	mov	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3324      	adds	r3, #36	; 0x24
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8002bba:	6939      	ldr	r1, [r7, #16]
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	332c      	adds	r3, #44	; 0x2c
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002bce:	f3bf 8f5f 	dmb	sy
 8002bd2:	e002      	b.n	8002bda <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8002be0:	69fb      	ldr	r3, [r7, #28]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	2001433c 	.word	0x2001433c

08002bf0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8002bfe:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002c00:	623b      	str	r3, [r7, #32]
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002c0c:	f7ff fcca 	bl	80025a4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002c10:	4b1c      	ldr	r3, [pc, #112]	; (8002c84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002c12:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d82c      	bhi.n	8002c74 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8002c1a:	f3ef 8311 	mrs	r3, BASEPRI
 8002c1e:	f04f 0120 	mov.w	r1, #32
 8002c22:	f381 8811 	msr	BASEPRI, r1
 8002c26:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	3360      	adds	r3, #96	; 0x60
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	4413      	add	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00e      	beq.n	8002c5e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c62:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002c64:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
 8002c72:	e002      	b.n	8002c7a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3728      	adds	r7, #40	; 0x28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	2001433c 	.word	0x2001433c

08002c88 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00f      	beq.n	8002cbe <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8002c9e:	e002      	b.n	8002ca6 <_EncodeStr+0x1e>
      Len++;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f6      	bne.n	8002ca0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d901      	bls.n	8002cbe <_EncodeStr+0x36>
      Len = Limit;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2bfe      	cmp	r3, #254	; 0xfe
 8002cc2:	d806      	bhi.n	8002cd2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	60fa      	str	r2, [r7, #12]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e011      	b.n	8002cf6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	60fa      	str	r2, [r7, #12]
 8002cd8:	22ff      	movs	r2, #255	; 0xff
 8002cda:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	60fa      	str	r2, [r7, #12]
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	0a19      	lsrs	r1, r3, #8
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	60fa      	str	r2, [r7, #12]
 8002cf2:	b2ca      	uxtb	r2, r1
 8002cf4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002cfa:	e00a      	b.n	8002d12 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	1c53      	adds	r3, r2, #1
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1c59      	adds	r1, r3, #1
 8002d06:	60f9      	str	r1, [r7, #12]
 8002d08:	7812      	ldrb	r2, [r2, #0]
 8002d0a:	701a      	strb	r2, [r3, #0]
    n++;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d3f0      	bcc.n	8002cfc <_EncodeStr+0x74>
  }
  return pPayload;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3304      	adds	r3, #4
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002d46:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <_HandleIncomingPacket+0xe0>)
 8002d48:	7e1b      	ldrb	r3, [r3, #24]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	1cfb      	adds	r3, r7, #3
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4619      	mov	r1, r3
 8002d52:	f7ff fdcd 	bl	80028f0 <SEGGER_RTT_ReadNoLock>
 8002d56:	4603      	mov	r3, r0
 8002d58:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	dd54      	ble.n	8002e0a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	2b80      	cmp	r3, #128	; 0x80
 8002d64:	d032      	beq.n	8002dcc <_HandleIncomingPacket+0x8c>
 8002d66:	2b80      	cmp	r3, #128	; 0x80
 8002d68:	dc42      	bgt.n	8002df0 <_HandleIncomingPacket+0xb0>
 8002d6a:	2b07      	cmp	r3, #7
 8002d6c:	dc16      	bgt.n	8002d9c <_HandleIncomingPacket+0x5c>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	dd3e      	ble.n	8002df0 <_HandleIncomingPacket+0xb0>
 8002d72:	3b01      	subs	r3, #1
 8002d74:	2b06      	cmp	r3, #6
 8002d76:	d83b      	bhi.n	8002df0 <_HandleIncomingPacket+0xb0>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <_HandleIncomingPacket+0x40>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002da3 	.word	0x08002da3
 8002d84:	08002da9 	.word	0x08002da9
 8002d88:	08002daf 	.word	0x08002daf
 8002d8c:	08002db5 	.word	0x08002db5
 8002d90:	08002dbb 	.word	0x08002dbb
 8002d94:	08002dc1 	.word	0x08002dc1
 8002d98:	08002dc7 	.word	0x08002dc7
 8002d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d9e:	d036      	beq.n	8002e0e <_HandleIncomingPacket+0xce>
 8002da0:	e026      	b.n	8002df0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002da2:	f000 ff7d 	bl	8003ca0 <SEGGER_SYSVIEW_Start>
      break;
 8002da6:	e037      	b.n	8002e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002da8:	f001 f836 	bl	8003e18 <SEGGER_SYSVIEW_Stop>
      break;
 8002dac:	e034      	b.n	8002e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002dae:	f001 fa0f 	bl	80041d0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002db2:	e031      	b.n	8002e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002db4:	f001 f9d4 	bl	8004160 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002db8:	e02e      	b.n	8002e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002dba:	f001 f853 	bl	8003e64 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002dbe:	e02b      	b.n	8002e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002dc0:	f001 fca2 	bl	8004708 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002dc4:	e028      	b.n	8002e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002dc6:	f001 fc81 	bl	80046cc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002dca:	e025      	b.n	8002e18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <_HandleIncomingPacket+0xe0>)
 8002dce:	7e1b      	ldrb	r3, [r3, #24]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	1cfb      	adds	r3, r7, #3
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f7ff fd8a 	bl	80028f0 <SEGGER_RTT_ReadNoLock>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	dd15      	ble.n	8002e12 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f001 fbef 	bl	80045cc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002dee:	e010      	b.n	8002e12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	da0e      	bge.n	8002e16 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <_HandleIncomingPacket+0xe0>)
 8002dfa:	7e1b      	ldrb	r3, [r3, #24]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	1cfb      	adds	r3, r7, #3
 8002e00:	2201      	movs	r2, #1
 8002e02:	4619      	mov	r1, r3
 8002e04:	f7ff fd74 	bl	80028f0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002e08:	e005      	b.n	8002e16 <_HandleIncomingPacket+0xd6>
    }
  }
 8002e0a:	bf00      	nop
 8002e0c:	e004      	b.n	8002e18 <_HandleIncomingPacket+0xd8>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e002      	b.n	8002e18 <_HandleIncomingPacket+0xd8>
      break;
 8002e12:	bf00      	nop
 8002e14:	e000      	b.n	8002e18 <_HandleIncomingPacket+0xd8>
      break;
 8002e16:	bf00      	nop
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20014228 	.word	0x20014228

08002e24 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08c      	sub	sp, #48	; 0x30
 8002e28:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	3301      	adds	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e38:	4b32      	ldr	r3, [pc, #200]	; (8002f04 <_TrySendOverflowPacket+0xe0>)
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3e:	e00b      	b.n	8002e58 <_TrySendOverflowPacket+0x34>
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e46:	1c59      	adds	r1, r3, #1
 8002e48:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002e4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	09db      	lsrs	r3, r3, #7
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e5c:	d8f0      	bhi.n	8002e40 <_TrySendOverflowPacket+0x1c>
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002e6e:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <_TrySendOverflowPacket+0xe4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002e74:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <_TrySendOverflowPacket+0xe0>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	e00b      	b.n	8002ea0 <_TrySendOverflowPacket+0x7c>
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	1c59      	adds	r1, r3, #1
 8002e90:	6279      	str	r1, [r7, #36]	; 0x24
 8002e92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	09db      	lsrs	r3, r3, #7
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ea4:	d8f0      	bhi.n	8002e88 <_TrySendOverflowPacket+0x64>
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	627a      	str	r2, [r7, #36]	; 0x24
 8002eac:	6a3a      	ldr	r2, [r7, #32]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002eb6:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <_TrySendOverflowPacket+0xe0>)
 8002eb8:	785b      	ldrb	r3, [r3, #1]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd f982 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002ed0:	f7ff fade 	bl	8002490 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002eda:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <_TrySendOverflowPacket+0xe0>)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <_TrySendOverflowPacket+0xe0>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <_TrySendOverflowPacket+0xe0>)
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e004      	b.n	8002ef8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <_TrySendOverflowPacket+0xe0>)
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	4a03      	ldr	r2, [pc, #12]	; (8002f04 <_TrySendOverflowPacket+0xe0>)
 8002ef6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002ef8:	693b      	ldr	r3, [r7, #16]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3730      	adds	r7, #48	; 0x30
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20014228 	.word	0x20014228
 8002f08:	e0001004 	.word	0xe0001004

08002f0c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002f18:	4b6d      	ldr	r3, [pc, #436]	; (80030d0 <_SendPacket+0x1c4>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d010      	beq.n	8002f42 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002f20:	4b6b      	ldr	r3, [pc, #428]	; (80030d0 <_SendPacket+0x1c4>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80a5 	beq.w	8003074 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002f2a:	4b69      	ldr	r3, [pc, #420]	; (80030d0 <_SendPacket+0x1c4>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d109      	bne.n	8002f46 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002f32:	f7ff ff77 	bl	8002e24 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002f36:	4b66      	ldr	r3, [pc, #408]	; (80030d0 <_SendPacket+0x1c4>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	f040 809c 	bne.w	8003078 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8002f40:	e001      	b.n	8002f46 <_SendPacket+0x3a>
    goto Send;
 8002f42:	bf00      	nop
 8002f44:	e000      	b.n	8002f48 <_SendPacket+0x3c>
Send:
 8002f46:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b1f      	cmp	r3, #31
 8002f4c:	d809      	bhi.n	8002f62 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002f4e:	4b60      	ldr	r3, [pc, #384]	; (80030d0 <_SendPacket+0x1c4>)
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f040 808d 	bne.w	800307c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b17      	cmp	r3, #23
 8002f66:	d807      	bhi.n	8002f78 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	701a      	strb	r2, [r3, #0]
 8002f76:	e03d      	b.n	8002ff4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b7f      	cmp	r3, #127	; 0x7f
 8002f84:	d912      	bls.n	8002fac <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	09da      	lsrs	r2, r3, #7
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	3a01      	subs	r2, #1
 8002f9e:	60fa      	str	r2, [r7, #12]
 8002fa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	e006      	b.n	8002fba <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8002fbe:	d912      	bls.n	8002fe6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	09da      	lsrs	r2, r3, #7
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	3a01      	subs	r2, #1
 8002fd8:	60fa      	str	r2, [r7, #12]
 8002fda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e006      	b.n	8002ff4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002ff4:	4b37      	ldr	r3, [pc, #220]	; (80030d4 <_SendPacket+0x1c8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002ffa:	4b35      	ldr	r3, [pc, #212]	; (80030d0 <_SendPacket+0x1c4>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	623b      	str	r3, [r7, #32]
 800300c:	e00b      	b.n	8003026 <_SendPacket+0x11a>
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	1c59      	adds	r1, r3, #1
 8003016:	6279      	str	r1, [r7, #36]	; 0x24
 8003018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	09db      	lsrs	r3, r3, #7
 8003024:	623b      	str	r3, [r7, #32]
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	2b7f      	cmp	r3, #127	; 0x7f
 800302a:	d8f0      	bhi.n	800300e <_SendPacket+0x102>
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	627a      	str	r2, [r7, #36]	; 0x24
 8003032:	6a3a      	ldr	r2, [r7, #32]
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800303c:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <_SendPacket+0x1c4>)
 800303e:	785b      	ldrb	r3, [r3, #1]
 8003040:	4618      	mov	r0, r3
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	461a      	mov	r2, r3
 800304a:	68f9      	ldr	r1, [r7, #12]
 800304c:	f7fd f8c0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003050:	4603      	mov	r3, r0
 8003052:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003054:	f7ff fa1c 	bl	8002490 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800305e:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <_SendPacket+0x1c4>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	60d3      	str	r3, [r2, #12]
 8003064:	e00b      	b.n	800307e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003066:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <_SendPacket+0x1c4>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	3301      	adds	r3, #1
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <_SendPacket+0x1c4>)
 8003070:	701a      	strb	r2, [r3, #0]
 8003072:	e004      	b.n	800307e <_SendPacket+0x172>
    goto SendDone;
 8003074:	bf00      	nop
 8003076:	e002      	b.n	800307e <_SendPacket+0x172>
      goto SendDone;
 8003078:	bf00      	nop
 800307a:	e000      	b.n	800307e <_SendPacket+0x172>
      goto SendDone;
 800307c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <_SendPacket+0x1c4>)
 8003080:	7e1b      	ldrb	r3, [r3, #24]
 8003082:	4619      	mov	r1, r3
 8003084:	4a14      	ldr	r2, [pc, #80]	; (80030d8 <_SendPacket+0x1cc>)
 8003086:	460b      	mov	r3, r1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	440b      	add	r3, r1
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	336c      	adds	r3, #108	; 0x6c
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <_SendPacket+0x1c4>)
 8003096:	7e1b      	ldrb	r3, [r3, #24]
 8003098:	4618      	mov	r0, r3
 800309a:	490f      	ldr	r1, [pc, #60]	; (80030d8 <_SendPacket+0x1cc>)
 800309c:	4603      	mov	r3, r0
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4403      	add	r3, r0
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	440b      	add	r3, r1
 80030a6:	3370      	adds	r3, #112	; 0x70
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d00b      	beq.n	80030c6 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <_SendPacket+0x1c4>)
 80030b0:	789b      	ldrb	r3, [r3, #2]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d107      	bne.n	80030c6 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <_SendPacket+0x1c4>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80030bc:	f7ff fe40 	bl	8002d40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <_SendPacket+0x1c4>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80030c6:	bf00      	nop
 80030c8:	3728      	adds	r7, #40	; 0x28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20014228 	.word	0x20014228
 80030d4:	e0001004 	.word	0xe0001004
 80030d8:	2001433c 	.word	0x2001433c

080030dc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	3301      	adds	r3, #1
 80030f2:	2b80      	cmp	r3, #128	; 0x80
 80030f4:	d80a      	bhi.n	800310c <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	1c59      	adds	r1, r3, #1
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6051      	str	r1, [r2, #4]
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d15a      	bne.n	80031ca <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	623b      	str	r3, [r7, #32]
 8003134:	e00b      	b.n	800314e <_StoreChar+0x72>
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	1c59      	adds	r1, r3, #1
 800313e:	6279      	str	r1, [r7, #36]	; 0x24
 8003140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	09db      	lsrs	r3, r3, #7
 800314c:	623b      	str	r3, [r7, #32]
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	2b7f      	cmp	r3, #127	; 0x7f
 8003152:	d8f0      	bhi.n	8003136 <_StoreChar+0x5a>
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	627a      	str	r2, [r7, #36]	; 0x24
 800315a:	6a3a      	ldr	r2, [r7, #32]
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	61fb      	str	r3, [r7, #28]
 8003168:	2300      	movs	r3, #0
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	e00b      	b.n	8003186 <_StoreChar+0xaa>
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	1c59      	adds	r1, r3, #1
 8003176:	61f9      	str	r1, [r7, #28]
 8003178:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	09db      	lsrs	r3, r3, #7
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b7f      	cmp	r3, #127	; 0x7f
 800318a:	d8f0      	bhi.n	800316e <_StoreChar+0x92>
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	61fa      	str	r2, [r7, #28]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	221a      	movs	r2, #26
 80031a2:	6939      	ldr	r1, [r7, #16]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff feb1 	bl	8002f0c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fdba 	bl	8002d28 <_PreparePacket>
 80031b4:	4602      	mov	r2, r0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	611a      	str	r2, [r3, #16]
  }
}
 80031ca:	bf00      	nop
 80031cc:	3728      	adds	r7, #40	; 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80031e6:	2301      	movs	r3, #1
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80031ea:	2301      	movs	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80031ee:	e007      	b.n	8003200 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80031f0:	6a3a      	ldr	r2, [r7, #32]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	623b      	str	r3, [r7, #32]
    Width++;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3301      	adds	r3, #1
 80031fe:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d2f3      	bcs.n	80031f0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	429a      	cmp	r2, r3
 800320e:	d901      	bls.n	8003214 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d11f      	bne.n	800325e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01c      	beq.n	800325e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <_PrintUnsigned+0x66>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <_PrintUnsigned+0x66>
        c = '0';
 8003234:	2330      	movs	r3, #48	; 0x30
 8003236:	76fb      	strb	r3, [r7, #27]
 8003238:	e001      	b.n	800323e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800323a:	2320      	movs	r3, #32
 800323c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800323e:	e007      	b.n	8003250 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	3b01      	subs	r3, #1
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8003246:	7efb      	ldrb	r3, [r7, #27]
 8003248:	4619      	mov	r1, r3
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7ff ff46 	bl	80030dc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <_PrintUnsigned+0x8a>
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	429a      	cmp	r2, r3
 800325c:	d3f0      	bcc.n	8003240 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d903      	bls.n	800326c <_PrintUnsigned+0x98>
      NumDigits--;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	3b01      	subs	r3, #1
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	e009      	b.n	8003280 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	d200      	bcs.n	8003280 <_PrintUnsigned+0xac>
        break;
 800327e:	e005      	b.n	800328c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800328a:	e7e8      	b.n	800325e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80032a4:	4a15      	ldr	r2, [pc, #84]	; (80032fc <_PrintUnsigned+0x128>)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	4413      	add	r3, r2
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	4619      	mov	r1, r3
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f7ff ff14 	bl	80030dc <_StoreChar>
    Digit /= Base;
 80032b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e3      	bne.n	800328c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80032c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d011      	beq.n	80032f2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00e      	beq.n	80032f2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80032d4:	e006      	b.n	80032e4 <_PrintUnsigned+0x110>
        FieldWidth--;
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	3b01      	subs	r3, #1
 80032da:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80032dc:	2120      	movs	r1, #32
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f7ff fefc 	bl	80030dc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <_PrintUnsigned+0x11e>
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d3f1      	bcc.n	80032d6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80032f2:	bf00      	nop
 80032f4:	3728      	adds	r7, #40	; 0x28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	08006800 	.word	0x08006800

08003300 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	bfb8      	it	lt
 8003314:	425b      	neglt	r3, r3
 8003316:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003318:	2301      	movs	r3, #1
 800331a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800331c:	e007      	b.n	800332e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	fb92 f3f3 	sdiv	r3, r2, r3
 8003326:	613b      	str	r3, [r7, #16]
    Width++;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	3301      	adds	r3, #1
 800332c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	429a      	cmp	r2, r3
 8003334:	daf3      	bge.n	800331e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	429a      	cmp	r2, r3
 800333c:	d901      	bls.n	8003342 <_PrintInt+0x42>
    Width = NumDigits;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <_PrintInt+0x5e>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	db04      	blt.n	8003358 <_PrintInt+0x58>
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <_PrintInt+0x5e>
    FieldWidth--;
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	3b01      	subs	r3, #1
 800335c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <_PrintInt+0x6e>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d016      	beq.n	800339c <_PrintInt+0x9c>
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d111      	bne.n	800339c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00e      	beq.n	800339c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800337e:	e006      	b.n	800338e <_PrintInt+0x8e>
        FieldWidth--;
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	3b01      	subs	r3, #1
 8003384:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8003386:	2120      	movs	r1, #32
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f7ff fea7 	bl	80030dc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <_PrintInt+0x9c>
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	429a      	cmp	r2, r3
 800339a:	d3f1      	bcc.n	8003380 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	da07      	bge.n	80033b2 <_PrintInt+0xb2>
    v = -v;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	425b      	negs	r3, r3
 80033a6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80033a8:	212d      	movs	r1, #45	; 0x2d
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f7ff fe96 	bl	80030dc <_StoreChar>
 80033b0:	e008      	b.n	80033c4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80033bc:	212b      	movs	r1, #43	; 0x2b
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7ff fe8c 	bl	80030dc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d019      	beq.n	8003402 <_PrintInt+0x102>
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d114      	bne.n	8003402 <_PrintInt+0x102>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d111      	bne.n	8003402 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00e      	beq.n	8003402 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80033e4:	e006      	b.n	80033f4 <_PrintInt+0xf4>
        FieldWidth--;
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80033ec:	2130      	movs	r1, #48	; 0x30
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff fe74 	bl	80030dc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <_PrintInt+0x102>
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d3f1      	bcc.n	80033e6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff fedf 	bl	80031d4 <_PrintUnsigned>
}
 8003416:	bf00      	nop
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b098      	sub	sp, #96	; 0x60
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800342c:	f3ef 8311 	mrs	r3, BASEPRI
 8003430:	f04f 0120 	mov.w	r1, #32
 8003434:	f381 8811 	msr	BASEPRI, r1
 8003438:	633b      	str	r3, [r7, #48]	; 0x30
 800343a:	48b7      	ldr	r0, [pc, #732]	; (8003718 <_VPrintTarget+0x2f8>)
 800343c:	f7ff fc74 	bl	8002d28 <_PreparePacket>
 8003440:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003442:	4bb5      	ldr	r3, [pc, #724]	; (8003718 <_VPrintTarget+0x2f8>)
 8003444:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3301      	adds	r3, #1
 8003452:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8003466:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 8183 	beq.w	8003776 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8003470:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003474:	2b25      	cmp	r3, #37	; 0x25
 8003476:	f040 8170 	bne.w	800375a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800347a:	2300      	movs	r3, #0
 800347c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800347e:	2301      	movs	r3, #1
 8003480:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800348a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800348e:	3b23      	subs	r3, #35	; 0x23
 8003490:	2b0d      	cmp	r3, #13
 8003492:	d83f      	bhi.n	8003514 <_VPrintTarget+0xf4>
 8003494:	a201      	add	r2, pc, #4	; (adr r2, 800349c <_VPrintTarget+0x7c>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	08003505 	.word	0x08003505
 80034a0:	08003515 	.word	0x08003515
 80034a4:	08003515 	.word	0x08003515
 80034a8:	08003515 	.word	0x08003515
 80034ac:	08003515 	.word	0x08003515
 80034b0:	08003515 	.word	0x08003515
 80034b4:	08003515 	.word	0x08003515
 80034b8:	08003515 	.word	0x08003515
 80034bc:	080034f5 	.word	0x080034f5
 80034c0:	08003515 	.word	0x08003515
 80034c4:	080034d5 	.word	0x080034d5
 80034c8:	08003515 	.word	0x08003515
 80034cc:	08003515 	.word	0x08003515
 80034d0:	080034e5 	.word	0x080034e5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80034d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	64bb      	str	r3, [r7, #72]	; 0x48
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3301      	adds	r3, #1
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e01a      	b.n	800351a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80034e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e6:	f043 0302 	orr.w	r3, r3, #2
 80034ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3301      	adds	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e012      	b.n	800351a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80034f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f6:	f043 0304 	orr.w	r3, r3, #4
 80034fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3301      	adds	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	e00a      	b.n	800351a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8003504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003506:	f043 0308 	orr.w	r3, r3, #8
 800350a:	64bb      	str	r3, [r7, #72]	; 0x48
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	3301      	adds	r3, #1
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e002      	b.n	800351a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8003514:	2300      	movs	r3, #0
 8003516:	653b      	str	r3, [r7, #80]	; 0x50
 8003518:	bf00      	nop
        }
      } while (v);
 800351a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1b0      	bne.n	8003482 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003520:	2300      	movs	r3, #0
 8003522:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800352c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003530:	2b2f      	cmp	r3, #47	; 0x2f
 8003532:	d912      	bls.n	800355a <_VPrintTarget+0x13a>
 8003534:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003538:	2b39      	cmp	r3, #57	; 0x39
 800353a:	d80e      	bhi.n	800355a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8003542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	461a      	mov	r2, r3
 800354e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003552:	4413      	add	r3, r2
 8003554:	3b30      	subs	r3, #48	; 0x30
 8003556:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8003558:	e7e4      	b.n	8003524 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800355a:	2300      	movs	r3, #0
 800355c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8003566:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800356a:	2b2e      	cmp	r3, #46	; 0x2e
 800356c:	d11d      	bne.n	80035aa <_VPrintTarget+0x18a>
        sFormat++;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3301      	adds	r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800357c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003580:	2b2f      	cmp	r3, #47	; 0x2f
 8003582:	d912      	bls.n	80035aa <_VPrintTarget+0x18a>
 8003584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003588:	2b39      	cmp	r3, #57	; 0x39
 800358a:	d80e      	bhi.n	80035aa <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3301      	adds	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8003592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	461a      	mov	r2, r3
 800359e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035a2:	4413      	add	r3, r2
 80035a4:	3b30      	subs	r3, #48	; 0x30
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80035a8:	e7e4      	b.n	8003574 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80035b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035b6:	2b6c      	cmp	r3, #108	; 0x6c
 80035b8:	d003      	beq.n	80035c2 <_VPrintTarget+0x1a2>
 80035ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035be:	2b68      	cmp	r3, #104	; 0x68
 80035c0:	d107      	bne.n	80035d2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3301      	adds	r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80035d0:	e7ef      	b.n	80035b2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80035d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035d6:	2b25      	cmp	r3, #37	; 0x25
 80035d8:	f000 80b3 	beq.w	8003742 <_VPrintTarget+0x322>
 80035dc:	2b25      	cmp	r3, #37	; 0x25
 80035de:	f2c0 80b7 	blt.w	8003750 <_VPrintTarget+0x330>
 80035e2:	2b78      	cmp	r3, #120	; 0x78
 80035e4:	f300 80b4 	bgt.w	8003750 <_VPrintTarget+0x330>
 80035e8:	2b58      	cmp	r3, #88	; 0x58
 80035ea:	f2c0 80b1 	blt.w	8003750 <_VPrintTarget+0x330>
 80035ee:	3b58      	subs	r3, #88	; 0x58
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	f200 80ad 	bhi.w	8003750 <_VPrintTarget+0x330>
 80035f6:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <_VPrintTarget+0x1dc>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	080036f3 	.word	0x080036f3
 8003600:	08003751 	.word	0x08003751
 8003604:	08003751 	.word	0x08003751
 8003608:	08003751 	.word	0x08003751
 800360c:	08003751 	.word	0x08003751
 8003610:	08003751 	.word	0x08003751
 8003614:	08003751 	.word	0x08003751
 8003618:	08003751 	.word	0x08003751
 800361c:	08003751 	.word	0x08003751
 8003620:	08003751 	.word	0x08003751
 8003624:	08003751 	.word	0x08003751
 8003628:	08003681 	.word	0x08003681
 800362c:	080036a7 	.word	0x080036a7
 8003630:	08003751 	.word	0x08003751
 8003634:	08003751 	.word	0x08003751
 8003638:	08003751 	.word	0x08003751
 800363c:	08003751 	.word	0x08003751
 8003640:	08003751 	.word	0x08003751
 8003644:	08003751 	.word	0x08003751
 8003648:	08003751 	.word	0x08003751
 800364c:	08003751 	.word	0x08003751
 8003650:	08003751 	.word	0x08003751
 8003654:	08003751 	.word	0x08003751
 8003658:	08003751 	.word	0x08003751
 800365c:	0800371d 	.word	0x0800371d
 8003660:	08003751 	.word	0x08003751
 8003664:	08003751 	.word	0x08003751
 8003668:	08003751 	.word	0x08003751
 800366c:	08003751 	.word	0x08003751
 8003670:	080036cd 	.word	0x080036cd
 8003674:	08003751 	.word	0x08003751
 8003678:	08003751 	.word	0x08003751
 800367c:	080036f3 	.word	0x080036f3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	1d19      	adds	r1, r3, #4
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6011      	str	r1, [r2, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800368e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8003694:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fd1c 	bl	80030dc <_StoreChar>
        break;
 80036a4:	e055      	b.n	8003752 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	1d19      	adds	r1, r3, #4
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6011      	str	r1, [r2, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80036b4:	f107 0014 	add.w	r0, r7, #20
 80036b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c2:	220a      	movs	r2, #10
 80036c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80036c6:	f7ff fe1b 	bl	8003300 <_PrintInt>
        break;
 80036ca:	e042      	b.n	8003752 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	1d19      	adds	r1, r3, #4
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6011      	str	r1, [r2, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80036da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80036dc:	f107 0014 	add.w	r0, r7, #20
 80036e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ea:	220a      	movs	r2, #10
 80036ec:	f7ff fd72 	bl	80031d4 <_PrintUnsigned>
        break;
 80036f0:	e02f      	b.n	8003752 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	1d19      	adds	r1, r3, #4
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6011      	str	r1, [r2, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8003700:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003702:	f107 0014 	add.w	r0, r7, #20
 8003706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003710:	2210      	movs	r2, #16
 8003712:	f7ff fd5f 	bl	80031d4 <_PrintUnsigned>
        break;
 8003716:	e01c      	b.n	8003752 <_VPrintTarget+0x332>
 8003718:	20014258 	.word	0x20014258
      case 'p':
        v = va_arg(*pParamList, int);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	1d19      	adds	r1, r3, #4
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6011      	str	r1, [r2, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800372a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800372c:	f107 0014 	add.w	r0, r7, #20
 8003730:	2300      	movs	r3, #0
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	2308      	movs	r3, #8
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	2308      	movs	r3, #8
 800373a:	2210      	movs	r2, #16
 800373c:	f7ff fd4a 	bl	80031d4 <_PrintUnsigned>
        break;
 8003740:	e007      	b.n	8003752 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8003742:	f107 0314 	add.w	r3, r7, #20
 8003746:	2125      	movs	r1, #37	; 0x25
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fcc7 	bl	80030dc <_StoreChar>
        break;
 800374e:	e000      	b.n	8003752 <_VPrintTarget+0x332>
      default:
        break;
 8003750:	bf00      	nop
      }
      sFormat++;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3301      	adds	r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e007      	b.n	800376a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800375a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800375e:	f107 0314 	add.w	r3, r7, #20
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fcb9 	bl	80030dc <_StoreChar>
    }
  } while (*sFormat);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f47f ae72 	bne.w	8003458 <_VPrintTarget+0x38>
 8003774:	e000      	b.n	8003778 <_VPrintTarget+0x358>
      break;
 8003776:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	2b00      	cmp	r3, #0
 800377c:	d041      	beq.n	8003802 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	643b      	str	r3, [r7, #64]	; 0x40
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800378e:	e00b      	b.n	80037a8 <_VPrintTarget+0x388>
 8003790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003792:	b2da      	uxtb	r2, r3
 8003794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003796:	1c59      	adds	r1, r3, #1
 8003798:	6439      	str	r1, [r7, #64]	; 0x40
 800379a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a4:	09db      	lsrs	r3, r3, #7
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037aa:	2b7f      	cmp	r3, #127	; 0x7f
 80037ac:	d8f0      	bhi.n	8003790 <_VPrintTarget+0x370>
 80037ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	643a      	str	r2, [r7, #64]	; 0x40
 80037b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037bc:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80037c2:	2300      	movs	r3, #0
 80037c4:	637b      	str	r3, [r7, #52]	; 0x34
 80037c6:	e00b      	b.n	80037e0 <_VPrintTarget+0x3c0>
 80037c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ce:	1c59      	adds	r1, r3, #1
 80037d0:	63b9      	str	r1, [r7, #56]	; 0x38
 80037d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037dc:	09db      	lsrs	r3, r3, #7
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e2:	2b7f      	cmp	r3, #127	; 0x7f
 80037e4:	d8f0      	bhi.n	80037c8 <_VPrintTarget+0x3a8>
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80037ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	69b9      	ldr	r1, [r7, #24]
 80037fa:	221a      	movs	r2, #26
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fb85 	bl	8002f0c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8003808:	bf00      	nop
 800380a:	3758      	adds	r7, #88	; 0x58
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800381e:	2300      	movs	r3, #0
 8003820:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003824:	4917      	ldr	r1, [pc, #92]	; (8003884 <SEGGER_SYSVIEW_Init+0x74>)
 8003826:	4818      	ldr	r0, [pc, #96]	; (8003888 <SEGGER_SYSVIEW_Init+0x78>)
 8003828:	f7ff f95e 	bl	8002ae8 <SEGGER_RTT_AllocUpBuffer>
 800382c:	4603      	mov	r3, r0
 800382e:	b2da      	uxtb	r2, r3
 8003830:	4b16      	ldr	r3, [pc, #88]	; (800388c <SEGGER_SYSVIEW_Init+0x7c>)
 8003832:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003834:	4b15      	ldr	r3, [pc, #84]	; (800388c <SEGGER_SYSVIEW_Init+0x7c>)
 8003836:	785a      	ldrb	r2, [r3, #1]
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <SEGGER_SYSVIEW_Init+0x7c>)
 800383a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800383c:	4b13      	ldr	r3, [pc, #76]	; (800388c <SEGGER_SYSVIEW_Init+0x7c>)
 800383e:	7e1b      	ldrb	r3, [r3, #24]
 8003840:	4618      	mov	r0, r3
 8003842:	2300      	movs	r3, #0
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	2308      	movs	r3, #8
 8003848:	4a11      	ldr	r2, [pc, #68]	; (8003890 <SEGGER_SYSVIEW_Init+0x80>)
 800384a:	490f      	ldr	r1, [pc, #60]	; (8003888 <SEGGER_SYSVIEW_Init+0x78>)
 800384c:	f7ff f9d0 	bl	8002bf0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <SEGGER_SYSVIEW_Init+0x7c>)
 8003852:	2200      	movs	r2, #0
 8003854:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003856:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <SEGGER_SYSVIEW_Init+0x84>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a0c      	ldr	r2, [pc, #48]	; (800388c <SEGGER_SYSVIEW_Init+0x7c>)
 800385c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800385e:	4a0b      	ldr	r2, [pc, #44]	; (800388c <SEGGER_SYSVIEW_Init+0x7c>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003864:	4a09      	ldr	r2, [pc, #36]	; (800388c <SEGGER_SYSVIEW_Init+0x7c>)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800386a:	4a08      	ldr	r2, [pc, #32]	; (800388c <SEGGER_SYSVIEW_Init+0x7c>)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003870:	4a06      	ldr	r2, [pc, #24]	; (800388c <SEGGER_SYSVIEW_Init+0x7c>)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <SEGGER_SYSVIEW_Init+0x7c>)
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20013220 	.word	0x20013220
 8003888:	08006728 	.word	0x08006728
 800388c:	20014228 	.word	0x20014228
 8003890:	20014220 	.word	0x20014220
 8003894:	e0001004 	.word	0xe0001004

08003898 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80038a0:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6113      	str	r3, [r2, #16]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20014228 	.word	0x20014228

080038b8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80038c0:	f3ef 8311 	mrs	r3, BASEPRI
 80038c4:	f04f 0120 	mov.w	r1, #32
 80038c8:	f381 8811 	msr	BASEPRI, r1
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	4808      	ldr	r0, [pc, #32]	; (80038f0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80038d0:	f7ff fa2a 	bl	8002d28 <_PreparePacket>
 80038d4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	68b8      	ldr	r0, [r7, #8]
 80038dc:	f7ff fb16 	bl	8002f0c <_SendPacket>
  RECORD_END();
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f383 8811 	msr	BASEPRI, r3
}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20014258 	.word	0x20014258

080038f4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80038fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003902:	f04f 0120 	mov.w	r1, #32
 8003906:	f381 8811 	msr	BASEPRI, r1
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	4816      	ldr	r0, [pc, #88]	; (8003968 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800390e:	f7ff fa0b 	bl	8002d28 <_PreparePacket>
 8003912:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	61fb      	str	r3, [r7, #28]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	e00b      	b.n	800393a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	1c59      	adds	r1, r3, #1
 800392a:	61f9      	str	r1, [r7, #28]
 800392c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	09db      	lsrs	r3, r3, #7
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b7f      	cmp	r3, #127	; 0x7f
 800393e:	d8f0      	bhi.n	8003922 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	61fa      	str	r2, [r7, #28]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	68f9      	ldr	r1, [r7, #12]
 8003954:	6938      	ldr	r0, [r7, #16]
 8003956:	f7ff fad9 	bl	8002f0c <_SendPacket>
  RECORD_END();
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f383 8811 	msr	BASEPRI, r3
}
 8003960:	bf00      	nop
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20014258 	.word	0x20014258

0800396c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b08c      	sub	sp, #48	; 0x30
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003978:	f3ef 8311 	mrs	r3, BASEPRI
 800397c:	f04f 0120 	mov.w	r1, #32
 8003980:	f381 8811 	msr	BASEPRI, r1
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	4825      	ldr	r0, [pc, #148]	; (8003a1c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003988:	f7ff f9ce 	bl	8002d28 <_PreparePacket>
 800398c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
 800399a:	e00b      	b.n	80039b4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	1c59      	adds	r1, r3, #1
 80039a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80039a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	09db      	lsrs	r3, r3, #7
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	2b7f      	cmp	r3, #127	; 0x7f
 80039b8:	d8f0      	bhi.n	800399c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	623b      	str	r3, [r7, #32]
 80039d2:	e00b      	b.n	80039ec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	6279      	str	r1, [r7, #36]	; 0x24
 80039de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	09db      	lsrs	r3, r3, #7
 80039ea:	623b      	str	r3, [r7, #32]
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	2b7f      	cmp	r3, #127	; 0x7f
 80039f0:	d8f0      	bhi.n	80039d4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	627a      	str	r2, [r7, #36]	; 0x24
 80039f8:	6a3a      	ldr	r2, [r7, #32]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	6979      	ldr	r1, [r7, #20]
 8003a06:	69b8      	ldr	r0, [r7, #24]
 8003a08:	f7ff fa80 	bl	8002f0c <_SendPacket>
  RECORD_END();
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f383 8811 	msr	BASEPRI, r3
}
 8003a12:	bf00      	nop
 8003a14:	3730      	adds	r7, #48	; 0x30
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20014258 	.word	0x20014258

08003a20 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b090      	sub	sp, #64	; 0x40
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a32:	f04f 0120 	mov.w	r1, #32
 8003a36:	f381 8811 	msr	BASEPRI, r1
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	4840      	ldr	r0, [pc, #256]	; (8003b40 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003a3e:	f7ff f973 	bl	8002d28 <_PreparePacket>
 8003a42:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a50:	e00b      	b.n	8003a6a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a58:	1c59      	adds	r1, r3, #1
 8003a5a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003a5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	701a      	strb	r2, [r3, #0]
 8003a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a66:	09db      	lsrs	r3, r3, #7
 8003a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a6e:	d8f0      	bhi.n	8003a52 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
 8003a88:	e00b      	b.n	8003aa2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a90:	1c59      	adds	r1, r3, #1
 8003a92:	6379      	str	r1, [r7, #52]	; 0x34
 8003a94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	09db      	lsrs	r3, r3, #7
 8003aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8003aa6:	d8f0      	bhi.n	8003a8a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	637a      	str	r2, [r7, #52]	; 0x34
 8003aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac0:	e00b      	b.n	8003ada <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	1c59      	adds	r1, r3, #1
 8003aca:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	09db      	lsrs	r3, r3, #7
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	2b7f      	cmp	r3, #127	; 0x7f
 8003ade:	d8f0      	bhi.n	8003ac2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
 8003af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	e00b      	b.n	8003b12 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	1c59      	adds	r1, r3, #1
 8003b02:	6279      	str	r1, [r7, #36]	; 0x24
 8003b04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	09db      	lsrs	r3, r3, #7
 8003b10:	623b      	str	r3, [r7, #32]
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	2b7f      	cmp	r3, #127	; 0x7f
 8003b16:	d8f0      	bhi.n	8003afa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b1e:	6a3a      	ldr	r2, [r7, #32]
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	6979      	ldr	r1, [r7, #20]
 8003b2c:	69b8      	ldr	r0, [r7, #24]
 8003b2e:	f7ff f9ed 	bl	8002f0c <_SendPacket>
  RECORD_END();
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f383 8811 	msr	BASEPRI, r3
}
 8003b38:	bf00      	nop
 8003b3a:	3740      	adds	r7, #64	; 0x40
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20014258 	.word	0x20014258

08003b44 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b092      	sub	sp, #72	; 0x48
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b52:	f3ef 8311 	mrs	r3, BASEPRI
 8003b56:	f04f 0120 	mov.w	r1, #32
 8003b5a:	f381 8811 	msr	BASEPRI, r1
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	484e      	ldr	r0, [pc, #312]	; (8003c9c <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8003b62:	f7ff f8e1 	bl	8002d28 <_PreparePacket>
 8003b66:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	643b      	str	r3, [r7, #64]	; 0x40
 8003b74:	e00b      	b.n	8003b8e <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8003b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7c:	1c59      	adds	r1, r3, #1
 8003b7e:	6479      	str	r1, [r7, #68]	; 0x44
 8003b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b8a:	09db      	lsrs	r3, r3, #7
 8003b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b90:	2b7f      	cmp	r3, #127	; 0x7f
 8003b92:	d8f0      	bhi.n	8003b76 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8003b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	647a      	str	r2, [r7, #68]	; 0x44
 8003b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bac:	e00b      	b.n	8003bc6 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8003bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb4:	1c59      	adds	r1, r3, #1
 8003bb6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003bb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc2:	09db      	lsrs	r3, r3, #7
 8003bc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8003bca:	d8f0      	bhi.n	8003bae <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8003bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	633b      	str	r3, [r7, #48]	; 0x30
 8003be4:	e00b      	b.n	8003bfe <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bec:	1c59      	adds	r1, r3, #1
 8003bee:	6379      	str	r1, [r7, #52]	; 0x34
 8003bf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	09db      	lsrs	r3, r3, #7
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	2b7f      	cmp	r3, #127	; 0x7f
 8003c02:	d8f0      	bhi.n	8003be6 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8003c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	637a      	str	r2, [r7, #52]	; 0x34
 8003c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c1c:	e00b      	b.n	8003c36 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	1c59      	adds	r1, r3, #1
 8003c26:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	09db      	lsrs	r3, r3, #7
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	2b7f      	cmp	r3, #127	; 0x7f
 8003c3a:	d8f0      	bhi.n	8003c1e <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	e00b      	b.n	8003c6e <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	1c59      	adds	r1, r3, #1
 8003c5e:	6279      	str	r1, [r7, #36]	; 0x24
 8003c60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	09db      	lsrs	r3, r3, #7
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	2b7f      	cmp	r3, #127	; 0x7f
 8003c72:	d8f0      	bhi.n	8003c56 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	627a      	str	r2, [r7, #36]	; 0x24
 8003c7a:	6a3a      	ldr	r2, [r7, #32]
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	6979      	ldr	r1, [r7, #20]
 8003c88:	69b8      	ldr	r0, [r7, #24]
 8003c8a:	f7ff f93f 	bl	8002f0c <_SendPacket>
  RECORD_END();
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f383 8811 	msr	BASEPRI, r3
}
 8003c94:	bf00      	nop
 8003c96:	3748      	adds	r7, #72	; 0x48
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20014258 	.word	0x20014258

08003ca0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08c      	sub	sp, #48	; 0x30
 8003ca4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003ca6:	4b59      	ldr	r3, [pc, #356]	; (8003e0c <SEGGER_SYSVIEW_Start+0x16c>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003cac:	f3ef 8311 	mrs	r3, BASEPRI
 8003cb0:	f04f 0120 	mov.w	r1, #32
 8003cb4:	f381 8811 	msr	BASEPRI, r1
 8003cb8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003cba:	4b54      	ldr	r3, [pc, #336]	; (8003e0c <SEGGER_SYSVIEW_Start+0x16c>)
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	220a      	movs	r2, #10
 8003cc0:	4953      	ldr	r1, [pc, #332]	; (8003e10 <SEGGER_SYSVIEW_Start+0x170>)
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fc fa84 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003cce:	f7fe fbdf 	bl	8002490 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003cd2:	200a      	movs	r0, #10
 8003cd4:	f7ff fdf0 	bl	80038b8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003cd8:	f3ef 8311 	mrs	r3, BASEPRI
 8003cdc:	f04f 0120 	mov.w	r1, #32
 8003ce0:	f381 8811 	msr	BASEPRI, r1
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	484b      	ldr	r0, [pc, #300]	; (8003e14 <SEGGER_SYSVIEW_Start+0x174>)
 8003ce8:	f7ff f81e 	bl	8002d28 <_PreparePacket>
 8003cec:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf6:	4b45      	ldr	r3, [pc, #276]	; (8003e0c <SEGGER_SYSVIEW_Start+0x16c>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cfc:	e00b      	b.n	8003d16 <SEGGER_SYSVIEW_Start+0x76>
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	1c59      	adds	r1, r3, #1
 8003d06:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	09db      	lsrs	r3, r3, #7
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	2b7f      	cmp	r3, #127	; 0x7f
 8003d1a:	d8f0      	bhi.n	8003cfe <SEGGER_SYSVIEW_Start+0x5e>
 8003d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d30:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <SEGGER_SYSVIEW_Start+0x16c>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	623b      	str	r3, [r7, #32]
 8003d36:	e00b      	b.n	8003d50 <SEGGER_SYSVIEW_Start+0xb0>
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	1c59      	adds	r1, r3, #1
 8003d40:	6279      	str	r1, [r7, #36]	; 0x24
 8003d42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	09db      	lsrs	r3, r3, #7
 8003d4e:	623b      	str	r3, [r7, #32]
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	2b7f      	cmp	r3, #127	; 0x7f
 8003d54:	d8f0      	bhi.n	8003d38 <SEGGER_SYSVIEW_Start+0x98>
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	627a      	str	r2, [r7, #36]	; 0x24
 8003d5c:	6a3a      	ldr	r2, [r7, #32]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	4b28      	ldr	r3, [pc, #160]	; (8003e0c <SEGGER_SYSVIEW_Start+0x16c>)
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	e00b      	b.n	8003d8a <SEGGER_SYSVIEW_Start+0xea>
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	1c59      	adds	r1, r3, #1
 8003d7a:	61f9      	str	r1, [r7, #28]
 8003d7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	09db      	lsrs	r3, r3, #7
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d8e:	d8f0      	bhi.n	8003d72 <SEGGER_SYSVIEW_Start+0xd2>
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	61fa      	str	r2, [r7, #28]
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	2300      	movs	r3, #0
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	e00b      	b.n	8003dc2 <SEGGER_SYSVIEW_Start+0x122>
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	1c59      	adds	r1, r3, #1
 8003db2:	6179      	str	r1, [r7, #20]
 8003db4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	09db      	lsrs	r3, r3, #7
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8003dc6:	d8f0      	bhi.n	8003daa <SEGGER_SYSVIEW_Start+0x10a>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	617a      	str	r2, [r7, #20]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003dd8:	2218      	movs	r2, #24
 8003dda:	6839      	ldr	r1, [r7, #0]
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff f895 	bl	8002f0c <_SendPacket>
      RECORD_END();
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003de8:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <SEGGER_SYSVIEW_Start+0x16c>)
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <SEGGER_SYSVIEW_Start+0x16c>)
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003df6:	f000 f9eb 	bl	80041d0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003dfa:	f000 f9b1 	bl	8004160 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003dfe:	f000 fc83 	bl	8004708 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003e02:	bf00      	nop
 8003e04:	3730      	adds	r7, #48	; 0x30
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20014228 	.word	0x20014228
 8003e10:	080067f4 	.word	0x080067f4
 8003e14:	20014258 	.word	0x20014258

08003e18 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e22:	f04f 0120 	mov.w	r1, #32
 8003e26:	f381 8811 	msr	BASEPRI, r1
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	480b      	ldr	r0, [pc, #44]	; (8003e5c <SEGGER_SYSVIEW_Stop+0x44>)
 8003e2e:	f7fe ff7b 	bl	8002d28 <_PreparePacket>
 8003e32:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <SEGGER_SYSVIEW_Stop+0x48>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003e3c:	220b      	movs	r2, #11
 8003e3e:	6839      	ldr	r1, [r7, #0]
 8003e40:	6838      	ldr	r0, [r7, #0]
 8003e42:	f7ff f863 	bl	8002f0c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003e46:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <SEGGER_SYSVIEW_Stop+0x48>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f383 8811 	msr	BASEPRI, r3
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20014258 	.word	0x20014258
 8003e60:	20014228 	.word	0x20014228

08003e64 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08c      	sub	sp, #48	; 0x30
 8003e68:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e6a:	f3ef 8311 	mrs	r3, BASEPRI
 8003e6e:	f04f 0120 	mov.w	r1, #32
 8003e72:	f381 8811 	msr	BASEPRI, r1
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	4845      	ldr	r0, [pc, #276]	; (8003f90 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003e7a:	f7fe ff55 	bl	8002d28 <_PreparePacket>
 8003e7e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e8e:	e00b      	b.n	8003ea8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	1c59      	adds	r1, r3, #1
 8003e98:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	09db      	lsrs	r3, r3, #7
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8003eac:	d8f0      	bhi.n	8003e90 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	4b34      	ldr	r3, [pc, #208]	; (8003f94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	623b      	str	r3, [r7, #32]
 8003ec8:	e00b      	b.n	8003ee2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	1c59      	adds	r1, r3, #1
 8003ed2:	6279      	str	r1, [r7, #36]	; 0x24
 8003ed4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	09db      	lsrs	r3, r3, #7
 8003ee0:	623b      	str	r3, [r7, #32]
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ee6:	d8f0      	bhi.n	8003eca <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	627a      	str	r2, [r7, #36]	; 0x24
 8003eee:	6a3a      	ldr	r2, [r7, #32]
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	61fb      	str	r3, [r7, #28]
 8003efc:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	e00b      	b.n	8003f1c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	1c59      	adds	r1, r3, #1
 8003f0c:	61f9      	str	r1, [r7, #28]
 8003f0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	09db      	lsrs	r3, r3, #7
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f20:	d8f0      	bhi.n	8003f04 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	61fa      	str	r2, [r7, #28]
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	e00b      	b.n	8003f54 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	1c59      	adds	r1, r3, #1
 8003f44:	6179      	str	r1, [r7, #20]
 8003f46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	09db      	lsrs	r3, r3, #7
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	2b7f      	cmp	r3, #127	; 0x7f
 8003f58:	d8f0      	bhi.n	8003f3c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	617a      	str	r2, [r7, #20]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003f6a:	2218      	movs	r2, #24
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	68b8      	ldr	r0, [r7, #8]
 8003f70:	f7fe ffcc 	bl	8002f0c <_SendPacket>
  RECORD_END();
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003f7a:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003f82:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	4798      	blx	r3
  }
}
 8003f88:	bf00      	nop
 8003f8a:	3730      	adds	r7, #48	; 0x30
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20014258 	.word	0x20014258
 8003f94:	20014228 	.word	0x20014228

08003f98 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b092      	sub	sp, #72	; 0x48
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8003fa4:	f04f 0120 	mov.w	r1, #32
 8003fa8:	f381 8811 	msr	BASEPRI, r1
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	486a      	ldr	r0, [pc, #424]	; (8004158 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003fb0:	f7fe feba 	bl	8002d28 <_PreparePacket>
 8003fb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	4b66      	ldr	r3, [pc, #408]	; (800415c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003fca:	e00b      	b.n	8003fe4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd2:	1c59      	adds	r1, r3, #1
 8003fd4:	6479      	str	r1, [r7, #68]	; 0x44
 8003fd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe0:	09db      	lsrs	r3, r3, #7
 8003fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8003fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8003fe8:	d8f0      	bhi.n	8003fcc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	647a      	str	r2, [r7, #68]	; 0x44
 8003ff0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	63bb      	str	r3, [r7, #56]	; 0x38
 8004004:	e00b      	b.n	800401e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	b2da      	uxtb	r2, r3
 800400a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400c:	1c59      	adds	r1, r3, #1
 800400e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004010:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401a:	09db      	lsrs	r3, r3, #7
 800401c:	63bb      	str	r3, [r7, #56]	; 0x38
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	2b7f      	cmp	r3, #127	; 0x7f
 8004022:	d8f0      	bhi.n	8004006 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	63fa      	str	r2, [r7, #60]	; 0x3c
 800402a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]
 8004030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004032:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	4619      	mov	r1, r3
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7fe fe23 	bl	8002c88 <_EncodeStr>
 8004042:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004044:	2209      	movs	r2, #9
 8004046:	68f9      	ldr	r1, [r7, #12]
 8004048:	6938      	ldr	r0, [r7, #16]
 800404a:	f7fe ff5f 	bl	8002f0c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4b40      	ldr	r3, [pc, #256]	; (800415c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	633b      	str	r3, [r7, #48]	; 0x30
 8004062:	e00b      	b.n	800407c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004066:	b2da      	uxtb	r2, r3
 8004068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406a:	1c59      	adds	r1, r3, #1
 800406c:	6379      	str	r1, [r7, #52]	; 0x34
 800406e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	09db      	lsrs	r3, r3, #7
 800407a:	633b      	str	r3, [r7, #48]	; 0x30
 800407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407e:	2b7f      	cmp	r3, #127	; 0x7f
 8004080:	d8f0      	bhi.n	8004064 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	637a      	str	r2, [r7, #52]	; 0x34
 8004088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004090:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	62bb      	str	r3, [r7, #40]	; 0x28
 800409c:	e00b      	b.n	80040b6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	1c59      	adds	r1, r3, #1
 80040a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80040a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]
 80040b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b2:	09db      	lsrs	r3, r3, #7
 80040b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b8:	2b7f      	cmp	r3, #127	; 0x7f
 80040ba:	d8f0      	bhi.n	800409e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80040bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	623b      	str	r3, [r7, #32]
 80040d6:	e00b      	b.n	80040f0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	1c59      	adds	r1, r3, #1
 80040e0:	6279      	str	r1, [r7, #36]	; 0x24
 80040e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	09db      	lsrs	r3, r3, #7
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	2b7f      	cmp	r3, #127	; 0x7f
 80040f4:	d8f0      	bhi.n	80040d8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	627a      	str	r2, [r7, #36]	; 0x24
 80040fc:	6a3a      	ldr	r2, [r7, #32]
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	2300      	movs	r3, #0
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	e00b      	b.n	8004128 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	1c59      	adds	r1, r3, #1
 8004118:	61f9      	str	r1, [r7, #28]
 800411a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	09db      	lsrs	r3, r3, #7
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2b7f      	cmp	r3, #127	; 0x7f
 800412c:	d8f0      	bhi.n	8004110 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	61fa      	str	r2, [r7, #28]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800413e:	2215      	movs	r2, #21
 8004140:	68f9      	ldr	r1, [r7, #12]
 8004142:	6938      	ldr	r0, [r7, #16]
 8004144:	f7fe fee2 	bl	8002f0c <_SendPacket>
  RECORD_END();
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f383 8811 	msr	BASEPRI, r3
}
 800414e:	bf00      	nop
 8004150:	3748      	adds	r7, #72	; 0x48
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20014258 	.word	0x20014258
 800415c:	20014228 	.word	0x20014228

08004160 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004164:	4b07      	ldr	r3, [pc, #28]	; (8004184 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004176:	4b03      	ldr	r3, [pc, #12]	; (8004184 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4798      	blx	r3
  }
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20014228 	.word	0x20014228

08004188 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004190:	f3ef 8311 	mrs	r3, BASEPRI
 8004194:	f04f 0120 	mov.w	r1, #32
 8004198:	f381 8811 	msr	BASEPRI, r1
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	480b      	ldr	r0, [pc, #44]	; (80041cc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80041a0:	f7fe fdc2 	bl	8002d28 <_PreparePacket>
 80041a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80041a6:	2280      	movs	r2, #128	; 0x80
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	6938      	ldr	r0, [r7, #16]
 80041ac:	f7fe fd6c 	bl	8002c88 <_EncodeStr>
 80041b0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80041b2:	220e      	movs	r2, #14
 80041b4:	68f9      	ldr	r1, [r7, #12]
 80041b6:	6938      	ldr	r0, [r7, #16]
 80041b8:	f7fe fea8 	bl	8002f0c <_SendPacket>
  RECORD_END();
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f383 8811 	msr	BASEPRI, r3
}
 80041c2:	bf00      	nop
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20014258 	.word	0x20014258

080041d0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80041d6:	4b15      	ldr	r3, [pc, #84]	; (800422c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01a      	beq.n	8004214 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80041de:	4b13      	ldr	r3, [pc, #76]	; (800422c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d015      	beq.n	8004214 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80041e8:	4b10      	ldr	r3, [pc, #64]	; (800422c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4798      	blx	r3
 80041f0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80041f4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80041f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	000a      	movs	r2, r1
 8004204:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004206:	4613      	mov	r3, r2
 8004208:	461a      	mov	r2, r3
 800420a:	4621      	mov	r1, r4
 800420c:	200d      	movs	r0, #13
 800420e:	f7ff fbad 	bl	800396c <SEGGER_SYSVIEW_RecordU32x2>
 8004212:	e006      	b.n	8004222 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4619      	mov	r1, r3
 800421a:	200c      	movs	r0, #12
 800421c:	f7ff fb6a 	bl	80038f4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bd90      	pop	{r4, r7, pc}
 800422a:	bf00      	nop
 800422c:	20014228 	.word	0x20014228
 8004230:	e0001004 	.word	0xe0001004

08004234 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800423a:	f3ef 8311 	mrs	r3, BASEPRI
 800423e:	f04f 0120 	mov.w	r1, #32
 8004242:	f381 8811 	msr	BASEPRI, r1
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	4819      	ldr	r0, [pc, #100]	; (80042b0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800424a:	f7fe fd6d 	bl	8002d28 <_PreparePacket>
 800424e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004254:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	e00b      	b.n	8004280 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	b2da      	uxtb	r2, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	1c59      	adds	r1, r3, #1
 8004270:	6179      	str	r1, [r7, #20]
 8004272:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	09db      	lsrs	r3, r3, #7
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b7f      	cmp	r3, #127	; 0x7f
 8004284:	d8f0      	bhi.n	8004268 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	617a      	str	r2, [r7, #20]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004296:	2202      	movs	r2, #2
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	68b8      	ldr	r0, [r7, #8]
 800429c:	f7fe fe36 	bl	8002f0c <_SendPacket>
  RECORD_END();
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f383 8811 	msr	BASEPRI, r3
}
 80042a6:	bf00      	nop
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20014258 	.word	0x20014258
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80042be:	f3ef 8311 	mrs	r3, BASEPRI
 80042c2:	f04f 0120 	mov.w	r1, #32
 80042c6:	f381 8811 	msr	BASEPRI, r1
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	4807      	ldr	r0, [pc, #28]	; (80042ec <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80042ce:	f7fe fd2b 	bl	8002d28 <_PreparePacket>
 80042d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80042d4:	2203      	movs	r2, #3
 80042d6:	6839      	ldr	r1, [r7, #0]
 80042d8:	6838      	ldr	r0, [r7, #0]
 80042da:	f7fe fe17 	bl	8002f0c <_SendPacket>
  RECORD_END();
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f383 8811 	msr	BASEPRI, r3
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20014258 	.word	0x20014258

080042f0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80042f6:	f3ef 8311 	mrs	r3, BASEPRI
 80042fa:	f04f 0120 	mov.w	r1, #32
 80042fe:	f381 8811 	msr	BASEPRI, r1
 8004302:	607b      	str	r3, [r7, #4]
 8004304:	4807      	ldr	r0, [pc, #28]	; (8004324 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004306:	f7fe fd0f 	bl	8002d28 <_PreparePacket>
 800430a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800430c:	2212      	movs	r2, #18
 800430e:	6839      	ldr	r1, [r7, #0]
 8004310:	6838      	ldr	r0, [r7, #0]
 8004312:	f7fe fdfb 	bl	8002f0c <_SendPacket>
  RECORD_END();
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f383 8811 	msr	BASEPRI, r3
}
 800431c:	bf00      	nop
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20014258 	.word	0x20014258

08004328 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800432e:	f3ef 8311 	mrs	r3, BASEPRI
 8004332:	f04f 0120 	mov.w	r1, #32
 8004336:	f381 8811 	msr	BASEPRI, r1
 800433a:	607b      	str	r3, [r7, #4]
 800433c:	4807      	ldr	r0, [pc, #28]	; (800435c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800433e:	f7fe fcf3 	bl	8002d28 <_PreparePacket>
 8004342:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004344:	2211      	movs	r2, #17
 8004346:	6839      	ldr	r1, [r7, #0]
 8004348:	6838      	ldr	r0, [r7, #0]
 800434a:	f7fe fddf 	bl	8002f0c <_SendPacket>
  RECORD_END();
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f383 8811 	msr	BASEPRI, r3
}
 8004354:	bf00      	nop
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20014258 	.word	0x20014258

08004360 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004368:	f3ef 8311 	mrs	r3, BASEPRI
 800436c:	f04f 0120 	mov.w	r1, #32
 8004370:	f381 8811 	msr	BASEPRI, r1
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	4819      	ldr	r0, [pc, #100]	; (80043dc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004378:	f7fe fcd6 	bl	8002d28 <_PreparePacket>
 800437c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004382:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e00b      	b.n	80043ae <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	1c59      	adds	r1, r3, #1
 800439e:	61f9      	str	r1, [r7, #28]
 80043a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	09db      	lsrs	r3, r3, #7
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b7f      	cmp	r3, #127	; 0x7f
 80043b2:	d8f0      	bhi.n	8004396 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	61fa      	str	r2, [r7, #28]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80043c4:	2208      	movs	r2, #8
 80043c6:	68f9      	ldr	r1, [r7, #12]
 80043c8:	6938      	ldr	r0, [r7, #16]
 80043ca:	f7fe fd9f 	bl	8002f0c <_SendPacket>
  RECORD_END();
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f383 8811 	msr	BASEPRI, r3
}
 80043d4:	bf00      	nop
 80043d6:	3720      	adds	r7, #32
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20014258 	.word	0x20014258
 80043e0:	20014228 	.word	0x20014228

080043e4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80043ec:	f3ef 8311 	mrs	r3, BASEPRI
 80043f0:	f04f 0120 	mov.w	r1, #32
 80043f4:	f381 8811 	msr	BASEPRI, r1
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	4819      	ldr	r0, [pc, #100]	; (8004460 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80043fc:	f7fe fc94 	bl	8002d28 <_PreparePacket>
 8004400:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004406:	4b17      	ldr	r3, [pc, #92]	; (8004464 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	e00b      	b.n	8004432 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	b2da      	uxtb	r2, r3
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	1c59      	adds	r1, r3, #1
 8004422:	61f9      	str	r1, [r7, #28]
 8004424:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	09db      	lsrs	r3, r3, #7
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b7f      	cmp	r3, #127	; 0x7f
 8004436:	d8f0      	bhi.n	800441a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	61fa      	str	r2, [r7, #28]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004448:	2204      	movs	r2, #4
 800444a:	68f9      	ldr	r1, [r7, #12]
 800444c:	6938      	ldr	r0, [r7, #16]
 800444e:	f7fe fd5d 	bl	8002f0c <_SendPacket>
  RECORD_END();
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f383 8811 	msr	BASEPRI, r3
}
 8004458:	bf00      	nop
 800445a:	3720      	adds	r7, #32
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20014258 	.word	0x20014258
 8004464:	20014228 	.word	0x20014228

08004468 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004470:	f3ef 8311 	mrs	r3, BASEPRI
 8004474:	f04f 0120 	mov.w	r1, #32
 8004478:	f381 8811 	msr	BASEPRI, r1
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	4819      	ldr	r0, [pc, #100]	; (80044e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004480:	f7fe fc52 	bl	8002d28 <_PreparePacket>
 8004484:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800448a:	4b17      	ldr	r3, [pc, #92]	; (80044e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e00b      	b.n	80044b6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	1c59      	adds	r1, r3, #1
 80044a6:	61f9      	str	r1, [r7, #28]
 80044a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	09db      	lsrs	r3, r3, #7
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b7f      	cmp	r3, #127	; 0x7f
 80044ba:	d8f0      	bhi.n	800449e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	61fa      	str	r2, [r7, #28]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80044cc:	2206      	movs	r2, #6
 80044ce:	68f9      	ldr	r1, [r7, #12]
 80044d0:	6938      	ldr	r0, [r7, #16]
 80044d2:	f7fe fd1b 	bl	8002f0c <_SendPacket>
  RECORD_END();
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f383 8811 	msr	BASEPRI, r3
}
 80044dc:	bf00      	nop
 80044de:	3720      	adds	r7, #32
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20014258 	.word	0x20014258
 80044e8:	20014228 	.word	0x20014228

080044ec <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80044f6:	f3ef 8311 	mrs	r3, BASEPRI
 80044fa:	f04f 0120 	mov.w	r1, #32
 80044fe:	f381 8811 	msr	BASEPRI, r1
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	4827      	ldr	r0, [pc, #156]	; (80045a4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004506:	f7fe fc0f 	bl	8002d28 <_PreparePacket>
 800450a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	e00b      	b.n	800453c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	1c59      	adds	r1, r3, #1
 800452c:	6279      	str	r1, [r7, #36]	; 0x24
 800452e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	09db      	lsrs	r3, r3, #7
 800453a:	623b      	str	r3, [r7, #32]
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	2b7f      	cmp	r3, #127	; 0x7f
 8004540:	d8f0      	bhi.n	8004524 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	627a      	str	r2, [r7, #36]	; 0x24
 8004548:	6a3a      	ldr	r2, [r7, #32]
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e00b      	b.n	8004574 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	1c59      	adds	r1, r3, #1
 8004564:	61f9      	str	r1, [r7, #28]
 8004566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	09db      	lsrs	r3, r3, #7
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	2b7f      	cmp	r3, #127	; 0x7f
 8004578:	d8f0      	bhi.n	800455c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	61fa      	str	r2, [r7, #28]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800458a:	2207      	movs	r2, #7
 800458c:	68f9      	ldr	r1, [r7, #12]
 800458e:	6938      	ldr	r0, [r7, #16]
 8004590:	f7fe fcbc 	bl	8002f0c <_SendPacket>
  RECORD_END();
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f383 8811 	msr	BASEPRI, r3
}
 800459a:	bf00      	nop
 800459c:	3728      	adds	r7, #40	; 0x28
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20014258 	.word	0x20014258
 80045a8:	20014228 	.word	0x20014228

080045ac <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	1ad3      	subs	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	20014228 	.word	0x20014228

080045cc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08c      	sub	sp, #48	; 0x30
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80045d6:	4b3b      	ldr	r3, [pc, #236]	; (80046c4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d06d      	beq.n	80046ba <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80045de:	4b39      	ldr	r3, [pc, #228]	; (80046c4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80045e4:	2300      	movs	r3, #0
 80045e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e8:	e008      	b.n	80045fc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80045f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	3301      	adds	r3, #1
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004600:	429a      	cmp	r2, r3
 8004602:	d3f2      	bcc.n	80045ea <SEGGER_SYSVIEW_SendModule+0x1e>
 8004604:	e000      	b.n	8004608 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004606:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d055      	beq.n	80046ba <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800460e:	f3ef 8311 	mrs	r3, BASEPRI
 8004612:	f04f 0120 	mov.w	r1, #32
 8004616:	f381 8811 	msr	BASEPRI, r1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	482a      	ldr	r0, [pc, #168]	; (80046c8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800461e:	f7fe fb83 	bl	8002d28 <_PreparePacket>
 8004622:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	623b      	str	r3, [r7, #32]
 8004630:	e00b      	b.n	800464a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	1c59      	adds	r1, r3, #1
 800463a:	6279      	str	r1, [r7, #36]	; 0x24
 800463c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	09db      	lsrs	r3, r3, #7
 8004648:	623b      	str	r3, [r7, #32]
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	2b7f      	cmp	r3, #127	; 0x7f
 800464e:	d8f0      	bhi.n	8004632 <SEGGER_SYSVIEW_SendModule+0x66>
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	627a      	str	r2, [r7, #36]	; 0x24
 8004656:	6a3a      	ldr	r2, [r7, #32]
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	e00b      	b.n	8004684 <SEGGER_SYSVIEW_SendModule+0xb8>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	1c59      	adds	r1, r3, #1
 8004674:	61f9      	str	r1, [r7, #28]
 8004676:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	09db      	lsrs	r3, r3, #7
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b7f      	cmp	r3, #127	; 0x7f
 8004688:	d8f0      	bhi.n	800466c <SEGGER_SYSVIEW_SendModule+0xa0>
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	61fa      	str	r2, [r7, #28]
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2280      	movs	r2, #128	; 0x80
 80046a0:	4619      	mov	r1, r3
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7fe faf0 	bl	8002c88 <_EncodeStr>
 80046a8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80046aa:	2216      	movs	r2, #22
 80046ac:	68f9      	ldr	r1, [r7, #12]
 80046ae:	6938      	ldr	r0, [r7, #16]
 80046b0:	f7fe fc2c 	bl	8002f0c <_SendPacket>
      RECORD_END();
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80046ba:	bf00      	nop
 80046bc:	3730      	adds	r7, #48	; 0x30
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20014250 	.word	0x20014250
 80046c8:	20014258 	.word	0x20014258

080046cc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80046d2:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00f      	beq.n	80046fa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80046da:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f2      	bne.n	80046e0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20014250 	.word	0x20014250

08004708 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800470e:	f3ef 8311 	mrs	r3, BASEPRI
 8004712:	f04f 0120 	mov.w	r1, #32
 8004716:	f381 8811 	msr	BASEPRI, r1
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	4817      	ldr	r0, [pc, #92]	; (800477c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800471e:	f7fe fb03 	bl	8002d28 <_PreparePacket>
 8004722:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	4b14      	ldr	r3, [pc, #80]	; (8004780 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	e00b      	b.n	800474c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	1c59      	adds	r1, r3, #1
 800473c:	6179      	str	r1, [r7, #20]
 800473e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	09db      	lsrs	r3, r3, #7
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b7f      	cmp	r3, #127	; 0x7f
 8004750:	d8f0      	bhi.n	8004734 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	617a      	str	r2, [r7, #20]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004762:	221b      	movs	r2, #27
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	68b8      	ldr	r0, [r7, #8]
 8004768:	f7fe fbd0 	bl	8002f0c <_SendPacket>
  RECORD_END();
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f383 8811 	msr	BASEPRI, r3
}
 8004772:	bf00      	nop
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20014258 	.word	0x20014258
 8004780:	20014254 	.word	0x20014254

08004784 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8004784:	b40f      	push	{r0, r1, r2, r3}
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800478c:	f107 0314 	add.w	r3, r7, #20
 8004790:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8004792:	1d3b      	adds	r3, r7, #4
 8004794:	461a      	mov	r2, r3
 8004796:	2100      	movs	r1, #0
 8004798:	6938      	ldr	r0, [r7, #16]
 800479a:	f7fe fe41 	bl	8003420 <_VPrintTarget>
  va_end(ParamList);
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a8:	b004      	add	sp, #16
 80047aa:	4770      	bx	lr

080047ac <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	; 0x28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047b4:	f3ef 8311 	mrs	r3, BASEPRI
 80047b8:	f04f 0120 	mov.w	r1, #32
 80047bc:	f381 8811 	msr	BASEPRI, r1
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	4827      	ldr	r0, [pc, #156]	; (8004860 <SEGGER_SYSVIEW_Warn+0xb4>)
 80047c4:	f7fe fab0 	bl	8002d28 <_PreparePacket>
 80047c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047ca:	2280      	movs	r2, #128	; 0x80
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	6938      	ldr	r0, [r7, #16]
 80047d0:	f7fe fa5a 	bl	8002c88 <_EncodeStr>
 80047d4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
 80047da:	2301      	movs	r3, #1
 80047dc:	623b      	str	r3, [r7, #32]
 80047de:	e00b      	b.n	80047f8 <SEGGER_SYSVIEW_Warn+0x4c>
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	1c59      	adds	r1, r3, #1
 80047e8:	6279      	str	r1, [r7, #36]	; 0x24
 80047ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	09db      	lsrs	r3, r3, #7
 80047f6:	623b      	str	r3, [r7, #32]
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	2b7f      	cmp	r3, #127	; 0x7f
 80047fc:	d8f0      	bhi.n	80047e0 <SEGGER_SYSVIEW_Warn+0x34>
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	627a      	str	r2, [r7, #36]	; 0x24
 8004804:	6a3a      	ldr	r2, [r7, #32]
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	e00b      	b.n	8004830 <SEGGER_SYSVIEW_Warn+0x84>
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	b2da      	uxtb	r2, r3
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	1c59      	adds	r1, r3, #1
 8004820:	61f9      	str	r1, [r7, #28]
 8004822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	09db      	lsrs	r3, r3, #7
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b7f      	cmp	r3, #127	; 0x7f
 8004834:	d8f0      	bhi.n	8004818 <SEGGER_SYSVIEW_Warn+0x6c>
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	61fa      	str	r2, [r7, #28]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004846:	221a      	movs	r2, #26
 8004848:	68f9      	ldr	r1, [r7, #12]
 800484a:	6938      	ldr	r0, [r7, #16]
 800484c:	f7fe fb5e 	bl	8002f0c <_SendPacket>
  RECORD_END();
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f383 8811 	msr	BASEPRI, r3
}
 8004856:	bf00      	nop
 8004858:	3728      	adds	r7, #40	; 0x28
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20014258 	.word	0x20014258

08004864 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004868:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800486a:	7e1b      	ldrb	r3, [r3, #24]
 800486c:	4619      	mov	r1, r3
 800486e:	4a13      	ldr	r2, [pc, #76]	; (80048bc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004870:	460b      	mov	r3, r1
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	440b      	add	r3, r1
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4413      	add	r3, r2
 800487a:	336c      	adds	r3, #108	; 0x6c
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004880:	7e1b      	ldrb	r3, [r3, #24]
 8004882:	4618      	mov	r0, r3
 8004884:	490d      	ldr	r1, [pc, #52]	; (80048bc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004886:	4603      	mov	r3, r0
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4403      	add	r3, r0
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	440b      	add	r3, r1
 8004890:	3370      	adds	r3, #112	; 0x70
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d00b      	beq.n	80048b0 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004898:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800489a:	789b      	ldrb	r3, [r3, #2]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d107      	bne.n	80048b0 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80048a6:	f7fe fa4b 	bl	8002d40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80048aa:	4b03      	ldr	r3, [pc, #12]	; (80048b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80048b0:	4b01      	ldr	r3, [pc, #4]	; (80048b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20014228 	.word	0x20014228
 80048bc:	2001433c 	.word	0x2001433c

080048c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048c6:	f000 fc1d 	bl	8005104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048ca:	f000 f877 	bl	80049bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048ce:	f000 f8df 	bl	8004a90 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter (for SEGGER)
  DWT_CTRL |= (1 << 0);
 80048d2:	4b2e      	ldr	r3, [pc, #184]	; (800498c <main+0xcc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2d      	ldr	r2, [pc, #180]	; (800498c <main+0xcc>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6013      	str	r3, [r2, #0]

  // Config. uart based SEGGER communication
  SEGGER_UART_init(250000);
 80048de:	482c      	ldr	r0, [pc, #176]	; (8004990 <main+0xd0>)
 80048e0:	f7fd fd7a 	bl	80023d8 <SEGGER_UART_init>

  // Starting the recording (for SEGGER)
  SEGGER_SYSVIEW_Conf();
 80048e4:	f7fd faee 	bl	8001ec4 <SEGGER_SYSVIEW_Conf>

  // Config. LED_green_task
  status = xTaskCreate(&led_green_handler, "LED_green_task", 200, NULL, 4, &ledg_task_handle);
 80048e8:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <main+0xd4>)
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	2304      	movs	r3, #4
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	2300      	movs	r3, #0
 80048f2:	22c8      	movs	r2, #200	; 0xc8
 80048f4:	4928      	ldr	r1, [pc, #160]	; (8004998 <main+0xd8>)
 80048f6:	4829      	ldr	r0, [pc, #164]	; (800499c <main+0xdc>)
 80048f8:	f7fb fee4 	bl	80006c4 <xTaskCreate>
 80048fc:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d00a      	beq.n	800491a <main+0x5a>
        __asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	60bb      	str	r3, [r7, #8]
    }
 8004916:	bf00      	nop
 8004918:	e7fe      	b.n	8004918 <main+0x58>

  // Config. LED_red_task
  status = xTaskCreate(&led_red_handler, "LED_red_task", 200, NULL, 3, &ledr_task_handle);
 800491a:	4b21      	ldr	r3, [pc, #132]	; (80049a0 <main+0xe0>)
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	2303      	movs	r3, #3
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	2300      	movs	r3, #0
 8004924:	22c8      	movs	r2, #200	; 0xc8
 8004926:	491f      	ldr	r1, [pc, #124]	; (80049a4 <main+0xe4>)
 8004928:	481f      	ldr	r0, [pc, #124]	; (80049a8 <main+0xe8>)
 800492a:	f7fb fecb 	bl	80006c4 <xTaskCreate>
 800492e:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d00a      	beq.n	800494c <main+0x8c>
        __asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	607b      	str	r3, [r7, #4]
    }
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <main+0x8a>

  // Config. LED_orange_task
  status = xTaskCreate(&led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 800494c:	4b17      	ldr	r3, [pc, #92]	; (80049ac <main+0xec>)
 800494e:	9301      	str	r3, [sp, #4]
 8004950:	2302      	movs	r3, #2
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	2300      	movs	r3, #0
 8004956:	22c8      	movs	r2, #200	; 0xc8
 8004958:	4915      	ldr	r1, [pc, #84]	; (80049b0 <main+0xf0>)
 800495a:	4816      	ldr	r0, [pc, #88]	; (80049b4 <main+0xf4>)
 800495c:	f7fb feb2 	bl	80006c4 <xTaskCreate>
 8004960:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d00a      	beq.n	800497e <main+0xbe>
        __asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	603b      	str	r3, [r7, #0]
    }
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <main+0xbc>

  // Make next task deleted to be LED_green_task
  next_task_handle = ledg_task_handle;
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <main+0xd4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a0d      	ldr	r2, [pc, #52]	; (80049b8 <main+0xf8>)
 8004984:	6013      	str	r3, [r2, #0]

  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 8004986:	f7fc f8ab 	bl	8000ae0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800498a:	e7fe      	b.n	800498a <main+0xca>
 800498c:	e0001000 	.word	0xe0001000
 8004990:	0003d090 	.word	0x0003d090
 8004994:	200143e8 	.word	0x200143e8
 8004998:	08006730 	.word	0x08006730
 800499c:	08004d61 	.word	0x08004d61
 80049a0:	200143f0 	.word	0x200143f0
 80049a4:	08006740 	.word	0x08006740
 80049a8:	08004e41 	.word	0x08004e41
 80049ac:	200143ec 	.word	0x200143ec
 80049b0:	08006750 	.word	0x08006750
 80049b4:	08004dd1 	.word	0x08004dd1
 80049b8:	200143e4 	.word	0x200143e4

080049bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b094      	sub	sp, #80	; 0x50
 80049c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049c2:	f107 0320 	add.w	r3, r7, #32
 80049c6:	2230      	movs	r2, #48	; 0x30
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 fe32 	bl	8006634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049d0:	f107 030c 	add.w	r3, r7, #12
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	60da      	str	r2, [r3, #12]
 80049de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80049e0:	2300      	movs	r3, #0
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	4b28      	ldr	r3, [pc, #160]	; (8004a88 <SystemClock_Config+0xcc>)
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	4a27      	ldr	r2, [pc, #156]	; (8004a88 <SystemClock_Config+0xcc>)
 80049ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ee:	6413      	str	r3, [r2, #64]	; 0x40
 80049f0:	4b25      	ldr	r3, [pc, #148]	; (8004a88 <SystemClock_Config+0xcc>)
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80049fc:	2300      	movs	r3, #0
 80049fe:	607b      	str	r3, [r7, #4]
 8004a00:	4b22      	ldr	r3, [pc, #136]	; (8004a8c <SystemClock_Config+0xd0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a21      	ldr	r2, [pc, #132]	; (8004a8c <SystemClock_Config+0xd0>)
 8004a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	4b1f      	ldr	r3, [pc, #124]	; (8004a8c <SystemClock_Config+0xd0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a18:	2302      	movs	r3, #2
 8004a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a20:	2310      	movs	r3, #16
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a24:	2302      	movs	r3, #2
 8004a26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004a30:	23a8      	movs	r3, #168	; 0xa8
 8004a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a34:	2302      	movs	r3, #2
 8004a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004a38:	2307      	movs	r3, #7
 8004a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a3c:	f107 0320 	add.w	r3, r7, #32
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fe77 	bl	8005734 <HAL_RCC_OscConfig>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004a4c:	f000 fa6c 	bl	8004f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a50:	230f      	movs	r3, #15
 8004a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a54:	2302      	movs	r3, #2
 8004a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004a5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a68:	f107 030c 	add.w	r3, r7, #12
 8004a6c:	2105      	movs	r1, #5
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 f8d8 	bl	8005c24 <HAL_RCC_ClockConfig>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004a7a:	f000 fa55 	bl	8004f28 <Error_Handler>
  }
}
 8004a7e:	bf00      	nop
 8004a80:	3750      	adds	r7, #80	; 0x50
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	40007000 	.word	0x40007000

08004a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08c      	sub	sp, #48	; 0x30
 8004a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a96:	f107 031c 	add.w	r3, r7, #28
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
 8004aa2:	60da      	str	r2, [r3, #12]
 8004aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	4ba5      	ldr	r3, [pc, #660]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	4aa4      	ldr	r2, [pc, #656]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004ab0:	f043 0310 	orr.w	r3, r3, #16
 8004ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ab6:	4ba2      	ldr	r3, [pc, #648]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	4b9e      	ldr	r3, [pc, #632]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	4a9d      	ldr	r2, [pc, #628]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004acc:	f043 0304 	orr.w	r3, r3, #4
 8004ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad2:	4b9b      	ldr	r3, [pc, #620]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	4b97      	ldr	r3, [pc, #604]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	4a96      	ldr	r2, [pc, #600]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aec:	6313      	str	r3, [r2, #48]	; 0x30
 8004aee:	4b94      	ldr	r3, [pc, #592]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	4b90      	ldr	r3, [pc, #576]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	4a8f      	ldr	r2, [pc, #572]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	6313      	str	r3, [r2, #48]	; 0x30
 8004b0a:	4b8d      	ldr	r3, [pc, #564]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	4b89      	ldr	r3, [pc, #548]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	4a88      	ldr	r2, [pc, #544]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	6313      	str	r3, [r2, #48]	; 0x30
 8004b26:	4b86      	ldr	r3, [pc, #536]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	60bb      	str	r3, [r7, #8]
 8004b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	4b82      	ldr	r3, [pc, #520]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	4a81      	ldr	r2, [pc, #516]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004b3c:	f043 0308 	orr.w	r3, r3, #8
 8004b40:	6313      	str	r3, [r2, #48]	; 0x30
 8004b42:	4b7f      	ldr	r3, [pc, #508]	; (8004d40 <MX_GPIO_Init+0x2b0>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	607b      	str	r3, [r7, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2108      	movs	r1, #8
 8004b52:	487c      	ldr	r0, [pc, #496]	; (8004d44 <MX_GPIO_Init+0x2b4>)
 8004b54:	f000 fd96 	bl	8005684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004b58:	2201      	movs	r2, #1
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	487a      	ldr	r0, [pc, #488]	; (8004d48 <MX_GPIO_Init+0x2b8>)
 8004b5e:	f000 fd91 	bl	8005684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004b62:	2200      	movs	r2, #0
 8004b64:	f24f 0110 	movw	r1, #61456	; 0xf010
 8004b68:	4878      	ldr	r0, [pc, #480]	; (8004d4c <MX_GPIO_Init+0x2bc>)
 8004b6a:	f000 fd8b 	bl	8005684 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004b6e:	2308      	movs	r3, #8
 8004b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b72:	2301      	movs	r3, #1
 8004b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004b7e:	f107 031c 	add.w	r3, r7, #28
 8004b82:	4619      	mov	r1, r3
 8004b84:	486f      	ldr	r0, [pc, #444]	; (8004d44 <MX_GPIO_Init+0x2b4>)
 8004b86:	f000 fbe1 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b96:	2300      	movs	r3, #0
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004b9a:	f107 031c 	add.w	r3, r7, #28
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4869      	ldr	r0, [pc, #420]	; (8004d48 <MX_GPIO_Init+0x2b8>)
 8004ba2:	f000 fbd3 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004baa:	2302      	movs	r3, #2
 8004bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004bb6:	2305      	movs	r3, #5
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004bba:	f107 031c 	add.w	r3, r7, #28
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4861      	ldr	r0, [pc, #388]	; (8004d48 <MX_GPIO_Init+0x2b8>)
 8004bc2:	f000 fbc3 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004bca:	4b61      	ldr	r3, [pc, #388]	; (8004d50 <MX_GPIO_Init+0x2c0>)
 8004bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004bd2:	f107 031c 	add.w	r3, r7, #28
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	485e      	ldr	r0, [pc, #376]	; (8004d54 <MX_GPIO_Init+0x2c4>)
 8004bda:	f000 fbb7 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8004bde:	2310      	movs	r3, #16
 8004be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be2:	2302      	movs	r3, #2
 8004be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bea:	2300      	movs	r3, #0
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004bee:	2306      	movs	r3, #6
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004bf2:	f107 031c 	add.w	r3, r7, #28
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4856      	ldr	r0, [pc, #344]	; (8004d54 <MX_GPIO_Init+0x2c4>)
 8004bfa:	f000 fba7 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004bfe:	23e0      	movs	r3, #224	; 0xe0
 8004c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c02:	2302      	movs	r3, #2
 8004c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c0e:	2305      	movs	r3, #5
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c12:	f107 031c 	add.w	r3, r7, #28
 8004c16:	4619      	mov	r1, r3
 8004c18:	484e      	ldr	r0, [pc, #312]	; (8004d54 <MX_GPIO_Init+0x2c4>)
 8004c1a:	f000 fb97 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004c1e:	2304      	movs	r3, #4
 8004c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c22:	2300      	movs	r3, #0
 8004c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004c2a:	f107 031c 	add.w	r3, r7, #28
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4849      	ldr	r0, [pc, #292]	; (8004d58 <MX_GPIO_Init+0x2c8>)
 8004c32:	f000 fb8b 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8004c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c44:	2300      	movs	r3, #0
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c48:	2305      	movs	r3, #5
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8004c4c:	f107 031c 	add.w	r3, r7, #28
 8004c50:	4619      	mov	r1, r3
 8004c52:	4841      	ldr	r0, [pc, #260]	; (8004d58 <MX_GPIO_Init+0x2c8>)
 8004c54:	f000 fb7a 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004c58:	f24f 0310 	movw	r3, #61456	; 0xf010
 8004c5c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c66:	2300      	movs	r3, #0
 8004c68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c6a:	f107 031c 	add.w	r3, r7, #28
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4836      	ldr	r0, [pc, #216]	; (8004d4c <MX_GPIO_Init+0x2bc>)
 8004c72:	f000 fb6b 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004c76:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8004c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c88:	2306      	movs	r3, #6
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c8c:	f107 031c 	add.w	r3, r7, #28
 8004c90:	4619      	mov	r1, r3
 8004c92:	482d      	ldr	r0, [pc, #180]	; (8004d48 <MX_GPIO_Init+0x2b8>)
 8004c94:	f000 fb5a 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8004c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004ca6:	f107 031c 	add.w	r3, r7, #28
 8004caa:	4619      	mov	r1, r3
 8004cac:	4829      	ldr	r0, [pc, #164]	; (8004d54 <MX_GPIO_Init+0x2c4>)
 8004cae:	f000 fb4d 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004cb2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004cc4:	230a      	movs	r3, #10
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cc8:	f107 031c 	add.w	r3, r7, #28
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4821      	ldr	r0, [pc, #132]	; (8004d54 <MX_GPIO_Init+0x2c4>)
 8004cd0:	f000 fb3c 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004cd4:	2320      	movs	r3, #32
 8004cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004ce0:	f107 031c 	add.w	r3, r7, #28
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4819      	ldr	r0, [pc, #100]	; (8004d4c <MX_GPIO_Init+0x2bc>)
 8004ce8:	f000 fb30 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004cec:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cf2:	2312      	movs	r3, #18
 8004cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004cfe:	2304      	movs	r3, #4
 8004d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d02:	f107 031c 	add.w	r3, r7, #28
 8004d06:	4619      	mov	r1, r3
 8004d08:	4813      	ldr	r0, [pc, #76]	; (8004d58 <MX_GPIO_Init+0x2c8>)
 8004d0a:	f000 fb1f 	bl	800534c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004d0e:	2302      	movs	r3, #2
 8004d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <MX_GPIO_Init+0x2cc>)
 8004d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004d1a:	f107 031c 	add.w	r3, r7, #28
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4808      	ldr	r0, [pc, #32]	; (8004d44 <MX_GPIO_Init+0x2b4>)
 8004d22:	f000 fb13 	bl	800534c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8004d26:	2200      	movs	r2, #0
 8004d28:	2106      	movs	r1, #6
 8004d2a:	2006      	movs	r0, #6
 8004d2c:	f000 fae4 	bl	80052f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004d30:	2006      	movs	r0, #6
 8004d32:	f000 fafd 	bl	8005330 <HAL_NVIC_EnableIRQ>

}
 8004d36:	bf00      	nop
 8004d38:	3730      	adds	r7, #48	; 0x30
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800
 8004d44:	40021000 	.word	0x40021000
 8004d48:	40020800 	.word	0x40020800
 8004d4c:	40020c00 	.word	0x40020c00
 8004d50:	10110000 	.word	0x10110000
 8004d54:	40020000 	.word	0x40020000
 8004d58:	40020400 	.word	0x40020400
 8004d5c:	10120000 	.word	0x10120000

08004d60 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters){
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8004d68:	4814      	ldr	r0, [pc, #80]	; (8004dbc <led_green_handler+0x5c>)
 8004d6a:	f7ff fd0b 	bl	8004784 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8004d6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d72:	4813      	ldr	r0, [pc, #76]	; (8004dc0 <led_green_handler+0x60>)
 8004d74:	f000 fc9f 	bl	80056b6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8004d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2200      	movs	r2, #0
 8004d82:	2100      	movs	r1, #0
 8004d84:	2000      	movs	r0, #0
 8004d86:	f7fc f99f 	bl	80010c8 <xTaskGenericNotifyWait>
 8004d8a:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d1ea      	bne.n	8004d68 <led_green_handler+0x8>
			// Task received notification
			portENTER_CRITICAL();  // disable interrupts of the system with priority less than configMAX_SYSCALL_INTERRUPT_PRIORITY
 8004d92:	f7fc fd5f 	bl	8001854 <vPortEnterCritical>
			next_task_handle = ledo_task_handle;
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <led_green_handler+0x64>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a0b      	ldr	r2, [pc, #44]	; (8004dc8 <led_green_handler+0x68>)
 8004d9c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_RESET);
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004da4:	4806      	ldr	r0, [pc, #24]	; (8004dc0 <led_green_handler+0x60>)
 8004da6:	f000 fc6d 	bl	8005684 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting green LED task");
 8004daa:	4808      	ldr	r0, [pc, #32]	; (8004dcc <led_green_handler+0x6c>)
 8004dac:	f7ff fcea 	bl	8004784 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();  // enable interrupts of the system
 8004db0:	f7fc fd80 	bl	80018b4 <vPortExitCritical>
			vTaskDelete(NULL);  // NULL - Self delete
 8004db4:	2000      	movs	r0, #0
 8004db6:	f7fb fde9 	bl	800098c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8004dba:	e7d5      	b.n	8004d68 <led_green_handler+0x8>
 8004dbc:	08006760 	.word	0x08006760
 8004dc0:	40020c00 	.word	0x40020c00
 8004dc4:	200143ec 	.word	0x200143ec
 8004dc8:	200143e4 	.word	0x200143e4
 8004dcc:	08006774 	.word	0x08006774

08004dd0 <led_orange_handler>:

	}

}

static void led_orange_handler(void* parameters){
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8004dd8:	4814      	ldr	r0, [pc, #80]	; (8004e2c <led_orange_handler+0x5c>)
 8004dda:	f7ff fcd3 	bl	8004784 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8004dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004de2:	4813      	ldr	r0, [pc, #76]	; (8004e30 <led_orange_handler+0x60>)
 8004de4:	f000 fc67 	bl	80056b6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8004de8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	2300      	movs	r3, #0
 8004df0:	2200      	movs	r2, #0
 8004df2:	2100      	movs	r1, #0
 8004df4:	2000      	movs	r0, #0
 8004df6:	f7fc f967 	bl	80010c8 <xTaskGenericNotifyWait>
 8004dfa:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d1ea      	bne.n	8004dd8 <led_orange_handler+0x8>
			// Task received notification
			portENTER_CRITICAL();
 8004e02:	f7fc fd27 	bl	8001854 <vPortEnterCritical>
			next_task_handle = ledr_task_handle;
 8004e06:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <led_orange_handler+0x64>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a0b      	ldr	r2, [pc, #44]	; (8004e38 <led_orange_handler+0x68>)
 8004e0c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_RESET);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e14:	4806      	ldr	r0, [pc, #24]	; (8004e30 <led_orange_handler+0x60>)
 8004e16:	f000 fc35 	bl	8005684 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting orange LED task");
 8004e1a:	4808      	ldr	r0, [pc, #32]	; (8004e3c <led_orange_handler+0x6c>)
 8004e1c:	f7ff fcb2 	bl	8004784 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8004e20:	f7fc fd48 	bl	80018b4 <vPortExitCritical>
			vTaskDelete(NULL);  // NULL - Self delete
 8004e24:	2000      	movs	r0, #0
 8004e26:	f7fb fdb1 	bl	800098c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8004e2a:	e7d5      	b.n	8004dd8 <led_orange_handler+0x8>
 8004e2c:	0800678c 	.word	0x0800678c
 8004e30:	40020c00 	.word	0x40020c00
 8004e34:	200143f0 	.word	0x200143f0
 8004e38:	200143e4 	.word	0x200143e4
 8004e3c:	080067a0 	.word	0x080067a0

08004e40 <led_red_handler>:
		}
	}

}

static void led_red_handler(void* parameters){
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8004e48:	4814      	ldr	r0, [pc, #80]	; (8004e9c <led_red_handler+0x5c>)
 8004e4a:	f7ff fc9b 	bl	8004784 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8004e4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e52:	4813      	ldr	r0, [pc, #76]	; (8004ea0 <led_red_handler+0x60>)
 8004e54:	f000 fc2f 	bl	80056b6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8004e58:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2200      	movs	r2, #0
 8004e62:	2100      	movs	r1, #0
 8004e64:	2000      	movs	r0, #0
 8004e66:	f7fc f92f 	bl	80010c8 <xTaskGenericNotifyWait>
 8004e6a:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d1ea      	bne.n	8004e48 <led_red_handler+0x8>
			// Task received notification
			portENTER_CRITICAL();
 8004e72:	f7fc fcef 	bl	8001854 <vPortEnterCritical>
			next_task_handle = NULL;
 8004e76:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <led_red_handler+0x64>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_RESET);
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e82:	4807      	ldr	r0, [pc, #28]	; (8004ea0 <led_red_handler+0x60>)
 8004e84:	f000 fbfe 	bl	8005684 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting red LED task");
 8004e88:	4807      	ldr	r0, [pc, #28]	; (8004ea8 <led_red_handler+0x68>)
 8004e8a:	f7ff fc7b 	bl	8004784 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8004e8e:	f7fc fd11 	bl	80018b4 <vPortExitCritical>
			vTaskDelete(NULL);  // NULL - Self delete
 8004e92:	2000      	movs	r0, #0
 8004e94:	f7fb fd7a 	bl	800098c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8004e98:	e7d6      	b.n	8004e48 <led_red_handler+0x8>
 8004e9a:	bf00      	nop
 8004e9c:	080067bc 	.word	0x080067bc
 8004ea0:	40020c00 	.word	0x40020c00
 8004ea4:	200143e4 	.word	0x200143e4
 8004ea8:	080067d0 	.word	0x080067d0

08004eac <button_interrupt_handler>:
		}
	}

}

void button_interrupt_handler(void){
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af02      	add	r7, sp, #8
	traceISR_ENTER();
 8004eb2:	f7ff f9bf 	bl	8004234 <SEGGER_SYSVIEW_RecordEnterISR>

	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken = pdFALSE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	607b      	str	r3, [r7, #4]

	xTaskNotifyFromISR(next_task_handle, 0, eNoAction, &pxHigherPriorityTaskWoken);
 8004eba:	4b10      	ldr	r3, [pc, #64]	; (8004efc <button_interrupt_handler+0x50>)
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2100      	movs	r1, #0
 8004ecc:	f7fc f984 	bl	80011d8 <xTaskGenericNotifyFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken); // If a higher PriorityTask Woken, then it will get executed immediately after this isr
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <button_interrupt_handler+0x40>
 8004ed6:	f7ff fa0b 	bl	80042f0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8004eda:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <button_interrupt_handler+0x54>)
 8004edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	e001      	b.n	8004ef0 <button_interrupt_handler+0x44>
 8004eec:	f7ff f9e4 	bl	80042b8 <SEGGER_SYSVIEW_RecordExitISR>

	traceISR_EXIT();
 8004ef0:	f7ff f9e2 	bl	80042b8 <SEGGER_SYSVIEW_RecordExitISR>
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	200143e4 	.word	0x200143e4
 8004f00:	e000ed04 	.word	0xe000ed04

08004f04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d101      	bne.n	8004f1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004f16:	f000 f917 	bl	8005148 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40001000 	.word	0x40001000

08004f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f2c:	b672      	cpsid	i
}
 8004f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f30:	e7fe      	b.n	8004f30 <Error_Handler+0x8>
	...

08004f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <HAL_MspInit+0x4c>)
 8004f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f42:	4a0f      	ldr	r2, [pc, #60]	; (8004f80 <HAL_MspInit+0x4c>)
 8004f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f48:	6453      	str	r3, [r2, #68]	; 0x44
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <HAL_MspInit+0x4c>)
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	603b      	str	r3, [r7, #0]
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <HAL_MspInit+0x4c>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <HAL_MspInit+0x4c>)
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f64:	6413      	str	r3, [r2, #64]	; 0x40
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_MspInit+0x4c>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8004f72:	f7fc fbf1 	bl	8001758 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40023800 	.word	0x40023800

08004f84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08c      	sub	sp, #48	; 0x30
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004f94:	2200      	movs	r2, #0
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	2036      	movs	r0, #54	; 0x36
 8004f9a:	f000 f9ad 	bl	80052f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f9e:	2036      	movs	r0, #54	; 0x36
 8004fa0:	f000 f9c6 	bl	8005330 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	4b1f      	ldr	r3, [pc, #124]	; (8005028 <HAL_InitTick+0xa4>)
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	4a1e      	ldr	r2, [pc, #120]	; (8005028 <HAL_InitTick+0xa4>)
 8004fae:	f043 0310 	orr.w	r3, r3, #16
 8004fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8004fb4:	4b1c      	ldr	r3, [pc, #112]	; (8005028 <HAL_InitTick+0xa4>)
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004fc0:	f107 0210 	add.w	r2, r7, #16
 8004fc4:	f107 0314 	add.w	r3, r7, #20
 8004fc8:	4611      	mov	r1, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f001 f812 	bl	8005ff4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004fd0:	f000 fffc 	bl	8005fcc <HAL_RCC_GetPCLK1Freq>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	4a13      	ldr	r2, [pc, #76]	; (800502c <HAL_InitTick+0xa8>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	0c9b      	lsrs	r3, r3, #18
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <HAL_InitTick+0xac>)
 8004fea:	4a12      	ldr	r2, [pc, #72]	; (8005034 <HAL_InitTick+0xb0>)
 8004fec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004fee:	4b10      	ldr	r3, [pc, #64]	; (8005030 <HAL_InitTick+0xac>)
 8004ff0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ff4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004ff6:	4a0e      	ldr	r2, [pc, #56]	; (8005030 <HAL_InitTick+0xac>)
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <HAL_InitTick+0xac>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005002:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <HAL_InitTick+0xac>)
 8005004:	2200      	movs	r2, #0
 8005006:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005008:	4809      	ldr	r0, [pc, #36]	; (8005030 <HAL_InitTick+0xac>)
 800500a:	f001 f825 	bl	8006058 <HAL_TIM_Base_Init>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005014:	4806      	ldr	r0, [pc, #24]	; (8005030 <HAL_InitTick+0xac>)
 8005016:	f001 f879 	bl	800610c <HAL_TIM_Base_Start_IT>
 800501a:	4603      	mov	r3, r0
 800501c:	e000      	b.n	8005020 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
}
 8005020:	4618      	mov	r0, r3
 8005022:	3730      	adds	r7, #48	; 0x30
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40023800 	.word	0x40023800
 800502c:	431bde83 	.word	0x431bde83
 8005030:	200143f4 	.word	0x200143f4
 8005034:	40001000 	.word	0x40001000

08005038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800503c:	e7fe      	b.n	800503c <NMI_Handler+0x4>

0800503e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800503e:	b480      	push	{r7}
 8005040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005042:	e7fe      	b.n	8005042 <HardFault_Handler+0x4>

08005044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005048:	e7fe      	b.n	8005048 <MemManage_Handler+0x4>

0800504a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800504a:	b480      	push	{r7}
 800504c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800504e:	e7fe      	b.n	800504e <BusFault_Handler+0x4>

08005050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005054:	e7fe      	b.n	8005054 <UsageFault_Handler+0x4>

08005056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005056:	b480      	push	{r7}
 8005058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800505a:	bf00      	nop
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	button_interrupt_handler();
 8005068:	f7ff ff20 	bl	8004eac <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  /* USER CODE BEGIN EXTI0_IRQn 1 */

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800506c:	2001      	movs	r0, #1
 800506e:	f000 fb3d 	bl	80056ec <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005072:	bf00      	nop
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800507c:	4802      	ldr	r0, [pc, #8]	; (8005088 <TIM6_DAC_IRQHandler+0x10>)
 800507e:	f001 f8b5 	bl	80061ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005082:	bf00      	nop
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	200143f4 	.word	0x200143f4

0800508c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <SystemInit+0x20>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	4a05      	ldr	r2, [pc, #20]	; (80050ac <SystemInit+0x20>)
 8005098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800509c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050a0:	bf00      	nop
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	e000ed00 	.word	0xe000ed00

080050b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80050b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80050b4:	480d      	ldr	r0, [pc, #52]	; (80050ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80050b6:	490e      	ldr	r1, [pc, #56]	; (80050f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80050b8:	4a0e      	ldr	r2, [pc, #56]	; (80050f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050bc:	e002      	b.n	80050c4 <LoopCopyDataInit>

080050be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050c2:	3304      	adds	r3, #4

080050c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050c8:	d3f9      	bcc.n	80050be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050ca:	4a0b      	ldr	r2, [pc, #44]	; (80050f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80050cc:	4c0b      	ldr	r4, [pc, #44]	; (80050fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80050ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050d0:	e001      	b.n	80050d6 <LoopFillZerobss>

080050d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050d4:	3204      	adds	r2, #4

080050d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050d8:	d3fb      	bcc.n	80050d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80050da:	f7ff ffd7 	bl	800508c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050de:	f001 fa69 	bl	80065b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050e2:	f7ff fbed 	bl	80048c0 <main>
  bx  lr    
 80050e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80050e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80050ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050f0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80050f4:	08006838 	.word	0x08006838
  ldr r2, =_sbss
 80050f8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80050fc:	20014440 	.word	0x20014440

08005100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005100:	e7fe      	b.n	8005100 <ADC_IRQHandler>
	...

08005104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005108:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <HAL_Init+0x40>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a0d      	ldr	r2, [pc, #52]	; (8005144 <HAL_Init+0x40>)
 800510e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005114:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <HAL_Init+0x40>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <HAL_Init+0x40>)
 800511a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800511e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005120:	4b08      	ldr	r3, [pc, #32]	; (8005144 <HAL_Init+0x40>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a07      	ldr	r2, [pc, #28]	; (8005144 <HAL_Init+0x40>)
 8005126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800512c:	2003      	movs	r0, #3
 800512e:	f000 f8d8 	bl	80052e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005132:	2000      	movs	r0, #0
 8005134:	f7ff ff26 	bl	8004f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005138:	f7ff fefc 	bl	8004f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40023c00 	.word	0x40023c00

08005148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800514c:	4b06      	ldr	r3, [pc, #24]	; (8005168 <HAL_IncTick+0x20>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	4b06      	ldr	r3, [pc, #24]	; (800516c <HAL_IncTick+0x24>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4413      	add	r3, r2
 8005158:	4a04      	ldr	r2, [pc, #16]	; (800516c <HAL_IncTick+0x24>)
 800515a:	6013      	str	r3, [r2, #0]
}
 800515c:	bf00      	nop
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	20000018 	.word	0x20000018
 800516c:	2001443c 	.word	0x2001443c

08005170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  return uwTick;
 8005174:	4b03      	ldr	r3, [pc, #12]	; (8005184 <HAL_GetTick+0x14>)
 8005176:	681b      	ldr	r3, [r3, #0]
}
 8005178:	4618      	mov	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	2001443c 	.word	0x2001443c

08005188 <__NVIC_SetPriorityGrouping>:
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005198:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <__NVIC_SetPriorityGrouping+0x44>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051a4:	4013      	ands	r3, r2
 80051a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051ba:	4a04      	ldr	r2, [pc, #16]	; (80051cc <__NVIC_SetPriorityGrouping+0x44>)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	60d3      	str	r3, [r2, #12]
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	e000ed00 	.word	0xe000ed00

080051d0 <__NVIC_GetPriorityGrouping>:
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051d4:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <__NVIC_GetPriorityGrouping+0x18>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	0a1b      	lsrs	r3, r3, #8
 80051da:	f003 0307 	and.w	r3, r3, #7
}
 80051de:	4618      	mov	r0, r3
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	e000ed00 	.word	0xe000ed00

080051ec <__NVIC_EnableIRQ>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	db0b      	blt.n	8005216 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	f003 021f 	and.w	r2, r3, #31
 8005204:	4907      	ldr	r1, [pc, #28]	; (8005224 <__NVIC_EnableIRQ+0x38>)
 8005206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2001      	movs	r0, #1
 800520e:	fa00 f202 	lsl.w	r2, r0, r2
 8005212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	e000e100 	.word	0xe000e100

08005228 <__NVIC_SetPriority>:
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	6039      	str	r1, [r7, #0]
 8005232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005238:	2b00      	cmp	r3, #0
 800523a:	db0a      	blt.n	8005252 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	b2da      	uxtb	r2, r3
 8005240:	490c      	ldr	r1, [pc, #48]	; (8005274 <__NVIC_SetPriority+0x4c>)
 8005242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005246:	0112      	lsls	r2, r2, #4
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	440b      	add	r3, r1
 800524c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005250:	e00a      	b.n	8005268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	b2da      	uxtb	r2, r3
 8005256:	4908      	ldr	r1, [pc, #32]	; (8005278 <__NVIC_SetPriority+0x50>)
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	3b04      	subs	r3, #4
 8005260:	0112      	lsls	r2, r2, #4
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	440b      	add	r3, r1
 8005266:	761a      	strb	r2, [r3, #24]
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	e000e100 	.word	0xe000e100
 8005278:	e000ed00 	.word	0xe000ed00

0800527c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800527c:	b480      	push	{r7}
 800527e:	b089      	sub	sp, #36	; 0x24
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f1c3 0307 	rsb	r3, r3, #7
 8005296:	2b04      	cmp	r3, #4
 8005298:	bf28      	it	cs
 800529a:	2304      	movcs	r3, #4
 800529c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3304      	adds	r3, #4
 80052a2:	2b06      	cmp	r3, #6
 80052a4:	d902      	bls.n	80052ac <NVIC_EncodePriority+0x30>
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	3b03      	subs	r3, #3
 80052aa:	e000      	b.n	80052ae <NVIC_EncodePriority+0x32>
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	43da      	mvns	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	401a      	ands	r2, r3
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	fa01 f303 	lsl.w	r3, r1, r3
 80052ce:	43d9      	mvns	r1, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052d4:	4313      	orrs	r3, r2
         );
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3724      	adds	r7, #36	; 0x24
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff ff4c 	bl	8005188 <__NVIC_SetPriorityGrouping>
}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800530a:	f7ff ff61 	bl	80051d0 <__NVIC_GetPriorityGrouping>
 800530e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	6978      	ldr	r0, [r7, #20]
 8005316:	f7ff ffb1 	bl	800527c <NVIC_EncodePriority>
 800531a:	4602      	mov	r2, r0
 800531c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff ff80 	bl	8005228 <__NVIC_SetPriority>
}
 8005328:	bf00      	nop
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800533a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff ff54 	bl	80051ec <__NVIC_EnableIRQ>
}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800534c:	b480      	push	{r7}
 800534e:	b089      	sub	sp, #36	; 0x24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800535a:	2300      	movs	r3, #0
 800535c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800535e:	2300      	movs	r3, #0
 8005360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	e16b      	b.n	8005640 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005368:	2201      	movs	r2, #1
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4013      	ands	r3, r2
 800537a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	429a      	cmp	r2, r3
 8005382:	f040 815a 	bne.w	800563a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b01      	cmp	r3, #1
 8005390:	d005      	beq.n	800539e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800539a:	2b02      	cmp	r3, #2
 800539c:	d130      	bne.n	8005400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	2203      	movs	r2, #3
 80053aa:	fa02 f303 	lsl.w	r3, r2, r3
 80053ae:	43db      	mvns	r3, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4013      	ands	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053d4:	2201      	movs	r2, #1
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	43db      	mvns	r3, r3
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	4013      	ands	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	f003 0201 	and.w	r2, r3, #1
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	fa02 f303 	lsl.w	r3, r2, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f003 0303 	and.w	r3, r3, #3
 8005408:	2b03      	cmp	r3, #3
 800540a:	d017      	beq.n	800543c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	2203      	movs	r2, #3
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	4013      	ands	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	4313      	orrs	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d123      	bne.n	8005490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	08da      	lsrs	r2, r3, #3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3208      	adds	r2, #8
 8005450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	220f      	movs	r2, #15
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	43db      	mvns	r3, r3
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	4013      	ands	r3, r2
 800546a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	4313      	orrs	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	08da      	lsrs	r2, r3, #3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3208      	adds	r2, #8
 800548a:	69b9      	ldr	r1, [r7, #24]
 800548c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	2203      	movs	r2, #3
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	4013      	ands	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 0203 	and.w	r2, r3, #3
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80b4 	beq.w	800563a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	4b60      	ldr	r3, [pc, #384]	; (8005658 <HAL_GPIO_Init+0x30c>)
 80054d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054da:	4a5f      	ldr	r2, [pc, #380]	; (8005658 <HAL_GPIO_Init+0x30c>)
 80054dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054e0:	6453      	str	r3, [r2, #68]	; 0x44
 80054e2:	4b5d      	ldr	r3, [pc, #372]	; (8005658 <HAL_GPIO_Init+0x30c>)
 80054e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054ee:	4a5b      	ldr	r2, [pc, #364]	; (800565c <HAL_GPIO_Init+0x310>)
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	089b      	lsrs	r3, r3, #2
 80054f4:	3302      	adds	r3, #2
 80054f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	220f      	movs	r2, #15
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	43db      	mvns	r3, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4013      	ands	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a52      	ldr	r2, [pc, #328]	; (8005660 <HAL_GPIO_Init+0x314>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d02b      	beq.n	8005572 <HAL_GPIO_Init+0x226>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a51      	ldr	r2, [pc, #324]	; (8005664 <HAL_GPIO_Init+0x318>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d025      	beq.n	800556e <HAL_GPIO_Init+0x222>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a50      	ldr	r2, [pc, #320]	; (8005668 <HAL_GPIO_Init+0x31c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01f      	beq.n	800556a <HAL_GPIO_Init+0x21e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a4f      	ldr	r2, [pc, #316]	; (800566c <HAL_GPIO_Init+0x320>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d019      	beq.n	8005566 <HAL_GPIO_Init+0x21a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a4e      	ldr	r2, [pc, #312]	; (8005670 <HAL_GPIO_Init+0x324>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <HAL_GPIO_Init+0x216>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a4d      	ldr	r2, [pc, #308]	; (8005674 <HAL_GPIO_Init+0x328>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00d      	beq.n	800555e <HAL_GPIO_Init+0x212>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a4c      	ldr	r2, [pc, #304]	; (8005678 <HAL_GPIO_Init+0x32c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d007      	beq.n	800555a <HAL_GPIO_Init+0x20e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a4b      	ldr	r2, [pc, #300]	; (800567c <HAL_GPIO_Init+0x330>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d101      	bne.n	8005556 <HAL_GPIO_Init+0x20a>
 8005552:	2307      	movs	r3, #7
 8005554:	e00e      	b.n	8005574 <HAL_GPIO_Init+0x228>
 8005556:	2308      	movs	r3, #8
 8005558:	e00c      	b.n	8005574 <HAL_GPIO_Init+0x228>
 800555a:	2306      	movs	r3, #6
 800555c:	e00a      	b.n	8005574 <HAL_GPIO_Init+0x228>
 800555e:	2305      	movs	r3, #5
 8005560:	e008      	b.n	8005574 <HAL_GPIO_Init+0x228>
 8005562:	2304      	movs	r3, #4
 8005564:	e006      	b.n	8005574 <HAL_GPIO_Init+0x228>
 8005566:	2303      	movs	r3, #3
 8005568:	e004      	b.n	8005574 <HAL_GPIO_Init+0x228>
 800556a:	2302      	movs	r3, #2
 800556c:	e002      	b.n	8005574 <HAL_GPIO_Init+0x228>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <HAL_GPIO_Init+0x228>
 8005572:	2300      	movs	r3, #0
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	f002 0203 	and.w	r2, r2, #3
 800557a:	0092      	lsls	r2, r2, #2
 800557c:	4093      	lsls	r3, r2
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4313      	orrs	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005584:	4935      	ldr	r1, [pc, #212]	; (800565c <HAL_GPIO_Init+0x310>)
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	089b      	lsrs	r3, r3, #2
 800558a:	3302      	adds	r3, #2
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005592:	4b3b      	ldr	r3, [pc, #236]	; (8005680 <HAL_GPIO_Init+0x334>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	43db      	mvns	r3, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4013      	ands	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055b6:	4a32      	ldr	r2, [pc, #200]	; (8005680 <HAL_GPIO_Init+0x334>)
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80055bc:	4b30      	ldr	r3, [pc, #192]	; (8005680 <HAL_GPIO_Init+0x334>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	43db      	mvns	r3, r3
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4013      	ands	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055e0:	4a27      	ldr	r2, [pc, #156]	; (8005680 <HAL_GPIO_Init+0x334>)
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055e6:	4b26      	ldr	r3, [pc, #152]	; (8005680 <HAL_GPIO_Init+0x334>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	43db      	mvns	r3, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4013      	ands	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800560a:	4a1d      	ldr	r2, [pc, #116]	; (8005680 <HAL_GPIO_Init+0x334>)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005610:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <HAL_GPIO_Init+0x334>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	43db      	mvns	r3, r3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	4013      	ands	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005634:	4a12      	ldr	r2, [pc, #72]	; (8005680 <HAL_GPIO_Init+0x334>)
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3301      	adds	r3, #1
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	2b0f      	cmp	r3, #15
 8005644:	f67f ae90 	bls.w	8005368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	3724      	adds	r7, #36	; 0x24
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40023800 	.word	0x40023800
 800565c:	40013800 	.word	0x40013800
 8005660:	40020000 	.word	0x40020000
 8005664:	40020400 	.word	0x40020400
 8005668:	40020800 	.word	0x40020800
 800566c:	40020c00 	.word	0x40020c00
 8005670:	40021000 	.word	0x40021000
 8005674:	40021400 	.word	0x40021400
 8005678:	40021800 	.word	0x40021800
 800567c:	40021c00 	.word	0x40021c00
 8005680:	40013c00 	.word	0x40013c00

08005684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	807b      	strh	r3, [r7, #2]
 8005690:	4613      	mov	r3, r2
 8005692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005694:	787b      	ldrb	r3, [r7, #1]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800569a:	887a      	ldrh	r2, [r7, #2]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056a0:	e003      	b.n	80056aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056a2:	887b      	ldrh	r3, [r7, #2]
 80056a4:	041a      	lsls	r2, r3, #16
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	619a      	str	r2, [r3, #24]
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056c8:	887a      	ldrh	r2, [r7, #2]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4013      	ands	r3, r2
 80056ce:	041a      	lsls	r2, r3, #16
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	43d9      	mvns	r1, r3
 80056d4:	887b      	ldrh	r3, [r7, #2]
 80056d6:	400b      	ands	r3, r1
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	619a      	str	r2, [r3, #24]
}
 80056de:	bf00      	nop
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80056f6:	4b08      	ldr	r3, [pc, #32]	; (8005718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d006      	beq.n	8005710 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005702:	4a05      	ldr	r2, [pc, #20]	; (8005718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005708:	88fb      	ldrh	r3, [r7, #6]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 f806 	bl	800571c <HAL_GPIO_EXTI_Callback>
  }
}
 8005710:	bf00      	nop
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40013c00 	.word	0x40013c00

0800571c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e264      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d075      	beq.n	800583e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005752:	4ba3      	ldr	r3, [pc, #652]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
 800575a:	2b04      	cmp	r3, #4
 800575c:	d00c      	beq.n	8005778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800575e:	4ba0      	ldr	r3, [pc, #640]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005766:	2b08      	cmp	r3, #8
 8005768:	d112      	bne.n	8005790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800576a:	4b9d      	ldr	r3, [pc, #628]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005776:	d10b      	bne.n	8005790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005778:	4b99      	ldr	r3, [pc, #612]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d05b      	beq.n	800583c <HAL_RCC_OscConfig+0x108>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d157      	bne.n	800583c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e23f      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005798:	d106      	bne.n	80057a8 <HAL_RCC_OscConfig+0x74>
 800579a:	4b91      	ldr	r3, [pc, #580]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a90      	ldr	r2, [pc, #576]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	e01d      	b.n	80057e4 <HAL_RCC_OscConfig+0xb0>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057b0:	d10c      	bne.n	80057cc <HAL_RCC_OscConfig+0x98>
 80057b2:	4b8b      	ldr	r3, [pc, #556]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a8a      	ldr	r2, [pc, #552]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80057b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	4b88      	ldr	r3, [pc, #544]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a87      	ldr	r2, [pc, #540]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80057c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e00b      	b.n	80057e4 <HAL_RCC_OscConfig+0xb0>
 80057cc:	4b84      	ldr	r3, [pc, #528]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a83      	ldr	r2, [pc, #524]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80057d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	4b81      	ldr	r3, [pc, #516]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a80      	ldr	r2, [pc, #512]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80057de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d013      	beq.n	8005814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ec:	f7ff fcc0 	bl	8005170 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057f4:	f7ff fcbc 	bl	8005170 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b64      	cmp	r3, #100	; 0x64
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e204      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005806:	4b76      	ldr	r3, [pc, #472]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0f0      	beq.n	80057f4 <HAL_RCC_OscConfig+0xc0>
 8005812:	e014      	b.n	800583e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005814:	f7ff fcac 	bl	8005170 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800581c:	f7ff fca8 	bl	8005170 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b64      	cmp	r3, #100	; 0x64
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e1f0      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800582e:	4b6c      	ldr	r3, [pc, #432]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f0      	bne.n	800581c <HAL_RCC_OscConfig+0xe8>
 800583a:	e000      	b.n	800583e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800583c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d063      	beq.n	8005912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800584a:	4b65      	ldr	r3, [pc, #404]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 030c 	and.w	r3, r3, #12
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00b      	beq.n	800586e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005856:	4b62      	ldr	r3, [pc, #392]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800585e:	2b08      	cmp	r3, #8
 8005860:	d11c      	bne.n	800589c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005862:	4b5f      	ldr	r3, [pc, #380]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d116      	bne.n	800589c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800586e:	4b5c      	ldr	r3, [pc, #368]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <HAL_RCC_OscConfig+0x152>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d001      	beq.n	8005886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e1c4      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005886:	4b56      	ldr	r3, [pc, #344]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4952      	ldr	r1, [pc, #328]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 8005896:	4313      	orrs	r3, r2
 8005898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800589a:	e03a      	b.n	8005912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d020      	beq.n	80058e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058a4:	4b4f      	ldr	r3, [pc, #316]	; (80059e4 <HAL_RCC_OscConfig+0x2b0>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058aa:	f7ff fc61 	bl	8005170 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058b2:	f7ff fc5d 	bl	8005170 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e1a5      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c4:	4b46      	ldr	r3, [pc, #280]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0f0      	beq.n	80058b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d0:	4b43      	ldr	r3, [pc, #268]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	4940      	ldr	r1, [pc, #256]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	600b      	str	r3, [r1, #0]
 80058e4:	e015      	b.n	8005912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058e6:	4b3f      	ldr	r3, [pc, #252]	; (80059e4 <HAL_RCC_OscConfig+0x2b0>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ec:	f7ff fc40 	bl	8005170 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058f4:	f7ff fc3c 	bl	8005170 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e184      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005906:	4b36      	ldr	r3, [pc, #216]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f0      	bne.n	80058f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d030      	beq.n	8005980 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d016      	beq.n	8005954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005926:	4b30      	ldr	r3, [pc, #192]	; (80059e8 <HAL_RCC_OscConfig+0x2b4>)
 8005928:	2201      	movs	r2, #1
 800592a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592c:	f7ff fc20 	bl	8005170 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005934:	f7ff fc1c 	bl	8005170 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e164      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005946:	4b26      	ldr	r3, [pc, #152]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 8005948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0f0      	beq.n	8005934 <HAL_RCC_OscConfig+0x200>
 8005952:	e015      	b.n	8005980 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005954:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <HAL_RCC_OscConfig+0x2b4>)
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800595a:	f7ff fc09 	bl	8005170 <HAL_GetTick>
 800595e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005960:	e008      	b.n	8005974 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005962:	f7ff fc05 	bl	8005170 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e14d      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005974:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 8005976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1f0      	bne.n	8005962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80a0 	beq.w	8005ace <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800598e:	2300      	movs	r3, #0
 8005990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005992:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10f      	bne.n	80059be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	4b0f      	ldr	r3, [pc, #60]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	4a0e      	ldr	r2, [pc, #56]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80059a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ac:	6413      	str	r3, [r2, #64]	; 0x40
 80059ae:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <HAL_RCC_OscConfig+0x2ac>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b6:	60bb      	str	r3, [r7, #8]
 80059b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059be:	4b0b      	ldr	r3, [pc, #44]	; (80059ec <HAL_RCC_OscConfig+0x2b8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d121      	bne.n	8005a0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ca:	4b08      	ldr	r3, [pc, #32]	; (80059ec <HAL_RCC_OscConfig+0x2b8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a07      	ldr	r2, [pc, #28]	; (80059ec <HAL_RCC_OscConfig+0x2b8>)
 80059d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059d6:	f7ff fbcb 	bl	8005170 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059dc:	e011      	b.n	8005a02 <HAL_RCC_OscConfig+0x2ce>
 80059de:	bf00      	nop
 80059e0:	40023800 	.word	0x40023800
 80059e4:	42470000 	.word	0x42470000
 80059e8:	42470e80 	.word	0x42470e80
 80059ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f0:	f7ff fbbe 	bl	8005170 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e106      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a02:	4b85      	ldr	r3, [pc, #532]	; (8005c18 <HAL_RCC_OscConfig+0x4e4>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0f0      	beq.n	80059f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d106      	bne.n	8005a24 <HAL_RCC_OscConfig+0x2f0>
 8005a16:	4b81      	ldr	r3, [pc, #516]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1a:	4a80      	ldr	r2, [pc, #512]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	6713      	str	r3, [r2, #112]	; 0x70
 8005a22:	e01c      	b.n	8005a5e <HAL_RCC_OscConfig+0x32a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	2b05      	cmp	r3, #5
 8005a2a:	d10c      	bne.n	8005a46 <HAL_RCC_OscConfig+0x312>
 8005a2c:	4b7b      	ldr	r3, [pc, #492]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a30:	4a7a      	ldr	r2, [pc, #488]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005a32:	f043 0304 	orr.w	r3, r3, #4
 8005a36:	6713      	str	r3, [r2, #112]	; 0x70
 8005a38:	4b78      	ldr	r3, [pc, #480]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3c:	4a77      	ldr	r2, [pc, #476]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	6713      	str	r3, [r2, #112]	; 0x70
 8005a44:	e00b      	b.n	8005a5e <HAL_RCC_OscConfig+0x32a>
 8005a46:	4b75      	ldr	r3, [pc, #468]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4a:	4a74      	ldr	r2, [pc, #464]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	6713      	str	r3, [r2, #112]	; 0x70
 8005a52:	4b72      	ldr	r3, [pc, #456]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a56:	4a71      	ldr	r2, [pc, #452]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005a58:	f023 0304 	bic.w	r3, r3, #4
 8005a5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d015      	beq.n	8005a92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a66:	f7ff fb83 	bl	8005170 <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6c:	e00a      	b.n	8005a84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a6e:	f7ff fb7f 	bl	8005170 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e0c5      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a84:	4b65      	ldr	r3, [pc, #404]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0ee      	beq.n	8005a6e <HAL_RCC_OscConfig+0x33a>
 8005a90:	e014      	b.n	8005abc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a92:	f7ff fb6d 	bl	8005170 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a98:	e00a      	b.n	8005ab0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a9a:	f7ff fb69 	bl	8005170 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e0af      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab0:	4b5a      	ldr	r3, [pc, #360]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1ee      	bne.n	8005a9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d105      	bne.n	8005ace <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ac2:	4b56      	ldr	r3, [pc, #344]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	4a55      	ldr	r2, [pc, #340]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005acc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 809b 	beq.w	8005c0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ad8:	4b50      	ldr	r3, [pc, #320]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 030c 	and.w	r3, r3, #12
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d05c      	beq.n	8005b9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d141      	bne.n	8005b70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aec:	4b4c      	ldr	r3, [pc, #304]	; (8005c20 <HAL_RCC_OscConfig+0x4ec>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af2:	f7ff fb3d 	bl	8005170 <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005afa:	f7ff fb39 	bl	8005170 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e081      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0c:	4b43      	ldr	r3, [pc, #268]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1f0      	bne.n	8005afa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	019b      	lsls	r3, r3, #6
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	3b01      	subs	r3, #1
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	061b      	lsls	r3, r3, #24
 8005b3c:	4937      	ldr	r1, [pc, #220]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b42:	4b37      	ldr	r3, [pc, #220]	; (8005c20 <HAL_RCC_OscConfig+0x4ec>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b48:	f7ff fb12 	bl	8005170 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b50:	f7ff fb0e 	bl	8005170 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e056      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b62:	4b2e      	ldr	r3, [pc, #184]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0f0      	beq.n	8005b50 <HAL_RCC_OscConfig+0x41c>
 8005b6e:	e04e      	b.n	8005c0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b70:	4b2b      	ldr	r3, [pc, #172]	; (8005c20 <HAL_RCC_OscConfig+0x4ec>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b76:	f7ff fafb 	bl	8005170 <HAL_GetTick>
 8005b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b7e:	f7ff faf7 	bl	8005170 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e03f      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b90:	4b22      	ldr	r3, [pc, #136]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1f0      	bne.n	8005b7e <HAL_RCC_OscConfig+0x44a>
 8005b9c:	e037      	b.n	8005c0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e032      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005baa:	4b1c      	ldr	r3, [pc, #112]	; (8005c1c <HAL_RCC_OscConfig+0x4e8>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d028      	beq.n	8005c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d121      	bne.n	8005c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d11a      	bne.n	8005c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bda:	4013      	ands	r3, r2
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005be0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d111      	bne.n	8005c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d107      	bne.n	8005c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d001      	beq.n	8005c0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40007000 	.word	0x40007000
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	42470060 	.word	0x42470060

08005c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0cc      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c38:	4b68      	ldr	r3, [pc, #416]	; (8005ddc <HAL_RCC_ClockConfig+0x1b8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d90c      	bls.n	8005c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c46:	4b65      	ldr	r3, [pc, #404]	; (8005ddc <HAL_RCC_ClockConfig+0x1b8>)
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4e:	4b63      	ldr	r3, [pc, #396]	; (8005ddc <HAL_RCC_ClockConfig+0x1b8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0b8      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d020      	beq.n	8005cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c78:	4b59      	ldr	r3, [pc, #356]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	4a58      	ldr	r2, [pc, #352]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c90:	4b53      	ldr	r3, [pc, #332]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	4a52      	ldr	r2, [pc, #328]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c9c:	4b50      	ldr	r3, [pc, #320]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	494d      	ldr	r1, [pc, #308]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d044      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d107      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cc2:	4b47      	ldr	r3, [pc, #284]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d119      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e07f      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d003      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d107      	bne.n	8005cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce2:	4b3f      	ldr	r3, [pc, #252]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e06f      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf2:	4b3b      	ldr	r3, [pc, #236]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e067      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d02:	4b37      	ldr	r3, [pc, #220]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f023 0203 	bic.w	r2, r3, #3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4934      	ldr	r1, [pc, #208]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d14:	f7ff fa2c 	bl	8005170 <HAL_GetTick>
 8005d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1a:	e00a      	b.n	8005d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d1c:	f7ff fa28 	bl	8005170 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e04f      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d32:	4b2b      	ldr	r3, [pc, #172]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 020c 	and.w	r2, r3, #12
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d1eb      	bne.n	8005d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d44:	4b25      	ldr	r3, [pc, #148]	; (8005ddc <HAL_RCC_ClockConfig+0x1b8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d20c      	bcs.n	8005d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d52:	4b22      	ldr	r3, [pc, #136]	; (8005ddc <HAL_RCC_ClockConfig+0x1b8>)
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5a:	4b20      	ldr	r3, [pc, #128]	; (8005ddc <HAL_RCC_ClockConfig+0x1b8>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d001      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e032      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d78:	4b19      	ldr	r3, [pc, #100]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4916      	ldr	r1, [pc, #88]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d96:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	490e      	ldr	r1, [pc, #56]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005daa:	f000 f821 	bl	8005df0 <HAL_RCC_GetSysClockFreq>
 8005dae:	4602      	mov	r2, r0
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	091b      	lsrs	r3, r3, #4
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	490a      	ldr	r1, [pc, #40]	; (8005de4 <HAL_RCC_ClockConfig+0x1c0>)
 8005dbc:	5ccb      	ldrb	r3, [r1, r3]
 8005dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc2:	4a09      	ldr	r2, [pc, #36]	; (8005de8 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dc6:	4b09      	ldr	r3, [pc, #36]	; (8005dec <HAL_RCC_ClockConfig+0x1c8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff f8da 	bl	8004f84 <HAL_InitTick>

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40023c00 	.word	0x40023c00
 8005de0:	40023800 	.word	0x40023800
 8005de4:	08006810 	.word	0x08006810
 8005de8:	20000010 	.word	0x20000010
 8005dec:	20000014 	.word	0x20000014

08005df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005df0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	607b      	str	r3, [r7, #4]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	2300      	movs	r3, #0
 8005e02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e08:	4b67      	ldr	r3, [pc, #412]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 030c 	and.w	r3, r3, #12
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d00d      	beq.n	8005e30 <HAL_RCC_GetSysClockFreq+0x40>
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	f200 80bd 	bhi.w	8005f94 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_RCC_GetSysClockFreq+0x34>
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d003      	beq.n	8005e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8005e22:	e0b7      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e24:	4b61      	ldr	r3, [pc, #388]	; (8005fac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e26:	60bb      	str	r3, [r7, #8]
       break;
 8005e28:	e0b7      	b.n	8005f9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e2a:	4b61      	ldr	r3, [pc, #388]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005e2c:	60bb      	str	r3, [r7, #8]
      break;
 8005e2e:	e0b4      	b.n	8005f9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e30:	4b5d      	ldr	r3, [pc, #372]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e3a:	4b5b      	ldr	r3, [pc, #364]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d04d      	beq.n	8005ee2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e46:	4b58      	ldr	r3, [pc, #352]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	099b      	lsrs	r3, r3, #6
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e56:	f04f 0100 	mov.w	r1, #0
 8005e5a:	ea02 0800 	and.w	r8, r2, r0
 8005e5e:	ea03 0901 	and.w	r9, r3, r1
 8005e62:	4640      	mov	r0, r8
 8005e64:	4649      	mov	r1, r9
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	014b      	lsls	r3, r1, #5
 8005e70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e74:	0142      	lsls	r2, r0, #5
 8005e76:	4610      	mov	r0, r2
 8005e78:	4619      	mov	r1, r3
 8005e7a:	ebb0 0008 	subs.w	r0, r0, r8
 8005e7e:	eb61 0109 	sbc.w	r1, r1, r9
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	018b      	lsls	r3, r1, #6
 8005e8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e90:	0182      	lsls	r2, r0, #6
 8005e92:	1a12      	subs	r2, r2, r0
 8005e94:	eb63 0301 	sbc.w	r3, r3, r1
 8005e98:	f04f 0000 	mov.w	r0, #0
 8005e9c:	f04f 0100 	mov.w	r1, #0
 8005ea0:	00d9      	lsls	r1, r3, #3
 8005ea2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ea6:	00d0      	lsls	r0, r2, #3
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	eb12 0208 	adds.w	r2, r2, r8
 8005eb0:	eb43 0309 	adc.w	r3, r3, r9
 8005eb4:	f04f 0000 	mov.w	r0, #0
 8005eb8:	f04f 0100 	mov.w	r1, #0
 8005ebc:	0259      	lsls	r1, r3, #9
 8005ebe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005ec2:	0250      	lsls	r0, r2, #9
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4619      	mov	r1, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	f7fa f9c6 	bl	8000264 <__aeabi_uldivmod>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4613      	mov	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	e04a      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ee2:	4b31      	ldr	r3, [pc, #196]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	099b      	lsrs	r3, r3, #6
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ef2:	f04f 0100 	mov.w	r1, #0
 8005ef6:	ea02 0400 	and.w	r4, r2, r0
 8005efa:	ea03 0501 	and.w	r5, r3, r1
 8005efe:	4620      	mov	r0, r4
 8005f00:	4629      	mov	r1, r5
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	f04f 0300 	mov.w	r3, #0
 8005f0a:	014b      	lsls	r3, r1, #5
 8005f0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f10:	0142      	lsls	r2, r0, #5
 8005f12:	4610      	mov	r0, r2
 8005f14:	4619      	mov	r1, r3
 8005f16:	1b00      	subs	r0, r0, r4
 8005f18:	eb61 0105 	sbc.w	r1, r1, r5
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	018b      	lsls	r3, r1, #6
 8005f26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f2a:	0182      	lsls	r2, r0, #6
 8005f2c:	1a12      	subs	r2, r2, r0
 8005f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f32:	f04f 0000 	mov.w	r0, #0
 8005f36:	f04f 0100 	mov.w	r1, #0
 8005f3a:	00d9      	lsls	r1, r3, #3
 8005f3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f40:	00d0      	lsls	r0, r2, #3
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	1912      	adds	r2, r2, r4
 8005f48:	eb45 0303 	adc.w	r3, r5, r3
 8005f4c:	f04f 0000 	mov.w	r0, #0
 8005f50:	f04f 0100 	mov.w	r1, #0
 8005f54:	0299      	lsls	r1, r3, #10
 8005f56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f5a:	0290      	lsls	r0, r2, #10
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4610      	mov	r0, r2
 8005f62:	4619      	mov	r1, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	f7fa f97a 	bl	8000264 <__aeabi_uldivmod>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4613      	mov	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f78:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	0c1b      	lsrs	r3, r3, #16
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	3301      	adds	r3, #1
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f90:	60bb      	str	r3, [r7, #8]
      break;
 8005f92:	e002      	b.n	8005f9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f94:	4b05      	ldr	r3, [pc, #20]	; (8005fac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f96:	60bb      	str	r3, [r7, #8]
      break;
 8005f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	00f42400 	.word	0x00f42400
 8005fb0:	007a1200 	.word	0x007a1200

08005fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fb8:	4b03      	ldr	r3, [pc, #12]	; (8005fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fba:	681b      	ldr	r3, [r3, #0]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	20000010 	.word	0x20000010

08005fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fd0:	f7ff fff0 	bl	8005fb4 <HAL_RCC_GetHCLKFreq>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	4b05      	ldr	r3, [pc, #20]	; (8005fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	0a9b      	lsrs	r3, r3, #10
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	4903      	ldr	r1, [pc, #12]	; (8005ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fe2:	5ccb      	ldrb	r3, [r1, r3]
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	08006820 	.word	0x08006820

08005ff4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	220f      	movs	r2, #15
 8006002:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006004:	4b12      	ldr	r3, [pc, #72]	; (8006050 <HAL_RCC_GetClockConfig+0x5c>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 0203 	and.w	r2, r3, #3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006010:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <HAL_RCC_GetClockConfig+0x5c>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800601c:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <HAL_RCC_GetClockConfig+0x5c>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006028:	4b09      	ldr	r3, [pc, #36]	; (8006050 <HAL_RCC_GetClockConfig+0x5c>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	08db      	lsrs	r3, r3, #3
 800602e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006036:	4b07      	ldr	r3, [pc, #28]	; (8006054 <HAL_RCC_GetClockConfig+0x60>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0207 	and.w	r2, r3, #7
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	601a      	str	r2, [r3, #0]
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40023800 	.word	0x40023800
 8006054:	40023c00 	.word	0x40023c00

08006058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e041      	b.n	80060ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f839 	bl	80060f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3304      	adds	r3, #4
 8006094:	4619      	mov	r1, r3
 8006096:	4610      	mov	r0, r2
 8006098:	f000 f9d8 	bl	800644c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
	...

0800610c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b01      	cmp	r3, #1
 800611e:	d001      	beq.n	8006124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e04e      	b.n	80061c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a23      	ldr	r2, [pc, #140]	; (80061d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d022      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614e:	d01d      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1e      	ldr	r2, [pc, #120]	; (80061d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1c      	ldr	r2, [pc, #112]	; (80061dc <HAL_TIM_Base_Start_IT+0xd0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a19      	ldr	r2, [pc, #100]	; (80061e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d111      	bne.n	80061b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b06      	cmp	r3, #6
 800619c:	d010      	beq.n	80061c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0201 	orr.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ae:	e007      	b.n	80061c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40000400 	.word	0x40000400
 80061d8:	40000800 	.word	0x40000800
 80061dc:	40000c00 	.word	0x40000c00
 80061e0:	40010400 	.word	0x40010400
 80061e4:	40014000 	.word	0x40014000
 80061e8:	40001800 	.word	0x40001800

080061ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d122      	bne.n	8006248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b02      	cmp	r3, #2
 800620e:	d11b      	bne.n	8006248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0202 	mvn.w	r2, #2
 8006218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f8ee 	bl	8006410 <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f8e0 	bl	80063fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f8f1 	bl	8006424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b04      	cmp	r3, #4
 8006254:	d122      	bne.n	800629c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b04      	cmp	r3, #4
 8006262:	d11b      	bne.n	800629c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0204 	mvn.w	r2, #4
 800626c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f8c4 	bl	8006410 <HAL_TIM_IC_CaptureCallback>
 8006288:	e005      	b.n	8006296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f8b6 	bl	80063fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f8c7 	bl	8006424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d122      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d11b      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0208 	mvn.w	r2, #8
 80062c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2204      	movs	r2, #4
 80062c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f89a 	bl	8006410 <HAL_TIM_IC_CaptureCallback>
 80062dc:	e005      	b.n	80062ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f88c 	bl	80063fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f89d 	bl	8006424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f003 0310 	and.w	r3, r3, #16
 80062fa:	2b10      	cmp	r3, #16
 80062fc:	d122      	bne.n	8006344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b10      	cmp	r3, #16
 800630a:	d11b      	bne.n	8006344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f06f 0210 	mvn.w	r2, #16
 8006314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2208      	movs	r2, #8
 800631a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f870 	bl	8006410 <HAL_TIM_IC_CaptureCallback>
 8006330:	e005      	b.n	800633e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f862 	bl	80063fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f873 	bl	8006424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b01      	cmp	r3, #1
 8006350:	d10e      	bne.n	8006370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b01      	cmp	r3, #1
 800635e:	d107      	bne.n	8006370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0201 	mvn.w	r2, #1
 8006368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fe fdca 	bl	8004f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637a:	2b80      	cmp	r3, #128	; 0x80
 800637c:	d10e      	bne.n	800639c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006388:	2b80      	cmp	r3, #128	; 0x80
 800638a:	d107      	bne.n	800639c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f902 	bl	80065a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b40      	cmp	r3, #64	; 0x40
 80063a8:	d10e      	bne.n	80063c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d107      	bne.n	80063c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f838 	bl	8006438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d10e      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d107      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0220 	mvn.w	r2, #32
 80063ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f8cc 	bl	800658c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a40      	ldr	r2, [pc, #256]	; (8006560 <TIM_Base_SetConfig+0x114>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646a:	d00f      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a3d      	ldr	r2, [pc, #244]	; (8006564 <TIM_Base_SetConfig+0x118>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00b      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a3c      	ldr	r2, [pc, #240]	; (8006568 <TIM_Base_SetConfig+0x11c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d007      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a3b      	ldr	r2, [pc, #236]	; (800656c <TIM_Base_SetConfig+0x120>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a3a      	ldr	r2, [pc, #232]	; (8006570 <TIM_Base_SetConfig+0x124>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d108      	bne.n	800649e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2f      	ldr	r2, [pc, #188]	; (8006560 <TIM_Base_SetConfig+0x114>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d02b      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ac:	d027      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2c      	ldr	r2, [pc, #176]	; (8006564 <TIM_Base_SetConfig+0x118>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d023      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a2b      	ldr	r2, [pc, #172]	; (8006568 <TIM_Base_SetConfig+0x11c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d01f      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a2a      	ldr	r2, [pc, #168]	; (800656c <TIM_Base_SetConfig+0x120>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d01b      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a29      	ldr	r2, [pc, #164]	; (8006570 <TIM_Base_SetConfig+0x124>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d017      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a28      	ldr	r2, [pc, #160]	; (8006574 <TIM_Base_SetConfig+0x128>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a27      	ldr	r2, [pc, #156]	; (8006578 <TIM_Base_SetConfig+0x12c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00f      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a26      	ldr	r2, [pc, #152]	; (800657c <TIM_Base_SetConfig+0x130>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00b      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a25      	ldr	r2, [pc, #148]	; (8006580 <TIM_Base_SetConfig+0x134>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d007      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a24      	ldr	r2, [pc, #144]	; (8006584 <TIM_Base_SetConfig+0x138>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a23      	ldr	r2, [pc, #140]	; (8006588 <TIM_Base_SetConfig+0x13c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d108      	bne.n	8006510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a0a      	ldr	r2, [pc, #40]	; (8006560 <TIM_Base_SetConfig+0x114>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_Base_SetConfig+0xf8>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a0c      	ldr	r2, [pc, #48]	; (8006570 <TIM_Base_SetConfig+0x124>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d103      	bne.n	800654c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	615a      	str	r2, [r3, #20]
}
 8006552:	bf00      	nop
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40010000 	.word	0x40010000
 8006564:	40000400 	.word	0x40000400
 8006568:	40000800 	.word	0x40000800
 800656c:	40000c00 	.word	0x40000c00
 8006570:	40010400 	.word	0x40010400
 8006574:	40014000 	.word	0x40014000
 8006578:	40014400 	.word	0x40014400
 800657c:	40014800 	.word	0x40014800
 8006580:	40001800 	.word	0x40001800
 8006584:	40001c00 	.word	0x40001c00
 8006588:	40002000 	.word	0x40002000

0800658c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <__libc_init_array>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	4d0d      	ldr	r5, [pc, #52]	; (80065ec <__libc_init_array+0x38>)
 80065b8:	4c0d      	ldr	r4, [pc, #52]	; (80065f0 <__libc_init_array+0x3c>)
 80065ba:	1b64      	subs	r4, r4, r5
 80065bc:	10a4      	asrs	r4, r4, #2
 80065be:	2600      	movs	r6, #0
 80065c0:	42a6      	cmp	r6, r4
 80065c2:	d109      	bne.n	80065d8 <__libc_init_array+0x24>
 80065c4:	4d0b      	ldr	r5, [pc, #44]	; (80065f4 <__libc_init_array+0x40>)
 80065c6:	4c0c      	ldr	r4, [pc, #48]	; (80065f8 <__libc_init_array+0x44>)
 80065c8:	f000 f83c 	bl	8006644 <_init>
 80065cc:	1b64      	subs	r4, r4, r5
 80065ce:	10a4      	asrs	r4, r4, #2
 80065d0:	2600      	movs	r6, #0
 80065d2:	42a6      	cmp	r6, r4
 80065d4:	d105      	bne.n	80065e2 <__libc_init_array+0x2e>
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
 80065d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065dc:	4798      	blx	r3
 80065de:	3601      	adds	r6, #1
 80065e0:	e7ee      	b.n	80065c0 <__libc_init_array+0xc>
 80065e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e6:	4798      	blx	r3
 80065e8:	3601      	adds	r6, #1
 80065ea:	e7f2      	b.n	80065d2 <__libc_init_array+0x1e>
 80065ec:	08006830 	.word	0x08006830
 80065f0:	08006830 	.word	0x08006830
 80065f4:	08006830 	.word	0x08006830
 80065f8:	08006834 	.word	0x08006834

080065fc <memcmp>:
 80065fc:	b530      	push	{r4, r5, lr}
 80065fe:	3901      	subs	r1, #1
 8006600:	2400      	movs	r4, #0
 8006602:	42a2      	cmp	r2, r4
 8006604:	d101      	bne.n	800660a <memcmp+0xe>
 8006606:	2000      	movs	r0, #0
 8006608:	e005      	b.n	8006616 <memcmp+0x1a>
 800660a:	5d03      	ldrb	r3, [r0, r4]
 800660c:	3401      	adds	r4, #1
 800660e:	5d0d      	ldrb	r5, [r1, r4]
 8006610:	42ab      	cmp	r3, r5
 8006612:	d0f6      	beq.n	8006602 <memcmp+0x6>
 8006614:	1b58      	subs	r0, r3, r5
 8006616:	bd30      	pop	{r4, r5, pc}

08006618 <memcpy>:
 8006618:	440a      	add	r2, r1
 800661a:	4291      	cmp	r1, r2
 800661c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006620:	d100      	bne.n	8006624 <memcpy+0xc>
 8006622:	4770      	bx	lr
 8006624:	b510      	push	{r4, lr}
 8006626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800662a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800662e:	4291      	cmp	r1, r2
 8006630:	d1f9      	bne.n	8006626 <memcpy+0xe>
 8006632:	bd10      	pop	{r4, pc}

08006634 <memset>:
 8006634:	4402      	add	r2, r0
 8006636:	4603      	mov	r3, r0
 8006638:	4293      	cmp	r3, r2
 800663a:	d100      	bne.n	800663e <memset+0xa>
 800663c:	4770      	bx	lr
 800663e:	f803 1b01 	strb.w	r1, [r3], #1
 8006642:	e7f9      	b.n	8006638 <memset+0x4>

08006644 <_init>:
 8006644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006646:	bf00      	nop
 8006648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664a:	bc08      	pop	{r3}
 800664c:	469e      	mov	lr, r3
 800664e:	4770      	bx	lr

08006650 <_fini>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	bf00      	nop
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr
