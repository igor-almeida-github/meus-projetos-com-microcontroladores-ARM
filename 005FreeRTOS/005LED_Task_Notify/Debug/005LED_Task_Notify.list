
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006700  08006700  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006708  08006708  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006708  08006708  00016708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800670c  0800670c  0001670c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014428  2000001c  0800672c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014444  0800672c  00024444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001678c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e0a  00000000  00000000  000367d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  000395e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  0003a720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021530  00000000  00000000  0003b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001340a  00000000  00000000  0005cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d86ab  00000000  00000000  0007002a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001486d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000476c  00000000  00000000  00148728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006510 	.word	0x08006510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006510 	.word	0x08006510

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001433c 	.word	0x2001433c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f103 0208 	add.w	r2, r3, #8
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000574:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f103 0208 	add.w	r2, r3, #8
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f103 0208 	add.w	r2, r3, #8
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005b6:	b480      	push	{r7}
 80005b8:	b085      	sub	sp, #20
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1c5a      	adds	r2, r3, #1
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	601a      	str	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000614:	d103      	bne.n	800061e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	691b      	ldr	r3, [r3, #16]
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e00c      	b.n	8000638 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3308      	adds	r3, #8
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e002      	b.n	800062c <vListInsert+0x2e>
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	429a      	cmp	r2, r3
 8000636:	d2f6      	bcs.n	8000626 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	691b      	ldr	r3, [r3, #16]
 800067c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	6892      	ldr	r2, [r2, #8]
 8000686:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	6852      	ldr	r2, [r2, #4]
 8000690:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	d103      	bne.n	80006a4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689a      	ldr	r2, [r3, #8]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af04      	add	r7, sp, #16
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4613      	mov	r3, r2
 80006d2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f9f7 	bl	8001acc <pvPortMalloc>
 80006de:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00e      	beq.n	8000704 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80006e6:	2058      	movs	r0, #88	; 0x58
 80006e8:	f001 f9f0 	bl	8001acc <pvPortMalloc>
 80006ec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
 80006fa:	e005      	b.n	8000708 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80006fc:	6978      	ldr	r0, [r7, #20]
 80006fe:	f001 fac5 	bl	8001c8c <vPortFree>
 8000702:	e001      	b.n	8000708 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d013      	beq.n	8000736 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800070e:	88fa      	ldrh	r2, [r7, #6]
 8000710:	2300      	movs	r3, #0
 8000712:	9303      	str	r3, [sp, #12]
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	9302      	str	r3, [sp, #8]
 8000718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	68b9      	ldr	r1, [r7, #8]
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f000 f80e 	bl	8000746 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800072a:	69f8      	ldr	r0, [r7, #28]
 800072c:	f000 f8a2 	bl	8000874 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000730:	2301      	movs	r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	e002      	b.n	800073c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800073a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800073c:	69bb      	ldr	r3, [r7, #24]
    }
 800073e:	4618      	mov	r0, r3
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b088      	sub	sp, #32
 800074a:	af00      	add	r7, sp, #0
 800074c:	60f8      	str	r0, [r7, #12]
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000756:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	461a      	mov	r2, r3
 800075e:	21a5      	movs	r1, #165	; 0xa5
 8000760:	f005 fece 	bl	8006500 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800076e:	3b01      	subs	r3, #1
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	f023 0307 	bic.w	r3, r3, #7
 800077c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00a      	beq.n	800079e <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800078c:	f383 8811 	msr	BASEPRI, r3
 8000790:	f3bf 8f6f 	isb	sy
 8000794:	f3bf 8f4f 	dsb	sy
 8000798:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800079a:	bf00      	nop
 800079c:	e7fe      	b.n	800079c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d01f      	beq.n	80007e4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
 80007a8:	e012      	b.n	80007d0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	4413      	add	r3, r2
 80007b0:	7819      	ldrb	r1, [r3, #0]
 80007b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	4413      	add	r3, r2
 80007b8:	3334      	adds	r3, #52	; 0x34
 80007ba:	460a      	mov	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d006      	beq.n	80007d8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3301      	adds	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	2b09      	cmp	r3, #9
 80007d4:	d9e9      	bls.n	80007aa <prvInitialiseNewTask+0x64>
 80007d6:	e000      	b.n	80007da <prvInitialiseNewTask+0x94>
            {
                break;
 80007d8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80007da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80007e2:	e003      	b.n	80007ec <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80007e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80007ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	d901      	bls.n	80007f6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80007f2:	2304      	movs	r3, #4
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80007f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80007fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000800:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000804:	2200      	movs	r2, #0
 8000806:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800080a:	3304      	adds	r3, #4
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fec5 	bl	800059c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000814:	3318      	adds	r3, #24
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fec0 	bl	800059c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800081c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800081e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000820:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000824:	f1c3 0205 	rsb	r2, r3, #5
 8000828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800082c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000834:	3350      	adds	r3, #80	; 0x50
 8000836:	2204      	movs	r2, #4
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f005 fe60 	bl	8006500 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000842:	3354      	adds	r3, #84	; 0x54
 8000844:	2201      	movs	r2, #1
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f005 fe59 	bl	8006500 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	68f9      	ldr	r1, [r7, #12]
 8000852:	69b8      	ldr	r0, [r7, #24]
 8000854:	f000 fe62 	bl	800151c <pxPortInitialiseStack>
 8000858:	4602      	mov	r2, r0
 800085a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800085c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800085e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000860:	2b00      	cmp	r3, #0
 8000862:	d002      	beq.n	800086a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000868:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af02      	add	r7, sp, #8
 800087a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800087c:	f000 fffa 	bl	8001874 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000880:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <prvAddNewTaskToReadyList+0xfc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a3a      	ldr	r2, [pc, #232]	; (8000970 <prvAddNewTaskToReadyList+0xfc>)
 8000888:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800088a:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d109      	bne.n	80008a6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000892:	4a38      	ldr	r2, [pc, #224]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000898:	4b35      	ldr	r3, [pc, #212]	; (8000970 <prvAddNewTaskToReadyList+0xfc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d110      	bne.n	80008c2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80008a0:	f000 fbb0 	bl	8001004 <prvInitialiseTaskLists>
 80008a4:	e00d      	b.n	80008c2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <prvAddNewTaskToReadyList+0x104>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d109      	bne.n	80008c2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d802      	bhi.n	80008c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80008bc:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <prvAddNewTaskToReadyList+0x108>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	4a2c      	ldr	r2, [pc, #176]	; (800097c <prvAddNewTaskToReadyList+0x108>)
 80008ca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <prvAddNewTaskToReadyList+0x108>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d016      	beq.n	8000908 <prvAddNewTaskToReadyList+0x94>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fca1 	bl	8004224 <SEGGER_SYSVIEW_OnTaskCreate>
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	461d      	mov	r5, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	461c      	mov	r4, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	1ae3      	subs	r3, r4, r3
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	462b      	mov	r3, r5
 8000904:	f001 fb88 	bl	8002018 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4618      	mov	r0, r3
 800090c:	f003 fd0e 	bl	800432c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	2201      	movs	r2, #1
 8000916:	409a      	lsls	r2, r3
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <prvAddNewTaskToReadyList+0x10c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4313      	orrs	r3, r2
 800091e:	4a18      	ldr	r2, [pc, #96]	; (8000980 <prvAddNewTaskToReadyList+0x10c>)
 8000920:	6013      	str	r3, [r2, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000926:	4613      	mov	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <prvAddNewTaskToReadyList+0x110>)
 8000930:	441a      	add	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4610      	mov	r0, r2
 800093a:	f7ff fe3c 	bl	80005b6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800093e:	f000 ffc9 	bl	80018d4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <prvAddNewTaskToReadyList+0x104>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d00e      	beq.n	8000968 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <prvAddNewTaskToReadyList+0x100>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <prvAddNewTaskToReadyList+0x114>)
 800095a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	f3bf 8f4f 	dsb	sy
 8000964:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bdb0      	pop	{r4, r5, r7, pc}
 8000970:	20000110 	.word	0x20000110
 8000974:	20000038 	.word	0x20000038
 8000978:	2000011c 	.word	0x2000011c
 800097c:	2000012c 	.word	0x2000012c
 8000980:	20000118 	.word	0x20000118
 8000984:	2000003c 	.word	0x2000003c
 8000988:	e000ed04 	.word	0xe000ed04

0800098c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000994:	f000 ff6e 	bl	8001874 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d102      	bne.n	80009a4 <vTaskDelete+0x18>
 800099e:	4b46      	ldr	r3, [pc, #280]	; (8000ab8 <vTaskDelete+0x12c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	e000      	b.n	80009a6 <vTaskDelete+0x1a>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3304      	adds	r3, #4
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe5f 	bl	8000670 <uxListRemove>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d115      	bne.n	80009e4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009bc:	493f      	ldr	r1, [pc, #252]	; (8000abc <vTaskDelete+0x130>)
 80009be:	4613      	mov	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	440b      	add	r3, r1
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10a      	bne.n	80009e4 <vTaskDelete+0x58>
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d2:	2201      	movs	r2, #1
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43da      	mvns	r2, r3
 80009da:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <vTaskDelete+0x134>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4013      	ands	r3, r2
 80009e0:	4a37      	ldr	r2, [pc, #220]	; (8000ac0 <vTaskDelete+0x134>)
 80009e2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d004      	beq.n	80009f6 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3318      	adds	r3, #24
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fe3d 	bl	8000670 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80009f6:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <vTaskDelete+0x138>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a31      	ldr	r2, [pc, #196]	; (8000ac4 <vTaskDelete+0x138>)
 80009fe:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8000a00:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <vTaskDelete+0x12c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d118      	bne.n	8000a3c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	482d      	ldr	r0, [pc, #180]	; (8000ac8 <vTaskDelete+0x13c>)
 8000a12:	f7ff fdd0 	bl	80005b6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <vTaskDelete+0x140>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a2b      	ldr	r2, [pc, #172]	; (8000acc <vTaskDelete+0x140>)
 8000a1e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fd24 	bl	8004470 <SEGGER_SYSVIEW_ShrinkId>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	2022      	movs	r0, #34	; 0x22
 8000a2e:	f002 ff71 	bl	8003914 <SEGGER_SYSVIEW_RecordU32>
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fb57 	bl	80020e8 <SYSVIEW_DeleteTask>
 8000a3a:	e016      	b.n	8000a6a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8000a3c:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <vTaskDelete+0x144>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <vTaskDelete+0x144>)
 8000a44:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 fd11 	bl	8004470 <SEGGER_SYSVIEW_ShrinkId>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4619      	mov	r1, r3
 8000a52:	2022      	movs	r0, #34	; 0x22
 8000a54:	f002 ff5e 	bl	8003914 <SEGGER_SYSVIEW_RecordU32>
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 fb44 	bl	80020e8 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f000 fb3d 	bl	80010e0 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8000a66:	f000 fb4b 	bl	8001100 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8000a6a:	f000 ff33 	bl	80018d4 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <vTaskDelete+0x148>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d01b      	beq.n	8000aae <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <vTaskDelete+0x12c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d116      	bne.n	8000aae <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <vTaskDelete+0x14c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00a      	beq.n	8000a9e <vTaskDelete+0x112>
        __asm volatile
 8000a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a8c:	f383 8811 	msr	BASEPRI, r3
 8000a90:	f3bf 8f6f 	isb	sy
 8000a94:	f3bf 8f4f 	dsb	sy
 8000a98:	60bb      	str	r3, [r7, #8]
    }
 8000a9a:	bf00      	nop
 8000a9c:	e7fe      	b.n	8000a9c <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <vTaskDelete+0x150>)
 8000aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	f3bf 8f4f 	dsb	sy
 8000aaa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000038 	.word	0x20000038
 8000abc:	2000003c 	.word	0x2000003c
 8000ac0:	20000118 	.word	0x20000118
 8000ac4:	2000012c 	.word	0x2000012c
 8000ac8:	200000e4 	.word	0x200000e4
 8000acc:	200000f8 	.word	0x200000f8
 8000ad0:	20000110 	.word	0x20000110
 8000ad4:	2000011c 	.word	0x2000011c
 8000ad8:	20000138 	.word	0x20000138
 8000adc:	e000ed04 	.word	0xe000ed04

08000ae0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d01b      	beq.n	8000b2a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <vTaskDelay+0x68>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d00a      	beq.n	8000b10 <vTaskDelay+0x30>
        __asm volatile
 8000afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000afe:	f383 8811 	msr	BASEPRI, r3
 8000b02:	f3bf 8f6f 	isb	sy
 8000b06:	f3bf 8f4f 	dsb	sy
 8000b0a:	60bb      	str	r3, [r7, #8]
    }
 8000b0c:	bf00      	nop
 8000b0e:	e7fe      	b.n	8000b0e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000b10:	f000 f87a 	bl	8000c08 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	2023      	movs	r0, #35	; 0x23
 8000b18:	f002 fefc 	bl	8003914 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 fc84 	bl	800142c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000b24:	f000 f87e 	bl	8000c24 <xTaskResumeAll>
 8000b28:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d107      	bne.n	8000b40 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <vTaskDelay+0x6c>)
 8000b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	f3bf 8f4f 	dsb	sy
 8000b3c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000138 	.word	0x20000138
 8000b4c:	e000ed04 	.word	0xe000ed04

08000b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000b56:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <vTaskStartScheduler+0x98>)
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2282      	movs	r2, #130	; 0x82
 8000b62:	4922      	ldr	r1, [pc, #136]	; (8000bec <vTaskStartScheduler+0x9c>)
 8000b64:	4822      	ldr	r0, [pc, #136]	; (8000bf0 <vTaskStartScheduler+0xa0>)
 8000b66:	f7ff fdad 	bl	80006c4 <xTaskCreate>
 8000b6a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d124      	bne.n	8000bbc <vTaskStartScheduler+0x6c>
        __asm volatile
 8000b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b76:	f383 8811 	msr	BASEPRI, r3
 8000b7a:	f3bf 8f6f 	isb	sy
 8000b7e:	f3bf 8f4f 	dsb	sy
 8000b82:	60bb      	str	r3, [r7, #8]
    }
 8000b84:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <vTaskStartScheduler+0xa4>)
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b8c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <vTaskStartScheduler+0xa8>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <vTaskStartScheduler+0xac>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <vTaskStartScheduler+0xb0>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <vTaskStartScheduler+0x98>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d102      	bne.n	8000bac <vTaskStartScheduler+0x5c>
 8000ba6:	f003 fb21 	bl	80041ec <SEGGER_SYSVIEW_OnIdle>
 8000baa:	e004      	b.n	8000bb6 <vTaskStartScheduler+0x66>
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <vTaskStartScheduler+0xb0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 fb79 	bl	80042a8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000bb6:	f000 fd3d 	bl	8001634 <xPortStartScheduler>
 8000bba:	e00e      	b.n	8000bda <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bc2:	d10a      	bne.n	8000bda <vTaskStartScheduler+0x8a>
        __asm volatile
 8000bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bc8:	f383 8811 	msr	BASEPRI, r3
 8000bcc:	f3bf 8f6f 	isb	sy
 8000bd0:	f3bf 8f4f 	dsb	sy
 8000bd4:	607b      	str	r3, [r7, #4]
    }
 8000bd6:	bf00      	nop
 8000bd8:	e7fe      	b.n	8000bd8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <vTaskStartScheduler+0xb4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000134 	.word	0x20000134
 8000bec:	08006528 	.word	0x08006528
 8000bf0:	08000fd5 	.word	0x08000fd5
 8000bf4:	20000130 	.word	0x20000130
 8000bf8:	2000011c 	.word	0x2000011c
 8000bfc:	20000114 	.word	0x20000114
 8000c00:	20000038 	.word	0x20000038
 8000c04:	20000000 	.word	0x20000000

08000c08 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <vTaskSuspendAll+0x18>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <vTaskSuspendAll+0x18>)
 8000c14:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000138 	.word	0x20000138

08000c24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000c32:	4b43      	ldr	r3, [pc, #268]	; (8000d40 <xTaskResumeAll+0x11c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10a      	bne.n	8000c50 <xTaskResumeAll+0x2c>
        __asm volatile
 8000c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c3e:	f383 8811 	msr	BASEPRI, r3
 8000c42:	f3bf 8f6f 	isb	sy
 8000c46:	f3bf 8f4f 	dsb	sy
 8000c4a:	603b      	str	r3, [r7, #0]
    }
 8000c4c:	bf00      	nop
 8000c4e:	e7fe      	b.n	8000c4e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000c50:	f000 fe10 	bl	8001874 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000c54:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <xTaskResumeAll+0x11c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	4a39      	ldr	r2, [pc, #228]	; (8000d40 <xTaskResumeAll+0x11c>)
 8000c5c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c5e:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <xTaskResumeAll+0x11c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d165      	bne.n	8000d32 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c66:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <xTaskResumeAll+0x120>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d061      	beq.n	8000d32 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c6e:	e032      	b.n	8000cd6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c70:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <xTaskResumeAll+0x124>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3318      	adds	r3, #24
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fcf7 	bl	8000670 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	3304      	adds	r3, #4
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fcf2 	bl	8000670 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 fb4c 	bl	800432c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c98:	2201      	movs	r2, #1
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <xTaskResumeAll+0x128>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	4a2a      	ldr	r2, [pc, #168]	; (8000d4c <xTaskResumeAll+0x128>)
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000caa:	4613      	mov	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <xTaskResumeAll+0x12c>)
 8000cb4:	441a      	add	r2, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	f7ff fc7a 	bl	80005b6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc6:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <xTaskResumeAll+0x130>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d302      	bcc.n	8000cd6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8000cd0:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <xTaskResumeAll+0x134>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <xTaskResumeAll+0x124>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1c8      	bne.n	8000c70 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000ce4:	f000 fa0c 	bl	8001100 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <xTaskResumeAll+0x138>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d010      	beq.n	8000d16 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000cf4:	f000 f848 	bl	8000d88 <xTaskIncrementTick>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <xTaskResumeAll+0x134>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f1      	bne.n	8000cf4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <xTaskResumeAll+0x138>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <xTaskResumeAll+0x134>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d009      	beq.n	8000d32 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <xTaskResumeAll+0x13c>)
 8000d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	f3bf 8f4f 	dsb	sy
 8000d2e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000d32:	f000 fdcf 	bl	80018d4 <vPortExitCritical>

    return xAlreadyYielded;
 8000d36:	68bb      	ldr	r3, [r7, #8]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000138 	.word	0x20000138
 8000d44:	20000110 	.word	0x20000110
 8000d48:	200000d0 	.word	0x200000d0
 8000d4c:	20000118 	.word	0x20000118
 8000d50:	2000003c 	.word	0x2000003c
 8000d54:	20000038 	.word	0x20000038
 8000d58:	20000124 	.word	0x20000124
 8000d5c:	20000120 	.word	0x20000120
 8000d60:	e000ed04 	.word	0xe000ed04

08000d64 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000d6a:	f000 fe6f 	bl	8001a4c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <xTaskGetTickCountFromISR+0x20>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000d78:	683b      	ldr	r3, [r7, #0]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000114 	.word	0x20000114

08000d88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d92:	4b50      	ldr	r3, [pc, #320]	; (8000ed4 <xTaskIncrementTick+0x14c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f040 8092 	bne.w	8000ec0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000d9c:	4b4e      	ldr	r3, [pc, #312]	; (8000ed8 <xTaskIncrementTick+0x150>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000da4:	4a4c      	ldr	r2, [pc, #304]	; (8000ed8 <xTaskIncrementTick+0x150>)
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d120      	bne.n	8000df2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000db0:	4b4a      	ldr	r3, [pc, #296]	; (8000edc <xTaskIncrementTick+0x154>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00a      	beq.n	8000dd0 <xTaskIncrementTick+0x48>
        __asm volatile
 8000dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dbe:	f383 8811 	msr	BASEPRI, r3
 8000dc2:	f3bf 8f6f 	isb	sy
 8000dc6:	f3bf 8f4f 	dsb	sy
 8000dca:	603b      	str	r3, [r7, #0]
    }
 8000dcc:	bf00      	nop
 8000dce:	e7fe      	b.n	8000dce <xTaskIncrementTick+0x46>
 8000dd0:	4b42      	ldr	r3, [pc, #264]	; (8000edc <xTaskIncrementTick+0x154>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b42      	ldr	r3, [pc, #264]	; (8000ee0 <xTaskIncrementTick+0x158>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a40      	ldr	r2, [pc, #256]	; (8000edc <xTaskIncrementTick+0x154>)
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4a40      	ldr	r2, [pc, #256]	; (8000ee0 <xTaskIncrementTick+0x158>)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b3f      	ldr	r3, [pc, #252]	; (8000ee4 <xTaskIncrementTick+0x15c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a3e      	ldr	r2, [pc, #248]	; (8000ee4 <xTaskIncrementTick+0x15c>)
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	f000 f987 	bl	8001100 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000df2:	4b3d      	ldr	r3, [pc, #244]	; (8000ee8 <xTaskIncrementTick+0x160>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d34c      	bcc.n	8000e96 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000dfc:	4b37      	ldr	r3, [pc, #220]	; (8000edc <xTaskIncrementTick+0x154>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d104      	bne.n	8000e10 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e06:	4b38      	ldr	r3, [pc, #224]	; (8000ee8 <xTaskIncrementTick+0x160>)
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e0c:	601a      	str	r2, [r3, #0]
                    break;
 8000e0e:	e042      	b.n	8000e96 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e10:	4b32      	ldr	r3, [pc, #200]	; (8000edc <xTaskIncrementTick+0x154>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d203      	bcs.n	8000e30 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000e28:	4a2f      	ldr	r2, [pc, #188]	; (8000ee8 <xTaskIncrementTick+0x160>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000e2e:	e032      	b.n	8000e96 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	3304      	adds	r3, #4
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fc1b 	bl	8000670 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d004      	beq.n	8000e4c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	3318      	adds	r3, #24
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fc12 	bl	8000670 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fa6c 	bl	800432c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	2201      	movs	r2, #1
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	4b23      	ldr	r3, [pc, #140]	; (8000eec <xTaskIncrementTick+0x164>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	4a22      	ldr	r2, [pc, #136]	; (8000eec <xTaskIncrementTick+0x164>)
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <xTaskIncrementTick+0x168>)
 8000e74:	441a      	add	r2, r3
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	f7ff fb9a 	bl	80005b6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <xTaskIncrementTick+0x16c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d3b5      	bcc.n	8000dfc <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8000e90:	2301      	movs	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e94:	e7b2      	b.n	8000dfc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <xTaskIncrementTick+0x16c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e9c:	4914      	ldr	r1, [pc, #80]	; (8000ef0 <xTaskIncrementTick+0x168>)
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d901      	bls.n	8000eb2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <xTaskIncrementTick+0x170>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	e004      	b.n	8000eca <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <xTaskIncrementTick+0x174>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <xTaskIncrementTick+0x174>)
 8000ec8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000eca:	697b      	ldr	r3, [r7, #20]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000138 	.word	0x20000138
 8000ed8:	20000114 	.word	0x20000114
 8000edc:	200000c8 	.word	0x200000c8
 8000ee0:	200000cc 	.word	0x200000cc
 8000ee4:	20000128 	.word	0x20000128
 8000ee8:	20000130 	.word	0x20000130
 8000eec:	20000118 	.word	0x20000118
 8000ef0:	2000003c 	.word	0x2000003c
 8000ef4:	20000038 	.word	0x20000038
 8000ef8:	20000124 	.word	0x20000124
 8000efc:	20000120 	.word	0x20000120

08000f00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000f06:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <vTaskSwitchContext+0xbc>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000f0e:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <vTaskSwitchContext+0xc0>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000f14:	e04d      	b.n	8000fb2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8000f16:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <vTaskSwitchContext+0xc0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f1c:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <vTaskSwitchContext+0xc4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	fab3 f383 	clz	r3, r3
 8000f28:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000f2a:	7afb      	ldrb	r3, [r7, #11]
 8000f2c:	f1c3 031f 	rsb	r3, r3, #31
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	4925      	ldr	r1, [pc, #148]	; (8000fc8 <vTaskSwitchContext+0xc8>)
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10a      	bne.n	8000f5c <vTaskSwitchContext+0x5c>
        __asm volatile
 8000f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f4a:	f383 8811 	msr	BASEPRI, r3
 8000f4e:	f3bf 8f6f 	isb	sy
 8000f52:	f3bf 8f4f 	dsb	sy
 8000f56:	607b      	str	r3, [r7, #4]
    }
 8000f58:	bf00      	nop
 8000f5a:	e7fe      	b.n	8000f5a <vTaskSwitchContext+0x5a>
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <vTaskSwitchContext+0xc8>)
 8000f68:	4413      	add	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	3308      	adds	r3, #8
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d104      	bne.n	8000f8c <vTaskSwitchContext+0x8c>
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <vTaskSwitchContext+0xcc>)
 8000f94:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <vTaskSwitchContext+0xcc>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <vTaskSwitchContext+0xd0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d102      	bne.n	8000fa8 <vTaskSwitchContext+0xa8>
 8000fa2:	f003 f923 	bl	80041ec <SEGGER_SYSVIEW_OnIdle>
}
 8000fa6:	e004      	b.n	8000fb2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <vTaskSwitchContext+0xcc>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 f97b 	bl	80042a8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000138 	.word	0x20000138
 8000fc0:	20000124 	.word	0x20000124
 8000fc4:	20000118 	.word	0x20000118
 8000fc8:	2000003c 	.word	0x2000003c
 8000fcc:	20000038 	.word	0x20000038
 8000fd0:	20000134 	.word	0x20000134

08000fd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000fdc:	f000 f852 	bl	8001084 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <prvIdleTask+0x28>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d9f9      	bls.n	8000fdc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <prvIdleTask+0x2c>)
 8000fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000ff8:	e7f0      	b.n	8000fdc <prvIdleTask+0x8>
 8000ffa:	bf00      	nop
 8000ffc:	2000003c 	.word	0x2000003c
 8001000:	e000ed04 	.word	0xe000ed04

08001004 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	e00c      	b.n	800102a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <prvInitialiseTaskLists+0x60>)
 800101c:	4413      	add	r3, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa9c 	bl	800055c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3301      	adds	r3, #1
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b04      	cmp	r3, #4
 800102e:	d9ef      	bls.n	8001010 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <prvInitialiseTaskLists+0x64>)
 8001032:	f7ff fa93 	bl	800055c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <prvInitialiseTaskLists+0x68>)
 8001038:	f7ff fa90 	bl	800055c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <prvInitialiseTaskLists+0x6c>)
 800103e:	f7ff fa8d 	bl	800055c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <prvInitialiseTaskLists+0x70>)
 8001044:	f7ff fa8a 	bl	800055c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <prvInitialiseTaskLists+0x74>)
 800104a:	f7ff fa87 	bl	800055c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <prvInitialiseTaskLists+0x78>)
 8001050:	4a05      	ldr	r2, [pc, #20]	; (8001068 <prvInitialiseTaskLists+0x64>)
 8001052:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <prvInitialiseTaskLists+0x7c>)
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <prvInitialiseTaskLists+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000003c 	.word	0x2000003c
 8001068:	200000a0 	.word	0x200000a0
 800106c:	200000b4 	.word	0x200000b4
 8001070:	200000d0 	.word	0x200000d0
 8001074:	200000e4 	.word	0x200000e4
 8001078:	200000fc 	.word	0x200000fc
 800107c:	200000c8 	.word	0x200000c8
 8001080:	200000cc 	.word	0x200000cc

08001084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800108a:	e019      	b.n	80010c0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800108c:	f000 fbf2 	bl	8001874 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <prvCheckTasksWaitingTermination+0x50>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3304      	adds	r3, #4
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fae7 	bl	8000670 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <prvCheckTasksWaitingTermination+0x54>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <prvCheckTasksWaitingTermination+0x54>)
 80010aa:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <prvCheckTasksWaitingTermination+0x58>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <prvCheckTasksWaitingTermination+0x58>)
 80010b4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80010b6:	f000 fc0d 	bl	80018d4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f810 	bl	80010e0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <prvCheckTasksWaitingTermination+0x58>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1e1      	bne.n	800108c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200000e4 	.word	0x200000e4
 80010d8:	20000110 	.word	0x20000110
 80010dc:	200000f8 	.word	0x200000f8

080010e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fdcd 	bl	8001c8c <vPortFree>
                vPortFree( pxTCB );
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 fdca 	bl	8001c8c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <prvResetNextTaskUnblockTime+0x30>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d104      	bne.n	8001118 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <prvResetNextTaskUnblockTime+0x34>)
 8001110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001114:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001116:	e005      	b.n	8001124 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <prvResetNextTaskUnblockTime+0x30>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <prvResetNextTaskUnblockTime+0x34>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200000c8 	.word	0x200000c8
 8001134:	20000130 	.word	0x20000130

08001138 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af02      	add	r7, sp, #8
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00a      	beq.n	8001162 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800114c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001150:	f383 8811 	msr	BASEPRI, r3
 8001154:	f3bf 8f6f 	isb	sy
 8001158:	f3bf 8f4f 	dsb	sy
 800115c:	613b      	str	r3, [r7, #16]
    }
 800115e:	bf00      	nop
 8001160:	e7fe      	b.n	8001160 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001162:	f000 fb87 	bl	8001874 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001166:	4b36      	ldr	r3, [pc, #216]	; (8001240 <xTaskGenericNotifyWait+0x108>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	3354      	adds	r3, #84	; 0x54
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d022      	beq.n	80011be <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001178:	4b31      	ldr	r3, [pc, #196]	; (8001240 <xTaskGenericNotifyWait+0x108>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	3214      	adds	r2, #20
 8001180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	43d2      	mvns	r2, r2
 8001188:	4011      	ands	r1, r2
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	3214      	adds	r2, #20
 800118e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <xTaskGenericNotifyWait+0x108>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	3354      	adds	r3, #84	; 0x54
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80011a6:	2101      	movs	r1, #1
 80011a8:	6a38      	ldr	r0, [r7, #32]
 80011aa:	f000 f93f 	bl	800142c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <xTaskGenericNotifyWait+0x10c>)
 80011b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	f3bf 8f4f 	dsb	sy
 80011ba:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80011be:	f000 fb89 	bl	80018d4 <vPortExitCritical>

        taskENTER_CRITICAL();
 80011c2:	f000 fb57 	bl	8001874 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	2040      	movs	r0, #64	; 0x40
 80011d4:	f002 fc34 	bl	8003a40 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <xTaskGenericNotifyWait+0x108>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	3214      	adds	r2, #20
 80011e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <xTaskGenericNotifyWait+0x108>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4413      	add	r3, r2
 80011f6:	3354      	adds	r3, #84	; 0x54
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d002      	beq.n	8001206 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e00e      	b.n	8001224 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <xTaskGenericNotifyWait+0x108>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	3214      	adds	r2, #20
 800120e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	43d2      	mvns	r2, r2
 8001216:	4011      	ands	r1, r2
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	3214      	adds	r2, #20
 800121c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001220:	2301      	movs	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <xTaskGenericNotifyWait+0x108>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	3354      	adds	r3, #84	; 0x54
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001232:	f000 fb4f 	bl	80018d4 <vPortExitCritical>

        return xReturn;
 8001236:	697b      	ldr	r3, [r7, #20]
    }
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000038 	.word	0x20000038
 8001244:	e000ed04 	.word	0xe000ed04

08001248 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	; 0x38
 800124c:	af02      	add	r7, sp, #8
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001256:	2301      	movs	r3, #1
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00a      	beq.n	8001276 <xTaskGenericNotify+0x2e>
        __asm volatile
 8001260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001264:	f383 8811 	msr	BASEPRI, r3
 8001268:	f3bf 8f6f 	isb	sy
 800126c:	f3bf 8f4f 	dsb	sy
 8001270:	623b      	str	r3, [r7, #32]
    }
 8001272:	bf00      	nop
 8001274:	e7fe      	b.n	8001274 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10a      	bne.n	8001292 <xTaskGenericNotify+0x4a>
        __asm volatile
 800127c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001280:	f383 8811 	msr	BASEPRI, r3
 8001284:	f3bf 8f6f 	isb	sy
 8001288:	f3bf 8f4f 	dsb	sy
 800128c:	61fb      	str	r3, [r7, #28]
    }
 800128e:	bf00      	nop
 8001290:	e7fe      	b.n	8001290 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8001296:	f000 faed 	bl	8001874 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800129a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80012a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	3214      	adds	r2, #20
 80012a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ac:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80012ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4413      	add	r3, r2
 80012b4:	3354      	adds	r3, #84	; 0x54
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80012bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	4413      	add	r3, r2
 80012c2:	3354      	adds	r3, #84	; 0x54
 80012c4:	2202      	movs	r2, #2
 80012c6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d83b      	bhi.n	8001346 <xTaskGenericNotify+0xfe>
 80012ce:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <xTaskGenericNotify+0x8c>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	08001365 	.word	0x08001365
 80012d8:	080012e9 	.word	0x080012e9
 80012dc:	08001305 	.word	0x08001305
 80012e0:	0800131d 	.word	0x0800131d
 80012e4:	0800132b 	.word	0x0800132b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	3214      	adds	r2, #20
 80012ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	ea42 0103 	orr.w	r1, r2, r3
 80012f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	3214      	adds	r2, #20
 80012fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001302:	e032      	b.n	800136a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	3214      	adds	r2, #20
 800130a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130e:	1c59      	adds	r1, r3, #1
 8001310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	3214      	adds	r2, #20
 8001316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800131a:	e026      	b.n	800136a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	3214      	adds	r2, #20
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001328:	e01f      	b.n	800136a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800132a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800132e:	2b02      	cmp	r3, #2
 8001330:	d006      	beq.n	8001340 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	3214      	adds	r2, #20
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800133e:	e014      	b.n	800136a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8001344:	e011      	b.n	800136a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <xTaskGenericNotify+0x1d0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00c      	beq.n	8001368 <xTaskGenericNotify+0x120>
        __asm volatile
 800134e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001352:	f383 8811 	msr	BASEPRI, r3
 8001356:	f3bf 8f6f 	isb	sy
 800135a:	f3bf 8f4f 	dsb	sy
 800135e:	61bb      	str	r3, [r7, #24]
    }
 8001360:	bf00      	nop
 8001362:	e7fe      	b.n	8001362 <xTaskGenericNotify+0x11a>
                    break;
 8001364:	bf00      	nop
 8001366:	e000      	b.n	800136a <xTaskGenericNotify+0x122>

                    break;
 8001368:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800136a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136c:	4618      	mov	r0, r3
 800136e:	f003 f87f 	bl	8004470 <SEGGER_SYSVIEW_ShrinkId>
 8001372:	4601      	mov	r1, r0
 8001374:	78fa      	ldrb	r2, [r7, #3]
 8001376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	4613      	mov	r3, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	203e      	movs	r0, #62	; 0x3e
 8001380:	f002 fb5e 	bl	8003a40 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001388:	2b01      	cmp	r3, #1
 800138a:	d13d      	bne.n	8001408 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800138c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138e:	3304      	adds	r3, #4
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f96d 	bl	8000670 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8001396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001398:	4618      	mov	r0, r3
 800139a:	f002 ffc7 	bl	800432c <SEGGER_SYSVIEW_OnTaskStartReady>
 800139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	2201      	movs	r2, #1
 80013a4:	409a      	lsls	r2, r3
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <xTaskGenericNotify+0x1d4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <xTaskGenericNotify+0x1d4>)
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4a18      	ldr	r2, [pc, #96]	; (8001420 <xTaskGenericNotify+0x1d8>)
 80013be:	441a      	add	r2, r3
 80013c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c2:	3304      	adds	r3, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4610      	mov	r0, r2
 80013c8:	f7ff f8f5 	bl	80005b6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80013cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00a      	beq.n	80013ea <xTaskGenericNotify+0x1a2>
        __asm volatile
 80013d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d8:	f383 8811 	msr	BASEPRI, r3
 80013dc:	f3bf 8f6f 	isb	sy
 80013e0:	f3bf 8f4f 	dsb	sy
 80013e4:	617b      	str	r3, [r7, #20]
    }
 80013e6:	bf00      	nop
 80013e8:	e7fe      	b.n	80013e8 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80013ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <xTaskGenericNotify+0x1dc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d907      	bls.n	8001408 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <xTaskGenericNotify+0x1e0>)
 80013fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	f3bf 8f4f 	dsb	sy
 8001404:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001408:	f000 fa64 	bl	80018d4 <vPortExitCritical>

        return xReturn;
 800140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800140e:	4618      	mov	r0, r3
 8001410:	3730      	adds	r7, #48	; 0x30
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000114 	.word	0x20000114
 800141c:	20000118 	.word	0x20000118
 8001420:	2000003c 	.word	0x2000003c
 8001424:	20000038 	.word	0x20000038
 8001428:	e000ed04 	.word	0xe000ed04

0800142c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001436:	4b32      	ldr	r3, [pc, #200]	; (8001500 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800143c:	4b31      	ldr	r3, [pc, #196]	; (8001504 <prvAddCurrentTaskToDelayedList+0xd8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3304      	adds	r3, #4
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f914 	bl	8000670 <uxListRemove>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10b      	bne.n	8001466 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	2201      	movs	r2, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <prvAddCurrentTaskToDelayedList+0xdc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4013      	ands	r3, r2
 8001462:	4a29      	ldr	r2, [pc, #164]	; (8001508 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001464:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800146c:	d110      	bne.n	8001490 <prvAddCurrentTaskToDelayedList+0x64>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00d      	beq.n	8001490 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	211b      	movs	r1, #27
 800147a:	4618      	mov	r0, r3
 800147c:	f002 ff98 	bl	80043b0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3304      	adds	r3, #4
 8001486:	4619      	mov	r1, r3
 8001488:	4820      	ldr	r0, [pc, #128]	; (800150c <prvAddCurrentTaskToDelayedList+0xe0>)
 800148a:	f7ff f894 	bl	80005b6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800148e:	e032      	b.n	80014f6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <prvAddCurrentTaskToDelayedList+0xd8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d20f      	bcs.n	80014c8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <prvAddCurrentTaskToDelayedList+0xd8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2104      	movs	r1, #4
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 ff7e 	bl	80043b0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <prvAddCurrentTaskToDelayedList+0xe4>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <prvAddCurrentTaskToDelayedList+0xd8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3304      	adds	r3, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	4610      	mov	r0, r2
 80014c2:	f7ff f89c 	bl	80005fe <vListInsert>
}
 80014c6:	e016      	b.n	80014f6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <prvAddCurrentTaskToDelayedList+0xd8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2104      	movs	r1, #4
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 ff6e 	bl	80043b0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <prvAddCurrentTaskToDelayedList+0xe8>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <prvAddCurrentTaskToDelayedList+0xd8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3304      	adds	r3, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4610      	mov	r0, r2
 80014e2:	f7ff f88c 	bl	80005fe <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <prvAddCurrentTaskToDelayedList+0xec>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d202      	bcs.n	80014f6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80014f0:	4a09      	ldr	r2, [pc, #36]	; (8001518 <prvAddCurrentTaskToDelayedList+0xec>)
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	6013      	str	r3, [r2, #0]
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000114 	.word	0x20000114
 8001504:	20000038 	.word	0x20000038
 8001508:	20000118 	.word	0x20000118
 800150c:	200000fc 	.word	0x200000fc
 8001510:	200000cc 	.word	0x200000cc
 8001514:	200000c8 	.word	0x200000c8
 8001518:	20000130 	.word	0x20000130

0800151c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3b04      	subs	r3, #4
 800152c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001534:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3b04      	subs	r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	f023 0201 	bic.w	r2, r3, #1
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3b04      	subs	r3, #4
 800154a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800154c:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <pxPortInitialiseStack+0x64>)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3b14      	subs	r3, #20
 8001556:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3b04      	subs	r3, #4
 8001562:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f06f 0202 	mvn.w	r2, #2
 800156a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3b20      	subs	r3, #32
 8001570:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	08001585 	.word	0x08001585

08001584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <prvTaskExitError+0x54>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001596:	d00a      	beq.n	80015ae <prvTaskExitError+0x2a>
        __asm volatile
 8001598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800159c:	f383 8811 	msr	BASEPRI, r3
 80015a0:	f3bf 8f6f 	isb	sy
 80015a4:	f3bf 8f4f 	dsb	sy
 80015a8:	60fb      	str	r3, [r7, #12]
    }
 80015aa:	bf00      	nop
 80015ac:	e7fe      	b.n	80015ac <prvTaskExitError+0x28>
        __asm volatile
 80015ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015b2:	f383 8811 	msr	BASEPRI, r3
 80015b6:	f3bf 8f6f 	isb	sy
 80015ba:	f3bf 8f4f 	dsb	sy
 80015be:	60bb      	str	r3, [r7, #8]
    }
 80015c0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80015c2:	bf00      	nop
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0fc      	beq.n	80015c4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	20000004 	.word	0x20000004
 80015dc:	00000000 	.word	0x00000000

080015e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <pxCurrentTCBConst2>)
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	6808      	ldr	r0, [r1, #0]
 80015e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ea:	f380 8809 	msr	PSP, r0
 80015ee:	f3bf 8f6f 	isb	sy
 80015f2:	f04f 0000 	mov.w	r0, #0
 80015f6:	f380 8811 	msr	BASEPRI, r0
 80015fa:	4770      	bx	lr
 80015fc:	f3af 8000 	nop.w

08001600 <pxCurrentTCBConst2>:
 8001600:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop

08001608 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001608:	4808      	ldr	r0, [pc, #32]	; (800162c <prvPortStartFirstTask+0x24>)
 800160a:	6800      	ldr	r0, [r0, #0]
 800160c:	6800      	ldr	r0, [r0, #0]
 800160e:	f380 8808 	msr	MSP, r0
 8001612:	f04f 0000 	mov.w	r0, #0
 8001616:	f380 8814 	msr	CONTROL, r0
 800161a:	b662      	cpsie	i
 800161c:	b661      	cpsie	f
 800161e:	f3bf 8f4f 	dsb	sy
 8001622:	f3bf 8f6f 	isb	sy
 8001626:	df00      	svc	0
 8001628:	bf00      	nop
 800162a:	0000      	.short	0x0000
 800162c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop

08001634 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800163a:	4b46      	ldr	r3, [pc, #280]	; (8001754 <xPortStartScheduler+0x120>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a46      	ldr	r2, [pc, #280]	; (8001758 <xPortStartScheduler+0x124>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d10a      	bne.n	800165a <xPortStartScheduler+0x26>
        __asm volatile
 8001644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001648:	f383 8811 	msr	BASEPRI, r3
 800164c:	f3bf 8f6f 	isb	sy
 8001650:	f3bf 8f4f 	dsb	sy
 8001654:	613b      	str	r3, [r7, #16]
    }
 8001656:	bf00      	nop
 8001658:	e7fe      	b.n	8001658 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800165a:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <xPortStartScheduler+0x120>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a3f      	ldr	r2, [pc, #252]	; (800175c <xPortStartScheduler+0x128>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d10a      	bne.n	800167a <xPortStartScheduler+0x46>
        __asm volatile
 8001664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001668:	f383 8811 	msr	BASEPRI, r3
 800166c:	f3bf 8f6f 	isb	sy
 8001670:	f3bf 8f4f 	dsb	sy
 8001674:	60fb      	str	r3, [r7, #12]
    }
 8001676:	bf00      	nop
 8001678:	e7fe      	b.n	8001678 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800167a:	4b39      	ldr	r3, [pc, #228]	; (8001760 <xPortStartScheduler+0x12c>)
 800167c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	22ff      	movs	r2, #255	; 0xff
 800168a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b31      	ldr	r3, [pc, #196]	; (8001764 <xPortStartScheduler+0x130>)
 80016a0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <xPortStartScheduler+0x134>)
 80016a4:	2207      	movs	r2, #7
 80016a6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80016a8:	e009      	b.n	80016be <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80016aa:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <xPortStartScheduler+0x134>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	4a2d      	ldr	r2, [pc, #180]	; (8001768 <xPortStartScheduler+0x134>)
 80016b2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c6:	2b80      	cmp	r3, #128	; 0x80
 80016c8:	d0ef      	beq.n	80016aa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <xPortStartScheduler+0x134>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f1c3 0307 	rsb	r3, r3, #7
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d00a      	beq.n	80016ec <xPortStartScheduler+0xb8>
        __asm volatile
 80016d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016da:	f383 8811 	msr	BASEPRI, r3
 80016de:	f3bf 8f6f 	isb	sy
 80016e2:	f3bf 8f4f 	dsb	sy
 80016e6:	60bb      	str	r3, [r7, #8]
    }
 80016e8:	bf00      	nop
 80016ea:	e7fe      	b.n	80016ea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <xPortStartScheduler+0x134>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <xPortStartScheduler+0x134>)
 80016f4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <xPortStartScheduler+0x134>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80016fe:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <xPortStartScheduler+0x134>)
 8001700:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <xPortStartScheduler+0x138>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a17      	ldr	r2, [pc, #92]	; (800176c <xPortStartScheduler+0x138>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <xPortStartScheduler+0x138>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a14      	ldr	r2, [pc, #80]	; (800176c <xPortStartScheduler+0x138>)
 800171c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001720:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001722:	f000 f963 	bl	80019ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <xPortStartScheduler+0x13c>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800172c:	f000 f982 	bl	8001a34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <xPortStartScheduler+0x140>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <xPortStartScheduler+0x140>)
 8001736:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800173a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800173c:	f7ff ff64 	bl	8001608 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001740:	f7ff fbde 	bl	8000f00 <vTaskSwitchContext>
    prvTaskExitError();
 8001744:	f7ff ff1e 	bl	8001584 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00
 8001758:	410fc271 	.word	0x410fc271
 800175c:	410fc270 	.word	0x410fc270
 8001760:	e000e400 	.word	0xe000e400
 8001764:	2000013c 	.word	0x2000013c
 8001768:	20000140 	.word	0x20000140
 800176c:	e000ed20 	.word	0xe000ed20
 8001770:	20000004 	.word	0x20000004
 8001774:	e000ef34 	.word	0xe000ef34

08001778 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800177e:	4b37      	ldr	r3, [pc, #220]	; (800185c <vInitPrioGroupValue+0xe4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a37      	ldr	r2, [pc, #220]	; (8001860 <vInitPrioGroupValue+0xe8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d10a      	bne.n	800179e <vInitPrioGroupValue+0x26>
        __asm volatile
 8001788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800178c:	f383 8811 	msr	BASEPRI, r3
 8001790:	f3bf 8f6f 	isb	sy
 8001794:	f3bf 8f4f 	dsb	sy
 8001798:	613b      	str	r3, [r7, #16]
    }
 800179a:	bf00      	nop
 800179c:	e7fe      	b.n	800179c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800179e:	4b2f      	ldr	r3, [pc, #188]	; (800185c <vInitPrioGroupValue+0xe4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a30      	ldr	r2, [pc, #192]	; (8001864 <vInitPrioGroupValue+0xec>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d10a      	bne.n	80017be <vInitPrioGroupValue+0x46>
        __asm volatile
 80017a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ac:	f383 8811 	msr	BASEPRI, r3
 80017b0:	f3bf 8f6f 	isb	sy
 80017b4:	f3bf 8f4f 	dsb	sy
 80017b8:	60fb      	str	r3, [r7, #12]
    }
 80017ba:	bf00      	nop
 80017bc:	e7fe      	b.n	80017bc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80017be:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <vInitPrioGroupValue+0xf0>)
 80017c0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	22ff      	movs	r2, #255	; 0xff
 80017ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b22      	ldr	r3, [pc, #136]	; (800186c <vInitPrioGroupValue+0xf4>)
 80017e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80017e6:	4b22      	ldr	r3, [pc, #136]	; (8001870 <vInitPrioGroupValue+0xf8>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80017ec:	e009      	b.n	8001802 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80017ee:	4b20      	ldr	r3, [pc, #128]	; (8001870 <vInitPrioGroupValue+0xf8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <vInitPrioGroupValue+0xf8>)
 80017f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180a:	2b80      	cmp	r3, #128	; 0x80
 800180c:	d0ef      	beq.n	80017ee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <vInitPrioGroupValue+0xf8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	d00a      	beq.n	8001830 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800181a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181e:	f383 8811 	msr	BASEPRI, r3
 8001822:	f3bf 8f6f 	isb	sy
 8001826:	f3bf 8f4f 	dsb	sy
 800182a:	60bb      	str	r3, [r7, #8]
    }
 800182c:	bf00      	nop
 800182e:	e7fe      	b.n	800182e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <vInitPrioGroupValue+0xf8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <vInitPrioGroupValue+0xf8>)
 8001838:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <vInitPrioGroupValue+0xf8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001842:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <vInitPrioGroupValue+0xf8>)
 8001844:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800184e:	bf00      	nop
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00
 8001860:	410fc271 	.word	0x410fc271
 8001864:	410fc270 	.word	0x410fc270
 8001868:	e000e400 	.word	0xe000e400
 800186c:	2000013c 	.word	0x2000013c
 8001870:	20000140 	.word	0x20000140

08001874 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
        __asm volatile
 800187a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187e:	f383 8811 	msr	BASEPRI, r3
 8001882:	f3bf 8f6f 	isb	sy
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	607b      	str	r3, [r7, #4]
    }
 800188c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <vPortEnterCritical+0x58>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <vPortEnterCritical+0x58>)
 8001896:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <vPortEnterCritical+0x58>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d10f      	bne.n	80018c0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <vPortEnterCritical+0x5c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00a      	beq.n	80018c0 <vPortEnterCritical+0x4c>
        __asm volatile
 80018aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ae:	f383 8811 	msr	BASEPRI, r3
 80018b2:	f3bf 8f6f 	isb	sy
 80018b6:	f3bf 8f4f 	dsb	sy
 80018ba:	603b      	str	r3, [r7, #0]
    }
 80018bc:	bf00      	nop
 80018be:	e7fe      	b.n	80018be <vPortEnterCritical+0x4a>
    }
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	20000004 	.word	0x20000004
 80018d0:	e000ed04 	.word	0xe000ed04

080018d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <vPortExitCritical+0x50>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10a      	bne.n	80018f8 <vPortExitCritical+0x24>
        __asm volatile
 80018e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e6:	f383 8811 	msr	BASEPRI, r3
 80018ea:	f3bf 8f6f 	isb	sy
 80018ee:	f3bf 8f4f 	dsb	sy
 80018f2:	607b      	str	r3, [r7, #4]
    }
 80018f4:	bf00      	nop
 80018f6:	e7fe      	b.n	80018f6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <vPortExitCritical+0x50>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	4a09      	ldr	r2, [pc, #36]	; (8001924 <vPortExitCritical+0x50>)
 8001900:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <vPortExitCritical+0x50>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <vPortExitCritical+0x42>
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001914:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000004 	.word	0x20000004
	...

08001930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001930:	f3ef 8009 	mrs	r0, PSP
 8001934:	f3bf 8f6f 	isb	sy
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <pxCurrentTCBConst>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	f01e 0f10 	tst.w	lr, #16
 8001940:	bf08      	it	eq
 8001942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800194a:	6010      	str	r0, [r2, #0]
 800194c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001954:	f380 8811 	msr	BASEPRI, r0
 8001958:	f3bf 8f4f 	dsb	sy
 800195c:	f3bf 8f6f 	isb	sy
 8001960:	f7ff face 	bl	8000f00 <vTaskSwitchContext>
 8001964:	f04f 0000 	mov.w	r0, #0
 8001968:	f380 8811 	msr	BASEPRI, r0
 800196c:	bc09      	pop	{r0, r3}
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	6808      	ldr	r0, [r1, #0]
 8001972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001976:	f01e 0f10 	tst.w	lr, #16
 800197a:	bf08      	it	eq
 800197c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001980:	f380 8809 	msr	PSP, r0
 8001984:	f3bf 8f6f 	isb	sy
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	f3af 8000 	nop.w

08001990 <pxCurrentTCBConst>:
 8001990:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop

08001998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
        __asm volatile
 800199e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a2:	f383 8811 	msr	BASEPRI, r3
 80019a6:	f3bf 8f6f 	isb	sy
 80019aa:	f3bf 8f4f 	dsb	sy
 80019ae:	607b      	str	r3, [r7, #4]
    }
 80019b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80019b2:	f002 fba1 	bl	80040f8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80019b6:	f7ff f9e7 	bl	8000d88 <xTaskIncrementTick>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80019c0:	f002 fbf8 	bl	80041b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <SysTick_Handler+0x50>)
 80019c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e001      	b.n	80019d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80019ce:	f002 fbd5 	bl	800417c <SEGGER_SYSVIEW_RecordExitISR>
 80019d2:	2300      	movs	r3, #0
 80019d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f383 8811 	msr	BASEPRI, r3
    }
 80019dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	e000ed04 	.word	0xe000ed04

080019ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <vPortSetupTimerInterrupt+0x34>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <vPortSetupTimerInterrupt+0x38>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <vPortSetupTimerInterrupt+0x3c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <vPortSetupTimerInterrupt+0x40>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <vPortSetupTimerInterrupt+0x44>)
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <vPortSetupTimerInterrupt+0x34>)
 8001a10:	2207      	movs	r2, #7
 8001a12:	601a      	str	r2, [r3, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e010 	.word	0xe000e010
 8001a24:	e000e018 	.word	0xe000e018
 8001a28:	20000010 	.word	0x20000010
 8001a2c:	10624dd3 	.word	0x10624dd3
 8001a30:	e000e014 	.word	0xe000e014

08001a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001a44 <vPortEnableVFP+0x10>
 8001a38:	6801      	ldr	r1, [r0, #0]
 8001a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001a3e:	6001      	str	r1, [r0, #0]
 8001a40:	4770      	bx	lr
 8001a42:	0000      	.short	0x0000
 8001a44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop

08001a4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001a52:	f3ef 8305 	mrs	r3, IPSR
 8001a56:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b0f      	cmp	r3, #15
 8001a5c:	d914      	bls.n	8001a88 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001a5e:	4a17      	ldr	r2, [pc, #92]	; (8001abc <vPortValidateInterruptPriority+0x70>)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <vPortValidateInterruptPriority+0x74>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	7afa      	ldrb	r2, [r7, #11]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d20a      	bcs.n	8001a88 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8001a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a76:	f383 8811 	msr	BASEPRI, r3
 8001a7a:	f3bf 8f6f 	isb	sy
 8001a7e:	f3bf 8f4f 	dsb	sy
 8001a82:	607b      	str	r3, [r7, #4]
    }
 8001a84:	bf00      	nop
 8001a86:	e7fe      	b.n	8001a86 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <vPortValidateInterruptPriority+0x78>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <vPortValidateInterruptPriority+0x7c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d90a      	bls.n	8001aae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9c:	f383 8811 	msr	BASEPRI, r3
 8001aa0:	f3bf 8f6f 	isb	sy
 8001aa4:	f3bf 8f4f 	dsb	sy
 8001aa8:	603b      	str	r3, [r7, #0]
    }
 8001aaa:	bf00      	nop
 8001aac:	e7fe      	b.n	8001aac <vPortValidateInterruptPriority+0x60>
    }
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e3f0 	.word	0xe000e3f0
 8001ac0:	2000013c 	.word	0x2000013c
 8001ac4:	e000ed0c 	.word	0xe000ed0c
 8001ac8:	20000140 	.word	0x20000140

08001acc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001ad8:	f7ff f896 	bl	8000c08 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001adc:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <pvPortMalloc+0x1a8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001ae4:	f000 f934 	bl	8001d50 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001ae8:	4b63      	ldr	r3, [pc, #396]	; (8001c78 <pvPortMalloc+0x1ac>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f040 80a7 	bne.w	8001c44 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d02d      	beq.n	8001b58 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001afc:	2208      	movs	r2, #8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d227      	bcs.n	8001b58 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8001b08:	2208      	movs	r2, #8
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d021      	beq.n	8001b5e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f023 0307 	bic.w	r3, r3, #7
 8001b20:	3308      	adds	r3, #8
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d214      	bcs.n	8001b52 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f023 0307 	bic.w	r3, r3, #7
 8001b2e:	3308      	adds	r3, #8
 8001b30:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d010      	beq.n	8001b5e <pvPortMalloc+0x92>
        __asm volatile
 8001b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b40:	f383 8811 	msr	BASEPRI, r3
 8001b44:	f3bf 8f6f 	isb	sy
 8001b48:	f3bf 8f4f 	dsb	sy
 8001b4c:	617b      	str	r3, [r7, #20]
    }
 8001b4e:	bf00      	nop
 8001b50:	e7fe      	b.n	8001b50 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b56:	e002      	b.n	8001b5e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	e000      	b.n	8001b60 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b5e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d06e      	beq.n	8001c44 <pvPortMalloc+0x178>
 8001b66:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <pvPortMalloc+0x1b0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d869      	bhi.n	8001c44 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001b70:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <pvPortMalloc+0x1b4>)
 8001b72:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001b74:	4b42      	ldr	r3, [pc, #264]	; (8001c80 <pvPortMalloc+0x1b4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b7a:	e004      	b.n	8001b86 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d903      	bls.n	8001b98 <pvPortMalloc+0xcc>
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f1      	bne.n	8001b7c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <pvPortMalloc+0x1a8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d050      	beq.n	8001c44 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	4413      	add	r3, r2
 8001baa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	1ad2      	subs	r2, r2, r3
 8001bbc:	2308      	movs	r3, #8
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d91f      	bls.n	8001c04 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00a      	beq.n	8001bec <pvPortMalloc+0x120>
        __asm volatile
 8001bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bda:	f383 8811 	msr	BASEPRI, r3
 8001bde:	f3bf 8f6f 	isb	sy
 8001be2:	f3bf 8f4f 	dsb	sy
 8001be6:	613b      	str	r3, [r7, #16]
    }
 8001be8:	bf00      	nop
 8001bea:	e7fe      	b.n	8001bea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	1ad2      	subs	r2, r2, r3
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001bfe:	69b8      	ldr	r0, [r7, #24]
 8001c00:	f000 f908 	bl	8001e14 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <pvPortMalloc+0x1b0>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <pvPortMalloc+0x1b0>)
 8001c10:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <pvPortMalloc+0x1b0>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <pvPortMalloc+0x1b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d203      	bcs.n	8001c26 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <pvPortMalloc+0x1b0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <pvPortMalloc+0x1b8>)
 8001c24:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <pvPortMalloc+0x1ac>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <pvPortMalloc+0x1bc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <pvPortMalloc+0x1bc>)
 8001c42:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001c44:	f7fe ffee 	bl	8000c24 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <pvPortMalloc+0x19c>
        __asm volatile
 8001c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c56:	f383 8811 	msr	BASEPRI, r3
 8001c5a:	f3bf 8f6f 	isb	sy
 8001c5e:	f3bf 8f4f 	dsb	sy
 8001c62:	60fb      	str	r3, [r7, #12]
    }
 8001c64:	bf00      	nop
 8001c66:	e7fe      	b.n	8001c66 <pvPortMalloc+0x19a>
    return pvReturn;
 8001c68:	69fb      	ldr	r3, [r7, #28]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20012d4c 	.word	0x20012d4c
 8001c78:	20012d60 	.word	0x20012d60
 8001c7c:	20012d50 	.word	0x20012d50
 8001c80:	20012d44 	.word	0x20012d44
 8001c84:	20012d54 	.word	0x20012d54
 8001c88:	20012d58 	.word	0x20012d58

08001c8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d04d      	beq.n	8001d3a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	425b      	negs	r3, r3
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <vPortFree+0xb8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10a      	bne.n	8001cd0 <vPortFree+0x44>
        __asm volatile
 8001cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cbe:	f383 8811 	msr	BASEPRI, r3
 8001cc2:	f3bf 8f6f 	isb	sy
 8001cc6:	f3bf 8f4f 	dsb	sy
 8001cca:	60fb      	str	r3, [r7, #12]
    }
 8001ccc:	bf00      	nop
 8001cce:	e7fe      	b.n	8001cce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00a      	beq.n	8001cee <vPortFree+0x62>
        __asm volatile
 8001cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cdc:	f383 8811 	msr	BASEPRI, r3
 8001ce0:	f3bf 8f6f 	isb	sy
 8001ce4:	f3bf 8f4f 	dsb	sy
 8001ce8:	60bb      	str	r3, [r7, #8]
    }
 8001cea:	bf00      	nop
 8001cec:	e7fe      	b.n	8001cec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <vPortFree+0xb8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01e      	beq.n	8001d3a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d11a      	bne.n	8001d3a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <vPortFree+0xb8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	401a      	ands	r2, r3
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001d14:	f7fe ff78 	bl	8000c08 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <vPortFree+0xbc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <vPortFree+0xbc>)
 8001d24:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d26:	6938      	ldr	r0, [r7, #16]
 8001d28:	f000 f874 	bl	8001e14 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <vPortFree+0xc0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <vPortFree+0xc0>)
 8001d34:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001d36:	f7fe ff75 	bl	8000c24 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20012d60 	.word	0x20012d60
 8001d48:	20012d50 	.word	0x20012d50
 8001d4c:	20012d5c 	.word	0x20012d5c

08001d50 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001d56:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001d5a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <prvHeapInit+0xac>)
 8001d5e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00c      	beq.n	8001d84 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3307      	adds	r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f023 0307 	bic.w	r3, r3, #7
 8001d76:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	4a1f      	ldr	r2, [pc, #124]	; (8001dfc <prvHeapInit+0xac>)
 8001d80:	4413      	add	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <prvHeapInit+0xb0>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <prvHeapInit+0xb0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	4413      	add	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f023 0307 	bic.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <prvHeapInit+0xb4>)
 8001db0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <prvHeapInit+0xb4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2200      	movs	r2, #0
 8001db8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <prvHeapInit+0xb4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	1ad2      	subs	r2, r2, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <prvHeapInit+0xb4>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <prvHeapInit+0xb8>)
 8001dde:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <prvHeapInit+0xbc>)
 8001de6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <prvHeapInit+0xc0>)
 8001dea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001dee:	601a      	str	r2, [r3, #0]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	20000144 	.word	0x20000144
 8001e00:	20012d44 	.word	0x20012d44
 8001e04:	20012d4c 	.word	0x20012d4c
 8001e08:	20012d54 	.word	0x20012d54
 8001e0c:	20012d50 	.word	0x20012d50
 8001e10:	20012d60 	.word	0x20012d60

08001e14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <prvInsertBlockIntoFreeList+0xac>)
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e002      	b.n	8001e28 <prvInsertBlockIntoFreeList+0x14>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d8f7      	bhi.n	8001e22 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d108      	bne.n	8001e56 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	441a      	add	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	441a      	add	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d118      	bne.n	8001e9c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <prvInsertBlockIntoFreeList+0xb0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d00d      	beq.n	8001e92 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	441a      	add	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e008      	b.n	8001ea4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <prvInsertBlockIntoFreeList+0xb0>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e003      	b.n	8001ea4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d002      	beq.n	8001eb2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20012d44 	.word	0x20012d44
 8001ec4:	20012d4c 	.word	0x20012d4c

08001ec8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001ecc:	4803      	ldr	r0, [pc, #12]	; (8001edc <_cbSendSystemDesc+0x14>)
 8001ece:	f002 f8bd 	bl	800404c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001ed2:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <_cbSendSystemDesc+0x18>)
 8001ed4:	f002 f8ba 	bl	800404c <SEGGER_SYSVIEW_SendSysDesc>
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	08006530 	.word	0x08006530
 8001ee0:	08006574 	.word	0x08006574

08001ee4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <SEGGER_SYSVIEW_Conf+0x20>)
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SEGGER_SYSVIEW_Conf+0x20>)
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SEGGER_SYSVIEW_Conf+0x24>)
 8001ef2:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <SEGGER_SYSVIEW_Conf+0x28>)
 8001ef4:	f001 fc9c 	bl	8003830 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001ef8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001efc:	f001 fcdc 	bl	80038b8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000010 	.word	0x20000010
 8001f08:	08001ec9 	.word	0x08001ec9
 8001f0c:	080066c0 	.word	0x080066c0

08001f10 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	e033      	b.n	8001f84 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001f1c:	491e      	ldr	r1, [pc, #120]	; (8001f98 <_cbSendTaskList+0x88>)
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	491a      	ldr	r1, [pc, #104]	; (8001f98 <_cbSendTaskList+0x88>)
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	6819      	ldr	r1, [r3, #0]
 8001f3e:	4c16      	ldr	r4, [pc, #88]	; (8001f98 <_cbSendTaskList+0x88>)
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4423      	add	r3, r4
 8001f4c:	3308      	adds	r3, #8
 8001f4e:	681c      	ldr	r4, [r3, #0]
 8001f50:	4d11      	ldr	r5, [pc, #68]	; (8001f98 <_cbSendTaskList+0x88>)
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	442b      	add	r3, r5
 8001f5e:	330c      	adds	r3, #12
 8001f60:	681d      	ldr	r5, [r3, #0]
 8001f62:	4e0d      	ldr	r6, [pc, #52]	; (8001f98 <_cbSendTaskList+0x88>)
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4433      	add	r3, r6
 8001f70:	3310      	adds	r3, #16
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	462b      	mov	r3, r5
 8001f78:	4622      	mov	r2, r4
 8001f7a:	f000 f971 	bl	8002260 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3301      	adds	r3, #1
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <_cbSendTaskList+0x8c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d3c6      	bcc.n	8001f1c <_cbSendTaskList+0xc>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f98:	20012d64 	.word	0x20012d64
 8001f9c:	20012e04 	.word	0x20012e04

08001fa0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001fa6:	f7fe fedd 	bl	8000d64 <xTaskGetTickCountFromISR>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	f04f 0400 	mov.w	r4, #0
 8001fc2:	f04f 0500 	mov.w	r5, #0
 8001fc6:	015d      	lsls	r5, r3, #5
 8001fc8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001fcc:	0154      	lsls	r4, r2, #5
 8001fce:	4622      	mov	r2, r4
 8001fd0:	462b      	mov	r3, r5
 8001fd2:	1a12      	subs	r2, r2, r0
 8001fd4:	eb63 0301 	sbc.w	r3, r3, r1
 8001fd8:	f04f 0400 	mov.w	r4, #0
 8001fdc:	f04f 0500 	mov.w	r5, #0
 8001fe0:	009d      	lsls	r5, r3, #2
 8001fe2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8001fe6:	0094      	lsls	r4, r2, #2
 8001fe8:	4622      	mov	r2, r4
 8001fea:	462b      	mov	r3, r5
 8001fec:	1812      	adds	r2, r2, r0
 8001fee:	eb41 0303 	adc.w	r3, r1, r3
 8001ff2:	f04f 0000 	mov.w	r0, #0
 8001ff6:	f04f 0100 	mov.w	r1, #0
 8001ffa:	00d9      	lsls	r1, r3, #3
 8001ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002000:	00d0      	lsls	r0, r2, #3
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800200a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bdb0      	pop	{r4, r5, r7, pc}

08002018 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af02      	add	r7, sp, #8
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002026:	2205      	movs	r2, #5
 8002028:	492b      	ldr	r1, [pc, #172]	; (80020d8 <SYSVIEW_AddTask+0xc0>)
 800202a:	68b8      	ldr	r0, [r7, #8]
 800202c:	f004 fa4c 	bl	80064c8 <memcmp>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d04b      	beq.n	80020ce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002036:	4b29      	ldr	r3, [pc, #164]	; (80020dc <SYSVIEW_AddTask+0xc4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b07      	cmp	r3, #7
 800203c:	d903      	bls.n	8002046 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800203e:	4828      	ldr	r0, [pc, #160]	; (80020e0 <SYSVIEW_AddTask+0xc8>)
 8002040:	f002 fb16 	bl	8004670 <SEGGER_SYSVIEW_Warn>
    return;
 8002044:	e044      	b.n	80020d0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002046:	4b25      	ldr	r3, [pc, #148]	; (80020dc <SYSVIEW_AddTask+0xc4>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4926      	ldr	r1, [pc, #152]	; (80020e4 <SYSVIEW_AddTask+0xcc>)
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <SYSVIEW_AddTask+0xc4>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4921      	ldr	r1, [pc, #132]	; (80020e4 <SYSVIEW_AddTask+0xcc>)
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	3304      	adds	r3, #4
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <SYSVIEW_AddTask+0xc4>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	491b      	ldr	r1, [pc, #108]	; (80020e4 <SYSVIEW_AddTask+0xcc>)
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3308      	adds	r3, #8
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <SYSVIEW_AddTask+0xc4>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4916      	ldr	r1, [pc, #88]	; (80020e4 <SYSVIEW_AddTask+0xcc>)
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	330c      	adds	r3, #12
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <SYSVIEW_AddTask+0xc4>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4910      	ldr	r1, [pc, #64]	; (80020e4 <SYSVIEW_AddTask+0xcc>)
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3310      	adds	r3, #16
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <SYSVIEW_AddTask+0xc4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	4a08      	ldr	r2, [pc, #32]	; (80020dc <SYSVIEW_AddTask+0xc4>)
 80020ba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f8ca 	bl	8002260 <SYSVIEW_SendTaskInfo>
 80020cc:	e000      	b.n	80020d0 <SYSVIEW_AddTask+0xb8>
    return;
 80020ce:	bf00      	nop

}
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	08006584 	.word	0x08006584
 80020dc:	20012e04 	.word	0x20012e04
 80020e0:	0800658c 	.word	0x0800658c
 80020e4:	20012d64 	.word	0x20012d64

080020e8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80020f0:	4b59      	ldr	r3, [pc, #356]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80ab 	beq.w	8002250 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e00d      	b.n	800211c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8002100:	4956      	ldr	r1, [pc, #344]	; (800225c <SYSVIEW_DeleteTask+0x174>)
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	d008      	beq.n	8002128 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3301      	adds	r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	4b4e      	ldr	r3, [pc, #312]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	429a      	cmp	r2, r3
 8002124:	d3ec      	bcc.n	8002100 <SYSVIEW_DeleteTask+0x18>
 8002126:	e000      	b.n	800212a <SYSVIEW_DeleteTask+0x42>
      break;
 8002128:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800212a:	4b4b      	ldr	r3, [pc, #300]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3b01      	subs	r3, #1
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	429a      	cmp	r2, r3
 8002134:	d111      	bne.n	800215a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4a46      	ldr	r2, [pc, #280]	; (800225c <SYSVIEW_DeleteTask+0x174>)
 8002142:	4413      	add	r3, r2
 8002144:	2214      	movs	r2, #20
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f004 f9d9 	bl	8006500 <memset>
    _NumTasks--;
 800214e:	4b42      	ldr	r3, [pc, #264]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3b01      	subs	r3, #1
 8002154:	4a40      	ldr	r2, [pc, #256]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	e07b      	b.n	8002252 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800215a:	4b3f      	ldr	r3, [pc, #252]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	429a      	cmp	r2, r3
 8002162:	d276      	bcs.n	8002252 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8002164:	4b3c      	ldr	r3, [pc, #240]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	1e5a      	subs	r2, r3, #1
 800216a:	493c      	ldr	r1, [pc, #240]	; (800225c <SYSVIEW_DeleteTask+0x174>)
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	4838      	ldr	r0, [pc, #224]	; (800225c <SYSVIEW_DeleteTask+0x174>)
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4403      	add	r3, r0
 8002186:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8002188:	4b33      	ldr	r3, [pc, #204]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	1e5a      	subs	r2, r3, #1
 800218e:	4933      	ldr	r1, [pc, #204]	; (800225c <SYSVIEW_DeleteTask+0x174>)
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3304      	adds	r3, #4
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	482f      	ldr	r0, [pc, #188]	; (800225c <SYSVIEW_DeleteTask+0x174>)
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4403      	add	r3, r0
 80021ac:	3304      	adds	r3, #4
 80021ae:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80021b0:	4b29      	ldr	r3, [pc, #164]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	1e5a      	subs	r2, r3, #1
 80021b6:	4929      	ldr	r1, [pc, #164]	; (800225c <SYSVIEW_DeleteTask+0x174>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3308      	adds	r3, #8
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	4825      	ldr	r0, [pc, #148]	; (800225c <SYSVIEW_DeleteTask+0x174>)
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4403      	add	r3, r0
 80021d4:	3308      	adds	r3, #8
 80021d6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	1e5a      	subs	r2, r3, #1
 80021de:	491f      	ldr	r1, [pc, #124]	; (800225c <SYSVIEW_DeleteTask+0x174>)
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	330c      	adds	r3, #12
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	481b      	ldr	r0, [pc, #108]	; (800225c <SYSVIEW_DeleteTask+0x174>)
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4403      	add	r3, r0
 80021fc:	330c      	adds	r3, #12
 80021fe:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8002200:	4b15      	ldr	r3, [pc, #84]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	1e5a      	subs	r2, r3, #1
 8002206:	4915      	ldr	r1, [pc, #84]	; (800225c <SYSVIEW_DeleteTask+0x174>)
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	3310      	adds	r3, #16
 8002214:	6819      	ldr	r1, [r3, #0]
 8002216:	4811      	ldr	r0, [pc, #68]	; (800225c <SYSVIEW_DeleteTask+0x174>)
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4403      	add	r3, r0
 8002224:	3310      	adds	r3, #16
 8002226:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	1e5a      	subs	r2, r3, #1
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4a09      	ldr	r2, [pc, #36]	; (800225c <SYSVIEW_DeleteTask+0x174>)
 8002238:	4413      	add	r3, r2
 800223a:	2214      	movs	r2, #20
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f004 f95e 	bl	8006500 <memset>
    _NumTasks--;
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3b01      	subs	r3, #1
 800224a:	4a03      	ldr	r2, [pc, #12]	; (8002258 <SYSVIEW_DeleteTask+0x170>)
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e000      	b.n	8002252 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8002250:	bf00      	nop
  }
}
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20012e04 	.word	0x20012e04
 800225c:	20012d64 	.word	0x20012d64

08002260 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	2214      	movs	r2, #20
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f004 f942 	bl	8006500 <memset>
  TaskInfo.TaskID     = TaskID;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4618      	mov	r0, r3
 8002296:	f001 fde1 	bl	8003e5c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800229a:	bf00      	nop
 800229c:	3728      	adds	r7, #40	; 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4907      	ldr	r1, [pc, #28]	; (80022dc <__NVIC_EnableIRQ+0x38>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2001      	movs	r0, #1
 80022c6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800233a:	f002 f9f5 	bl	8004728 <SEGGER_SYSVIEW_IsStarted>
 800233e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8002346:	f001 fc0d 	bl	8003b64 <SEGGER_SYSVIEW_Start>
  }
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <_cbOnUARTRx+0x3c>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d806      	bhi.n	8002374 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <_cbOnUARTRx+0x3c>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <_cbOnUARTRx+0x3c>)
 8002370:	701a      	strb	r2, [r3, #0]
    goto Done;
 8002372:	e009      	b.n	8002388 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8002374:	f7ff ffde 	bl	8002334 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <_cbOnUARTRx+0x3c>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4618      	mov	r0, r3
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	2201      	movs	r2, #1
 8002382:	4619      	mov	r1, r3
 8002384:	f000 fb9a 	bl	8002abc <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8002388:	bf00      	nop
}
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000008 	.word	0x20000008

08002394 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <_cbOnUARTTx+0x5c>)
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d80f      	bhi.n	80023c4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <_cbOnUARTTx+0x5c>)
 80023a6:	785b      	ldrb	r3, [r3, #1]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <_cbOnUARTTx+0x60>)
 80023ac:	5c9a      	ldrb	r2, [r3, r2]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <_cbOnUARTTx+0x5c>)
 80023b4:	785b      	ldrb	r3, [r3, #1]
 80023b6:	3301      	adds	r3, #1
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <_cbOnUARTTx+0x5c>)
 80023bc:	705a      	strb	r2, [r3, #1]
    r = 1;
 80023be:	2301      	movs	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
    goto Done;
 80023c2:	e00f      	b.n	80023e4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <_cbOnUARTTx+0x5c>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fa19 	bl	8002804 <SEGGER_RTT_ReadUpBufferNoLock>
 80023d2:	4603      	mov	r3, r0
 80023d4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	da02      	bge.n	80023e2 <_cbOnUARTTx+0x4e>
    r = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e000      	b.n	80023e4 <_cbOnUARTTx+0x50>
  }
Done:
 80023e2:	bf00      	nop
  return r;
 80023e4:	68fb      	ldr	r3, [r7, #12]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000008 	.word	0x20000008
 80023f4:	080066c8 	.word	0x080066c8

080023f8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <SEGGER_UART_init+0x1c>)
 8002402:	4905      	ldr	r1, [pc, #20]	; (8002418 <SEGGER_UART_init+0x20>)
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f863 	bl	80024d0 <HIF_UART_Init>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	08002355 	.word	0x08002355
 8002418:	08002395 	.word	0x08002395

0800241c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002422:	4b1e      	ldr	r3, [pc, #120]	; (800249c <USART2_IRQHandler+0x80>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d011      	beq.n	8002456 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <USART2_IRQHandler+0x84>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f003 030b 	and.w	r3, r3, #11
 8002440:	2b00      	cmp	r3, #0
 8002442:	d108      	bne.n	8002456 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <USART2_IRQHandler+0x88>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d004      	beq.n	8002456 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <USART2_IRQHandler+0x88>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	79fa      	ldrb	r2, [r7, #7]
 8002452:	4610      	mov	r0, r2
 8002454:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01a      	beq.n	8002496 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <USART2_IRQHandler+0x8c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d015      	beq.n	8002494 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <USART2_IRQHandler+0x8c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	1dfa      	adds	r2, r7, #7
 800246e:	4610      	mov	r0, r2
 8002470:	4798      	blx	r3
 8002472:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <USART2_IRQHandler+0x90>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <USART2_IRQHandler+0x90>)
 8002480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e006      	b.n	8002496 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <USART2_IRQHandler+0x80>)
 800248a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800248c:	79fa      	ldrb	r2, [r7, #7]
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <USART2_IRQHandler+0x84>)
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e000      	b.n	8002496 <USART2_IRQHandler+0x7a>
      return;
 8002494:	bf00      	nop
    }
  }
}
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40004400 	.word	0x40004400
 80024a0:	40004404 	.word	0x40004404
 80024a4:	20012e08 	.word	0x20012e08
 80024a8:	20012e0c 	.word	0x20012e0c
 80024ac:	4000440c 	.word	0x4000440c

080024b0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80024ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	4000440c 	.word	0x4000440c

080024d0 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <HIF_UART_Init+0xc8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2d      	ldr	r2, [pc, #180]	; (8002598 <HIF_UART_Init+0xc8>)
 80024e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e6:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80024e8:	4b2c      	ldr	r3, [pc, #176]	; (800259c <HIF_UART_Init+0xcc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2b      	ldr	r2, [pc, #172]	; (800259c <HIF_UART_Init+0xcc>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80024f4:	4b2a      	ldr	r3, [pc, #168]	; (80025a0 <HIF_UART_Init+0xd0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002500:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8002508:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800250a:	4a25      	ldr	r2, [pc, #148]	; (80025a0 <HIF_UART_Init+0xd0>)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HIF_UART_Init+0xd4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800251c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002524:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8002526:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <HIF_UART_Init+0xd4>)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800252c:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <HIF_UART_Init+0xd8>)
 800252e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8002532:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HIF_UART_Init+0xdc>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HIF_UART_Init+0xe0>)
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8002546:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <HIF_UART_Init+0xe4>)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fbb2 f3f3 	udiv	r3, r2, r3
 800254e:	3301      	adds	r3, #1
 8002550:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255e:	d302      	bcc.n	8002566 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8002560:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002564:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HIF_UART_Init+0xe8>)
 8002572:	b29b      	uxth	r3, r3
 8002574:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8002576:	4a11      	ldr	r2, [pc, #68]	; (80025bc <HIF_UART_Init+0xec>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800257c:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <HIF_UART_Init+0xf0>)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8002582:	2106      	movs	r1, #6
 8002584:	2026      	movs	r0, #38	; 0x26
 8002586:	f7ff feab 	bl	80022e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800258a:	2026      	movs	r0, #38	; 0x26
 800258c:	f7ff fe8a 	bl	80022a4 <__NVIC_EnableIRQ>
}
 8002590:	bf00      	nop
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023840 	.word	0x40023840
 800259c:	40023830 	.word	0x40023830
 80025a0:	40020020 	.word	0x40020020
 80025a4:	40020000 	.word	0x40020000
 80025a8:	4000440c 	.word	0x4000440c
 80025ac:	40004410 	.word	0x40004410
 80025b0:	40004414 	.word	0x40004414
 80025b4:	0501bd00 	.word	0x0501bd00
 80025b8:	40004408 	.word	0x40004408
 80025bc:	20012e08 	.word	0x20012e08
 80025c0:	20012e0c 	.word	0x20012e0c

080025c4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <_DoInit+0x98>)
 80025cc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2203      	movs	r2, #3
 80025d2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2203      	movs	r2, #3
 80025d8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a20      	ldr	r2, [pc, #128]	; (8002660 <_DoInit+0x9c>)
 80025de:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a20      	ldr	r2, [pc, #128]	; (8002664 <_DoInit+0xa0>)
 80025e4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ec:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a17      	ldr	r2, [pc, #92]	; (8002660 <_DoInit+0x9c>)
 8002604:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a17      	ldr	r2, [pc, #92]	; (8002668 <_DoInit+0xa4>)
 800260a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2210      	movs	r2, #16
 8002610:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3307      	adds	r3, #7
 8002628:	4a10      	ldr	r2, [pc, #64]	; (800266c <_DoInit+0xa8>)
 800262a:	6810      	ldr	r0, [r2, #0]
 800262c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800262e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a0e      	ldr	r2, [pc, #56]	; (8002670 <_DoInit+0xac>)
 8002636:	6810      	ldr	r0, [r2, #0]
 8002638:	6018      	str	r0, [r3, #0]
 800263a:	8891      	ldrh	r1, [r2, #4]
 800263c:	7992      	ldrb	r2, [r2, #6]
 800263e:	8099      	strh	r1, [r3, #4]
 8002640:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002642:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2220      	movs	r2, #32
 800264a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800264c:	f3bf 8f5f 	dmb	sy
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	2001433c 	.word	0x2001433c
 8002660:	080065dc 	.word	0x080065dc
 8002664:	20012e10 	.word	0x20012e10
 8002668:	20013210 	.word	0x20013210
 800266c:	080065e8 	.word	0x080065e8
 8002670:	080065ec 	.word	0x080065ec

08002674 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002680:	2300      	movs	r3, #0
 8002682:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	429a      	cmp	r2, r3
 8002696:	d905      	bls.n	80026a4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	e007      	b.n	80026b4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	69b9      	ldr	r1, [r7, #24]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	1acb      	subs	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	3b01      	subs	r3, #1
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026be:	4293      	cmp	r3, r2
 80026c0:	bf28      	it	cs
 80026c2:	4613      	movcs	r3, r2
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4293      	cmp	r3, r2
 80026cc:	bf28      	it	cs
 80026ce:	4613      	movcs	r3, r2
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	4413      	add	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80026dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	6978      	ldr	r0, [r7, #20]
 80026e2:	f003 feff 	bl	80064e4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80026e6:	6a3a      	ldr	r2, [r7, #32]
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	4413      	add	r3, r2
 80026ec:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	4413      	add	r3, r2
 80026f4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	4413      	add	r3, r2
 8002704:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	429a      	cmp	r2, r3
 800270e:	d101      	bne.n	8002714 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002714:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1b2      	bne.n	800268a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8002724:	6a3b      	ldr	r3, [r7, #32]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800272e:	b580      	push	{r7, lr}
 8002730:	b088      	sub	sp, #32
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	429a      	cmp	r2, r3
 8002750:	d911      	bls.n	8002776 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4413      	add	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	6938      	ldr	r0, [r7, #16]
 8002762:	f003 febf 	bl	80064e4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002766:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	441a      	add	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002774:	e01f      	b.n	80027b6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	4413      	add	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	6938      	ldr	r0, [r7, #16]
 800278a:	f003 feab 	bl	80064e4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4413      	add	r3, r2
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4619      	mov	r1, r3
 80027a6:	6938      	ldr	r0, [r7, #16]
 80027a8:	f003 fe9c 	bl	80064e4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80027ac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	60da      	str	r2, [r3, #12]
}
 80027b6:	bf00      	nop
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80027be:	b480      	push	{r7}
 80027c0:	b087      	sub	sp, #28
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d808      	bhi.n	80027ec <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad2      	subs	r2, r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	3b01      	subs	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e004      	b.n	80027f6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80027f6:	697b      	ldr	r3, [r7, #20]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	371c      	adds	r7, #28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8002810:	4b3e      	ldr	r3, [pc, #248]	; (800290c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002812:	623b      	str	r3, [r7, #32]
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800281e:	f7ff fed1 	bl	80025c4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4a37      	ldr	r2, [pc, #220]	; (800290c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002830:	4413      	add	r3, r2
 8002832:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	429a      	cmp	r2, r3
 800284e:	d92b      	bls.n	80028a8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4293      	cmp	r3, r2
 8002860:	bf28      	it	cs
 8002862:	4613      	movcs	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	4413      	add	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	6939      	ldr	r1, [r7, #16]
 8002874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002876:	f003 fe35 	bl	80064e4 <memcpy>
    NumBytesRead += NumBytesRem;
 800287a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	4413      	add	r3, r2
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	4413      	add	r3, r2
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	4413      	add	r3, r2
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d101      	bne.n	80028a8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4293      	cmp	r3, r2
 80028b6:	bf28      	it	cs
 80028b8:	4613      	movcs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d019      	beq.n	80028f6 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	4413      	add	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	6939      	ldr	r1, [r7, #16]
 80028d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028d2:	f003 fe07 	bl	80064e4 <memcpy>
    NumBytesRead += NumBytesRem;
 80028d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4413      	add	r3, r2
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80028de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	4413      	add	r3, r2
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80028ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	4413      	add	r3, r2
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002900:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002904:	4618      	mov	r0, r3
 8002906:	3730      	adds	r7, #48	; 0x30
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	2001433c 	.word	0x2001433c

08002910 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b08c      	sub	sp, #48	; 0x30
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800291c:	4b3e      	ldr	r3, [pc, #248]	; (8002a18 <SEGGER_RTT_ReadNoLock+0x108>)
 800291e:	623b      	str	r3, [r7, #32]
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <SEGGER_RTT_ReadNoLock+0x1e>
 800292a:	f7ff fe4b 	bl	80025c4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	3360      	adds	r3, #96	; 0x60
 800293a:	4a37      	ldr	r2, [pc, #220]	; (8002a18 <SEGGER_RTT_ReadNoLock+0x108>)
 800293c:	4413      	add	r3, r2
 800293e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002950:	2300      	movs	r3, #0
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	429a      	cmp	r2, r3
 800295a:	d92b      	bls.n	80029b4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4293      	cmp	r3, r2
 800296c:	bf28      	it	cs
 800296e:	4613      	movcs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	4413      	add	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	6939      	ldr	r1, [r7, #16]
 8002980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002982:	f003 fdaf 	bl	80064e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8002986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	4413      	add	r3, r2
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	4413      	add	r3, r2
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800299e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	4413      	add	r3, r2
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d101      	bne.n	80029b4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4293      	cmp	r3, r2
 80029c2:	bf28      	it	cs
 80029c4:	4613      	movcs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d019      	beq.n	8002a02 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	4413      	add	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	6939      	ldr	r1, [r7, #16]
 80029dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029de:	f003 fd81 	bl	80064e4 <memcpy>
    NumBytesRead += NumBytesRem;
 80029e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	4413      	add	r3, r2
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	4413      	add	r3, r2
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80029fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	4413      	add	r3, r2
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a0c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3730      	adds	r7, #48	; 0x30
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	2001433c 	.word	0x2001433c

08002a1c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	3360      	adds	r3, #96	; 0x60
 8002a38:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8002a3a:	4413      	add	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d029      	beq.n	8002a9a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d82e      	bhi.n	8002aa8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d013      	beq.n	8002a7a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8002a52:	e029      	b.n	8002aa8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002a54:	6978      	ldr	r0, [r7, #20]
 8002a56:	f7ff feb2 	bl	80027be <_GetAvailWriteSpace>
 8002a5a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d202      	bcs.n	8002a6a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002a68:	e021      	b.n	8002aae <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	69b9      	ldr	r1, [r7, #24]
 8002a72:	6978      	ldr	r0, [r7, #20]
 8002a74:	f7ff fe5b 	bl	800272e <_WriteNoCheck>
    break;
 8002a78:	e019      	b.n	8002aae <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002a7a:	6978      	ldr	r0, [r7, #20]
 8002a7c:	f7ff fe9f 	bl	80027be <_GetAvailWriteSpace>
 8002a80:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4293      	cmp	r3, r2
 8002a88:	bf28      	it	cs
 8002a8a:	4613      	movcs	r3, r2
 8002a8c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	69b9      	ldr	r1, [r7, #24]
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7ff fe4b 	bl	800272e <_WriteNoCheck>
    break;
 8002a98:	e009      	b.n	8002aae <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	69b9      	ldr	r1, [r7, #24]
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7ff fde8 	bl	8002674 <_WriteBlocking>
 8002aa4:	61f8      	str	r0, [r7, #28]
    break;
 8002aa6:	e002      	b.n	8002aae <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
    break;
 8002aac:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002aae:	69fb      	ldr	r3, [r7, #28]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3720      	adds	r7, #32
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	2001433c 	.word	0x2001433c

08002abc <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <SEGGER_RTT_WriteDownBuffer+0x1e>
 8002ad6:	f7ff fd75 	bl	80025c4 <_DoInit>
  SEGGER_RTT_LOCK();
 8002ada:	f3ef 8311 	mrs	r3, BASEPRI
 8002ade:	f04f 0120 	mov.w	r1, #32
 8002ae2:	f381 8811 	msr	BASEPRI, r1
 8002ae6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7ff ff95 	bl	8002a1c <SEGGER_RTT_WriteDownBufferNoLock>
 8002af2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8002afa:	697b      	ldr	r3, [r7, #20]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	2001433c 	.word	0x2001433c

08002b08 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002b16:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <SEGGER_RTT_AllocUpBuffer+0x20>
 8002b24:	f7ff fd4e 	bl	80025c4 <_DoInit>
  SEGGER_RTT_LOCK();
 8002b28:	f3ef 8311 	mrs	r3, BASEPRI
 8002b2c:	f04f 0120 	mov.w	r1, #32
 8002b30:	f381 8811 	msr	BASEPRI, r1
 8002b34:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002b36:	4b35      	ldr	r3, [pc, #212]	; (8002c0c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002b38:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002b3e:	6939      	ldr	r1, [r7, #16]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3304      	adds	r3, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	dbeb      	blt.n	8002b3e <SEGGER_RTT_AllocUpBuffer+0x36>
 8002b66:	e000      	b.n	8002b6a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002b68:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	da3f      	bge.n	8002bf4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8002b74:	6939      	ldr	r1, [r7, #16]
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002b88:	6939      	ldr	r1, [r7, #16]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	4613      	mov	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	3304      	adds	r3, #4
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002b9e:	6939      	ldr	r1, [r7, #16]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	3320      	adds	r3, #32
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8002bb2:	6939      	ldr	r1, [r7, #16]
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3328      	adds	r3, #40	; 0x28
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8002bc6:	6939      	ldr	r1, [r7, #16]
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3324      	adds	r3, #36	; 0x24
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8002bda:	6939      	ldr	r1, [r7, #16]
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	332c      	adds	r3, #44	; 0x2c
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002bee:	f3bf 8f5f 	dmb	sy
 8002bf2:	e002      	b.n	8002bfa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8002bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bf8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8002c00:	69fb      	ldr	r3, [r7, #28]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	2001433c 	.word	0x2001433c

08002c10 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8002c1e:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002c20:	623b      	str	r3, [r7, #32]
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002c2c:	f7ff fcca 	bl	80025c4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002c30:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002c32:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d82c      	bhi.n	8002c94 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8002c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8002c3e:	f04f 0120 	mov.w	r1, #32
 8002c42:	f381 8811 	msr	BASEPRI, r1
 8002c46:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	3360      	adds	r3, #96	; 0x60
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00e      	beq.n	8002c7e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c82:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002c84:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	e002      	b.n	8002c9a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8002c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3728      	adds	r7, #40	; 0x28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	2001433c 	.word	0x2001433c

08002ca8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00f      	beq.n	8002cde <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8002cbe:	e002      	b.n	8002cc6 <_EncodeStr+0x1e>
      Len++;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f6      	bne.n	8002cc0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d901      	bls.n	8002cde <_EncodeStr+0x36>
      Len = Limit;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2bfe      	cmp	r3, #254	; 0xfe
 8002ce2:	d806      	bhi.n	8002cf2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	60fa      	str	r2, [r7, #12]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	e011      	b.n	8002d16 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	60fa      	str	r2, [r7, #12]
 8002cf8:	22ff      	movs	r2, #255	; 0xff
 8002cfa:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	60fa      	str	r2, [r7, #12]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	0a19      	lsrs	r1, r3, #8
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	60fa      	str	r2, [r7, #12]
 8002d12:	b2ca      	uxtb	r2, r1
 8002d14:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002d1a:	e00a      	b.n	8002d32 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	1c53      	adds	r3, r2, #1
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1c59      	adds	r1, r3, #1
 8002d26:	60f9      	str	r1, [r7, #12]
 8002d28:	7812      	ldrb	r2, [r2, #0]
 8002d2a:	701a      	strb	r2, [r3, #0]
    n++;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d3f0      	bcc.n	8002d1c <_EncodeStr+0x74>
  }
  return pPayload;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <_HandleIncomingPacket+0xe0>)
 8002d68:	7e1b      	ldrb	r3, [r3, #24]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	1cfb      	adds	r3, r7, #3
 8002d6e:	2201      	movs	r2, #1
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7ff fdcd 	bl	8002910 <SEGGER_RTT_ReadNoLock>
 8002d76:	4603      	mov	r3, r0
 8002d78:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	dd54      	ble.n	8002e2a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	2b80      	cmp	r3, #128	; 0x80
 8002d84:	d032      	beq.n	8002dec <_HandleIncomingPacket+0x8c>
 8002d86:	2b80      	cmp	r3, #128	; 0x80
 8002d88:	dc42      	bgt.n	8002e10 <_HandleIncomingPacket+0xb0>
 8002d8a:	2b07      	cmp	r3, #7
 8002d8c:	dc16      	bgt.n	8002dbc <_HandleIncomingPacket+0x5c>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	dd3e      	ble.n	8002e10 <_HandleIncomingPacket+0xb0>
 8002d92:	3b01      	subs	r3, #1
 8002d94:	2b06      	cmp	r3, #6
 8002d96:	d83b      	bhi.n	8002e10 <_HandleIncomingPacket+0xb0>
 8002d98:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <_HandleIncomingPacket+0x40>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002dc3 	.word	0x08002dc3
 8002da4:	08002dc9 	.word	0x08002dc9
 8002da8:	08002dcf 	.word	0x08002dcf
 8002dac:	08002dd5 	.word	0x08002dd5
 8002db0:	08002ddb 	.word	0x08002ddb
 8002db4:	08002de1 	.word	0x08002de1
 8002db8:	08002de7 	.word	0x08002de7
 8002dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8002dbe:	d036      	beq.n	8002e2e <_HandleIncomingPacket+0xce>
 8002dc0:	e026      	b.n	8002e10 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002dc2:	f000 fecf 	bl	8003b64 <SEGGER_SYSVIEW_Start>
      break;
 8002dc6:	e037      	b.n	8002e38 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002dc8:	f000 ff88 	bl	8003cdc <SEGGER_SYSVIEW_Stop>
      break;
 8002dcc:	e034      	b.n	8002e38 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002dce:	f001 f961 	bl	8004094 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002dd2:	e031      	b.n	8002e38 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002dd4:	f001 f926 	bl	8004024 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002dd8:	e02e      	b.n	8002e38 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002dda:	f000 ffa5 	bl	8003d28 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002dde:	e02b      	b.n	8002e38 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002de0:	f001 fbf4 	bl	80045cc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002de4:	e028      	b.n	8002e38 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002de6:	f001 fbd3 	bl	8004590 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002dea:	e025      	b.n	8002e38 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <_HandleIncomingPacket+0xe0>)
 8002dee:	7e1b      	ldrb	r3, [r3, #24]
 8002df0:	4618      	mov	r0, r3
 8002df2:	1cfb      	adds	r3, r7, #3
 8002df4:	2201      	movs	r2, #1
 8002df6:	4619      	mov	r1, r3
 8002df8:	f7ff fd8a 	bl	8002910 <SEGGER_RTT_ReadNoLock>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	dd15      	ble.n	8002e32 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 fb41 	bl	8004490 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002e0e:	e010      	b.n	8002e32 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	b25b      	sxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	da0e      	bge.n	8002e36 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <_HandleIncomingPacket+0xe0>)
 8002e1a:	7e1b      	ldrb	r3, [r3, #24]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	1cfb      	adds	r3, r7, #3
 8002e20:	2201      	movs	r2, #1
 8002e22:	4619      	mov	r1, r3
 8002e24:	f7ff fd74 	bl	8002910 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002e28:	e005      	b.n	8002e36 <_HandleIncomingPacket+0xd6>
    }
  }
 8002e2a:	bf00      	nop
 8002e2c:	e004      	b.n	8002e38 <_HandleIncomingPacket+0xd8>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e002      	b.n	8002e38 <_HandleIncomingPacket+0xd8>
      break;
 8002e32:	bf00      	nop
 8002e34:	e000      	b.n	8002e38 <_HandleIncomingPacket+0xd8>
      break;
 8002e36:	bf00      	nop
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20014228 	.word	0x20014228

08002e44 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08c      	sub	sp, #48	; 0x30
 8002e48:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	3301      	adds	r3, #1
 8002e52:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e58:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <_TrySendOverflowPacket+0xe0>)
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e5e:	e00b      	b.n	8002e78 <_TrySendOverflowPacket+0x34>
 8002e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	1c59      	adds	r1, r3, #1
 8002e68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002e6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	09db      	lsrs	r3, r3, #7
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e7c:	d8f0      	bhi.n	8002e60 <_TrySendOverflowPacket+0x1c>
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002e8e:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <_TrySendOverflowPacket+0xe4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002e94:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <_TrySendOverflowPacket+0xe0>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	623b      	str	r3, [r7, #32]
 8002ea6:	e00b      	b.n	8002ec0 <_TrySendOverflowPacket+0x7c>
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	1c59      	adds	r1, r3, #1
 8002eb0:	6279      	str	r1, [r7, #36]	; 0x24
 8002eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	09db      	lsrs	r3, r3, #7
 8002ebe:	623b      	str	r3, [r7, #32]
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec4:	d8f0      	bhi.n	8002ea8 <_TrySendOverflowPacket+0x64>
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	627a      	str	r2, [r7, #36]	; 0x24
 8002ecc:	6a3a      	ldr	r2, [r7, #32]
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <_TrySendOverflowPacket+0xe0>)
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	4618      	mov	r0, r3
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f7fd f972 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002eec:	4603      	mov	r3, r0
 8002eee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002ef0:	f7ff fade 	bl	80024b0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002efa:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <_TrySendOverflowPacket+0xe0>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <_TrySendOverflowPacket+0xe0>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <_TrySendOverflowPacket+0xe0>)
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	e004      	b.n	8002f18 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <_TrySendOverflowPacket+0xe0>)
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	3301      	adds	r3, #1
 8002f14:	4a03      	ldr	r2, [pc, #12]	; (8002f24 <_TrySendOverflowPacket+0xe0>)
 8002f16:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002f18:	693b      	ldr	r3, [r7, #16]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3730      	adds	r7, #48	; 0x30
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20014228 	.word	0x20014228
 8002f28:	e0001004 	.word	0xe0001004

08002f2c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002f38:	4b6d      	ldr	r3, [pc, #436]	; (80030f0 <_SendPacket+0x1c4>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d010      	beq.n	8002f62 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002f40:	4b6b      	ldr	r3, [pc, #428]	; (80030f0 <_SendPacket+0x1c4>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80a5 	beq.w	8003094 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002f4a:	4b69      	ldr	r3, [pc, #420]	; (80030f0 <_SendPacket+0x1c4>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d109      	bne.n	8002f66 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002f52:	f7ff ff77 	bl	8002e44 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002f56:	4b66      	ldr	r3, [pc, #408]	; (80030f0 <_SendPacket+0x1c4>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	f040 809c 	bne.w	8003098 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8002f60:	e001      	b.n	8002f66 <_SendPacket+0x3a>
    goto Send;
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <_SendPacket+0x3c>
Send:
 8002f66:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b1f      	cmp	r3, #31
 8002f6c:	d809      	bhi.n	8002f82 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002f6e:	4b60      	ldr	r3, [pc, #384]	; (80030f0 <_SendPacket+0x1c4>)
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 808d 	bne.w	800309c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b17      	cmp	r3, #23
 8002f86:	d807      	bhi.n	8002f98 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e03d      	b.n	8003014 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8002fa4:	d912      	bls.n	8002fcc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	09da      	lsrs	r2, r3, #7
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	3a01      	subs	r2, #1
 8002fbe:	60fa      	str	r2, [r7, #12]
 8002fc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	701a      	strb	r2, [r3, #0]
 8002fca:	e006      	b.n	8002fda <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8002fde:	d912      	bls.n	8003006 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	09da      	lsrs	r2, r3, #7
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	3a01      	subs	r2, #1
 8002ff8:	60fa      	str	r2, [r7, #12]
 8002ffa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e006      	b.n	8003014 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3b01      	subs	r3, #1
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003014:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <_SendPacket+0x1c8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800301a:	4b35      	ldr	r3, [pc, #212]	; (80030f0 <_SendPacket+0x1c4>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	623b      	str	r3, [r7, #32]
 800302c:	e00b      	b.n	8003046 <_SendPacket+0x11a>
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	1c59      	adds	r1, r3, #1
 8003036:	6279      	str	r1, [r7, #36]	; 0x24
 8003038:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	09db      	lsrs	r3, r3, #7
 8003044:	623b      	str	r3, [r7, #32]
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	2b7f      	cmp	r3, #127	; 0x7f
 800304a:	d8f0      	bhi.n	800302e <_SendPacket+0x102>
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	627a      	str	r2, [r7, #36]	; 0x24
 8003052:	6a3a      	ldr	r2, [r7, #32]
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800305c:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <_SendPacket+0x1c4>)
 800305e:	785b      	ldrb	r3, [r3, #1]
 8003060:	4618      	mov	r0, r3
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	461a      	mov	r2, r3
 800306a:	68f9      	ldr	r1, [r7, #12]
 800306c:	f7fd f8b0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003070:	4603      	mov	r3, r0
 8003072:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003074:	f7ff fa1c 	bl	80024b0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800307e:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <_SendPacket+0x1c4>)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	60d3      	str	r3, [r2, #12]
 8003084:	e00b      	b.n	800309e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <_SendPacket+0x1c4>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <_SendPacket+0x1c4>)
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e004      	b.n	800309e <_SendPacket+0x172>
    goto SendDone;
 8003094:	bf00      	nop
 8003096:	e002      	b.n	800309e <_SendPacket+0x172>
      goto SendDone;
 8003098:	bf00      	nop
 800309a:	e000      	b.n	800309e <_SendPacket+0x172>
      goto SendDone;
 800309c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800309e:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <_SendPacket+0x1c4>)
 80030a0:	7e1b      	ldrb	r3, [r3, #24]
 80030a2:	4619      	mov	r1, r3
 80030a4:	4a14      	ldr	r2, [pc, #80]	; (80030f8 <_SendPacket+0x1cc>)
 80030a6:	460b      	mov	r3, r1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	440b      	add	r3, r1
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	336c      	adds	r3, #108	; 0x6c
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <_SendPacket+0x1c4>)
 80030b6:	7e1b      	ldrb	r3, [r3, #24]
 80030b8:	4618      	mov	r0, r3
 80030ba:	490f      	ldr	r1, [pc, #60]	; (80030f8 <_SendPacket+0x1cc>)
 80030bc:	4603      	mov	r3, r0
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4403      	add	r3, r0
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	440b      	add	r3, r1
 80030c6:	3370      	adds	r3, #112	; 0x70
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d00b      	beq.n	80030e6 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <_SendPacket+0x1c4>)
 80030d0:	789b      	ldrb	r3, [r3, #2]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d107      	bne.n	80030e6 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <_SendPacket+0x1c4>)
 80030d8:	2201      	movs	r2, #1
 80030da:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80030dc:	f7ff fe40 	bl	8002d60 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <_SendPacket+0x1c4>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	; 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20014228 	.word	0x20014228
 80030f4:	e0001004 	.word	0xe0001004
 80030f8:	2001433c 	.word	0x2001433c

080030fc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	3301      	adds	r3, #1
 8003112:	2b80      	cmp	r3, #128	; 0x80
 8003114:	d80a      	bhi.n	800312c <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	1c59      	adds	r1, r3, #1
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6051      	str	r1, [r2, #4]
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d15a      	bne.n	80031ea <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	623b      	str	r3, [r7, #32]
 8003154:	e00b      	b.n	800316e <_StoreChar+0x72>
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	1c59      	adds	r1, r3, #1
 800315e:	6279      	str	r1, [r7, #36]	; 0x24
 8003160:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	09db      	lsrs	r3, r3, #7
 800316c:	623b      	str	r3, [r7, #32]
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	2b7f      	cmp	r3, #127	; 0x7f
 8003172:	d8f0      	bhi.n	8003156 <_StoreChar+0x5a>
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	627a      	str	r2, [r7, #36]	; 0x24
 800317a:	6a3a      	ldr	r2, [r7, #32]
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	e00b      	b.n	80031a6 <_StoreChar+0xaa>
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	1c59      	adds	r1, r3, #1
 8003196:	61f9      	str	r1, [r7, #28]
 8003198:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	09db      	lsrs	r3, r3, #7
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b7f      	cmp	r3, #127	; 0x7f
 80031aa:	d8f0      	bhi.n	800318e <_StoreChar+0x92>
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	61fa      	str	r2, [r7, #28]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	701a      	strb	r2, [r3, #0]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	221a      	movs	r2, #26
 80031c2:	6939      	ldr	r1, [r7, #16]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff feb1 	bl	8002f2c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fdba 	bl	8002d48 <_PreparePacket>
 80031d4:	4602      	mov	r2, r0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
  }
}
 80031ea:	bf00      	nop
 80031ec:	3728      	adds	r7, #40	; 0x28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003206:	2301      	movs	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800320a:	2301      	movs	r3, #1
 800320c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800320e:	e007      	b.n	8003220 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003210:	6a3a      	ldr	r2, [r7, #32]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	623b      	str	r3, [r7, #32]
    Width++;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3301      	adds	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003220:	6a3a      	ldr	r2, [r7, #32]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	d2f3      	bcs.n	8003210 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	429a      	cmp	r2, r3
 800322e:	d901      	bls.n	8003234 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d11f      	bne.n	800327e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01c      	beq.n	800327e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <_PrintUnsigned+0x66>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <_PrintUnsigned+0x66>
        c = '0';
 8003254:	2330      	movs	r3, #48	; 0x30
 8003256:	76fb      	strb	r3, [r7, #27]
 8003258:	e001      	b.n	800325e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800325a:	2320      	movs	r3, #32
 800325c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800325e:	e007      	b.n	8003270 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	3b01      	subs	r3, #1
 8003264:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8003266:	7efb      	ldrb	r3, [r7, #27]
 8003268:	4619      	mov	r1, r3
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7ff ff46 	bl	80030fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <_PrintUnsigned+0x8a>
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	429a      	cmp	r2, r3
 800327c:	d3f0      	bcc.n	8003260 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d903      	bls.n	800328c <_PrintUnsigned+0x98>
      NumDigits--;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	3b01      	subs	r3, #1
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	e009      	b.n	80032a0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	429a      	cmp	r2, r3
 800329c:	d200      	bcs.n	80032a0 <_PrintUnsigned+0xac>
        break;
 800329e:	e005      	b.n	80032ac <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	fb02 f303 	mul.w	r3, r2, r3
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80032aa:	e7e8      	b.n	800327e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80032c4:	4a15      	ldr	r2, [pc, #84]	; (800331c <_PrintUnsigned+0x128>)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	4413      	add	r3, r2
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	4619      	mov	r1, r3
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7ff ff14 	bl	80030fc <_StoreChar>
    Digit /= Base;
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e3      	bne.n	80032ac <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80032e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d011      	beq.n	8003312 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00e      	beq.n	8003312 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80032f4:	e006      	b.n	8003304 <_PrintUnsigned+0x110>
        FieldWidth--;
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	3b01      	subs	r3, #1
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80032fc:	2120      	movs	r1, #32
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff fefc 	bl	80030fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <_PrintUnsigned+0x11e>
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	429a      	cmp	r2, r3
 8003310:	d3f1      	bcc.n	80032f6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8003312:	bf00      	nop
 8003314:	3728      	adds	r7, #40	; 0x28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	080066d8 	.word	0x080066d8

08003320 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	bfb8      	it	lt
 8003334:	425b      	neglt	r3, r3
 8003336:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003338:	2301      	movs	r3, #1
 800333a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800333c:	e007      	b.n	800334e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	fb92 f3f3 	sdiv	r3, r2, r3
 8003346:	613b      	str	r3, [r7, #16]
    Width++;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	3301      	adds	r3, #1
 800334c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	429a      	cmp	r2, r3
 8003354:	daf3      	bge.n	800333e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	429a      	cmp	r2, r3
 800335c:	d901      	bls.n	8003362 <_PrintInt+0x42>
    Width = NumDigits;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <_PrintInt+0x5e>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	db04      	blt.n	8003378 <_PrintInt+0x58>
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <_PrintInt+0x5e>
    FieldWidth--;
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	3b01      	subs	r3, #1
 800337c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <_PrintInt+0x6e>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d016      	beq.n	80033bc <_PrintInt+0x9c>
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d111      	bne.n	80033bc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00e      	beq.n	80033bc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800339e:	e006      	b.n	80033ae <_PrintInt+0x8e>
        FieldWidth--;
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80033a6:	2120      	movs	r1, #32
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f7ff fea7 	bl	80030fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <_PrintInt+0x9c>
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d3f1      	bcc.n	80033a0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	da07      	bge.n	80033d2 <_PrintInt+0xb2>
    v = -v;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	425b      	negs	r3, r3
 80033c6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80033c8:	212d      	movs	r1, #45	; 0x2d
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f7ff fe96 	bl	80030fc <_StoreChar>
 80033d0:	e008      	b.n	80033e4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80033dc:	212b      	movs	r1, #43	; 0x2b
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7ff fe8c 	bl	80030fc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d019      	beq.n	8003422 <_PrintInt+0x102>
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d114      	bne.n	8003422 <_PrintInt+0x102>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d111      	bne.n	8003422 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003404:	e006      	b.n	8003414 <_PrintInt+0xf4>
        FieldWidth--;
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	3b01      	subs	r3, #1
 800340a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800340c:	2130      	movs	r1, #48	; 0x30
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff fe74 	bl	80030fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <_PrintInt+0x102>
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	429a      	cmp	r2, r3
 8003420:	d3f1      	bcc.n	8003406 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff fedf 	bl	80031f4 <_PrintUnsigned>
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b098      	sub	sp, #96	; 0x60
 8003444:	af02      	add	r7, sp, #8
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800344c:	f3ef 8311 	mrs	r3, BASEPRI
 8003450:	f04f 0120 	mov.w	r1, #32
 8003454:	f381 8811 	msr	BASEPRI, r1
 8003458:	633b      	str	r3, [r7, #48]	; 0x30
 800345a:	48b7      	ldr	r0, [pc, #732]	; (8003738 <_VPrintTarget+0x2f8>)
 800345c:	f7ff fc74 	bl	8002d48 <_PreparePacket>
 8003460:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003462:	4bb5      	ldr	r3, [pc, #724]	; (8003738 <_VPrintTarget+0x2f8>)
 8003464:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3301      	adds	r3, #1
 8003472:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3301      	adds	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8003486:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8183 	beq.w	8003796 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8003490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003494:	2b25      	cmp	r3, #37	; 0x25
 8003496:	f040 8170 	bne.w	800377a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800349a:	2300      	movs	r3, #0
 800349c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800349e:	2301      	movs	r3, #1
 80034a0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80034aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034ae:	3b23      	subs	r3, #35	; 0x23
 80034b0:	2b0d      	cmp	r3, #13
 80034b2:	d83f      	bhi.n	8003534 <_VPrintTarget+0xf4>
 80034b4:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <_VPrintTarget+0x7c>)
 80034b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	08003525 	.word	0x08003525
 80034c0:	08003535 	.word	0x08003535
 80034c4:	08003535 	.word	0x08003535
 80034c8:	08003535 	.word	0x08003535
 80034cc:	08003535 	.word	0x08003535
 80034d0:	08003535 	.word	0x08003535
 80034d4:	08003535 	.word	0x08003535
 80034d8:	08003535 	.word	0x08003535
 80034dc:	08003515 	.word	0x08003515
 80034e0:	08003535 	.word	0x08003535
 80034e4:	080034f5 	.word	0x080034f5
 80034e8:	08003535 	.word	0x08003535
 80034ec:	08003535 	.word	0x08003535
 80034f0:	08003505 	.word	0x08003505
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80034f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3301      	adds	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	e01a      	b.n	800353a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8003504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003506:	f043 0302 	orr.w	r3, r3, #2
 800350a:	64bb      	str	r3, [r7, #72]	; 0x48
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	3301      	adds	r3, #1
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e012      	b.n	800353a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8003514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003516:	f043 0304 	orr.w	r3, r3, #4
 800351a:	64bb      	str	r3, [r7, #72]	; 0x48
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3301      	adds	r3, #1
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e00a      	b.n	800353a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8003524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003526:	f043 0308 	orr.w	r3, r3, #8
 800352a:	64bb      	str	r3, [r7, #72]	; 0x48
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3301      	adds	r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	e002      	b.n	800353a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8003534:	2300      	movs	r3, #0
 8003536:	653b      	str	r3, [r7, #80]	; 0x50
 8003538:	bf00      	nop
        }
      } while (v);
 800353a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1b0      	bne.n	80034a2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003540:	2300      	movs	r3, #0
 8003542:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800354c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003550:	2b2f      	cmp	r3, #47	; 0x2f
 8003552:	d912      	bls.n	800357a <_VPrintTarget+0x13a>
 8003554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003558:	2b39      	cmp	r3, #57	; 0x39
 800355a:	d80e      	bhi.n	800357a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	3301      	adds	r3, #1
 8003560:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8003562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	461a      	mov	r2, r3
 800356e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003572:	4413      	add	r3, r2
 8003574:	3b30      	subs	r3, #48	; 0x30
 8003576:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8003578:	e7e4      	b.n	8003544 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800357a:	2300      	movs	r3, #0
 800357c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8003586:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800358a:	2b2e      	cmp	r3, #46	; 0x2e
 800358c:	d11d      	bne.n	80035ca <_VPrintTarget+0x18a>
        sFormat++;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	3301      	adds	r3, #1
 8003592:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800359c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035a0:	2b2f      	cmp	r3, #47	; 0x2f
 80035a2:	d912      	bls.n	80035ca <_VPrintTarget+0x18a>
 80035a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035a8:	2b39      	cmp	r3, #57	; 0x39
 80035aa:	d80e      	bhi.n	80035ca <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3301      	adds	r3, #1
 80035b0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80035b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	461a      	mov	r2, r3
 80035be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035c2:	4413      	add	r3, r2
 80035c4:	3b30      	subs	r3, #48	; 0x30
 80035c6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80035c8:	e7e4      	b.n	8003594 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80035d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035d6:	2b6c      	cmp	r3, #108	; 0x6c
 80035d8:	d003      	beq.n	80035e2 <_VPrintTarget+0x1a2>
 80035da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035de:	2b68      	cmp	r3, #104	; 0x68
 80035e0:	d107      	bne.n	80035f2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	3301      	adds	r3, #1
 80035ee:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80035f0:	e7ef      	b.n	80035d2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80035f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035f6:	2b25      	cmp	r3, #37	; 0x25
 80035f8:	f000 80b3 	beq.w	8003762 <_VPrintTarget+0x322>
 80035fc:	2b25      	cmp	r3, #37	; 0x25
 80035fe:	f2c0 80b7 	blt.w	8003770 <_VPrintTarget+0x330>
 8003602:	2b78      	cmp	r3, #120	; 0x78
 8003604:	f300 80b4 	bgt.w	8003770 <_VPrintTarget+0x330>
 8003608:	2b58      	cmp	r3, #88	; 0x58
 800360a:	f2c0 80b1 	blt.w	8003770 <_VPrintTarget+0x330>
 800360e:	3b58      	subs	r3, #88	; 0x58
 8003610:	2b20      	cmp	r3, #32
 8003612:	f200 80ad 	bhi.w	8003770 <_VPrintTarget+0x330>
 8003616:	a201      	add	r2, pc, #4	; (adr r2, 800361c <_VPrintTarget+0x1dc>)
 8003618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361c:	08003713 	.word	0x08003713
 8003620:	08003771 	.word	0x08003771
 8003624:	08003771 	.word	0x08003771
 8003628:	08003771 	.word	0x08003771
 800362c:	08003771 	.word	0x08003771
 8003630:	08003771 	.word	0x08003771
 8003634:	08003771 	.word	0x08003771
 8003638:	08003771 	.word	0x08003771
 800363c:	08003771 	.word	0x08003771
 8003640:	08003771 	.word	0x08003771
 8003644:	08003771 	.word	0x08003771
 8003648:	080036a1 	.word	0x080036a1
 800364c:	080036c7 	.word	0x080036c7
 8003650:	08003771 	.word	0x08003771
 8003654:	08003771 	.word	0x08003771
 8003658:	08003771 	.word	0x08003771
 800365c:	08003771 	.word	0x08003771
 8003660:	08003771 	.word	0x08003771
 8003664:	08003771 	.word	0x08003771
 8003668:	08003771 	.word	0x08003771
 800366c:	08003771 	.word	0x08003771
 8003670:	08003771 	.word	0x08003771
 8003674:	08003771 	.word	0x08003771
 8003678:	08003771 	.word	0x08003771
 800367c:	0800373d 	.word	0x0800373d
 8003680:	08003771 	.word	0x08003771
 8003684:	08003771 	.word	0x08003771
 8003688:	08003771 	.word	0x08003771
 800368c:	08003771 	.word	0x08003771
 8003690:	080036ed 	.word	0x080036ed
 8003694:	08003771 	.word	0x08003771
 8003698:	08003771 	.word	0x08003771
 800369c:	08003713 	.word	0x08003713
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	1d19      	adds	r1, r3, #4
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6011      	str	r1, [r2, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80036ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80036b4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80036b8:	f107 0314 	add.w	r3, r7, #20
 80036bc:	4611      	mov	r1, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fd1c 	bl	80030fc <_StoreChar>
        break;
 80036c4:	e055      	b.n	8003772 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	1d19      	adds	r1, r3, #4
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6011      	str	r1, [r2, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80036d4:	f107 0014 	add.w	r0, r7, #20
 80036d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e2:	220a      	movs	r2, #10
 80036e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80036e6:	f7ff fe1b 	bl	8003320 <_PrintInt>
        break;
 80036ea:	e042      	b.n	8003772 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	1d19      	adds	r1, r3, #4
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6011      	str	r1, [r2, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80036fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80036fc:	f107 0014 	add.w	r0, r7, #20
 8003700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370a:	220a      	movs	r2, #10
 800370c:	f7ff fd72 	bl	80031f4 <_PrintUnsigned>
        break;
 8003710:	e02f      	b.n	8003772 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	1d19      	adds	r1, r3, #4
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6011      	str	r1, [r2, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8003720:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003722:	f107 0014 	add.w	r0, r7, #20
 8003726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003730:	2210      	movs	r2, #16
 8003732:	f7ff fd5f 	bl	80031f4 <_PrintUnsigned>
        break;
 8003736:	e01c      	b.n	8003772 <_VPrintTarget+0x332>
 8003738:	20014258 	.word	0x20014258
      case 'p':
        v = va_arg(*pParamList, int);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	1d19      	adds	r1, r3, #4
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6011      	str	r1, [r2, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800374a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800374c:	f107 0014 	add.w	r0, r7, #20
 8003750:	2300      	movs	r3, #0
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	2308      	movs	r3, #8
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2308      	movs	r3, #8
 800375a:	2210      	movs	r2, #16
 800375c:	f7ff fd4a 	bl	80031f4 <_PrintUnsigned>
        break;
 8003760:	e007      	b.n	8003772 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8003762:	f107 0314 	add.w	r3, r7, #20
 8003766:	2125      	movs	r1, #37	; 0x25
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fcc7 	bl	80030fc <_StoreChar>
        break;
 800376e:	e000      	b.n	8003772 <_VPrintTarget+0x332>
      default:
        break;
 8003770:	bf00      	nop
      }
      sFormat++;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3301      	adds	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e007      	b.n	800378a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800377a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800377e:	f107 0314 	add.w	r3, r7, #20
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fcb9 	bl	80030fc <_StoreChar>
    }
  } while (*sFormat);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f47f ae72 	bne.w	8003478 <_VPrintTarget+0x38>
 8003794:	e000      	b.n	8003798 <_VPrintTarget+0x358>
      break;
 8003796:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	2b00      	cmp	r3, #0
 800379c:	d041      	beq.n	8003822 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	643b      	str	r3, [r7, #64]	; 0x40
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ae:	e00b      	b.n	80037c8 <_VPrintTarget+0x388>
 80037b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b6:	1c59      	adds	r1, r3, #1
 80037b8:	6439      	str	r1, [r7, #64]	; 0x40
 80037ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c4:	09db      	lsrs	r3, r3, #7
 80037c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ca:	2b7f      	cmp	r3, #127	; 0x7f
 80037cc:	d8f0      	bhi.n	80037b0 <_VPrintTarget+0x370>
 80037ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	643a      	str	r2, [r7, #64]	; 0x40
 80037d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037dc:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80037e2:	2300      	movs	r3, #0
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
 80037e6:	e00b      	b.n	8003800 <_VPrintTarget+0x3c0>
 80037e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	1c59      	adds	r1, r3, #1
 80037f0:	63b9      	str	r1, [r7, #56]	; 0x38
 80037f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fc:	09db      	lsrs	r3, r3, #7
 80037fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003802:	2b7f      	cmp	r3, #127	; 0x7f
 8003804:	d8f0      	bhi.n	80037e8 <_VPrintTarget+0x3a8>
 8003806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	63ba      	str	r2, [r7, #56]	; 0x38
 800380c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	69b9      	ldr	r1, [r7, #24]
 800381a:	221a      	movs	r2, #26
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fb85 	bl	8002f2c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8003828:	bf00      	nop
 800382a:	3758      	adds	r7, #88	; 0x58
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800383e:	2300      	movs	r3, #0
 8003840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003844:	4917      	ldr	r1, [pc, #92]	; (80038a4 <SEGGER_SYSVIEW_Init+0x74>)
 8003846:	4818      	ldr	r0, [pc, #96]	; (80038a8 <SEGGER_SYSVIEW_Init+0x78>)
 8003848:	f7ff f95e 	bl	8002b08 <SEGGER_RTT_AllocUpBuffer>
 800384c:	4603      	mov	r3, r0
 800384e:	b2da      	uxtb	r2, r3
 8003850:	4b16      	ldr	r3, [pc, #88]	; (80038ac <SEGGER_SYSVIEW_Init+0x7c>)
 8003852:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003854:	4b15      	ldr	r3, [pc, #84]	; (80038ac <SEGGER_SYSVIEW_Init+0x7c>)
 8003856:	785a      	ldrb	r2, [r3, #1]
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <SEGGER_SYSVIEW_Init+0x7c>)
 800385a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800385c:	4b13      	ldr	r3, [pc, #76]	; (80038ac <SEGGER_SYSVIEW_Init+0x7c>)
 800385e:	7e1b      	ldrb	r3, [r3, #24]
 8003860:	4618      	mov	r0, r3
 8003862:	2300      	movs	r3, #0
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2308      	movs	r3, #8
 8003868:	4a11      	ldr	r2, [pc, #68]	; (80038b0 <SEGGER_SYSVIEW_Init+0x80>)
 800386a:	490f      	ldr	r1, [pc, #60]	; (80038a8 <SEGGER_SYSVIEW_Init+0x78>)
 800386c:	f7ff f9d0 	bl	8002c10 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <SEGGER_SYSVIEW_Init+0x7c>)
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <SEGGER_SYSVIEW_Init+0x84>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a0c      	ldr	r2, [pc, #48]	; (80038ac <SEGGER_SYSVIEW_Init+0x7c>)
 800387c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800387e:	4a0b      	ldr	r2, [pc, #44]	; (80038ac <SEGGER_SYSVIEW_Init+0x7c>)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003884:	4a09      	ldr	r2, [pc, #36]	; (80038ac <SEGGER_SYSVIEW_Init+0x7c>)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800388a:	4a08      	ldr	r2, [pc, #32]	; (80038ac <SEGGER_SYSVIEW_Init+0x7c>)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003890:	4a06      	ldr	r2, [pc, #24]	; (80038ac <SEGGER_SYSVIEW_Init+0x7c>)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <SEGGER_SYSVIEW_Init+0x7c>)
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20013220 	.word	0x20013220
 80038a8:	080065f4 	.word	0x080065f4
 80038ac:	20014228 	.word	0x20014228
 80038b0:	20014220 	.word	0x20014220
 80038b4:	e0001004 	.word	0xe0001004

080038b8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6113      	str	r3, [r2, #16]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20014228 	.word	0x20014228

080038d8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80038e0:	f3ef 8311 	mrs	r3, BASEPRI
 80038e4:	f04f 0120 	mov.w	r1, #32
 80038e8:	f381 8811 	msr	BASEPRI, r1
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	4808      	ldr	r0, [pc, #32]	; (8003910 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80038f0:	f7ff fa2a 	bl	8002d48 <_PreparePacket>
 80038f4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	68b8      	ldr	r0, [r7, #8]
 80038fc:	f7ff fb16 	bl	8002f2c <_SendPacket>
  RECORD_END();
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f383 8811 	msr	BASEPRI, r3
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20014258 	.word	0x20014258

08003914 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800391e:	f3ef 8311 	mrs	r3, BASEPRI
 8003922:	f04f 0120 	mov.w	r1, #32
 8003926:	f381 8811 	msr	BASEPRI, r1
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	4816      	ldr	r0, [pc, #88]	; (8003988 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800392e:	f7ff fa0b 	bl	8002d48 <_PreparePacket>
 8003932:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	e00b      	b.n	800395a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	1c59      	adds	r1, r3, #1
 800394a:	61f9      	str	r1, [r7, #28]
 800394c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	09db      	lsrs	r3, r3, #7
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b7f      	cmp	r3, #127	; 0x7f
 800395e:	d8f0      	bhi.n	8003942 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	61fa      	str	r2, [r7, #28]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68f9      	ldr	r1, [r7, #12]
 8003974:	6938      	ldr	r0, [r7, #16]
 8003976:	f7ff fad9 	bl	8002f2c <_SendPacket>
  RECORD_END();
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f383 8811 	msr	BASEPRI, r3
}
 8003980:	bf00      	nop
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20014258 	.word	0x20014258

0800398c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800398c:	b580      	push	{r7, lr}
 800398e:	b08c      	sub	sp, #48	; 0x30
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003998:	f3ef 8311 	mrs	r3, BASEPRI
 800399c:	f04f 0120 	mov.w	r1, #32
 80039a0:	f381 8811 	msr	BASEPRI, r1
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	4825      	ldr	r0, [pc, #148]	; (8003a3c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80039a8:	f7ff f9ce 	bl	8002d48 <_PreparePacket>
 80039ac:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ba:	e00b      	b.n	80039d4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c2:	1c59      	adds	r1, r3, #1
 80039c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80039c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	09db      	lsrs	r3, r3, #7
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	2b7f      	cmp	r3, #127	; 0x7f
 80039d8:	d8f0      	bhi.n	80039bc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80039da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	e00b      	b.n	8003a0c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	1c59      	adds	r1, r3, #1
 80039fc:	6279      	str	r1, [r7, #36]	; 0x24
 80039fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	09db      	lsrs	r3, r3, #7
 8003a0a:	623b      	str	r3, [r7, #32]
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a10:	d8f0      	bhi.n	80039f4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	627a      	str	r2, [r7, #36]	; 0x24
 8003a18:	6a3a      	ldr	r2, [r7, #32]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	6979      	ldr	r1, [r7, #20]
 8003a26:	69b8      	ldr	r0, [r7, #24]
 8003a28:	f7ff fa80 	bl	8002f2c <_SendPacket>
  RECORD_END();
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f383 8811 	msr	BASEPRI, r3
}
 8003a32:	bf00      	nop
 8003a34:	3730      	adds	r7, #48	; 0x30
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20014258 	.word	0x20014258

08003a40 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b090      	sub	sp, #64	; 0x40
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a52:	f04f 0120 	mov.w	r1, #32
 8003a56:	f381 8811 	msr	BASEPRI, r1
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	4840      	ldr	r0, [pc, #256]	; (8003b60 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003a5e:	f7ff f973 	bl	8002d48 <_PreparePacket>
 8003a62:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a70:	e00b      	b.n	8003a8a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a78:	1c59      	adds	r1, r3, #1
 8003a7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	09db      	lsrs	r3, r3, #7
 8003a88:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a8e:	d8f0      	bhi.n	8003a72 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8003aa8:	e00b      	b.n	8003ac2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab0:	1c59      	adds	r1, r3, #1
 8003ab2:	6379      	str	r1, [r7, #52]	; 0x34
 8003ab4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	09db      	lsrs	r3, r3, #7
 8003ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ac6:	d8f0      	bhi.n	8003aaa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	637a      	str	r2, [r7, #52]	; 0x34
 8003ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ae0:	e00b      	b.n	8003afa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	1c59      	adds	r1, r3, #1
 8003aea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003aec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	09db      	lsrs	r3, r3, #7
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	2b7f      	cmp	r3, #127	; 0x7f
 8003afe:	d8f0      	bhi.n	8003ae2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
 8003b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b16:	623b      	str	r3, [r7, #32]
 8003b18:	e00b      	b.n	8003b32 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	1c59      	adds	r1, r3, #1
 8003b22:	6279      	str	r1, [r7, #36]	; 0x24
 8003b24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	09db      	lsrs	r3, r3, #7
 8003b30:	623b      	str	r3, [r7, #32]
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	2b7f      	cmp	r3, #127	; 0x7f
 8003b36:	d8f0      	bhi.n	8003b1a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b3e:	6a3a      	ldr	r2, [r7, #32]
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	6979      	ldr	r1, [r7, #20]
 8003b4c:	69b8      	ldr	r0, [r7, #24]
 8003b4e:	f7ff f9ed 	bl	8002f2c <_SendPacket>
  RECORD_END();
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	f383 8811 	msr	BASEPRI, r3
}
 8003b58:	bf00      	nop
 8003b5a:	3740      	adds	r7, #64	; 0x40
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20014258 	.word	0x20014258

08003b64 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	; 0x30
 8003b68:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003b6a:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003b70:	f3ef 8311 	mrs	r3, BASEPRI
 8003b74:	f04f 0120 	mov.w	r1, #32
 8003b78:	f381 8811 	msr	BASEPRI, r1
 8003b7c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003b7e:	4b54      	ldr	r3, [pc, #336]	; (8003cd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b80:	785b      	ldrb	r3, [r3, #1]
 8003b82:	220a      	movs	r2, #10
 8003b84:	4953      	ldr	r1, [pc, #332]	; (8003cd4 <SEGGER_SYSVIEW_Start+0x170>)
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fc fb22 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003b92:	f7fe fc8d 	bl	80024b0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003b96:	200a      	movs	r0, #10
 8003b98:	f7ff fe9e 	bl	80038d8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8003ba0:	f04f 0120 	mov.w	r1, #32
 8003ba4:	f381 8811 	msr	BASEPRI, r1
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	484b      	ldr	r0, [pc, #300]	; (8003cd8 <SEGGER_SYSVIEW_Start+0x174>)
 8003bac:	f7ff f8cc 	bl	8002d48 <_PreparePacket>
 8003bb0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bba:	4b45      	ldr	r3, [pc, #276]	; (8003cd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc0:	e00b      	b.n	8003bda <SEGGER_SYSVIEW_Start+0x76>
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	1c59      	adds	r1, r3, #1
 8003bca:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003bcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	09db      	lsrs	r3, r3, #7
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8003bde:	d8f0      	bhi.n	8003bc2 <SEGGER_SYSVIEW_Start+0x5e>
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf4:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	e00b      	b.n	8003c14 <SEGGER_SYSVIEW_Start+0xb0>
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	1c59      	adds	r1, r3, #1
 8003c04:	6279      	str	r1, [r7, #36]	; 0x24
 8003c06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	09db      	lsrs	r3, r3, #7
 8003c12:	623b      	str	r3, [r7, #32]
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	2b7f      	cmp	r3, #127	; 0x7f
 8003c18:	d8f0      	bhi.n	8003bfc <SEGGER_SYSVIEW_Start+0x98>
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	627a      	str	r2, [r7, #36]	; 0x24
 8003c20:	6a3a      	ldr	r2, [r7, #32]
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	4b28      	ldr	r3, [pc, #160]	; (8003cd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	61bb      	str	r3, [r7, #24]
 8003c34:	e00b      	b.n	8003c4e <SEGGER_SYSVIEW_Start+0xea>
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	1c59      	adds	r1, r3, #1
 8003c3e:	61f9      	str	r1, [r7, #28]
 8003c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	09db      	lsrs	r3, r3, #7
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	2b7f      	cmp	r3, #127	; 0x7f
 8003c52:	d8f0      	bhi.n	8003c36 <SEGGER_SYSVIEW_Start+0xd2>
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	61fa      	str	r2, [r7, #28]
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	e00b      	b.n	8003c86 <SEGGER_SYSVIEW_Start+0x122>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	1c59      	adds	r1, r3, #1
 8003c76:	6179      	str	r1, [r7, #20]
 8003c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	09db      	lsrs	r3, r3, #7
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b7f      	cmp	r3, #127	; 0x7f
 8003c8a:	d8f0      	bhi.n	8003c6e <SEGGER_SYSVIEW_Start+0x10a>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	617a      	str	r2, [r7, #20]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003c9c:	2218      	movs	r2, #24
 8003c9e:	6839      	ldr	r1, [r7, #0]
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff f943 	bl	8002f2c <_SendPacket>
      RECORD_END();
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003cac:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003cb4:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003cba:	f000 f9eb 	bl	8004094 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003cbe:	f000 f9b1 	bl	8004024 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003cc2:	f000 fc83 	bl	80045cc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003cc6:	bf00      	nop
 8003cc8:	3730      	adds	r7, #48	; 0x30
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20014228 	.word	0x20014228
 8003cd4:	080066cc 	.word	0x080066cc
 8003cd8:	20014258 	.word	0x20014258

08003cdc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ce6:	f04f 0120 	mov.w	r1, #32
 8003cea:	f381 8811 	msr	BASEPRI, r1
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	480b      	ldr	r0, [pc, #44]	; (8003d20 <SEGGER_SYSVIEW_Stop+0x44>)
 8003cf2:	f7ff f829 	bl	8002d48 <_PreparePacket>
 8003cf6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <SEGGER_SYSVIEW_Stop+0x48>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003d00:	220b      	movs	r2, #11
 8003d02:	6839      	ldr	r1, [r7, #0]
 8003d04:	6838      	ldr	r0, [r7, #0]
 8003d06:	f7ff f911 	bl	8002f2c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <SEGGER_SYSVIEW_Stop+0x48>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f383 8811 	msr	BASEPRI, r3
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20014258 	.word	0x20014258
 8003d24:	20014228 	.word	0x20014228

08003d28 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08c      	sub	sp, #48	; 0x30
 8003d2c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d32:	f04f 0120 	mov.w	r1, #32
 8003d36:	f381 8811 	msr	BASEPRI, r1
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	4845      	ldr	r0, [pc, #276]	; (8003e54 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003d3e:	f7ff f803 	bl	8002d48 <_PreparePacket>
 8003d42:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4c:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d52:	e00b      	b.n	8003d6c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	1c59      	adds	r1, r3, #1
 8003d5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	09db      	lsrs	r3, r3, #7
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d70:	d8f0      	bhi.n	8003d54 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
 8003d86:	4b34      	ldr	r3, [pc, #208]	; (8003e58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	e00b      	b.n	8003da6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	1c59      	adds	r1, r3, #1
 8003d96:	6279      	str	r1, [r7, #36]	; 0x24
 8003d98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	09db      	lsrs	r3, r3, #7
 8003da4:	623b      	str	r3, [r7, #32]
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	2b7f      	cmp	r3, #127	; 0x7f
 8003daa:	d8f0      	bhi.n	8003d8e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	627a      	str	r2, [r7, #36]	; 0x24
 8003db2:	6a3a      	ldr	r2, [r7, #32]
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	701a      	strb	r2, [r3, #0]
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	e00b      	b.n	8003de0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	1c59      	adds	r1, r3, #1
 8003dd0:	61f9      	str	r1, [r7, #28]
 8003dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	09db      	lsrs	r3, r3, #7
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b7f      	cmp	r3, #127	; 0x7f
 8003de4:	d8f0      	bhi.n	8003dc8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	61fa      	str	r2, [r7, #28]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	e00b      	b.n	8003e18 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	1c59      	adds	r1, r3, #1
 8003e08:	6179      	str	r1, [r7, #20]
 8003e0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	09db      	lsrs	r3, r3, #7
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e1c:	d8f0      	bhi.n	8003e00 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	617a      	str	r2, [r7, #20]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003e2e:	2218      	movs	r2, #24
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	68b8      	ldr	r0, [r7, #8]
 8003e34:	f7ff f87a 	bl	8002f2c <_SendPacket>
  RECORD_END();
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003e46:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	4798      	blx	r3
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	3730      	adds	r7, #48	; 0x30
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20014258 	.word	0x20014258
 8003e58:	20014228 	.word	0x20014228

08003e5c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b092      	sub	sp, #72	; 0x48
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003e64:	f3ef 8311 	mrs	r3, BASEPRI
 8003e68:	f04f 0120 	mov.w	r1, #32
 8003e6c:	f381 8811 	msr	BASEPRI, r1
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	486a      	ldr	r0, [pc, #424]	; (800401c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003e74:	f7fe ff68 	bl	8002d48 <_PreparePacket>
 8003e78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	647b      	str	r3, [r7, #68]	; 0x44
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4b66      	ldr	r3, [pc, #408]	; (8004020 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e8e:	e00b      	b.n	8003ea8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e96:	1c59      	adds	r1, r3, #1
 8003e98:	6479      	str	r1, [r7, #68]	; 0x44
 8003e9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea4:	09db      	lsrs	r3, r3, #7
 8003ea6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8003eac:	d8f0      	bhi.n	8003e90 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	647a      	str	r2, [r7, #68]	; 0x44
 8003eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ebc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ec8:	e00b      	b.n	8003ee2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed0:	1c59      	adds	r1, r3, #1
 8003ed2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003ed4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	09db      	lsrs	r3, r3, #7
 8003ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ee6:	d8f0      	bhi.n	8003eca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	4619      	mov	r1, r3
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f7fe fed1 	bl	8002ca8 <_EncodeStr>
 8003f06:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003f08:	2209      	movs	r2, #9
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	6938      	ldr	r0, [r7, #16]
 8003f0e:	f7ff f80d 	bl	8002f2c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4b40      	ldr	r3, [pc, #256]	; (8004020 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	633b      	str	r3, [r7, #48]	; 0x30
 8003f26:	e00b      	b.n	8003f40 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	1c59      	adds	r1, r3, #1
 8003f30:	6379      	str	r1, [r7, #52]	; 0x34
 8003f32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	09db      	lsrs	r3, r3, #7
 8003f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	2b7f      	cmp	r3, #127	; 0x7f
 8003f44:	d8f0      	bhi.n	8003f28 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	637a      	str	r2, [r7, #52]	; 0x34
 8003f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f60:	e00b      	b.n	8003f7a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f68:	1c59      	adds	r1, r3, #1
 8003f6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	09db      	lsrs	r3, r3, #7
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f7e:	d8f0      	bhi.n	8003f62 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	e00b      	b.n	8003fb4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	1c59      	adds	r1, r3, #1
 8003fa4:	6279      	str	r1, [r7, #36]	; 0x24
 8003fa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	09db      	lsrs	r3, r3, #7
 8003fb2:	623b      	str	r3, [r7, #32]
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8003fb8:	d8f0      	bhi.n	8003f9c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	627a      	str	r2, [r7, #36]	; 0x24
 8003fc0:	6a3a      	ldr	r2, [r7, #32]
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e00b      	b.n	8003fec <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	1c59      	adds	r1, r3, #1
 8003fdc:	61f9      	str	r1, [r7, #28]
 8003fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	09db      	lsrs	r3, r3, #7
 8003fea:	61bb      	str	r3, [r7, #24]
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b7f      	cmp	r3, #127	; 0x7f
 8003ff0:	d8f0      	bhi.n	8003fd4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	61fa      	str	r2, [r7, #28]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004002:	2215      	movs	r2, #21
 8004004:	68f9      	ldr	r1, [r7, #12]
 8004006:	6938      	ldr	r0, [r7, #16]
 8004008:	f7fe ff90 	bl	8002f2c <_SendPacket>
  RECORD_END();
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f383 8811 	msr	BASEPRI, r3
}
 8004012:	bf00      	nop
 8004014:	3748      	adds	r7, #72	; 0x48
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20014258 	.word	0x20014258
 8004020:	20014228 	.word	0x20014228

08004024 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800403a:	4b03      	ldr	r3, [pc, #12]	; (8004048 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4798      	blx	r3
  }
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20014228 	.word	0x20014228

0800404c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004054:	f3ef 8311 	mrs	r3, BASEPRI
 8004058:	f04f 0120 	mov.w	r1, #32
 800405c:	f381 8811 	msr	BASEPRI, r1
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	480b      	ldr	r0, [pc, #44]	; (8004090 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004064:	f7fe fe70 	bl	8002d48 <_PreparePacket>
 8004068:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800406a:	2280      	movs	r2, #128	; 0x80
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	6938      	ldr	r0, [r7, #16]
 8004070:	f7fe fe1a 	bl	8002ca8 <_EncodeStr>
 8004074:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004076:	220e      	movs	r2, #14
 8004078:	68f9      	ldr	r1, [r7, #12]
 800407a:	6938      	ldr	r0, [r7, #16]
 800407c:	f7fe ff56 	bl	8002f2c <_SendPacket>
  RECORD_END();
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f383 8811 	msr	BASEPRI, r3
}
 8004086:	bf00      	nop
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20014258 	.word	0x20014258

08004094 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800409a:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01a      	beq.n	80040d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80040a2:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d015      	beq.n	80040d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4798      	blx	r3
 80040b4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80040b8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80040ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	000a      	movs	r2, r1
 80040c8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80040ca:	4613      	mov	r3, r2
 80040cc:	461a      	mov	r2, r3
 80040ce:	4621      	mov	r1, r4
 80040d0:	200d      	movs	r0, #13
 80040d2:	f7ff fc5b 	bl	800398c <SEGGER_SYSVIEW_RecordU32x2>
 80040d6:	e006      	b.n	80040e6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80040d8:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4619      	mov	r1, r3
 80040de:	200c      	movs	r0, #12
 80040e0:	f7ff fc18 	bl	8003914 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd90      	pop	{r4, r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20014228 	.word	0x20014228
 80040f4:	e0001004 	.word	0xe0001004

080040f8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80040fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004102:	f04f 0120 	mov.w	r1, #32
 8004106:	f381 8811 	msr	BASEPRI, r1
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	4819      	ldr	r0, [pc, #100]	; (8004174 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800410e:	f7fe fe1b 	bl	8002d48 <_PreparePacket>
 8004112:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004118:	4b17      	ldr	r3, [pc, #92]	; (8004178 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004120:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	e00b      	b.n	8004144 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	1c59      	adds	r1, r3, #1
 8004134:	6179      	str	r1, [r7, #20]
 8004136:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	09db      	lsrs	r3, r3, #7
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2b7f      	cmp	r3, #127	; 0x7f
 8004148:	d8f0      	bhi.n	800412c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	617a      	str	r2, [r7, #20]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800415a:	2202      	movs	r2, #2
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	68b8      	ldr	r0, [r7, #8]
 8004160:	f7fe fee4 	bl	8002f2c <_SendPacket>
  RECORD_END();
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f383 8811 	msr	BASEPRI, r3
}
 800416a:	bf00      	nop
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20014258 	.word	0x20014258
 8004178:	e000ed04 	.word	0xe000ed04

0800417c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004182:	f3ef 8311 	mrs	r3, BASEPRI
 8004186:	f04f 0120 	mov.w	r1, #32
 800418a:	f381 8811 	msr	BASEPRI, r1
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	4807      	ldr	r0, [pc, #28]	; (80041b0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004192:	f7fe fdd9 	bl	8002d48 <_PreparePacket>
 8004196:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004198:	2203      	movs	r2, #3
 800419a:	6839      	ldr	r1, [r7, #0]
 800419c:	6838      	ldr	r0, [r7, #0]
 800419e:	f7fe fec5 	bl	8002f2c <_SendPacket>
  RECORD_END();
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f383 8811 	msr	BASEPRI, r3
}
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20014258 	.word	0x20014258

080041b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80041ba:	f3ef 8311 	mrs	r3, BASEPRI
 80041be:	f04f 0120 	mov.w	r1, #32
 80041c2:	f381 8811 	msr	BASEPRI, r1
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	4807      	ldr	r0, [pc, #28]	; (80041e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80041ca:	f7fe fdbd 	bl	8002d48 <_PreparePacket>
 80041ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80041d0:	2212      	movs	r2, #18
 80041d2:	6839      	ldr	r1, [r7, #0]
 80041d4:	6838      	ldr	r0, [r7, #0]
 80041d6:	f7fe fea9 	bl	8002f2c <_SendPacket>
  RECORD_END();
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f383 8811 	msr	BASEPRI, r3
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20014258 	.word	0x20014258

080041ec <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80041f2:	f3ef 8311 	mrs	r3, BASEPRI
 80041f6:	f04f 0120 	mov.w	r1, #32
 80041fa:	f381 8811 	msr	BASEPRI, r1
 80041fe:	607b      	str	r3, [r7, #4]
 8004200:	4807      	ldr	r0, [pc, #28]	; (8004220 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004202:	f7fe fda1 	bl	8002d48 <_PreparePacket>
 8004206:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004208:	2211      	movs	r2, #17
 800420a:	6839      	ldr	r1, [r7, #0]
 800420c:	6838      	ldr	r0, [r7, #0]
 800420e:	f7fe fe8d 	bl	8002f2c <_SendPacket>
  RECORD_END();
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f383 8811 	msr	BASEPRI, r3
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20014258 	.word	0x20014258

08004224 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800422c:	f3ef 8311 	mrs	r3, BASEPRI
 8004230:	f04f 0120 	mov.w	r1, #32
 8004234:	f381 8811 	msr	BASEPRI, r1
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	4819      	ldr	r0, [pc, #100]	; (80042a0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800423c:	f7fe fd84 	bl	8002d48 <_PreparePacket>
 8004240:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004246:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	e00b      	b.n	8004272 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	1c59      	adds	r1, r3, #1
 8004262:	61f9      	str	r1, [r7, #28]
 8004264:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	09db      	lsrs	r3, r3, #7
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b7f      	cmp	r3, #127	; 0x7f
 8004276:	d8f0      	bhi.n	800425a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	61fa      	str	r2, [r7, #28]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	701a      	strb	r2, [r3, #0]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004288:	2208      	movs	r2, #8
 800428a:	68f9      	ldr	r1, [r7, #12]
 800428c:	6938      	ldr	r0, [r7, #16]
 800428e:	f7fe fe4d 	bl	8002f2c <_SendPacket>
  RECORD_END();
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f383 8811 	msr	BASEPRI, r3
}
 8004298:	bf00      	nop
 800429a:	3720      	adds	r7, #32
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20014258 	.word	0x20014258
 80042a4:	20014228 	.word	0x20014228

080042a8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042b0:	f3ef 8311 	mrs	r3, BASEPRI
 80042b4:	f04f 0120 	mov.w	r1, #32
 80042b8:	f381 8811 	msr	BASEPRI, r1
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	4819      	ldr	r0, [pc, #100]	; (8004324 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80042c0:	f7fe fd42 	bl	8002d48 <_PreparePacket>
 80042c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80042ca:	4b17      	ldr	r3, [pc, #92]	; (8004328 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	61bb      	str	r3, [r7, #24]
 80042dc:	e00b      	b.n	80042f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	1c59      	adds	r1, r3, #1
 80042e6:	61f9      	str	r1, [r7, #28]
 80042e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	09db      	lsrs	r3, r3, #7
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b7f      	cmp	r3, #127	; 0x7f
 80042fa:	d8f0      	bhi.n	80042de <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	61fa      	str	r2, [r7, #28]
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800430c:	2204      	movs	r2, #4
 800430e:	68f9      	ldr	r1, [r7, #12]
 8004310:	6938      	ldr	r0, [r7, #16]
 8004312:	f7fe fe0b 	bl	8002f2c <_SendPacket>
  RECORD_END();
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f383 8811 	msr	BASEPRI, r3
}
 800431c:	bf00      	nop
 800431e:	3720      	adds	r7, #32
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20014258 	.word	0x20014258
 8004328:	20014228 	.word	0x20014228

0800432c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004334:	f3ef 8311 	mrs	r3, BASEPRI
 8004338:	f04f 0120 	mov.w	r1, #32
 800433c:	f381 8811 	msr	BASEPRI, r1
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	4819      	ldr	r0, [pc, #100]	; (80043a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004344:	f7fe fd00 	bl	8002d48 <_PreparePacket>
 8004348:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800434e:	4b17      	ldr	r3, [pc, #92]	; (80043ac <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	e00b      	b.n	800437a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	1c59      	adds	r1, r3, #1
 800436a:	61f9      	str	r1, [r7, #28]
 800436c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	09db      	lsrs	r3, r3, #7
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b7f      	cmp	r3, #127	; 0x7f
 800437e:	d8f0      	bhi.n	8004362 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	61fa      	str	r2, [r7, #28]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004390:	2206      	movs	r2, #6
 8004392:	68f9      	ldr	r1, [r7, #12]
 8004394:	6938      	ldr	r0, [r7, #16]
 8004396:	f7fe fdc9 	bl	8002f2c <_SendPacket>
  RECORD_END();
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f383 8811 	msr	BASEPRI, r3
}
 80043a0:	bf00      	nop
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20014258 	.word	0x20014258
 80043ac:	20014228 	.word	0x20014228

080043b0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80043ba:	f3ef 8311 	mrs	r3, BASEPRI
 80043be:	f04f 0120 	mov.w	r1, #32
 80043c2:	f381 8811 	msr	BASEPRI, r1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	4827      	ldr	r0, [pc, #156]	; (8004468 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80043ca:	f7fe fcbd 	bl	8002d48 <_PreparePacket>
 80043ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80043d4:	4b25      	ldr	r3, [pc, #148]	; (800446c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	623b      	str	r3, [r7, #32]
 80043e6:	e00b      	b.n	8004400 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	1c59      	adds	r1, r3, #1
 80043f0:	6279      	str	r1, [r7, #36]	; 0x24
 80043f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	09db      	lsrs	r3, r3, #7
 80043fe:	623b      	str	r3, [r7, #32]
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	2b7f      	cmp	r3, #127	; 0x7f
 8004404:	d8f0      	bhi.n	80043e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	627a      	str	r2, [r7, #36]	; 0x24
 800440c:	6a3a      	ldr	r2, [r7, #32]
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	e00b      	b.n	8004438 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	b2da      	uxtb	r2, r3
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	1c59      	adds	r1, r3, #1
 8004428:	61f9      	str	r1, [r7, #28]
 800442a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	09db      	lsrs	r3, r3, #7
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b7f      	cmp	r3, #127	; 0x7f
 800443c:	d8f0      	bhi.n	8004420 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	61fa      	str	r2, [r7, #28]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800444e:	2207      	movs	r2, #7
 8004450:	68f9      	ldr	r1, [r7, #12]
 8004452:	6938      	ldr	r0, [r7, #16]
 8004454:	f7fe fd6a 	bl	8002f2c <_SendPacket>
  RECORD_END();
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f383 8811 	msr	BASEPRI, r3
}
 800445e:	bf00      	nop
 8004460:	3728      	adds	r7, #40	; 0x28
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20014258 	.word	0x20014258
 800446c:	20014228 	.word	0x20014228

08004470 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004478:	4b04      	ldr	r3, [pc, #16]	; (800448c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	1ad3      	subs	r3, r2, r3
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	20014228 	.word	0x20014228

08004490 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b08c      	sub	sp, #48	; 0x30
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800449a:	4b3b      	ldr	r3, [pc, #236]	; (8004588 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d06d      	beq.n	800457e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80044a2:	4b39      	ldr	r3, [pc, #228]	; (8004588 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80044a8:	2300      	movs	r3, #0
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ac:	e008      	b.n	80044c0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80044ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80044ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044bc:	3301      	adds	r3, #1
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c0:	79fb      	ldrb	r3, [r7, #7]
 80044c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d3f2      	bcc.n	80044ae <SEGGER_SYSVIEW_SendModule+0x1e>
 80044c8:	e000      	b.n	80044cc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80044ca:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80044cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d055      	beq.n	800457e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044d2:	f3ef 8311 	mrs	r3, BASEPRI
 80044d6:	f04f 0120 	mov.w	r1, #32
 80044da:	f381 8811 	msr	BASEPRI, r1
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	482a      	ldr	r0, [pc, #168]	; (800458c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80044e2:	f7fe fc31 	bl	8002d48 <_PreparePacket>
 80044e6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	623b      	str	r3, [r7, #32]
 80044f4:	e00b      	b.n	800450e <SEGGER_SYSVIEW_SendModule+0x7e>
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	1c59      	adds	r1, r3, #1
 80044fe:	6279      	str	r1, [r7, #36]	; 0x24
 8004500:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	09db      	lsrs	r3, r3, #7
 800450c:	623b      	str	r3, [r7, #32]
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	2b7f      	cmp	r3, #127	; 0x7f
 8004512:	d8f0      	bhi.n	80044f6 <SEGGER_SYSVIEW_SendModule+0x66>
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	627a      	str	r2, [r7, #36]	; 0x24
 800451a:	6a3a      	ldr	r2, [r7, #32]
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	701a      	strb	r2, [r3, #0]
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e00b      	b.n	8004548 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	b2da      	uxtb	r2, r3
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	1c59      	adds	r1, r3, #1
 8004538:	61f9      	str	r1, [r7, #28]
 800453a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	09db      	lsrs	r3, r3, #7
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b7f      	cmp	r3, #127	; 0x7f
 800454c:	d8f0      	bhi.n	8004530 <SEGGER_SYSVIEW_SendModule+0xa0>
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	61fa      	str	r2, [r7, #28]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2280      	movs	r2, #128	; 0x80
 8004564:	4619      	mov	r1, r3
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7fe fb9e 	bl	8002ca8 <_EncodeStr>
 800456c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800456e:	2216      	movs	r2, #22
 8004570:	68f9      	ldr	r1, [r7, #12]
 8004572:	6938      	ldr	r0, [r7, #16]
 8004574:	f7fe fcda 	bl	8002f2c <_SendPacket>
      RECORD_END();
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800457e:	bf00      	nop
 8004580:	3730      	adds	r7, #48	; 0x30
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20014250 	.word	0x20014250
 800458c:	20014258 	.word	0x20014258

08004590 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00f      	beq.n	80045be <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f2      	bne.n	80045a4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20014250 	.word	0x20014250

080045cc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80045d2:	f3ef 8311 	mrs	r3, BASEPRI
 80045d6:	f04f 0120 	mov.w	r1, #32
 80045da:	f381 8811 	msr	BASEPRI, r1
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	4817      	ldr	r0, [pc, #92]	; (8004640 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80045e2:	f7fe fbb1 	bl	8002d48 <_PreparePacket>
 80045e6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	4b14      	ldr	r3, [pc, #80]	; (8004644 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	e00b      	b.n	8004610 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	1c59      	adds	r1, r3, #1
 8004600:	6179      	str	r1, [r7, #20]
 8004602:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	09db      	lsrs	r3, r3, #7
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2b7f      	cmp	r3, #127	; 0x7f
 8004614:	d8f0      	bhi.n	80045f8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	617a      	str	r2, [r7, #20]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004626:	221b      	movs	r2, #27
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	68b8      	ldr	r0, [r7, #8]
 800462c:	f7fe fc7e 	bl	8002f2c <_SendPacket>
  RECORD_END();
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f383 8811 	msr	BASEPRI, r3
}
 8004636:	bf00      	nop
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20014258 	.word	0x20014258
 8004644:	20014254 	.word	0x20014254

08004648 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8004648:	b40f      	push	{r0, r1, r2, r3}
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8004650:	f107 0314 	add.w	r3, r7, #20
 8004654:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	461a      	mov	r2, r3
 800465a:	2100      	movs	r1, #0
 800465c:	6938      	ldr	r0, [r7, #16]
 800465e:	f7fe feef 	bl	8003440 <_VPrintTarget>
  va_end(ParamList);
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800466c:	b004      	add	sp, #16
 800466e:	4770      	bx	lr

08004670 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004678:	f3ef 8311 	mrs	r3, BASEPRI
 800467c:	f04f 0120 	mov.w	r1, #32
 8004680:	f381 8811 	msr	BASEPRI, r1
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	4827      	ldr	r0, [pc, #156]	; (8004724 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004688:	f7fe fb5e 	bl	8002d48 <_PreparePacket>
 800468c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800468e:	2280      	movs	r2, #128	; 0x80
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	6938      	ldr	r0, [r7, #16]
 8004694:	f7fe fb08 	bl	8002ca8 <_EncodeStr>
 8004698:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
 800469e:	2301      	movs	r3, #1
 80046a0:	623b      	str	r3, [r7, #32]
 80046a2:	e00b      	b.n	80046bc <SEGGER_SYSVIEW_Warn+0x4c>
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	1c59      	adds	r1, r3, #1
 80046ac:	6279      	str	r1, [r7, #36]	; 0x24
 80046ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	09db      	lsrs	r3, r3, #7
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	2b7f      	cmp	r3, #127	; 0x7f
 80046c0:	d8f0      	bhi.n	80046a4 <SEGGER_SYSVIEW_Warn+0x34>
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	627a      	str	r2, [r7, #36]	; 0x24
 80046c8:	6a3a      	ldr	r2, [r7, #32]
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	2300      	movs	r3, #0
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e00b      	b.n	80046f4 <SEGGER_SYSVIEW_Warn+0x84>
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	1c59      	adds	r1, r3, #1
 80046e4:	61f9      	str	r1, [r7, #28]
 80046e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	09db      	lsrs	r3, r3, #7
 80046f2:	61bb      	str	r3, [r7, #24]
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b7f      	cmp	r3, #127	; 0x7f
 80046f8:	d8f0      	bhi.n	80046dc <SEGGER_SYSVIEW_Warn+0x6c>
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	61fa      	str	r2, [r7, #28]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800470a:	221a      	movs	r2, #26
 800470c:	68f9      	ldr	r1, [r7, #12]
 800470e:	6938      	ldr	r0, [r7, #16]
 8004710:	f7fe fc0c 	bl	8002f2c <_SendPacket>
  RECORD_END();
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f383 8811 	msr	BASEPRI, r3
}
 800471a:	bf00      	nop
 800471c:	3728      	adds	r7, #40	; 0x28
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20014258 	.word	0x20014258

08004728 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800472c:	4b13      	ldr	r3, [pc, #76]	; (800477c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800472e:	7e1b      	ldrb	r3, [r3, #24]
 8004730:	4619      	mov	r1, r3
 8004732:	4a13      	ldr	r2, [pc, #76]	; (8004780 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004734:	460b      	mov	r3, r1
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	440b      	add	r3, r1
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	336c      	adds	r3, #108	; 0x6c
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4b0e      	ldr	r3, [pc, #56]	; (800477c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004744:	7e1b      	ldrb	r3, [r3, #24]
 8004746:	4618      	mov	r0, r3
 8004748:	490d      	ldr	r1, [pc, #52]	; (8004780 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800474a:	4603      	mov	r3, r0
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	4403      	add	r3, r0
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	440b      	add	r3, r1
 8004754:	3370      	adds	r3, #112	; 0x70
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d00b      	beq.n	8004774 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800475c:	4b07      	ldr	r3, [pc, #28]	; (800477c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800475e:	789b      	ldrb	r3, [r3, #2]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d107      	bne.n	8004774 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004766:	2201      	movs	r2, #1
 8004768:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800476a:	f7fe faf9 	bl	8002d60 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800476e:	4b03      	ldr	r3, [pc, #12]	; (800477c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004770:	2200      	movs	r2, #0
 8004772:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8004774:	4b01      	ldr	r3, [pc, #4]	; (800477c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004776:	781b      	ldrb	r3, [r3, #0]
}
 8004778:	4618      	mov	r0, r3
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20014228 	.word	0x20014228
 8004780:	2001433c 	.word	0x2001433c

08004784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800478a:	f000 fc2d 	bl	8004fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800478e:	f000 f897 	bl	80048c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004792:	f000 f8ff 	bl	8004994 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter (for SEGGER)
  DWT_CTRL |= (1 << 0);
 8004796:	4b3b      	ldr	r3, [pc, #236]	; (8004884 <main+0x100>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a3a      	ldr	r2, [pc, #232]	; (8004884 <main+0x100>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	6013      	str	r3, [r2, #0]

  // Config. uart based SEGGER communication
  SEGGER_UART_init(250000);
 80047a2:	4839      	ldr	r0, [pc, #228]	; (8004888 <main+0x104>)
 80047a4:	f7fd fe28 	bl	80023f8 <SEGGER_UART_init>

  // Starting the recording (for SEGGER)
  SEGGER_SYSVIEW_Conf();
 80047a8:	f7fd fb9c 	bl	8001ee4 <SEGGER_SYSVIEW_Conf>

  // Config. LED_green_task
  status = xTaskCreate(&led_green_handler, "LED_green_task", 200, NULL, 4, &ledg_task_handle);
 80047ac:	4b37      	ldr	r3, [pc, #220]	; (800488c <main+0x108>)
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	2304      	movs	r3, #4
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	22c8      	movs	r2, #200	; 0xc8
 80047b8:	4935      	ldr	r1, [pc, #212]	; (8004890 <main+0x10c>)
 80047ba:	4836      	ldr	r0, [pc, #216]	; (8004894 <main+0x110>)
 80047bc:	f7fb ff82 	bl	80006c4 <xTaskCreate>
 80047c0:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d00a      	beq.n	80047de <main+0x5a>
        __asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	613b      	str	r3, [r7, #16]
    }
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <main+0x58>

  // Config. LED_red_task
  status = xTaskCreate(&led_red_handler, "LED_red_task", 200, NULL, 3, &ledr_task_handle);
 80047de:	4b2e      	ldr	r3, [pc, #184]	; (8004898 <main+0x114>)
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	2303      	movs	r3, #3
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	2300      	movs	r3, #0
 80047e8:	22c8      	movs	r2, #200	; 0xc8
 80047ea:	492c      	ldr	r1, [pc, #176]	; (800489c <main+0x118>)
 80047ec:	482c      	ldr	r0, [pc, #176]	; (80048a0 <main+0x11c>)
 80047ee:	f7fb ff69 	bl	80006c4 <xTaskCreate>
 80047f2:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d00a      	beq.n	8004810 <main+0x8c>
        __asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	60fb      	str	r3, [r7, #12]
    }
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <main+0x8a>

  // Config. LED_orange_task
  status = xTaskCreate(&led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 8004810:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <main+0x120>)
 8004812:	9301      	str	r3, [sp, #4]
 8004814:	2302      	movs	r3, #2
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	2300      	movs	r3, #0
 800481a:	22c8      	movs	r2, #200	; 0xc8
 800481c:	4922      	ldr	r1, [pc, #136]	; (80048a8 <main+0x124>)
 800481e:	4823      	ldr	r0, [pc, #140]	; (80048ac <main+0x128>)
 8004820:	f7fb ff50 	bl	80006c4 <xTaskCreate>
 8004824:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d00a      	beq.n	8004842 <main+0xbe>
        __asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	60bb      	str	r3, [r7, #8]
    }
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <main+0xbc>

  // Config. Button
  status = xTaskCreate(&button_handler, "Button_task", 200, NULL, 1, &btn_task_handle);
 8004842:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <main+0x12c>)
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	2301      	movs	r3, #1
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2300      	movs	r3, #0
 800484c:	22c8      	movs	r2, #200	; 0xc8
 800484e:	4919      	ldr	r1, [pc, #100]	; (80048b4 <main+0x130>)
 8004850:	4819      	ldr	r0, [pc, #100]	; (80048b8 <main+0x134>)
 8004852:	f7fb ff37 	bl	80006c4 <xTaskCreate>
 8004856:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);  // Traps the code if the above function returns an unexpected status
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d00a      	beq.n	8004874 <main+0xf0>
        __asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	607b      	str	r3, [r7, #4]
    }
 8004870:	bf00      	nop
 8004872:	e7fe      	b.n	8004872 <main+0xee>

  // Make next task deleted to be LED_green_task
  next_task_handle = ledg_task_handle;
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <main+0x108>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a10      	ldr	r2, [pc, #64]	; (80048bc <main+0x138>)
 800487a:	6013      	str	r3, [r2, #0]

  // Start the freeRTOS scheduler
  vTaskStartScheduler();
 800487c:	f7fc f968 	bl	8000b50 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004880:	e7fe      	b.n	8004880 <main+0xfc>
 8004882:	bf00      	nop
 8004884:	e0001000 	.word	0xe0001000
 8004888:	0003d090 	.word	0x0003d090
 800488c:	200143e8 	.word	0x200143e8
 8004890:	080065fc 	.word	0x080065fc
 8004894:	08004c55 	.word	0x08004c55
 8004898:	200143f4 	.word	0x200143f4
 800489c:	0800660c 	.word	0x0800660c
 80048a0:	08004d35 	.word	0x08004d35
 80048a4:	200143f0 	.word	0x200143f0
 80048a8:	0800661c 	.word	0x0800661c
 80048ac:	08004cc5 	.word	0x08004cc5
 80048b0:	200143ec 	.word	0x200143ec
 80048b4:	0800662c 	.word	0x0800662c
 80048b8:	08004dad 	.word	0x08004dad
 80048bc:	200143e4 	.word	0x200143e4

080048c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b094      	sub	sp, #80	; 0x50
 80048c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048c6:	f107 0320 	add.w	r3, r7, #32
 80048ca:	2230      	movs	r2, #48	; 0x30
 80048cc:	2100      	movs	r1, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 fe16 	bl	8006500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048d4:	f107 030c 	add.w	r3, r7, #12
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048e4:	2300      	movs	r3, #0
 80048e6:	60bb      	str	r3, [r7, #8]
 80048e8:	4b28      	ldr	r3, [pc, #160]	; (800498c <SystemClock_Config+0xcc>)
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	4a27      	ldr	r2, [pc, #156]	; (800498c <SystemClock_Config+0xcc>)
 80048ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f2:	6413      	str	r3, [r2, #64]	; 0x40
 80048f4:	4b25      	ldr	r3, [pc, #148]	; (800498c <SystemClock_Config+0xcc>)
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004900:	2300      	movs	r3, #0
 8004902:	607b      	str	r3, [r7, #4]
 8004904:	4b22      	ldr	r3, [pc, #136]	; (8004990 <SystemClock_Config+0xd0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a21      	ldr	r2, [pc, #132]	; (8004990 <SystemClock_Config+0xd0>)
 800490a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	4b1f      	ldr	r3, [pc, #124]	; (8004990 <SystemClock_Config+0xd0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004918:	607b      	str	r3, [r7, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800491c:	2302      	movs	r3, #2
 800491e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004920:	2301      	movs	r3, #1
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004924:	2310      	movs	r3, #16
 8004926:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004928:	2302      	movs	r3, #2
 800492a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800492c:	2300      	movs	r3, #0
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004930:	2308      	movs	r3, #8
 8004932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004934:	23a8      	movs	r3, #168	; 0xa8
 8004936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004938:	2302      	movs	r3, #2
 800493a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800493c:	2307      	movs	r3, #7
 800493e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004940:	f107 0320 	add.w	r3, r7, #32
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fe5b 	bl	8005600 <HAL_RCC_OscConfig>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004950:	f000 fa66 	bl	8004e20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004954:	230f      	movs	r3, #15
 8004956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004958:	2302      	movs	r3, #2
 800495a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004960:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800496a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800496c:	f107 030c 	add.w	r3, r7, #12
 8004970:	2105      	movs	r1, #5
 8004972:	4618      	mov	r0, r3
 8004974:	f001 f8bc 	bl	8005af0 <HAL_RCC_ClockConfig>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800497e:	f000 fa4f 	bl	8004e20 <Error_Handler>
  }
}
 8004982:	bf00      	nop
 8004984:	3750      	adds	r7, #80	; 0x50
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800
 8004990:	40007000 	.word	0x40007000

08004994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08c      	sub	sp, #48	; 0x30
 8004998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800499a:	f107 031c 	add.w	r3, r7, #28
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	605a      	str	r2, [r3, #4]
 80049a4:	609a      	str	r2, [r3, #8]
 80049a6:	60da      	str	r2, [r3, #12]
 80049a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	4ba1      	ldr	r3, [pc, #644]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	4aa0      	ldr	r2, [pc, #640]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 80049b4:	f043 0310 	orr.w	r3, r3, #16
 80049b8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ba:	4b9e      	ldr	r3, [pc, #632]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	4b9a      	ldr	r3, [pc, #616]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	4a99      	ldr	r2, [pc, #612]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 80049d0:	f043 0304 	orr.w	r3, r3, #4
 80049d4:	6313      	str	r3, [r2, #48]	; 0x30
 80049d6:	4b97      	ldr	r3, [pc, #604]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	4b93      	ldr	r3, [pc, #588]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	4a92      	ldr	r2, [pc, #584]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 80049ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f0:	6313      	str	r3, [r2, #48]	; 0x30
 80049f2:	4b90      	ldr	r3, [pc, #576]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	4b8c      	ldr	r3, [pc, #560]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	4a8b      	ldr	r2, [pc, #556]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a0e:	4b89      	ldr	r3, [pc, #548]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	4b85      	ldr	r3, [pc, #532]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	4a84      	ldr	r2, [pc, #528]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 8004a24:	f043 0302 	orr.w	r3, r3, #2
 8004a28:	6313      	str	r3, [r2, #48]	; 0x30
 8004a2a:	4b82      	ldr	r3, [pc, #520]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	60bb      	str	r3, [r7, #8]
 8004a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a36:	2300      	movs	r3, #0
 8004a38:	607b      	str	r3, [r7, #4]
 8004a3a:	4b7e      	ldr	r3, [pc, #504]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	4a7d      	ldr	r2, [pc, #500]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 8004a40:	f043 0308 	orr.w	r3, r3, #8
 8004a44:	6313      	str	r3, [r2, #48]	; 0x30
 8004a46:	4b7b      	ldr	r3, [pc, #492]	; (8004c34 <MX_GPIO_Init+0x2a0>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	607b      	str	r3, [r7, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004a52:	2200      	movs	r2, #0
 8004a54:	2108      	movs	r1, #8
 8004a56:	4878      	ldr	r0, [pc, #480]	; (8004c38 <MX_GPIO_Init+0x2a4>)
 8004a58:	f000 fd9e 	bl	8005598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	2101      	movs	r1, #1
 8004a60:	4876      	ldr	r0, [pc, #472]	; (8004c3c <MX_GPIO_Init+0x2a8>)
 8004a62:	f000 fd99 	bl	8005598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004a66:	2200      	movs	r2, #0
 8004a68:	f24f 0110 	movw	r1, #61456	; 0xf010
 8004a6c:	4874      	ldr	r0, [pc, #464]	; (8004c40 <MX_GPIO_Init+0x2ac>)
 8004a6e:	f000 fd93 	bl	8005598 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004a72:	2308      	movs	r3, #8
 8004a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a76:	2301      	movs	r3, #1
 8004a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004a82:	f107 031c 	add.w	r3, r7, #28
 8004a86:	4619      	mov	r1, r3
 8004a88:	486b      	ldr	r0, [pc, #428]	; (8004c38 <MX_GPIO_Init+0x2a4>)
 8004a8a:	f000 fbd1 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a92:	2301      	movs	r3, #1
 8004a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004a9e:	f107 031c 	add.w	r3, r7, #28
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4865      	ldr	r0, [pc, #404]	; (8004c3c <MX_GPIO_Init+0x2a8>)
 8004aa6:	f000 fbc3 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8004aaa:	2308      	movs	r3, #8
 8004aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004aba:	2305      	movs	r3, #5
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004abe:	f107 031c 	add.w	r3, r7, #28
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	485d      	ldr	r0, [pc, #372]	; (8004c3c <MX_GPIO_Init+0x2a8>)
 8004ac6:	f000 fbb3 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004aca:	2301      	movs	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ace:	4b5d      	ldr	r3, [pc, #372]	; (8004c44 <MX_GPIO_Init+0x2b0>)
 8004ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004ad6:	f107 031c 	add.w	r3, r7, #28
 8004ada:	4619      	mov	r1, r3
 8004adc:	485a      	ldr	r0, [pc, #360]	; (8004c48 <MX_GPIO_Init+0x2b4>)
 8004ade:	f000 fba7 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8004ae2:	2310      	movs	r3, #16
 8004ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aee:	2300      	movs	r3, #0
 8004af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004af2:	2306      	movs	r3, #6
 8004af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004af6:	f107 031c 	add.w	r3, r7, #28
 8004afa:	4619      	mov	r1, r3
 8004afc:	4852      	ldr	r0, [pc, #328]	; (8004c48 <MX_GPIO_Init+0x2b4>)
 8004afe:	f000 fb97 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004b02:	23e0      	movs	r3, #224	; 0xe0
 8004b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b06:	2302      	movs	r3, #2
 8004b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004b12:	2305      	movs	r3, #5
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b16:	f107 031c 	add.w	r3, r7, #28
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	484a      	ldr	r0, [pc, #296]	; (8004c48 <MX_GPIO_Init+0x2b4>)
 8004b1e:	f000 fb87 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004b22:	2304      	movs	r3, #4
 8004b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b26:	2300      	movs	r3, #0
 8004b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004b2e:	f107 031c 	add.w	r3, r7, #28
 8004b32:	4619      	mov	r1, r3
 8004b34:	4845      	ldr	r0, [pc, #276]	; (8004c4c <MX_GPIO_Init+0x2b8>)
 8004b36:	f000 fb7b 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8004b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b40:	2302      	movs	r3, #2
 8004b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b4c:	2305      	movs	r3, #5
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8004b50:	f107 031c 	add.w	r3, r7, #28
 8004b54:	4619      	mov	r1, r3
 8004b56:	483d      	ldr	r0, [pc, #244]	; (8004c4c <MX_GPIO_Init+0x2b8>)
 8004b58:	f000 fb6a 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004b5c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8004b60:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b62:	2301      	movs	r3, #1
 8004b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b6e:	f107 031c 	add.w	r3, r7, #28
 8004b72:	4619      	mov	r1, r3
 8004b74:	4832      	ldr	r0, [pc, #200]	; (8004c40 <MX_GPIO_Init+0x2ac>)
 8004b76:	f000 fb5b 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004b7a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8004b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b80:	2302      	movs	r3, #2
 8004b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004b8c:	2306      	movs	r3, #6
 8004b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b90:	f107 031c 	add.w	r3, r7, #28
 8004b94:	4619      	mov	r1, r3
 8004b96:	4829      	ldr	r0, [pc, #164]	; (8004c3c <MX_GPIO_Init+0x2a8>)
 8004b98:	f000 fb4a 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8004b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004baa:	f107 031c 	add.w	r3, r7, #28
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4825      	ldr	r0, [pc, #148]	; (8004c48 <MX_GPIO_Init+0x2b4>)
 8004bb2:	f000 fb3d 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004bb6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004bc8:	230a      	movs	r3, #10
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bcc:	f107 031c 	add.w	r3, r7, #28
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	481d      	ldr	r0, [pc, #116]	; (8004c48 <MX_GPIO_Init+0x2b4>)
 8004bd4:	f000 fb2c 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004bd8:	2320      	movs	r3, #32
 8004bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004be4:	f107 031c 	add.w	r3, r7, #28
 8004be8:	4619      	mov	r1, r3
 8004bea:	4815      	ldr	r0, [pc, #84]	; (8004c40 <MX_GPIO_Init+0x2ac>)
 8004bec:	f000 fb20 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004bf0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bf6:	2312      	movs	r3, #18
 8004bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c02:	2304      	movs	r3, #4
 8004c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c06:	f107 031c 	add.w	r3, r7, #28
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	480f      	ldr	r0, [pc, #60]	; (8004c4c <MX_GPIO_Init+0x2b8>)
 8004c0e:	f000 fb0f 	bl	8005230 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004c12:	2302      	movs	r3, #2
 8004c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004c16:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <MX_GPIO_Init+0x2bc>)
 8004c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004c1e:	f107 031c 	add.w	r3, r7, #28
 8004c22:	4619      	mov	r1, r3
 8004c24:	4804      	ldr	r0, [pc, #16]	; (8004c38 <MX_GPIO_Init+0x2a4>)
 8004c26:	f000 fb03 	bl	8005230 <HAL_GPIO_Init>

}
 8004c2a:	bf00      	nop
 8004c2c:	3730      	adds	r7, #48	; 0x30
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40023800 	.word	0x40023800
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	40020800 	.word	0x40020800
 8004c40:	40020c00 	.word	0x40020c00
 8004c44:	10110000 	.word	0x10110000
 8004c48:	40020000 	.word	0x40020000
 8004c4c:	40020400 	.word	0x40020400
 8004c50:	10120000 	.word	0x10120000

08004c54 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters){
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8004c5c:	4814      	ldr	r0, [pc, #80]	; (8004cb0 <led_green_handler+0x5c>)
 8004c5e:	f7ff fcf3 	bl	8004648 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8004c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c66:	4813      	ldr	r0, [pc, #76]	; (8004cb4 <led_green_handler+0x60>)
 8004c68:	f000 fcaf 	bl	80055ca <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8004c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	2300      	movs	r3, #0
 8004c74:	2200      	movs	r2, #0
 8004c76:	2100      	movs	r1, #0
 8004c78:	2000      	movs	r0, #0
 8004c7a:	f7fc fa5d 	bl	8001138 <xTaskGenericNotifyWait>
 8004c7e:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d1ea      	bne.n	8004c5c <led_green_handler+0x8>
			// Task received notification
			vTaskSuspendAll();  // Suspend the scheduler to modify the shared resource global variable next_task_handle
 8004c86:	f7fb ffbf 	bl	8000c08 <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <led_green_handler+0x64>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a0b      	ldr	r2, [pc, #44]	; (8004cbc <led_green_handler+0x68>)
 8004c90:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();  // Resume the scheduler
 8004c92:	f7fb ffc7 	bl	8000c24 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_RESET);
 8004c96:	2200      	movs	r2, #0
 8004c98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c9c:	4805      	ldr	r0, [pc, #20]	; (8004cb4 <led_green_handler+0x60>)
 8004c9e:	f000 fc7b 	bl	8005598 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting green LED task");
 8004ca2:	4807      	ldr	r0, [pc, #28]	; (8004cc0 <led_green_handler+0x6c>)
 8004ca4:	f7ff fcd0 	bl	8004648 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);  // NULL - Self delete
 8004ca8:	2000      	movs	r0, #0
 8004caa:	f7fb fe6f 	bl	800098c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8004cae:	e7d5      	b.n	8004c5c <led_green_handler+0x8>
 8004cb0:	08006638 	.word	0x08006638
 8004cb4:	40020c00 	.word	0x40020c00
 8004cb8:	200143f0 	.word	0x200143f0
 8004cbc:	200143e4 	.word	0x200143e4
 8004cc0:	0800664c 	.word	0x0800664c

08004cc4 <led_orange_handler>:

	}

}

static void led_orange_handler(void* parameters){
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8004ccc:	4814      	ldr	r0, [pc, #80]	; (8004d20 <led_orange_handler+0x5c>)
 8004cce:	f7ff fcbb 	bl	8004648 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8004cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cd6:	4813      	ldr	r0, [pc, #76]	; (8004d24 <led_orange_handler+0x60>)
 8004cd8:	f000 fc77 	bl	80055ca <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8004cdc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f7fc fa25 	bl	8001138 <xTaskGenericNotifyWait>
 8004cee:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d1ea      	bne.n	8004ccc <led_orange_handler+0x8>
			// Task received notification
			vTaskSuspendAll();
 8004cf6:	f7fb ff87 	bl	8000c08 <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <led_orange_handler+0x64>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a0b      	ldr	r2, [pc, #44]	; (8004d2c <led_orange_handler+0x68>)
 8004d00:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8004d02:	f7fb ff8f 	bl	8000c24 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_RESET);
 8004d06:	2200      	movs	r2, #0
 8004d08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d0c:	4805      	ldr	r0, [pc, #20]	; (8004d24 <led_orange_handler+0x60>)
 8004d0e:	f000 fc43 	bl	8005598 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting orange LED task");
 8004d12:	4807      	ldr	r0, [pc, #28]	; (8004d30 <led_orange_handler+0x6c>)
 8004d14:	f7ff fc98 	bl	8004648 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);  // NULL - Self delete
 8004d18:	2000      	movs	r0, #0
 8004d1a:	f7fb fe37 	bl	800098c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8004d1e:	e7d5      	b.n	8004ccc <led_orange_handler+0x8>
 8004d20:	08006664 	.word	0x08006664
 8004d24:	40020c00 	.word	0x40020c00
 8004d28:	200143f4 	.word	0x200143f4
 8004d2c:	200143e4 	.word	0x200143e4
 8004d30:	08006678 	.word	0x08006678

08004d34 <led_red_handler>:
		}
	}

}

static void led_red_handler(void* parameters){
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8004d3c:	4816      	ldr	r0, [pc, #88]	; (8004d98 <led_red_handler+0x64>)
 8004d3e:	f7ff fc83 	bl	8004648 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8004d42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d46:	4815      	ldr	r0, [pc, #84]	; (8004d9c <led_red_handler+0x68>)
 8004d48:	f000 fc3f 	bl	80055ca <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8004d4c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	2300      	movs	r3, #0
 8004d54:	2200      	movs	r2, #0
 8004d56:	2100      	movs	r1, #0
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f7fc f9ed 	bl	8001138 <xTaskGenericNotifyWait>
 8004d5e:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d1ea      	bne.n	8004d3c <led_red_handler+0x8>
			// Task received notification
			vTaskSuspendAll();
 8004d66:	f7fb ff4f 	bl	8000c08 <vTaskSuspendAll>
			next_task_handle = NULL;
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <led_red_handler+0x6c>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8004d70:	f7fb ff58 	bl	8000c24 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_RESET);
 8004d74:	2200      	movs	r2, #0
 8004d76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d7a:	4808      	ldr	r0, [pc, #32]	; (8004d9c <led_red_handler+0x68>)
 8004d7c:	f000 fc0c 	bl	8005598 <HAL_GPIO_WritePin>
			vTaskDelete(btn_task_handle);
 8004d80:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <led_red_handler+0x70>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fb fe01 	bl	800098c <vTaskDelete>
			SEGGER_SYSVIEW_PrintfTarget("Deleting red LED task");
 8004d8a:	4807      	ldr	r0, [pc, #28]	; (8004da8 <led_red_handler+0x74>)
 8004d8c:	f7ff fc5c 	bl	8004648 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);  // NULL - Self delete
 8004d90:	2000      	movs	r0, #0
 8004d92:	f7fb fdfb 	bl	800098c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8004d96:	e7d1      	b.n	8004d3c <led_red_handler+0x8>
 8004d98:	08006694 	.word	0x08006694
 8004d9c:	40020c00 	.word	0x40020c00
 8004da0:	200143e4 	.word	0x200143e4
 8004da4:	200143ec 	.word	0x200143ec
 8004da8:	080066a8 	.word	0x080066a8

08004dac <button_handler>:
		}
	}

}

static void button_handler(void* parameters){
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	6078      	str	r0, [r7, #4]

	while(1){

		// Wait until the button is pressed
		while(BUTTON_STATE() == BUTTON_NOT_PRESSED);
 8004db4:	bf00      	nop
 8004db6:	2101      	movs	r1, #1
 8004db8:	480e      	ldr	r0, [pc, #56]	; (8004df4 <button_handler+0x48>)
 8004dba:	f000 fbd5 	bl	8005568 <HAL_GPIO_ReadPin>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f8      	beq.n	8004db6 <button_handler+0xa>

		// After button is pressed, notify next task to delete itself
		xTaskNotify(next_task_handle, 0, eNoAction);
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <button_handler+0x4c>)
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	f7fc fa39 	bl	8001248 <xTaskGenericNotify>

		// Debounce rising edge
		vTaskDelay(pdMS_TO_TICKS(10));
 8004dd6:	200a      	movs	r0, #10
 8004dd8:	f7fb fe82 	bl	8000ae0 <vTaskDelay>

		// Wait until the button is released
		while(BUTTON_STATE() == BUTTON_PRESSED);
 8004ddc:	bf00      	nop
 8004dde:	2101      	movs	r1, #1
 8004de0:	4804      	ldr	r0, [pc, #16]	; (8004df4 <button_handler+0x48>)
 8004de2:	f000 fbc1 	bl	8005568 <HAL_GPIO_ReadPin>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d0f8      	beq.n	8004dde <button_handler+0x32>

		// Debounce falling edge
		vTaskDelay(pdMS_TO_TICKS(10));
 8004dec:	200a      	movs	r0, #10
 8004dee:	f7fb fe77 	bl	8000ae0 <vTaskDelay>
		while(BUTTON_STATE() == BUTTON_NOT_PRESSED);
 8004df2:	e7df      	b.n	8004db4 <button_handler+0x8>
 8004df4:	40020000 	.word	0x40020000
 8004df8:	200143e4 	.word	0x200143e4

08004dfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a04      	ldr	r2, [pc, #16]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004e0e:	f000 f90d 	bl	800502c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004e12:	bf00      	nop
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40001000 	.word	0x40001000

08004e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e24:	b672      	cpsid	i
}
 8004e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e28:	e7fe      	b.n	8004e28 <Error_Handler+0x8>
	...

08004e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	607b      	str	r3, [r7, #4]
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <HAL_MspInit+0x4c>)
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	4a0f      	ldr	r2, [pc, #60]	; (8004e78 <HAL_MspInit+0x4c>)
 8004e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e40:	6453      	str	r3, [r2, #68]	; 0x44
 8004e42:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <HAL_MspInit+0x4c>)
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e4a:	607b      	str	r3, [r7, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	603b      	str	r3, [r7, #0]
 8004e52:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <HAL_MspInit+0x4c>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <HAL_MspInit+0x4c>)
 8004e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_MspInit+0x4c>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8004e6a:	f7fc fc85 	bl	8001778 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40023800 	.word	0x40023800

08004e7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08c      	sub	sp, #48	; 0x30
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	2036      	movs	r0, #54	; 0x36
 8004e92:	f000 f9a3 	bl	80051dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004e96:	2036      	movs	r0, #54	; 0x36
 8004e98:	f000 f9bc 	bl	8005214 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	4b1f      	ldr	r3, [pc, #124]	; (8004f20 <HAL_InitTick+0xa4>)
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	4a1e      	ldr	r2, [pc, #120]	; (8004f20 <HAL_InitTick+0xa4>)
 8004ea6:	f043 0310 	orr.w	r3, r3, #16
 8004eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8004eac:	4b1c      	ldr	r3, [pc, #112]	; (8004f20 <HAL_InitTick+0xa4>)
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004eb8:	f107 0210 	add.w	r2, r7, #16
 8004ebc:	f107 0314 	add.w	r3, r7, #20
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fffc 	bl	8005ec0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004ec8:	f000 ffe6 	bl	8005e98 <HAL_RCC_GetPCLK1Freq>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed4:	4a13      	ldr	r2, [pc, #76]	; (8004f24 <HAL_InitTick+0xa8>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	0c9b      	lsrs	r3, r3, #18
 8004edc:	3b01      	subs	r3, #1
 8004ede:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_InitTick+0xac>)
 8004ee2:	4a12      	ldr	r2, [pc, #72]	; (8004f2c <HAL_InitTick+0xb0>)
 8004ee4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <HAL_InitTick+0xac>)
 8004ee8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004eec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004eee:	4a0e      	ldr	r2, [pc, #56]	; (8004f28 <HAL_InitTick+0xac>)
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <HAL_InitTick+0xac>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004efa:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_InitTick+0xac>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004f00:	4809      	ldr	r0, [pc, #36]	; (8004f28 <HAL_InitTick+0xac>)
 8004f02:	f001 f80f 	bl	8005f24 <HAL_TIM_Base_Init>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004f0c:	4806      	ldr	r0, [pc, #24]	; (8004f28 <HAL_InitTick+0xac>)
 8004f0e:	f001 f863 	bl	8005fd8 <HAL_TIM_Base_Start_IT>
 8004f12:	4603      	mov	r3, r0
 8004f14:	e000      	b.n	8004f18 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3730      	adds	r7, #48	; 0x30
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40023800 	.word	0x40023800
 8004f24:	431bde83 	.word	0x431bde83
 8004f28:	200143f8 	.word	0x200143f8
 8004f2c:	40001000 	.word	0x40001000

08004f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f34:	e7fe      	b.n	8004f34 <NMI_Handler+0x4>

08004f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f36:	b480      	push	{r7}
 8004f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f3a:	e7fe      	b.n	8004f3a <HardFault_Handler+0x4>

08004f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f40:	e7fe      	b.n	8004f40 <MemManage_Handler+0x4>

08004f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f42:	b480      	push	{r7}
 8004f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f46:	e7fe      	b.n	8004f46 <BusFault_Handler+0x4>

08004f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f4c:	e7fe      	b.n	8004f4c <UsageFault_Handler+0x4>

08004f4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f52:	bf00      	nop
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004f60:	4802      	ldr	r0, [pc, #8]	; (8004f6c <TIM6_DAC_IRQHandler+0x10>)
 8004f62:	f001 f8a9 	bl	80060b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004f66:	bf00      	nop
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200143f8 	.word	0x200143f8

08004f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f74:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <SystemInit+0x20>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	4a05      	ldr	r2, [pc, #20]	; (8004f90 <SystemInit+0x20>)
 8004f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f84:	bf00      	nop
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	e000ed00 	.word	0xe000ed00

08004f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f98:	480d      	ldr	r0, [pc, #52]	; (8004fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f9a:	490e      	ldr	r1, [pc, #56]	; (8004fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f9c:	4a0e      	ldr	r2, [pc, #56]	; (8004fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fa0:	e002      	b.n	8004fa8 <LoopCopyDataInit>

08004fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fa6:	3304      	adds	r3, #4

08004fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fac:	d3f9      	bcc.n	8004fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fae:	4a0b      	ldr	r2, [pc, #44]	; (8004fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004fb0:	4c0b      	ldr	r4, [pc, #44]	; (8004fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fb4:	e001      	b.n	8004fba <LoopFillZerobss>

08004fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fb8:	3204      	adds	r2, #4

08004fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fbc:	d3fb      	bcc.n	8004fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004fbe:	f7ff ffd7 	bl	8004f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fc2:	f001 fa5d 	bl	8006480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fc6:	f7ff fbdd 	bl	8004784 <main>
  bx  lr    
 8004fca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fd4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8004fd8:	08006710 	.word	0x08006710
  ldr r2, =_sbss
 8004fdc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8004fe0:	20014444 	.word	0x20014444

08004fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fe4:	e7fe      	b.n	8004fe4 <ADC_IRQHandler>
	...

08004fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fec:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <HAL_Init+0x40>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0d      	ldr	r2, [pc, #52]	; (8005028 <HAL_Init+0x40>)
 8004ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_Init+0x40>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0a      	ldr	r2, [pc, #40]	; (8005028 <HAL_Init+0x40>)
 8004ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005004:	4b08      	ldr	r3, [pc, #32]	; (8005028 <HAL_Init+0x40>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a07      	ldr	r2, [pc, #28]	; (8005028 <HAL_Init+0x40>)
 800500a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005010:	2003      	movs	r0, #3
 8005012:	f000 f8d8 	bl	80051c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005016:	2000      	movs	r0, #0
 8005018:	f7ff ff30 	bl	8004e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800501c:	f7ff ff06 	bl	8004e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40023c00 	.word	0x40023c00

0800502c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005030:	4b06      	ldr	r3, [pc, #24]	; (800504c <HAL_IncTick+0x20>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <HAL_IncTick+0x24>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4413      	add	r3, r2
 800503c:	4a04      	ldr	r2, [pc, #16]	; (8005050 <HAL_IncTick+0x24>)
 800503e:	6013      	str	r3, [r2, #0]
}
 8005040:	bf00      	nop
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	20000018 	.word	0x20000018
 8005050:	20014440 	.word	0x20014440

08005054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  return uwTick;
 8005058:	4b03      	ldr	r3, [pc, #12]	; (8005068 <HAL_GetTick+0x14>)
 800505a:	681b      	ldr	r3, [r3, #0]
}
 800505c:	4618      	mov	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	20014440 	.word	0x20014440

0800506c <__NVIC_SetPriorityGrouping>:
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800507c:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <__NVIC_SetPriorityGrouping+0x44>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005088:	4013      	ands	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800509c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800509e:	4a04      	ldr	r2, [pc, #16]	; (80050b0 <__NVIC_SetPriorityGrouping+0x44>)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	60d3      	str	r3, [r2, #12]
}
 80050a4:	bf00      	nop
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	e000ed00 	.word	0xe000ed00

080050b4 <__NVIC_GetPriorityGrouping>:
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050b8:	4b04      	ldr	r3, [pc, #16]	; (80050cc <__NVIC_GetPriorityGrouping+0x18>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	0a1b      	lsrs	r3, r3, #8
 80050be:	f003 0307 	and.w	r3, r3, #7
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	e000ed00 	.word	0xe000ed00

080050d0 <__NVIC_EnableIRQ>:
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	db0b      	blt.n	80050fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	f003 021f 	and.w	r2, r3, #31
 80050e8:	4907      	ldr	r1, [pc, #28]	; (8005108 <__NVIC_EnableIRQ+0x38>)
 80050ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	2001      	movs	r0, #1
 80050f2:	fa00 f202 	lsl.w	r2, r0, r2
 80050f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	e000e100 	.word	0xe000e100

0800510c <__NVIC_SetPriority>:
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	6039      	str	r1, [r7, #0]
 8005116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511c:	2b00      	cmp	r3, #0
 800511e:	db0a      	blt.n	8005136 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	b2da      	uxtb	r2, r3
 8005124:	490c      	ldr	r1, [pc, #48]	; (8005158 <__NVIC_SetPriority+0x4c>)
 8005126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512a:	0112      	lsls	r2, r2, #4
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	440b      	add	r3, r1
 8005130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005134:	e00a      	b.n	800514c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	b2da      	uxtb	r2, r3
 800513a:	4908      	ldr	r1, [pc, #32]	; (800515c <__NVIC_SetPriority+0x50>)
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	3b04      	subs	r3, #4
 8005144:	0112      	lsls	r2, r2, #4
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	440b      	add	r3, r1
 800514a:	761a      	strb	r2, [r3, #24]
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000e100 	.word	0xe000e100
 800515c:	e000ed00 	.word	0xe000ed00

08005160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005160:	b480      	push	{r7}
 8005162:	b089      	sub	sp, #36	; 0x24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f1c3 0307 	rsb	r3, r3, #7
 800517a:	2b04      	cmp	r3, #4
 800517c:	bf28      	it	cs
 800517e:	2304      	movcs	r3, #4
 8005180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	3304      	adds	r3, #4
 8005186:	2b06      	cmp	r3, #6
 8005188:	d902      	bls.n	8005190 <NVIC_EncodePriority+0x30>
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	3b03      	subs	r3, #3
 800518e:	e000      	b.n	8005192 <NVIC_EncodePriority+0x32>
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43da      	mvns	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	401a      	ands	r2, r3
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	fa01 f303 	lsl.w	r3, r1, r3
 80051b2:	43d9      	mvns	r1, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b8:	4313      	orrs	r3, r2
         );
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3724      	adds	r7, #36	; 0x24
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff ff4c 	bl	800506c <__NVIC_SetPriorityGrouping>
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051ee:	f7ff ff61 	bl	80050b4 <__NVIC_GetPriorityGrouping>
 80051f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	6978      	ldr	r0, [r7, #20]
 80051fa:	f7ff ffb1 	bl	8005160 <NVIC_EncodePriority>
 80051fe:	4602      	mov	r2, r0
 8005200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005204:	4611      	mov	r1, r2
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff ff80 	bl	800510c <__NVIC_SetPriority>
}
 800520c:	bf00      	nop
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800521e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff ff54 	bl	80050d0 <__NVIC_EnableIRQ>
}
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005230:	b480      	push	{r7}
 8005232:	b089      	sub	sp, #36	; 0x24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005242:	2300      	movs	r3, #0
 8005244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005246:	2300      	movs	r3, #0
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	e16b      	b.n	8005524 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800524c:	2201      	movs	r2, #1
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4013      	ands	r3, r2
 800525e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	429a      	cmp	r2, r3
 8005266:	f040 815a 	bne.w	800551e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	2b01      	cmp	r3, #1
 8005274:	d005      	beq.n	8005282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800527e:	2b02      	cmp	r3, #2
 8005280:	d130      	bne.n	80052e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	2203      	movs	r2, #3
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	43db      	mvns	r3, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4013      	ands	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052b8:	2201      	movs	r2, #1
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	43db      	mvns	r3, r3
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	4013      	ands	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	f003 0201 	and.w	r2, r3, #1
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4313      	orrs	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d017      	beq.n	8005320 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	2203      	movs	r2, #3
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	43db      	mvns	r3, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4013      	ands	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4313      	orrs	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d123      	bne.n	8005374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	08da      	lsrs	r2, r3, #3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3208      	adds	r2, #8
 8005334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	220f      	movs	r2, #15
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	43db      	mvns	r3, r3
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	4013      	ands	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	4313      	orrs	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	08da      	lsrs	r2, r3, #3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3208      	adds	r2, #8
 800536e:	69b9      	ldr	r1, [r7, #24]
 8005370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	2203      	movs	r2, #3
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	43db      	mvns	r3, r3
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	4013      	ands	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f003 0203 	and.w	r2, r3, #3
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80b4 	beq.w	800551e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	4b60      	ldr	r3, [pc, #384]	; (800553c <HAL_GPIO_Init+0x30c>)
 80053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053be:	4a5f      	ldr	r2, [pc, #380]	; (800553c <HAL_GPIO_Init+0x30c>)
 80053c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053c4:	6453      	str	r3, [r2, #68]	; 0x44
 80053c6:	4b5d      	ldr	r3, [pc, #372]	; (800553c <HAL_GPIO_Init+0x30c>)
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053d2:	4a5b      	ldr	r2, [pc, #364]	; (8005540 <HAL_GPIO_Init+0x310>)
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	089b      	lsrs	r3, r3, #2
 80053d8:	3302      	adds	r3, #2
 80053da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	220f      	movs	r2, #15
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	43db      	mvns	r3, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4013      	ands	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a52      	ldr	r2, [pc, #328]	; (8005544 <HAL_GPIO_Init+0x314>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d02b      	beq.n	8005456 <HAL_GPIO_Init+0x226>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a51      	ldr	r2, [pc, #324]	; (8005548 <HAL_GPIO_Init+0x318>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d025      	beq.n	8005452 <HAL_GPIO_Init+0x222>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a50      	ldr	r2, [pc, #320]	; (800554c <HAL_GPIO_Init+0x31c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01f      	beq.n	800544e <HAL_GPIO_Init+0x21e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a4f      	ldr	r2, [pc, #316]	; (8005550 <HAL_GPIO_Init+0x320>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d019      	beq.n	800544a <HAL_GPIO_Init+0x21a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a4e      	ldr	r2, [pc, #312]	; (8005554 <HAL_GPIO_Init+0x324>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <HAL_GPIO_Init+0x216>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a4d      	ldr	r2, [pc, #308]	; (8005558 <HAL_GPIO_Init+0x328>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00d      	beq.n	8005442 <HAL_GPIO_Init+0x212>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a4c      	ldr	r2, [pc, #304]	; (800555c <HAL_GPIO_Init+0x32c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d007      	beq.n	800543e <HAL_GPIO_Init+0x20e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a4b      	ldr	r2, [pc, #300]	; (8005560 <HAL_GPIO_Init+0x330>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d101      	bne.n	800543a <HAL_GPIO_Init+0x20a>
 8005436:	2307      	movs	r3, #7
 8005438:	e00e      	b.n	8005458 <HAL_GPIO_Init+0x228>
 800543a:	2308      	movs	r3, #8
 800543c:	e00c      	b.n	8005458 <HAL_GPIO_Init+0x228>
 800543e:	2306      	movs	r3, #6
 8005440:	e00a      	b.n	8005458 <HAL_GPIO_Init+0x228>
 8005442:	2305      	movs	r3, #5
 8005444:	e008      	b.n	8005458 <HAL_GPIO_Init+0x228>
 8005446:	2304      	movs	r3, #4
 8005448:	e006      	b.n	8005458 <HAL_GPIO_Init+0x228>
 800544a:	2303      	movs	r3, #3
 800544c:	e004      	b.n	8005458 <HAL_GPIO_Init+0x228>
 800544e:	2302      	movs	r3, #2
 8005450:	e002      	b.n	8005458 <HAL_GPIO_Init+0x228>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <HAL_GPIO_Init+0x228>
 8005456:	2300      	movs	r3, #0
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	f002 0203 	and.w	r2, r2, #3
 800545e:	0092      	lsls	r2, r2, #2
 8005460:	4093      	lsls	r3, r2
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4313      	orrs	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005468:	4935      	ldr	r1, [pc, #212]	; (8005540 <HAL_GPIO_Init+0x310>)
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	089b      	lsrs	r3, r3, #2
 800546e:	3302      	adds	r3, #2
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005476:	4b3b      	ldr	r3, [pc, #236]	; (8005564 <HAL_GPIO_Init+0x334>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	43db      	mvns	r3, r3
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	4013      	ands	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800549a:	4a32      	ldr	r2, [pc, #200]	; (8005564 <HAL_GPIO_Init+0x334>)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80054a0:	4b30      	ldr	r3, [pc, #192]	; (8005564 <HAL_GPIO_Init+0x334>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	43db      	mvns	r3, r3
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	4013      	ands	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054c4:	4a27      	ldr	r2, [pc, #156]	; (8005564 <HAL_GPIO_Init+0x334>)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054ca:	4b26      	ldr	r3, [pc, #152]	; (8005564 <HAL_GPIO_Init+0x334>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	43db      	mvns	r3, r3
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	4013      	ands	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054ee:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <HAL_GPIO_Init+0x334>)
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054f4:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <HAL_GPIO_Init+0x334>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	43db      	mvns	r3, r3
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	4013      	ands	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005518:	4a12      	ldr	r2, [pc, #72]	; (8005564 <HAL_GPIO_Init+0x334>)
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	3301      	adds	r3, #1
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2b0f      	cmp	r3, #15
 8005528:	f67f ae90 	bls.w	800524c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	3724      	adds	r7, #36	; 0x24
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40023800 	.word	0x40023800
 8005540:	40013800 	.word	0x40013800
 8005544:	40020000 	.word	0x40020000
 8005548:	40020400 	.word	0x40020400
 800554c:	40020800 	.word	0x40020800
 8005550:	40020c00 	.word	0x40020c00
 8005554:	40021000 	.word	0x40021000
 8005558:	40021400 	.word	0x40021400
 800555c:	40021800 	.word	0x40021800
 8005560:	40021c00 	.word	0x40021c00
 8005564:	40013c00 	.word	0x40013c00

08005568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	887b      	ldrh	r3, [r7, #2]
 800557a:	4013      	ands	r3, r2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
 8005584:	e001      	b.n	800558a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005586:	2300      	movs	r3, #0
 8005588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	807b      	strh	r3, [r7, #2]
 80055a4:	4613      	mov	r3, r2
 80055a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055a8:	787b      	ldrb	r3, [r7, #1]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055ae:	887a      	ldrh	r2, [r7, #2]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055b4:	e003      	b.n	80055be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055b6:	887b      	ldrh	r3, [r7, #2]
 80055b8:	041a      	lsls	r2, r3, #16
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	619a      	str	r2, [r3, #24]
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	460b      	mov	r3, r1
 80055d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80055dc:	887a      	ldrh	r2, [r7, #2]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4013      	ands	r3, r2
 80055e2:	041a      	lsls	r2, r3, #16
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	43d9      	mvns	r1, r3
 80055e8:	887b      	ldrh	r3, [r7, #2]
 80055ea:	400b      	ands	r3, r1
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	619a      	str	r2, [r3, #24]
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
	...

08005600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e264      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d075      	beq.n	800570a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800561e:	4ba3      	ldr	r3, [pc, #652]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 030c 	and.w	r3, r3, #12
 8005626:	2b04      	cmp	r3, #4
 8005628:	d00c      	beq.n	8005644 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800562a:	4ba0      	ldr	r3, [pc, #640]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005632:	2b08      	cmp	r3, #8
 8005634:	d112      	bne.n	800565c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005636:	4b9d      	ldr	r3, [pc, #628]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800563e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005642:	d10b      	bne.n	800565c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005644:	4b99      	ldr	r3, [pc, #612]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d05b      	beq.n	8005708 <HAL_RCC_OscConfig+0x108>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d157      	bne.n	8005708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e23f      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005664:	d106      	bne.n	8005674 <HAL_RCC_OscConfig+0x74>
 8005666:	4b91      	ldr	r3, [pc, #580]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a90      	ldr	r2, [pc, #576]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 800566c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	e01d      	b.n	80056b0 <HAL_RCC_OscConfig+0xb0>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800567c:	d10c      	bne.n	8005698 <HAL_RCC_OscConfig+0x98>
 800567e:	4b8b      	ldr	r3, [pc, #556]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a8a      	ldr	r2, [pc, #552]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	4b88      	ldr	r3, [pc, #544]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a87      	ldr	r2, [pc, #540]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	e00b      	b.n	80056b0 <HAL_RCC_OscConfig+0xb0>
 8005698:	4b84      	ldr	r3, [pc, #528]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a83      	ldr	r2, [pc, #524]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 800569e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	4b81      	ldr	r3, [pc, #516]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a80      	ldr	r2, [pc, #512]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 80056aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d013      	beq.n	80056e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b8:	f7ff fccc 	bl	8005054 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056c0:	f7ff fcc8 	bl	8005054 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b64      	cmp	r3, #100	; 0x64
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e204      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d2:	4b76      	ldr	r3, [pc, #472]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0f0      	beq.n	80056c0 <HAL_RCC_OscConfig+0xc0>
 80056de:	e014      	b.n	800570a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e0:	f7ff fcb8 	bl	8005054 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056e8:	f7ff fcb4 	bl	8005054 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b64      	cmp	r3, #100	; 0x64
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e1f0      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056fa:	4b6c      	ldr	r3, [pc, #432]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0xe8>
 8005706:	e000      	b.n	800570a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d063      	beq.n	80057de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005716:	4b65      	ldr	r3, [pc, #404]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 030c 	and.w	r3, r3, #12
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00b      	beq.n	800573a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005722:	4b62      	ldr	r3, [pc, #392]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800572a:	2b08      	cmp	r3, #8
 800572c:	d11c      	bne.n	8005768 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800572e:	4b5f      	ldr	r3, [pc, #380]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d116      	bne.n	8005768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800573a:	4b5c      	ldr	r3, [pc, #368]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d005      	beq.n	8005752 <HAL_RCC_OscConfig+0x152>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d001      	beq.n	8005752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e1c4      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005752:	4b56      	ldr	r3, [pc, #344]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	4952      	ldr	r1, [pc, #328]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005762:	4313      	orrs	r3, r2
 8005764:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005766:	e03a      	b.n	80057de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d020      	beq.n	80057b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005770:	4b4f      	ldr	r3, [pc, #316]	; (80058b0 <HAL_RCC_OscConfig+0x2b0>)
 8005772:	2201      	movs	r2, #1
 8005774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005776:	f7ff fc6d 	bl	8005054 <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800577e:	f7ff fc69 	bl	8005054 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e1a5      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005790:	4b46      	ldr	r3, [pc, #280]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f0      	beq.n	800577e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800579c:	4b43      	ldr	r3, [pc, #268]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4940      	ldr	r1, [pc, #256]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	600b      	str	r3, [r1, #0]
 80057b0:	e015      	b.n	80057de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057b2:	4b3f      	ldr	r3, [pc, #252]	; (80058b0 <HAL_RCC_OscConfig+0x2b0>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7ff fc4c 	bl	8005054 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057c0:	f7ff fc48 	bl	8005054 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e184      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057d2:	4b36      	ldr	r3, [pc, #216]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f0      	bne.n	80057c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d030      	beq.n	800584c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d016      	beq.n	8005820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057f2:	4b30      	ldr	r3, [pc, #192]	; (80058b4 <HAL_RCC_OscConfig+0x2b4>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f8:	f7ff fc2c 	bl	8005054 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005800:	f7ff fc28 	bl	8005054 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e164      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005812:	4b26      	ldr	r3, [pc, #152]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f0      	beq.n	8005800 <HAL_RCC_OscConfig+0x200>
 800581e:	e015      	b.n	800584c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005820:	4b24      	ldr	r3, [pc, #144]	; (80058b4 <HAL_RCC_OscConfig+0x2b4>)
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005826:	f7ff fc15 	bl	8005054 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800582e:	f7ff fc11 	bl	8005054 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e14d      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005840:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f0      	bne.n	800582e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80a0 	beq.w	800599a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585a:	2300      	movs	r3, #0
 800585c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10f      	bne.n	800588a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800586a:	2300      	movs	r3, #0
 800586c:	60bb      	str	r3, [r7, #8]
 800586e:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	4a0e      	ldr	r2, [pc, #56]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 8005874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005878:	6413      	str	r3, [r2, #64]	; 0x40
 800587a:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <HAL_RCC_OscConfig+0x2ac>)
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005886:	2301      	movs	r3, #1
 8005888:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <HAL_RCC_OscConfig+0x2b8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005892:	2b00      	cmp	r3, #0
 8005894:	d121      	bne.n	80058da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005896:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <HAL_RCC_OscConfig+0x2b8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a07      	ldr	r2, [pc, #28]	; (80058b8 <HAL_RCC_OscConfig+0x2b8>)
 800589c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a2:	f7ff fbd7 	bl	8005054 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a8:	e011      	b.n	80058ce <HAL_RCC_OscConfig+0x2ce>
 80058aa:	bf00      	nop
 80058ac:	40023800 	.word	0x40023800
 80058b0:	42470000 	.word	0x42470000
 80058b4:	42470e80 	.word	0x42470e80
 80058b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058bc:	f7ff fbca 	bl	8005054 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e106      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ce:	4b85      	ldr	r3, [pc, #532]	; (8005ae4 <HAL_RCC_OscConfig+0x4e4>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0f0      	beq.n	80058bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d106      	bne.n	80058f0 <HAL_RCC_OscConfig+0x2f0>
 80058e2:	4b81      	ldr	r3, [pc, #516]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e6:	4a80      	ldr	r2, [pc, #512]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 80058e8:	f043 0301 	orr.w	r3, r3, #1
 80058ec:	6713      	str	r3, [r2, #112]	; 0x70
 80058ee:	e01c      	b.n	800592a <HAL_RCC_OscConfig+0x32a>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b05      	cmp	r3, #5
 80058f6:	d10c      	bne.n	8005912 <HAL_RCC_OscConfig+0x312>
 80058f8:	4b7b      	ldr	r3, [pc, #492]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 80058fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fc:	4a7a      	ldr	r2, [pc, #488]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 80058fe:	f043 0304 	orr.w	r3, r3, #4
 8005902:	6713      	str	r3, [r2, #112]	; 0x70
 8005904:	4b78      	ldr	r3, [pc, #480]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	4a77      	ldr	r2, [pc, #476]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	6713      	str	r3, [r2, #112]	; 0x70
 8005910:	e00b      	b.n	800592a <HAL_RCC_OscConfig+0x32a>
 8005912:	4b75      	ldr	r3, [pc, #468]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	4a74      	ldr	r2, [pc, #464]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	6713      	str	r3, [r2, #112]	; 0x70
 800591e:	4b72      	ldr	r3, [pc, #456]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	4a71      	ldr	r2, [pc, #452]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 8005924:	f023 0304 	bic.w	r3, r3, #4
 8005928:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d015      	beq.n	800595e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005932:	f7ff fb8f 	bl	8005054 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005938:	e00a      	b.n	8005950 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800593a:	f7ff fb8b 	bl	8005054 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	f241 3288 	movw	r2, #5000	; 0x1388
 8005948:	4293      	cmp	r3, r2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e0c5      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005950:	4b65      	ldr	r3, [pc, #404]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 8005952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0ee      	beq.n	800593a <HAL_RCC_OscConfig+0x33a>
 800595c:	e014      	b.n	8005988 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800595e:	f7ff fb79 	bl	8005054 <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005964:	e00a      	b.n	800597c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005966:	f7ff fb75 	bl	8005054 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	f241 3288 	movw	r2, #5000	; 0x1388
 8005974:	4293      	cmp	r3, r2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e0af      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800597c:	4b5a      	ldr	r3, [pc, #360]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 800597e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1ee      	bne.n	8005966 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d105      	bne.n	800599a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800598e:	4b56      	ldr	r3, [pc, #344]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	4a55      	ldr	r2, [pc, #340]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 8005994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005998:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 809b 	beq.w	8005ada <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059a4:	4b50      	ldr	r3, [pc, #320]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 030c 	and.w	r3, r3, #12
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d05c      	beq.n	8005a6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d141      	bne.n	8005a3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b8:	4b4c      	ldr	r3, [pc, #304]	; (8005aec <HAL_RCC_OscConfig+0x4ec>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059be:	f7ff fb49 	bl	8005054 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c6:	f7ff fb45 	bl	8005054 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e081      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059d8:	4b43      	ldr	r3, [pc, #268]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1f0      	bne.n	80059c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69da      	ldr	r2, [r3, #28]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	019b      	lsls	r3, r3, #6
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	3b01      	subs	r3, #1
 80059fe:	041b      	lsls	r3, r3, #16
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	061b      	lsls	r3, r3, #24
 8005a08:	4937      	ldr	r1, [pc, #220]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a0e:	4b37      	ldr	r3, [pc, #220]	; (8005aec <HAL_RCC_OscConfig+0x4ec>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a14:	f7ff fb1e 	bl	8005054 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a1c:	f7ff fb1a 	bl	8005054 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e056      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0f0      	beq.n	8005a1c <HAL_RCC_OscConfig+0x41c>
 8005a3a:	e04e      	b.n	8005ada <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3c:	4b2b      	ldr	r3, [pc, #172]	; (8005aec <HAL_RCC_OscConfig+0x4ec>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a42:	f7ff fb07 	bl	8005054 <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a4a:	f7ff fb03 	bl	8005054 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e03f      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5c:	4b22      	ldr	r3, [pc, #136]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f0      	bne.n	8005a4a <HAL_RCC_OscConfig+0x44a>
 8005a68:	e037      	b.n	8005ada <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e032      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a76:	4b1c      	ldr	r3, [pc, #112]	; (8005ae8 <HAL_RCC_OscConfig+0x4e8>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d028      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d121      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d11a      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005aac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d111      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abc:	085b      	lsrs	r3, r3, #1
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d107      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d001      	beq.n	8005ada <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40007000 	.word	0x40007000
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	42470060 	.word	0x42470060

08005af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0cc      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b04:	4b68      	ldr	r3, [pc, #416]	; (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d90c      	bls.n	8005b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b12:	4b65      	ldr	r3, [pc, #404]	; (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1a:	4b63      	ldr	r3, [pc, #396]	; (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d001      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e0b8      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d020      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b44:	4b59      	ldr	r3, [pc, #356]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	4a58      	ldr	r2, [pc, #352]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b5c:	4b53      	ldr	r3, [pc, #332]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	4a52      	ldr	r2, [pc, #328]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b68:	4b50      	ldr	r3, [pc, #320]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	494d      	ldr	r1, [pc, #308]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d044      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b8e:	4b47      	ldr	r3, [pc, #284]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d119      	bne.n	8005bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e07f      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d003      	beq.n	8005bae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d107      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bae:	4b3f      	ldr	r3, [pc, #252]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d109      	bne.n	8005bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e06f      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bbe:	4b3b      	ldr	r3, [pc, #236]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e067      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bce:	4b37      	ldr	r3, [pc, #220]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f023 0203 	bic.w	r2, r3, #3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	4934      	ldr	r1, [pc, #208]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005be0:	f7ff fa38 	bl	8005054 <HAL_GetTick>
 8005be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be6:	e00a      	b.n	8005bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be8:	f7ff fa34 	bl	8005054 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e04f      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfe:	4b2b      	ldr	r3, [pc, #172]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 020c 	and.w	r2, r3, #12
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d1eb      	bne.n	8005be8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c10:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d20c      	bcs.n	8005c38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1e:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c26:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d001      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e032      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d008      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c44:	4b19      	ldr	r3, [pc, #100]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	4916      	ldr	r1, [pc, #88]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c62:	4b12      	ldr	r3, [pc, #72]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	490e      	ldr	r1, [pc, #56]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c76:	f000 f821 	bl	8005cbc <HAL_RCC_GetSysClockFreq>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	091b      	lsrs	r3, r3, #4
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	490a      	ldr	r1, [pc, #40]	; (8005cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c88:	5ccb      	ldrb	r3, [r1, r3]
 8005c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8e:	4a09      	ldr	r2, [pc, #36]	; (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c92:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff f8f0 	bl	8004e7c <HAL_InitTick>

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40023c00 	.word	0x40023c00
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	080066e8 	.word	0x080066e8
 8005cb4:	20000010 	.word	0x20000010
 8005cb8:	20000014 	.word	0x20000014

08005cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	607b      	str	r3, [r7, #4]
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cd4:	4b67      	ldr	r3, [pc, #412]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 030c 	and.w	r3, r3, #12
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d00d      	beq.n	8005cfc <HAL_RCC_GetSysClockFreq+0x40>
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	f200 80bd 	bhi.w	8005e60 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d003      	beq.n	8005cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cee:	e0b7      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cf0:	4b61      	ldr	r3, [pc, #388]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005cf2:	60bb      	str	r3, [r7, #8]
       break;
 8005cf4:	e0b7      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cf6:	4b61      	ldr	r3, [pc, #388]	; (8005e7c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005cf8:	60bb      	str	r3, [r7, #8]
      break;
 8005cfa:	e0b4      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cfc:	4b5d      	ldr	r3, [pc, #372]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d06:	4b5b      	ldr	r3, [pc, #364]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d04d      	beq.n	8005dae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d12:	4b58      	ldr	r3, [pc, #352]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	099b      	lsrs	r3, r3, #6
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d22:	f04f 0100 	mov.w	r1, #0
 8005d26:	ea02 0800 	and.w	r8, r2, r0
 8005d2a:	ea03 0901 	and.w	r9, r3, r1
 8005d2e:	4640      	mov	r0, r8
 8005d30:	4649      	mov	r1, r9
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	014b      	lsls	r3, r1, #5
 8005d3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d40:	0142      	lsls	r2, r0, #5
 8005d42:	4610      	mov	r0, r2
 8005d44:	4619      	mov	r1, r3
 8005d46:	ebb0 0008 	subs.w	r0, r0, r8
 8005d4a:	eb61 0109 	sbc.w	r1, r1, r9
 8005d4e:	f04f 0200 	mov.w	r2, #0
 8005d52:	f04f 0300 	mov.w	r3, #0
 8005d56:	018b      	lsls	r3, r1, #6
 8005d58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d5c:	0182      	lsls	r2, r0, #6
 8005d5e:	1a12      	subs	r2, r2, r0
 8005d60:	eb63 0301 	sbc.w	r3, r3, r1
 8005d64:	f04f 0000 	mov.w	r0, #0
 8005d68:	f04f 0100 	mov.w	r1, #0
 8005d6c:	00d9      	lsls	r1, r3, #3
 8005d6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d72:	00d0      	lsls	r0, r2, #3
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	eb12 0208 	adds.w	r2, r2, r8
 8005d7c:	eb43 0309 	adc.w	r3, r3, r9
 8005d80:	f04f 0000 	mov.w	r0, #0
 8005d84:	f04f 0100 	mov.w	r1, #0
 8005d88:	0259      	lsls	r1, r3, #9
 8005d8a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005d8e:	0250      	lsls	r0, r2, #9
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4610      	mov	r0, r2
 8005d96:	4619      	mov	r1, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f04f 0300 	mov.w	r3, #0
 8005da0:	f7fa fa60 	bl	8000264 <__aeabi_uldivmod>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4613      	mov	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e04a      	b.n	8005e44 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dae:	4b31      	ldr	r3, [pc, #196]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	099b      	lsrs	r3, r3, #6
 8005db4:	461a      	mov	r2, r3
 8005db6:	f04f 0300 	mov.w	r3, #0
 8005dba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005dbe:	f04f 0100 	mov.w	r1, #0
 8005dc2:	ea02 0400 	and.w	r4, r2, r0
 8005dc6:	ea03 0501 	and.w	r5, r3, r1
 8005dca:	4620      	mov	r0, r4
 8005dcc:	4629      	mov	r1, r5
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	014b      	lsls	r3, r1, #5
 8005dd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ddc:	0142      	lsls	r2, r0, #5
 8005dde:	4610      	mov	r0, r2
 8005de0:	4619      	mov	r1, r3
 8005de2:	1b00      	subs	r0, r0, r4
 8005de4:	eb61 0105 	sbc.w	r1, r1, r5
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	018b      	lsls	r3, r1, #6
 8005df2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005df6:	0182      	lsls	r2, r0, #6
 8005df8:	1a12      	subs	r2, r2, r0
 8005dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8005dfe:	f04f 0000 	mov.w	r0, #0
 8005e02:	f04f 0100 	mov.w	r1, #0
 8005e06:	00d9      	lsls	r1, r3, #3
 8005e08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e0c:	00d0      	lsls	r0, r2, #3
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	1912      	adds	r2, r2, r4
 8005e14:	eb45 0303 	adc.w	r3, r5, r3
 8005e18:	f04f 0000 	mov.w	r0, #0
 8005e1c:	f04f 0100 	mov.w	r1, #0
 8005e20:	0299      	lsls	r1, r3, #10
 8005e22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005e26:	0290      	lsls	r0, r2, #10
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	4619      	mov	r1, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	461a      	mov	r2, r3
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	f7fa fa14 	bl	8000264 <__aeabi_uldivmod>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4613      	mov	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	0c1b      	lsrs	r3, r3, #16
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	3301      	adds	r3, #1
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5c:	60bb      	str	r3, [r7, #8]
      break;
 8005e5e:	e002      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e62:	60bb      	str	r3, [r7, #8]
      break;
 8005e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e66:	68bb      	ldr	r3, [r7, #8]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005e72:	bf00      	nop
 8005e74:	40023800 	.word	0x40023800
 8005e78:	00f42400 	.word	0x00f42400
 8005e7c:	007a1200 	.word	0x007a1200

08005e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e84:	4b03      	ldr	r3, [pc, #12]	; (8005e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e86:	681b      	ldr	r3, [r3, #0]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	20000010 	.word	0x20000010

08005e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e9c:	f7ff fff0 	bl	8005e80 <HAL_RCC_GetHCLKFreq>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	0a9b      	lsrs	r3, r3, #10
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	4903      	ldr	r1, [pc, #12]	; (8005ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eae:	5ccb      	ldrb	r3, [r1, r3]
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	080066f8 	.word	0x080066f8

08005ec0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	220f      	movs	r2, #15
 8005ece:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ed0:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <HAL_RCC_GetClockConfig+0x5c>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 0203 	and.w	r2, r3, #3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005edc:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <HAL_RCC_GetClockConfig+0x5c>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <HAL_RCC_GetClockConfig+0x5c>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ef4:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <HAL_RCC_GetClockConfig+0x5c>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	08db      	lsrs	r3, r3, #3
 8005efa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f02:	4b07      	ldr	r3, [pc, #28]	; (8005f20 <HAL_RCC_GetClockConfig+0x60>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0207 	and.w	r2, r3, #7
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	601a      	str	r2, [r3, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	40023c00 	.word	0x40023c00

08005f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e041      	b.n	8005fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f839 	bl	8005fc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f000 f9d8 	bl	8006318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
	...

08005fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d001      	beq.n	8005ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e04e      	b.n	800608e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a23      	ldr	r2, [pc, #140]	; (800609c <HAL_TIM_Base_Start_IT+0xc4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d022      	beq.n	8006058 <HAL_TIM_Base_Start_IT+0x80>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601a:	d01d      	beq.n	8006058 <HAL_TIM_Base_Start_IT+0x80>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1f      	ldr	r2, [pc, #124]	; (80060a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d018      	beq.n	8006058 <HAL_TIM_Base_Start_IT+0x80>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1e      	ldr	r2, [pc, #120]	; (80060a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d013      	beq.n	8006058 <HAL_TIM_Base_Start_IT+0x80>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1c      	ldr	r2, [pc, #112]	; (80060a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00e      	beq.n	8006058 <HAL_TIM_Base_Start_IT+0x80>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1b      	ldr	r2, [pc, #108]	; (80060ac <HAL_TIM_Base_Start_IT+0xd4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d009      	beq.n	8006058 <HAL_TIM_Base_Start_IT+0x80>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a19      	ldr	r2, [pc, #100]	; (80060b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <HAL_TIM_Base_Start_IT+0x80>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a18      	ldr	r2, [pc, #96]	; (80060b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d111      	bne.n	800607c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b06      	cmp	r3, #6
 8006068:	d010      	beq.n	800608c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f042 0201 	orr.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800607a:	e007      	b.n	800608c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40010000 	.word	0x40010000
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40000c00 	.word	0x40000c00
 80060ac:	40010400 	.word	0x40010400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40001800 	.word	0x40001800

080060b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d122      	bne.n	8006114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d11b      	bne.n	8006114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0202 	mvn.w	r2, #2
 80060e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f8ee 	bl	80062dc <HAL_TIM_IC_CaptureCallback>
 8006100:	e005      	b.n	800610e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f8e0 	bl	80062c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f8f1 	bl	80062f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b04      	cmp	r3, #4
 8006120:	d122      	bne.n	8006168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b04      	cmp	r3, #4
 800612e:	d11b      	bne.n	8006168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0204 	mvn.w	r2, #4
 8006138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f8c4 	bl	80062dc <HAL_TIM_IC_CaptureCallback>
 8006154:	e005      	b.n	8006162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f8b6 	bl	80062c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f8c7 	bl	80062f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b08      	cmp	r3, #8
 8006174:	d122      	bne.n	80061bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	2b08      	cmp	r3, #8
 8006182:	d11b      	bne.n	80061bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0208 	mvn.w	r2, #8
 800618c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2204      	movs	r2, #4
 8006192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f89a 	bl	80062dc <HAL_TIM_IC_CaptureCallback>
 80061a8:	e005      	b.n	80061b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f88c 	bl	80062c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f89d 	bl	80062f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	2b10      	cmp	r3, #16
 80061c8:	d122      	bne.n	8006210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d11b      	bne.n	8006210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0210 	mvn.w	r2, #16
 80061e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2208      	movs	r2, #8
 80061e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f870 	bl	80062dc <HAL_TIM_IC_CaptureCallback>
 80061fc:	e005      	b.n	800620a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f862 	bl	80062c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f873 	bl	80062f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b01      	cmp	r3, #1
 800621c:	d10e      	bne.n	800623c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b01      	cmp	r3, #1
 800622a:	d107      	bne.n	800623c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0201 	mvn.w	r2, #1
 8006234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fe fde0 	bl	8004dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006246:	2b80      	cmp	r3, #128	; 0x80
 8006248:	d10e      	bne.n	8006268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006254:	2b80      	cmp	r3, #128	; 0x80
 8006256:	d107      	bne.n	8006268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f902 	bl	800646c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b40      	cmp	r3, #64	; 0x40
 8006274:	d10e      	bne.n	8006294 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006280:	2b40      	cmp	r3, #64	; 0x40
 8006282:	d107      	bne.n	8006294 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800628c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f838 	bl	8006304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b20      	cmp	r3, #32
 80062a0:	d10e      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0320 	and.w	r3, r3, #32
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d107      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0220 	mvn.w	r2, #32
 80062b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f8cc 	bl	8006458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a40      	ldr	r2, [pc, #256]	; (800642c <TIM_Base_SetConfig+0x114>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d013      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006336:	d00f      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a3d      	ldr	r2, [pc, #244]	; (8006430 <TIM_Base_SetConfig+0x118>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00b      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3c      	ldr	r2, [pc, #240]	; (8006434 <TIM_Base_SetConfig+0x11c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a3b      	ldr	r2, [pc, #236]	; (8006438 <TIM_Base_SetConfig+0x120>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3a      	ldr	r2, [pc, #232]	; (800643c <TIM_Base_SetConfig+0x124>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d108      	bne.n	800636a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2f      	ldr	r2, [pc, #188]	; (800642c <TIM_Base_SetConfig+0x114>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d02b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006378:	d027      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2c      	ldr	r2, [pc, #176]	; (8006430 <TIM_Base_SetConfig+0x118>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d023      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2b      	ldr	r2, [pc, #172]	; (8006434 <TIM_Base_SetConfig+0x11c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01f      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2a      	ldr	r2, [pc, #168]	; (8006438 <TIM_Base_SetConfig+0x120>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a29      	ldr	r2, [pc, #164]	; (800643c <TIM_Base_SetConfig+0x124>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d017      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a28      	ldr	r2, [pc, #160]	; (8006440 <TIM_Base_SetConfig+0x128>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a27      	ldr	r2, [pc, #156]	; (8006444 <TIM_Base_SetConfig+0x12c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00f      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a26      	ldr	r2, [pc, #152]	; (8006448 <TIM_Base_SetConfig+0x130>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a25      	ldr	r2, [pc, #148]	; (800644c <TIM_Base_SetConfig+0x134>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d007      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a24      	ldr	r2, [pc, #144]	; (8006450 <TIM_Base_SetConfig+0x138>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d003      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a23      	ldr	r2, [pc, #140]	; (8006454 <TIM_Base_SetConfig+0x13c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d108      	bne.n	80063dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a0a      	ldr	r2, [pc, #40]	; (800642c <TIM_Base_SetConfig+0x114>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_Base_SetConfig+0xf8>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a0c      	ldr	r2, [pc, #48]	; (800643c <TIM_Base_SetConfig+0x124>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d103      	bne.n	8006418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	615a      	str	r2, [r3, #20]
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40000c00 	.word	0x40000c00
 800643c:	40010400 	.word	0x40010400
 8006440:	40014000 	.word	0x40014000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800
 800644c:	40001800 	.word	0x40001800
 8006450:	40001c00 	.word	0x40001c00
 8006454:	40002000 	.word	0x40002000

08006458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <__libc_init_array>:
 8006480:	b570      	push	{r4, r5, r6, lr}
 8006482:	4d0d      	ldr	r5, [pc, #52]	; (80064b8 <__libc_init_array+0x38>)
 8006484:	4c0d      	ldr	r4, [pc, #52]	; (80064bc <__libc_init_array+0x3c>)
 8006486:	1b64      	subs	r4, r4, r5
 8006488:	10a4      	asrs	r4, r4, #2
 800648a:	2600      	movs	r6, #0
 800648c:	42a6      	cmp	r6, r4
 800648e:	d109      	bne.n	80064a4 <__libc_init_array+0x24>
 8006490:	4d0b      	ldr	r5, [pc, #44]	; (80064c0 <__libc_init_array+0x40>)
 8006492:	4c0c      	ldr	r4, [pc, #48]	; (80064c4 <__libc_init_array+0x44>)
 8006494:	f000 f83c 	bl	8006510 <_init>
 8006498:	1b64      	subs	r4, r4, r5
 800649a:	10a4      	asrs	r4, r4, #2
 800649c:	2600      	movs	r6, #0
 800649e:	42a6      	cmp	r6, r4
 80064a0:	d105      	bne.n	80064ae <__libc_init_array+0x2e>
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a8:	4798      	blx	r3
 80064aa:	3601      	adds	r6, #1
 80064ac:	e7ee      	b.n	800648c <__libc_init_array+0xc>
 80064ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b2:	4798      	blx	r3
 80064b4:	3601      	adds	r6, #1
 80064b6:	e7f2      	b.n	800649e <__libc_init_array+0x1e>
 80064b8:	08006708 	.word	0x08006708
 80064bc:	08006708 	.word	0x08006708
 80064c0:	08006708 	.word	0x08006708
 80064c4:	0800670c 	.word	0x0800670c

080064c8 <memcmp>:
 80064c8:	b530      	push	{r4, r5, lr}
 80064ca:	3901      	subs	r1, #1
 80064cc:	2400      	movs	r4, #0
 80064ce:	42a2      	cmp	r2, r4
 80064d0:	d101      	bne.n	80064d6 <memcmp+0xe>
 80064d2:	2000      	movs	r0, #0
 80064d4:	e005      	b.n	80064e2 <memcmp+0x1a>
 80064d6:	5d03      	ldrb	r3, [r0, r4]
 80064d8:	3401      	adds	r4, #1
 80064da:	5d0d      	ldrb	r5, [r1, r4]
 80064dc:	42ab      	cmp	r3, r5
 80064de:	d0f6      	beq.n	80064ce <memcmp+0x6>
 80064e0:	1b58      	subs	r0, r3, r5
 80064e2:	bd30      	pop	{r4, r5, pc}

080064e4 <memcpy>:
 80064e4:	440a      	add	r2, r1
 80064e6:	4291      	cmp	r1, r2
 80064e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80064ec:	d100      	bne.n	80064f0 <memcpy+0xc>
 80064ee:	4770      	bx	lr
 80064f0:	b510      	push	{r4, lr}
 80064f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064fa:	4291      	cmp	r1, r2
 80064fc:	d1f9      	bne.n	80064f2 <memcpy+0xe>
 80064fe:	bd10      	pop	{r4, pc}

08006500 <memset>:
 8006500:	4402      	add	r2, r0
 8006502:	4603      	mov	r3, r0
 8006504:	4293      	cmp	r3, r2
 8006506:	d100      	bne.n	800650a <memset+0xa>
 8006508:	4770      	bx	lr
 800650a:	f803 1b01 	strb.w	r1, [r3], #1
 800650e:	e7f9      	b.n	8006504 <memset+0x4>

08006510 <_init>:
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	bf00      	nop
 8006514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006516:	bc08      	pop	{r3}
 8006518:	469e      	mov	lr, r3
 800651a:	4770      	bx	lr

0800651c <_fini>:
 800651c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651e:	bf00      	nop
 8006520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006522:	bc08      	pop	{r3}
 8006524:	469e      	mov	lr, r3
 8006526:	4770      	bx	lr
