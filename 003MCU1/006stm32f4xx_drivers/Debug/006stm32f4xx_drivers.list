
006stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002778  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002928  08002928  00012928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a4c  08002a4c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002a4c  08002a4c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a4c  08002a4c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a50  08002a50  00012a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000084  08002ad8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002ad8  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ee1  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ea1  00000000  00000000  00024f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000390  00000000  00000000  00025e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000308  00000000  00000000  000261c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e3c  00000000  00000000  000264c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e6d  00000000  00000000  0002a304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000cf74  00000000  00000000  0002e171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003b0e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b0  00000000  00000000  0003b138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002910 	.word	0x08002910

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08002910 	.word	0x08002910

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <time_to_string>:
#define SYSTICK_TIM_CLK 16000000

static const char *week_day_table[] = {"-", "Sun", "Mon", "Tue", "Wed", "Thurs", "Fri", "Sat"};

/* Convert time to string (hh:mm:ss) */
static char *time_to_string(RTC_time_t *time){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af02      	add	r7, sp, #8
 8000296:	6078      	str	r0, [r7, #4]
	static char str[9];
	sprintf(str, "%02u:%02u:%02u", time->hours, time->minutes, time->seconds);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	789b      	ldrb	r3, [r3, #2]
 800029c:	461a      	mov	r2, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	785b      	ldrb	r3, [r3, #1]
 80002a2:	4619      	mov	r1, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	460b      	mov	r3, r1
 80002ac:	4904      	ldr	r1, [pc, #16]	; (80002c0 <time_to_string+0x30>)
 80002ae:	4805      	ldr	r0, [pc, #20]	; (80002c4 <time_to_string+0x34>)
 80002b0:	f001 fb7a 	bl	80019a8 <siprintf>
	return str;
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <time_to_string+0x34>)
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	0800294c 	.word	0x0800294c
 80002c4:	200000a0 	.word	0x200000a0

080002c8 <date_to_string>:

/* Convert date to string (dd/mm/yy) */
static char *date_to_string(RTC_date_t *date){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af02      	add	r7, sp, #8
 80002ce:	6078      	str	r0, [r7, #4]
	static char str[9];
	sprintf(str, "%02u/%02u/%02u", date->date, date->month, date->year);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	461a      	mov	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	785b      	ldrb	r3, [r3, #1]
 80002da:	4619      	mov	r1, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	789b      	ldrb	r3, [r3, #2]
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	460b      	mov	r3, r1
 80002e4:	4904      	ldr	r1, [pc, #16]	; (80002f8 <date_to_string+0x30>)
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <date_to_string+0x34>)
 80002e8:	f001 fb5e 	bl	80019a8 <siprintf>
	return str;
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <date_to_string+0x34>)
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	0800295c 	.word	0x0800295c
 80002fc:	200000ac 	.word	0x200000ac

08000300 <init_systick_timer>:

/* Init the systick timer*/
void init_systick_timer(uint32_t tick_hz)
{
 8000300:	b480      	push	{r7}
 8000302:	b087      	sub	sp, #28
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000308:	4b14      	ldr	r3, [pc, #80]	; (800035c <init_systick_timer+0x5c>)
 800030a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800030c:	4b14      	ldr	r3, [pc, #80]	; (8000360 <init_systick_timer+0x60>)
 800030e:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000310:	4a14      	ldr	r2, [pc, #80]	; (8000364 <init_systick_timer+0x64>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	fbb2 f3f3 	udiv	r3, r2, r3
 8000318:	3b01      	subs	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	431a      	orrs	r2, r3
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 800032e:	693b      	ldr	r3, [r7, #16]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f043 0202 	orr.w	r2, r3, #2
 8000336:	693b      	ldr	r3, [r7, #16]
 8000338:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f043 0204 	orr.w	r2, r3, #4
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f043 0201 	orr.w	r2, r3, #1
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	601a      	str	r2, [r3, #0]

}
 8000352:	bf00      	nop
 8000354:	371c      	adds	r7, #28
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	e000e014 	.word	0xe000e014
 8000360:	e000e010 	.word	0xe000e010
 8000364:	00f42400 	.word	0x00f42400

08000368 <main>:

int main(void){
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
	RTC_date_t current_date;
	RTC_time_t current_time;

	// 1. Initialize the ds1307 communication and LCD
	ds1307_init();
 800036e:	f000 fa33 	bl	80007d8 <ds1307_init>
	lcd_init();
 8000372:	f000 fbf3 	bl	8000b5c <lcd_init>

	// 2. Initialize the structs values
	current_date.day   = THURSDAY;
 8000376:	2305      	movs	r3, #5
 8000378:	71fb      	strb	r3, [r7, #7]
	current_date.date  = 23;
 800037a:	2317      	movs	r3, #23
 800037c:	713b      	strb	r3, [r7, #4]
	current_date.month = 5;
 800037e:	2305      	movs	r3, #5
 8000380:	717b      	strb	r3, [r7, #5]
	current_date.year  = 21;
 8000382:	2315      	movs	r3, #21
 8000384:	71bb      	strb	r3, [r7, #6]

	current_time.seconds     = 48;
 8000386:	2330      	movs	r3, #48	; 0x30
 8000388:	703b      	strb	r3, [r7, #0]
	current_time.minutes     = 59;
 800038a:	233b      	movs	r3, #59	; 0x3b
 800038c:	707b      	strb	r3, [r7, #1]
	current_time.hours       = 11;
 800038e:	230b      	movs	r3, #11
 8000390:	70bb      	strb	r3, [r7, #2]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000392:	2301      	movs	r3, #1
 8000394:	70fb      	strb	r3, [r7, #3]

	// 3. Set the time/date in the ds1307
	ds1307_set_current_date(&current_date);
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4618      	mov	r0, r3
 800039a:	f000 faf3 	bl	8000984 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 800039e:	463b      	mov	r3, r7
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fa2b 	bl	80007fc <ds1307_set_current_time>

	// 4. Init Systick timer
	init_systick_timer(1);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f7ff ffaa 	bl	8000300 <init_systick_timer>

	lcd_display_clear();
 80003ac:	f000 fca4 	bl	8000cf8 <lcd_display_clear>

	for(;;);
 80003b0:	e7fe      	b.n	80003b0 <main+0x48>
	...

080003b4 <SysTick_Handler>:

}

void SysTick_Handler(void){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0

	RTC_date_t current_date;
	RTC_time_t current_time;

	// 4. Get the time/date from ds1307
	ds1307_get_current_date(&current_date);
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fb15 	bl	80009ec <ds1307_get_current_date>
	ds1307_get_current_time(&current_time);
 80003c2:	463b      	mov	r3, r7
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 fa6b 	bl	80008a0 <ds1307_get_current_time>

	// 5. Clear display (return cursor)
	lcd_display_clear();
 80003ca:	f000 fc95 	bl	8000cf8 <lcd_display_clear>

	// 6. Print the date
	char *string_data;
	string_data = date_to_string(&current_date);
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff79 	bl	80002c8 <date_to_string>
 80003d6:	60f8      	str	r0, [r7, #12]

	lcd_send_string(week_day_table[current_date.day]);
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	461a      	mov	r2, r3
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <SysTick_Handler+0x80>)
 80003de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 fc92 	bl	8000d0c <lcd_send_string>
	lcd_send_string(" - ");
 80003e8:	4813      	ldr	r0, [pc, #76]	; (8000438 <SysTick_Handler+0x84>)
 80003ea:	f000 fc8f 	bl	8000d0c <lcd_send_string>
	lcd_send_string(string_data);
 80003ee:	68f8      	ldr	r0, [r7, #12]
 80003f0:	f000 fc8c 	bl	8000d0c <lcd_send_string>

	// 7. Print the time
	char *string_time;
	string_time = time_to_string(&current_time);
 80003f4:	463b      	mov	r3, r7
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff4a 	bl	8000290 <time_to_string>
 80003fc:	60b8      	str	r0, [r7, #8]
	lcd_set_cursor(2, 1);
 80003fe:	2101      	movs	r1, #1
 8000400:	2002      	movs	r0, #2
 8000402:	f000 fc98 	bl	8000d36 <lcd_set_cursor>
	lcd_send_string(string_time);
 8000406:	68b8      	ldr	r0, [r7, #8]
 8000408:	f000 fc80 	bl	8000d0c <lcd_send_string>

	if(current_time.time_format == TIME_FORMAT_12HRS_AM)
 800040c:	78fb      	ldrb	r3, [r7, #3]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d103      	bne.n	800041a <SysTick_Handler+0x66>
		// Time formart is 12H AM
		lcd_send_string(" AM");
 8000412:	480a      	ldr	r0, [pc, #40]	; (800043c <SysTick_Handler+0x88>)
 8000414:	f000 fc7a 	bl	8000d0c <lcd_send_string>
 8000418:	e005      	b.n	8000426 <SysTick_Handler+0x72>
	else if(current_time.time_format == TIME_FORMAT_12HRS_PM)
 800041a:	78fb      	ldrb	r3, [r7, #3]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d102      	bne.n	8000426 <SysTick_Handler+0x72>
		// Time formart is 12H PM
		lcd_send_string(" PM");
 8000420:	4807      	ldr	r0, [pc, #28]	; (8000440 <SysTick_Handler+0x8c>)
 8000422:	f000 fc73 	bl	8000d0c <lcd_send_string>

	printf("-------------------------\n\n");
 8000426:	4807      	ldr	r0, [pc, #28]	; (8000444 <SysTick_Handler+0x90>)
 8000428:	f001 fab6 	bl	8001998 <puts>
}
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000000 	.word	0x20000000
 8000438:	0800296c 	.word	0x0800296c
 800043c:	08002970 	.word	0x08002970
 8000440:	08002974 	.word	0x08002974
 8000444:	08002978 	.word	0x08002978

08000448 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <ITM_SendChar+0x44>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a0d      	ldr	r2, [pc, #52]	; (800048c <ITM_SendChar+0x44>)
 8000458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800045c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <ITM_SendChar+0x48>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <ITM_SendChar+0x48>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800046a:	bf00      	nop
 800046c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0f8      	beq.n	800046c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800047a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	6013      	str	r3, [r2, #0]
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	e000edfc 	.word	0xe000edfc
 8000490:	e0000e00 	.word	0xe0000e00

08000494 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
 80004a4:	e00a      	b.n	80004bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004a6:	f3af 8000 	nop.w
 80004aa:	4601      	mov	r1, r0
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	1c5a      	adds	r2, r3, #1
 80004b0:	60ba      	str	r2, [r7, #8]
 80004b2:	b2ca      	uxtb	r2, r1
 80004b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	3301      	adds	r3, #1
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	697a      	ldr	r2, [r7, #20]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	dbf0      	blt.n	80004a6 <_read+0x12>
	}

return len;
 80004c4:	687b      	ldr	r3, [r7, #4]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b086      	sub	sp, #24
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	60f8      	str	r0, [r7, #12]
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	e009      	b.n	80004f4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	60ba      	str	r2, [r7, #8]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff ffad 	bl	8000448 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	3301      	adds	r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	dbf1      	blt.n	80004e0 <_write+0x12>
	}
	return len;
 80004fc:	687b      	ldr	r3, [r7, #4]
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3718      	adds	r7, #24
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <_close>:

int _close(int file)
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
	return -1;
 800050e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000512:	4618      	mov	r0, r3
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800052c:	605a      	str	r2, [r3, #4]
	return 0;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <_isatty>:

int _isatty(int file)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
	return 1;
 8000542:	2301      	movs	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800054e:	b480      	push	{r7}
 8000550:	b085      	sub	sp, #20
 8000552:	af00      	add	r7, sp, #0
 8000554:	60f8      	str	r0, [r7, #12]
 8000556:	60b9      	str	r1, [r7, #8]
 8000558:	607a      	str	r2, [r7, #4]
	return 0;
 800055a:	2300      	movs	r3, #0
}
 800055c:	4618      	mov	r0, r3
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
	...

08000568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <_sbrk+0x5c>)
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <_sbrk+0x60>)
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <_sbrk+0x64>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d102      	bne.n	800058a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <_sbrk+0x64>)
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <_sbrk+0x68>)
 8000588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <_sbrk+0x64>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	429a      	cmp	r2, r3
 8000596:	d207      	bcs.n	80005a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000598:	f001 f95e 	bl	8001858 <__errno>
 800059c:	4603      	mov	r3, r0
 800059e:	220c      	movs	r2, #12
 80005a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a6:	e009      	b.n	80005bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <_sbrk+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <_sbrk+0x64>)
 80005b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ba:	68fb      	ldr	r3, [r7, #12]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20020000 	.word	0x20020000
 80005c8:	00000400 	.word	0x00000400
 80005cc:	200000b8 	.word	0x200000b8
 80005d0:	20000100 	.word	0x20000100

080005d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <LoopForever+0x6>)
  ldr r1, =_edata
 80005de:	490d      	ldr	r1, [pc, #52]	; (8000614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e0:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <LoopForever+0xe>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e4:	e002      	b.n	80005ec <LoopCopyDataInit>

080005e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ea:	3304      	adds	r3, #4

080005ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f0:	d3f9      	bcc.n	80005e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f4:	4c0a      	ldr	r4, [pc, #40]	; (8000620 <LoopForever+0x16>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f8:	e001      	b.n	80005fe <LoopFillZerobss>

080005fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005fc:	3204      	adds	r2, #4

080005fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000600:	d3fb      	bcc.n	80005fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000602:	f001 f92f 	bl	8001864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000606:	f7ff feaf 	bl	8000368 <main>

0800060a <LoopForever>:

LoopForever:
    b LoopForever
 800060a:	e7fe      	b.n	800060a <LoopForever>
  ldr   r0, =_estack
 800060c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000614:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000618:	08002a54 	.word	0x08002a54
  ldr r2, =_sbss
 800061c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000620:	200000fc 	.word	0x200000fc

08000624 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC_IRQHandler>
	...

08000628 <ds1307_i2c_pin_config>:
/***********************************************************************************
 *                              HELPER FUNCTIONS                                   *
 ***********************************************************************************/

/* Init the I2C pins */
static void ds1307_i2c_pin_config(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	// 1. Initialize the GPIO_Handle_t struct with 0 in all member elements
	memset(&i2c_sda, 0, sizeof(i2c_sda));
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	2210      	movs	r2, #16
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f001 f938 	bl	80018ac <memset>
	memset(&i2c_scl, 0, sizeof(i2c_sda));
 800063c:	463b      	mov	r3, r7
 800063e:	2210      	movs	r2, #16
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f001 f932 	bl	80018ac <memset>

	// 2. Initialize SDA pin
	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <ds1307_i2c_pin_config+0x74>)
 800064a:	613b      	str	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	77bb      	strb	r3, [r7, #30]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000650:	2302      	movs	r3, #2
 8000652:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000654:	2307      	movs	r3, #7
 8000656:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000658:	2301      	movs	r3, #1
 800065a:	777b      	strb	r3, [r7, #29]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800065c:	2300      	movs	r3, #0
 800065e:	773b      	strb	r3, [r7, #28]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = DS1307_I2C_SPEED;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <ds1307_i2c_pin_config+0x78>)
 8000662:	61bb      	str	r3, [r7, #24]
	GPIO_Init(&i2c_sda);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fc6d 	bl	8000f48 <GPIO_Init>

	// 3. Initialize SCL pin
	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <ds1307_i2c_pin_config+0x74>)
 8000670:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000672:	2304      	movs	r3, #4
 8000674:	73bb      	strb	r3, [r7, #14]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000676:	2302      	movs	r3, #2
 8000678:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 800067a:	2306      	movs	r3, #6
 800067c:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800067e:	2301      	movs	r3, #1
 8000680:	737b      	strb	r3, [r7, #13]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000682:	2300      	movs	r3, #0
 8000684:	733b      	strb	r3, [r7, #12]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000686:	2302      	movs	r3, #2
 8000688:	60bb      	str	r3, [r7, #8]
	GPIO_Init(&i2c_scl);
 800068a:	463b      	mov	r3, r7
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fc5b 	bl	8000f48 <GPIO_Init>
}
 8000692:	bf00      	nop
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40020400 	.word	0x40020400
 80006a0:	000186a0 	.word	0x000186a0

080006a4 <ds1307_i2c_config>:

/* Initialize the I2C peripheral */
static void ds1307_i2c_config(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

	// 1. Initialize the I2C_Handle_t struct with 0 in all member elements
	memset(&ds1307_i2c_handle, 0, sizeof(ds1307_i2c_handle));
 80006a8:	2228      	movs	r2, #40	; 0x28
 80006aa:	2100      	movs	r1, #0
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <ds1307_i2c_config+0x2c>)
 80006ae:	f001 f8fd 	bl	80018ac <memset>

	// 2. Initialize I2C peripheral
	ds1307_i2c_handle.pI2Cx = DS1307_I2C;
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <ds1307_i2c_config+0x2c>)
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <ds1307_i2c_config+0x30>)
 80006b6:	601a      	str	r2, [r3, #0]
	ds1307_i2c_handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <ds1307_i2c_config+0x2c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	725a      	strb	r2, [r3, #9]
	ds1307_i2c_handle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 80006be:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <ds1307_i2c_config+0x2c>)
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <ds1307_i2c_config+0x34>)
 80006c2:	605a      	str	r2, [r3, #4]
	I2C_Init(&ds1307_i2c_handle);
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <ds1307_i2c_config+0x2c>)
 80006c6:	f000 ff11 	bl	80014ec <I2C_Init>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000c4 	.word	0x200000c4
 80006d4:	40005400 	.word	0x40005400
 80006d8:	000186a0 	.word	0x000186a0

080006dc <ds1307_write>:

/* Write to ds1307 */
static void ds1307_write(uint8_t value, uint8_t reg_addr){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af02      	add	r7, sp, #8
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2] = {reg_addr, value};
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	733b      	strb	r3, [r7, #12]
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(DS1307_I2C, (uint8_t *)tx, 2, DS1307_I2C_ADDRESS, I2C_DISABLE_SR);
 80006f4:	f107 010c 	add.w	r1, r7, #12
 80006f8:	2300      	movs	r3, #0
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2368      	movs	r3, #104	; 0x68
 80006fe:	2202      	movs	r2, #2
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <ds1307_write+0x34>)
 8000702:	f000 ff8d 	bl	8001620 <I2C_MasterSendData>
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40005400 	.word	0x40005400

08000714 <ds1307_read>:

/* Read from ds1307 */
static uint8_t ds1307_read(uint8_t reg_addr){
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af02      	add	r7, sp, #8
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	I2C_MasterSendData(DS1307_I2C, &reg_addr, 1, DS1307_I2C_ADDRESS, I2C_ENABLE_SR);
 800071e:	1df9      	adds	r1, r7, #7
 8000720:	2301      	movs	r3, #1
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2368      	movs	r3, #104	; 0x68
 8000726:	2201      	movs	r2, #1
 8000728:	4808      	ldr	r0, [pc, #32]	; (800074c <ds1307_read+0x38>)
 800072a:	f000 ff79 	bl	8001620 <I2C_MasterSendData>
	I2C_MasterRecieveData(&ds1307_i2c_handle, &data, 1, DS1307_I2C_ADDRESS, I2C_DISABLE_SR);
 800072e:	f107 010f 	add.w	r1, r7, #15
 8000732:	2300      	movs	r3, #0
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2368      	movs	r3, #104	; 0x68
 8000738:	2201      	movs	r2, #1
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <ds1307_read+0x3c>)
 800073c:	f000 ffc7 	bl	80016ce <I2C_MasterRecieveData>
	return data;
 8000740:	7bfb      	ldrb	r3, [r7, #15]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40005400 	.word	0x40005400
 8000750:	200000c4 	.word	0x200000c4

08000754 <binary_to_bcd>:

/* Convert binary to BCD format */
static uint8_t binary_to_bcd(uint8_t binary){
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	uint8_t unit_part;
	uint8_t tens_part;
	uint8_t bcd;

	unit_part = binary % 10;
 800075e:	79fa      	ldrb	r2, [r7, #7]
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <binary_to_bcd+0x48>)
 8000762:	fba3 1302 	umull	r1, r3, r3, r2
 8000766:	08d9      	lsrs	r1, r3, #3
 8000768:	460b      	mov	r3, r1
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	73fb      	strb	r3, [r7, #15]
	tens_part = binary / 10;
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <binary_to_bcd+0x48>)
 8000778:	fba2 2303 	umull	r2, r3, r2, r3
 800077c:	08db      	lsrs	r3, r3, #3
 800077e:	73bb      	strb	r3, [r7, #14]
	bcd = (tens_part << 4) | unit_part;
 8000780:	7bbb      	ldrb	r3, [r7, #14]
 8000782:	011b      	lsls	r3, r3, #4
 8000784:	b25a      	sxtb	r2, r3
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	4313      	orrs	r3, r2
 800078c:	b25b      	sxtb	r3, r3
 800078e:	737b      	strb	r3, [r7, #13]

	return bcd;
 8000790:	7b7b      	ldrb	r3, [r7, #13]
}
 8000792:	4618      	mov	r0, r3
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	cccccccd 	.word	0xcccccccd

080007a0 <bcd_to_binary>:

/* Convert BCD to binary format */
static uint8_t bcd_to_binary(uint8_t bcd){
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	uint8_t unit_part;
	uint8_t tens_part;
	uint8_t binary;

	tens_part = bcd >> 4;
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	091b      	lsrs	r3, r3, #4
 80007ae:	73fb      	strb	r3, [r7, #15]
	unit_part = bcd & 0x0F;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	73bb      	strb	r3, [r7, #14]

	binary = 10 * tens_part + unit_part;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	461a      	mov	r2, r3
 80007bc:	0092      	lsls	r2, r2, #2
 80007be:	4413      	add	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	7bbb      	ldrb	r3, [r7, #14]
 80007c6:	4413      	add	r3, r2
 80007c8:	737b      	strb	r3, [r7, #13]

	return binary;
 80007ca:	7b7b      	ldrb	r3, [r7, #13]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
	...

080007d8 <ds1307_init>:

/***********************************************************************************
 *                                    APIS                                         *
 ***********************************************************************************/

void ds1307_init(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	// 1. Init the I2C pins
	ds1307_i2c_pin_config();
 80007dc:	f7ff ff24 	bl	8000628 <ds1307_i2c_pin_config>

	// 2. Initialize the I2C peripheral
	ds1307_i2c_config();
 80007e0:	f7ff ff60 	bl	80006a4 <ds1307_i2c_config>

	// 3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80007e4:	2101      	movs	r1, #1
 80007e6:	4804      	ldr	r0, [pc, #16]	; (80007f8 <ds1307_init+0x20>)
 80007e8:	f000 fe0c 	bl	8001404 <I2C_PeripheralControl>

	// 4. Make CH = 0 to enable ds1307 clock
	ds1307_write(0x00, DS1307_ADDR_SEC);
 80007ec:	2100      	movs	r1, #0
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff ff74 	bl	80006dc <ds1307_write>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40005400 	.word	0x40005400

080007fc <ds1307_set_current_time>:

void ds1307_set_current_time(RTC_time_t *pRTC_Time){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	uint8_t seconds, minutes, hours;

	// 1. Convert user entries to bcd format
	seconds = binary_to_bcd(pRTC_Time->seconds);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ffa3 	bl	8000754 <binary_to_bcd>
 800080e:	4603      	mov	r3, r0
 8000810:	73bb      	strb	r3, [r7, #14]
	minutes = binary_to_bcd(pRTC_Time->minutes);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff9c 	bl	8000754 <binary_to_bcd>
 800081c:	4603      	mov	r3, r0
 800081e:	737b      	strb	r3, [r7, #13]
	hours   = binary_to_bcd(pRTC_Time->hours);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	789b      	ldrb	r3, [r3, #2]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff95 	bl	8000754 <binary_to_bcd>
 800082a:	4603      	mov	r3, r0
 800082c:	73fb      	strb	r3, [r7, #15]

	// 2. Make sure the CH bit is kept at 0 to keep the ds1307 clock running
	seconds &= ~(1 << DS1307_CH_BIT);
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000834:	73bb      	strb	r3, [r7, #14]

	// 3. Treat the time_format
	if(pRTC_Time->time_format == TIME_FORMAT_24HRS){
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	78db      	ldrb	r3, [r3, #3]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d104      	bne.n	8000848 <ds1307_set_current_time+0x4c>
		hours &= ~(1 << DS1307_12H_24H_BIT);
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000844:	73fb      	strb	r3, [r7, #15]
 8000846:	e018      	b.n	800087a <ds1307_set_current_time+0x7e>
	}
	else if(pRTC_Time->time_format == TIME_FORMAT_12HRS_AM){
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	78db      	ldrb	r3, [r3, #3]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d108      	bne.n	8000862 <ds1307_set_current_time+0x66>
		hours |= (1 << DS1307_12H_24H_BIT);
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000856:	73fb      	strb	r3, [r7, #15]
		hours &= ~(1 << DS1307_AM_PM_BIT);
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	f023 0320 	bic.w	r3, r3, #32
 800085e:	73fb      	strb	r3, [r7, #15]
 8000860:	e00b      	b.n	800087a <ds1307_set_current_time+0x7e>
	}
	else if(pRTC_Time->time_format == TIME_FORMAT_12HRS_PM){
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	78db      	ldrb	r3, [r3, #3]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d107      	bne.n	800087a <ds1307_set_current_time+0x7e>
		hours |= (1 << DS1307_12H_24H_BIT);
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	73fb      	strb	r3, [r7, #15]
		hours |= (1 << DS1307_AM_PM_BIT);
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	f043 0320 	orr.w	r3, r3, #32
 8000878:	73fb      	strb	r3, [r7, #15]
	}

	// 4. Write the time to ds1307
	ds1307_write(seconds, DS1307_ADDR_SEC);
 800087a:	7bbb      	ldrb	r3, [r7, #14]
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff2c 	bl	80006dc <ds1307_write>
	ds1307_write(minutes, DS1307_ADDR_MIN);
 8000884:	7b7b      	ldrb	r3, [r7, #13]
 8000886:	2101      	movs	r1, #1
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff27 	bl	80006dc <ds1307_write>
	ds1307_write(hours, DS1307_ADDR_HRS);
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	2102      	movs	r1, #2
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff22 	bl	80006dc <ds1307_write>
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *pRTC_Time){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	uint8_t seconds, minutes, hours, time_format;

	// 1. Read the time from ds1307
	seconds = ds1307_read(DS1307_ADDR_SEC);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff ff33 	bl	8000714 <ds1307_read>
 80008ae:	4603      	mov	r3, r0
 80008b0:	737b      	strb	r3, [r7, #13]
	minutes = ds1307_read(DS1307_ADDR_MIN);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff ff2e 	bl	8000714 <ds1307_read>
 80008b8:	4603      	mov	r3, r0
 80008ba:	733b      	strb	r3, [r7, #12]
	hours = ds1307_read(DS1307_ADDR_HRS);
 80008bc:	2002      	movs	r0, #2
 80008be:	f7ff ff29 	bl	8000714 <ds1307_read>
 80008c2:	4603      	mov	r3, r0
 80008c4:	73fb      	strb	r3, [r7, #15]

	// 2. Treat the time_format
	uint8_t ds1307_in_12H_mode = (hours >> DS1307_12H_24H_BIT) & 1;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	099b      	lsrs	r3, r3, #6
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	72fb      	strb	r3, [r7, #11]
	uint8_t ds1307_in_24H_mode = !ds1307_in_12H_mode;
 80008d2:	7afb      	ldrb	r3, [r7, #11]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	bf0c      	ite	eq
 80008d8:	2301      	moveq	r3, #1
 80008da:	2300      	movne	r3, #0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	72bb      	strb	r3, [r7, #10]
	uint8_t ds1307_in_pm_mode = (hours >> DS1307_AM_PM_BIT) & 1;
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	095b      	lsrs	r3, r3, #5
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	727b      	strb	r3, [r7, #9]
	uint8_t ds1307_in_am_mode = !ds1307_in_pm_mode;
 80008ec:	7a7b      	ldrb	r3, [r7, #9]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf0c      	ite	eq
 80008f2:	2301      	moveq	r3, #1
 80008f4:	2300      	movne	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	723b      	strb	r3, [r7, #8]

	if(ds1307_in_24H_mode){
 80008fa:	7abb      	ldrb	r3, [r7, #10]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <ds1307_get_current_time+0x66>
		time_format = TIME_FORMAT_24HRS;
 8000900:	2302      	movs	r3, #2
 8000902:	73bb      	strb	r3, [r7, #14]
 8000904:	e018      	b.n	8000938 <ds1307_get_current_time+0x98>
	}
	else if(ds1307_in_12H_mode && ds1307_in_pm_mode){
 8000906:	7afb      	ldrb	r3, [r7, #11]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d009      	beq.n	8000920 <ds1307_get_current_time+0x80>
 800090c:	7a7b      	ldrb	r3, [r7, #9]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d006      	beq.n	8000920 <ds1307_get_current_time+0x80>
		time_format = TIME_FORMAT_12HRS_PM;
 8000912:	2301      	movs	r3, #1
 8000914:	73bb      	strb	r3, [r7, #14]
		// Mask out time format bits from hours variable
		hours &= 0x1F;
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	f003 031f 	and.w	r3, r3, #31
 800091c:	73fb      	strb	r3, [r7, #15]
 800091e:	e00b      	b.n	8000938 <ds1307_get_current_time+0x98>
	}
	else if(ds1307_in_12H_mode && ds1307_in_am_mode){
 8000920:	7afb      	ldrb	r3, [r7, #11]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d008      	beq.n	8000938 <ds1307_get_current_time+0x98>
 8000926:	7a3b      	ldrb	r3, [r7, #8]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d005      	beq.n	8000938 <ds1307_get_current_time+0x98>
		time_format = TIME_FORMAT_12HRS_AM;
 800092c:	2300      	movs	r3, #0
 800092e:	73bb      	strb	r3, [r7, #14]
		// Mask out time format bits from hours variable
		hours &= 0x1F;
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	f003 031f 	and.w	r3, r3, #31
 8000936:	73fb      	strb	r3, [r7, #15]
	}

	// 3. Mask out CH bit from seconds variable
	seconds &= ~(1 << DS1307_CH_BIT);
 8000938:	7b7b      	ldrb	r3, [r7, #13]
 800093a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800093e:	737b      	strb	r3, [r7, #13]

	// 5. Convert ds1307 time to binary format
	seconds = bcd_to_binary(seconds);
 8000940:	7b7b      	ldrb	r3, [r7, #13]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ff2c 	bl	80007a0 <bcd_to_binary>
 8000948:	4603      	mov	r3, r0
 800094a:	737b      	strb	r3, [r7, #13]
	minutes = bcd_to_binary(minutes);
 800094c:	7b3b      	ldrb	r3, [r7, #12]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff26 	bl	80007a0 <bcd_to_binary>
 8000954:	4603      	mov	r3, r0
 8000956:	733b      	strb	r3, [r7, #12]
	hours   = bcd_to_binary(hours);
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff20 	bl	80007a0 <bcd_to_binary>
 8000960:	4603      	mov	r3, r0
 8000962:	73fb      	strb	r3, [r7, #15]

	// 6. Save the time in the user struct
	pRTC_Time->seconds     = seconds;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	7b7a      	ldrb	r2, [r7, #13]
 8000968:	701a      	strb	r2, [r3, #0]
	pRTC_Time->minutes     = minutes;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7b3a      	ldrb	r2, [r7, #12]
 800096e:	705a      	strb	r2, [r3, #1]
	pRTC_Time->hours       = hours;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7bfa      	ldrb	r2, [r7, #15]
 8000974:	709a      	strb	r2, [r3, #2]
	pRTC_Time->time_format = time_format;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	7bba      	ldrb	r2, [r7, #14]
 800097a:	70da      	strb	r2, [r3, #3]

}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *pRTC_Date){
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	uint8_t day, date, month, year;

	day   = pRTC_Date->day;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	78db      	ldrb	r3, [r3, #3]
 8000990:	73fb      	strb	r3, [r7, #15]
	// 1. Convert user entries to bcd format
	date  = binary_to_bcd(pRTC_Date->date);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fedc 	bl	8000754 <binary_to_bcd>
 800099c:	4603      	mov	r3, r0
 800099e:	73bb      	strb	r3, [r7, #14]
	month = binary_to_bcd(pRTC_Date->month);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fed5 	bl	8000754 <binary_to_bcd>
 80009aa:	4603      	mov	r3, r0
 80009ac:	737b      	strb	r3, [r7, #13]
	year  = binary_to_bcd(pRTC_Date->year);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	789b      	ldrb	r3, [r3, #2]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fece 	bl	8000754 <binary_to_bcd>
 80009b8:	4603      	mov	r3, r0
 80009ba:	733b      	strb	r3, [r7, #12]

	// 2. Write the date to ds1307
	ds1307_write(day, DS1307_ADDR_DAY);
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	2103      	movs	r1, #3
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fe8b 	bl	80006dc <ds1307_write>
	ds1307_write(date, DS1307_ADDR_DATE);
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	2104      	movs	r1, #4
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe86 	bl	80006dc <ds1307_write>
	ds1307_write(month, DS1307_ADDR_MONTH);
 80009d0:	7b7b      	ldrb	r3, [r7, #13]
 80009d2:	2105      	movs	r1, #5
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe81 	bl	80006dc <ds1307_write>
	ds1307_write(year, DS1307_ADDR_YEAR);
 80009da:	7b3b      	ldrb	r3, [r7, #12]
 80009dc:	2106      	movs	r1, #6
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fe7c 	bl	80006dc <ds1307_write>
}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *pRTC_Date){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	uint8_t day, date, month, year;

	// 1. Read the date from ds1307
	day   = ds1307_read(DS1307_ADDR_DAY);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f7ff fe8d 	bl	8000714 <ds1307_read>
 80009fa:	4603      	mov	r3, r0
 80009fc:	73fb      	strb	r3, [r7, #15]
	date  = ds1307_read(DS1307_ADDR_DATE);
 80009fe:	2004      	movs	r0, #4
 8000a00:	f7ff fe88 	bl	8000714 <ds1307_read>
 8000a04:	4603      	mov	r3, r0
 8000a06:	73bb      	strb	r3, [r7, #14]
	month = ds1307_read(DS1307_ADDR_MONTH);
 8000a08:	2005      	movs	r0, #5
 8000a0a:	f7ff fe83 	bl	8000714 <ds1307_read>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	737b      	strb	r3, [r7, #13]
	year  = ds1307_read(DS1307_ADDR_YEAR);
 8000a12:	2006      	movs	r0, #6
 8000a14:	f7ff fe7e 	bl	8000714 <ds1307_read>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	733b      	strb	r3, [r7, #12]

	//  2.  Convert ds1307 date to binary format
	date = bcd_to_binary(date);
 8000a1c:	7bbb      	ldrb	r3, [r7, #14]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff febe 	bl	80007a0 <bcd_to_binary>
 8000a24:	4603      	mov	r3, r0
 8000a26:	73bb      	strb	r3, [r7, #14]
	month = bcd_to_binary(month);
 8000a28:	7b7b      	ldrb	r3, [r7, #13]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff feb8 	bl	80007a0 <bcd_to_binary>
 8000a30:	4603      	mov	r3, r0
 8000a32:	737b      	strb	r3, [r7, #13]
	year = bcd_to_binary(year);
 8000a34:	7b3b      	ldrb	r3, [r7, #12]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff feb2 	bl	80007a0 <bcd_to_binary>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	733b      	strb	r3, [r7, #12]

	// 3. Save the date in the user struct
	pRTC_Date->date  = date;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7bba      	ldrb	r2, [r7, #14]
 8000a44:	701a      	strb	r2, [r3, #0]
	pRTC_Date->day   = day;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	7bfa      	ldrb	r2, [r7, #15]
 8000a4a:	70da      	strb	r2, [r3, #3]
	pRTC_Date->month = month;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7b7a      	ldrb	r2, [r7, #13]
 8000a50:	705a      	strb	r2, [r3, #1]
	pRTC_Date->year  = year;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7b3a      	ldrb	r2, [r7, #12]
 8000a56:	709a      	strb	r2, [r3, #2]

}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <mdelay>:

/***********************************************************************************
 *                              HELPER FUNCTIONS                                   *
 ***********************************************************************************/

static void mdelay(uint32_t millisecs){
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < (millisecs * 1000); i++);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	e002      	b.n	8000a74 <mdelay+0x14>
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3301      	adds	r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a7a:	fb02 f303 	mul.w	r3, r2, r3
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d3f4      	bcc.n	8000a6e <mdelay+0xe>
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <udelay>:

static void udelay(uint32_t microsecs){
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i < microsecs; i++);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	e002      	b.n	8000aa4 <udelay+0x14>
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d3f8      	bcc.n	8000a9e <udelay+0xe>
}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <lcd_enable>:

static void lcd_enable(void){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <lcd_enable+0x28>)
 8000ac2:	f000 fc05 	bl	80012d0 <GPIO_WriteToOutputPin>
	udelay(10);
 8000ac6:	200a      	movs	r0, #10
 8000ac8:	f7ff ffe2 	bl	8000a90 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2102      	movs	r1, #2
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <lcd_enable+0x28>)
 8000ad2:	f000 fbfd 	bl	80012d0 <GPIO_WriteToOutputPin>
	udelay(100);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f7ff ffda 	bl	8000a90 <udelay>
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40020c00 	.word	0x40020c00

08000ae4 <write_4_bits>:

static void write_4_bits(uint8_t data_to_write){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	uint8_t D4_State = (data_to_write >> 0) & 1;
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	73fb      	strb	r3, [r7, #15]
	uint8_t D5_State = (data_to_write >> 1) & 1;
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	085b      	lsrs	r3, r3, #1
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	73bb      	strb	r3, [r7, #14]
	uint8_t D6_State = (data_to_write >> 2) & 1;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	737b      	strb	r3, [r7, #13]
	uint8_t D7_State = (data_to_write >> 3) & 1;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	08db      	lsrs	r3, r3, #3
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	733b      	strb	r3, [r7, #12]

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, D4_State);
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2103      	movs	r1, #3
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <write_4_bits+0x74>)
 8000b22:	f000 fbd5 	bl	80012d0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, D5_State);
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	480a      	ldr	r0, [pc, #40]	; (8000b58 <write_4_bits+0x74>)
 8000b2e:	f000 fbcf 	bl	80012d0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, D6_State);
 8000b32:	7b7b      	ldrb	r3, [r7, #13]
 8000b34:	461a      	mov	r2, r3
 8000b36:	2105      	movs	r1, #5
 8000b38:	4807      	ldr	r0, [pc, #28]	; (8000b58 <write_4_bits+0x74>)
 8000b3a:	f000 fbc9 	bl	80012d0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, D7_State);
 8000b3e:	7b3b      	ldrb	r3, [r7, #12]
 8000b40:	461a      	mov	r2, r3
 8000b42:	2106      	movs	r1, #6
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <write_4_bits+0x74>)
 8000b46:	f000 fbc3 	bl	80012d0 <GPIO_WriteToOutputPin>

	lcd_enable();
 8000b4a:	f7ff ffb5 	bl	8000ab8 <lcd_enable>
}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40020c00 	.word	0x40020c00

08000b5c <lcd_init>:

/***********************************************************************************
 *                                    APIS                                         *
 ***********************************************************************************/

void lcd_init(void){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0

	// 1. Configure the gpio pins which are used for lcd connections
	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 8000b62:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <lcd_init+0x110>)
 8000b64:	603b      	str	r3, [r7, #0]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000b66:	2301      	movs	r3, #1
 8000b68:	717b      	strb	r3, [r7, #5]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	60bb      	str	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	737b      	strb	r3, [r7, #13]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b72:	2300      	movs	r3, #0
 8000b74:	733b      	strb	r3, [r7, #12]

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000b76:	2300      	movs	r3, #0
 8000b78:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&lcd_signal);
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f9e3 	bl	8000f48 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000b82:	2302      	movs	r3, #2
 8000b84:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&lcd_signal);
 8000b86:	463b      	mov	r3, r7
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f9dd 	bl	8000f48 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&lcd_signal);
 8000b92:	463b      	mov	r3, r7
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f9d7 	bl	8000f48 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&lcd_signal);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f9d1 	bl	8000f48 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&lcd_signal);
 8000baa:	463b      	mov	r3, r7
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f9cb 	bl	8000f48 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&lcd_signal);
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f9c5 	bl	8000f48 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&lcd_signal);
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f9bf 	bl	8000f48 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4827      	ldr	r0, [pc, #156]	; (8000c6c <lcd_init+0x110>)
 8000bd0:	f000 fb7e 	bl	80012d0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	4824      	ldr	r0, [pc, #144]	; (8000c6c <lcd_init+0x110>)
 8000bda:	f000 fb79 	bl	80012d0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2101      	movs	r1, #1
 8000be2:	4822      	ldr	r0, [pc, #136]	; (8000c6c <lcd_init+0x110>)
 8000be4:	f000 fb74 	bl	80012d0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2103      	movs	r1, #3
 8000bec:	481f      	ldr	r0, [pc, #124]	; (8000c6c <lcd_init+0x110>)
 8000bee:	f000 fb6f 	bl	80012d0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	481d      	ldr	r0, [pc, #116]	; (8000c6c <lcd_init+0x110>)
 8000bf8:	f000 fb6a 	bl	80012d0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2105      	movs	r1, #5
 8000c00:	481a      	ldr	r0, [pc, #104]	; (8000c6c <lcd_init+0x110>)
 8000c02:	f000 fb65 	bl	80012d0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2106      	movs	r1, #6
 8000c0a:	4818      	ldr	r0, [pc, #96]	; (8000c6c <lcd_init+0x110>)
 8000c0c:	f000 fb60 	bl	80012d0 <GPIO_WriteToOutputPin>


	// 2. Do the LCD initialization

	// 2.1. Wait more than 40ms for the lcd to initialize
	mdelay(40);
 8000c10:	2028      	movs	r0, #40	; 0x28
 8000c12:	f7ff ff25 	bl	8000a60 <mdelay>

	// 2.2. Make RS = 0, for LCD command
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4814      	ldr	r0, [pc, #80]	; (8000c6c <lcd_init+0x110>)
 8000c1c:	f000 fb58 	bl	80012d0 <GPIO_WriteToOutputPin>

	// 2.3. Make RW = 0, writing to LCD
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2101      	movs	r1, #1
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <lcd_init+0x110>)
 8000c26:	f000 fb53 	bl	80012d0 <GPIO_WriteToOutputPin>

	// 2.4. Write 0011 to data lines to initialize LCD in 4 bits mode
	write_4_bits(0x03);
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f7ff ff5a 	bl	8000ae4 <write_4_bits>

	// 2.5. Wait for more than 4.1ms
	mdelay(5);
 8000c30:	2005      	movs	r0, #5
 8000c32:	f7ff ff15 	bl	8000a60 <mdelay>

	// 2.6. Write 0011 to data lines again to initialize LCD in 4 bits mode
	write_4_bits(0x03);
 8000c36:	2003      	movs	r0, #3
 8000c38:	f7ff ff54 	bl	8000ae4 <write_4_bits>

	// 2.7. Wait for more than 100us
	udelay(150);
 8000c3c:	2096      	movs	r0, #150	; 0x96
 8000c3e:	f7ff ff27 	bl	8000a90 <udelay>

	// 2.8. Write 0011 and 0010 to data lines to initialize LCD in 4 bits mode
	write_4_bits(0x03);
 8000c42:	2003      	movs	r0, #3
 8000c44:	f7ff ff4e 	bl	8000ae4 <write_4_bits>
	write_4_bits(0x02);
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f7ff ff4b 	bl	8000ae4 <write_4_bits>

	// 2.9 Function Set command (Set interface to be 4 bits long)
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8000c4e:	2028      	movs	r0, #40	; 0x28
 8000c50:	f000 f80e 	bl	8000c70 <lcd_send_command>

	// 2.10. Display ON and Cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 8000c54:	200e      	movs	r0, #14
 8000c56:	f000 f80b 	bl	8000c70 <lcd_send_command>

	// 2.11. Display clear
	lcd_display_clear();
 8000c5a:	f000 f84d 	bl	8000cf8 <lcd_display_clear>

	// 2.12. Entry mode Increment RAM address
	lcd_send_command(LCD_CMD_INCADD);
 8000c5e:	2006      	movs	r0, #6
 8000c60:	f000 f806 	bl	8000c70 <lcd_send_command>



}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40020c00 	.word	0x40020c00

08000c70 <lcd_send_command>:

void lcd_send_command(uint8_t cmd){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]

	// 1. RS=0 for LCD command
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <lcd_send_command+0x40>)
 8000c80:	f000 fb26 	bl	80012d0 <GPIO_WriteToOutputPin>

	// 2. R/nW=0, for write
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2101      	movs	r1, #1
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <lcd_send_command+0x40>)
 8000c8a:	f000 fb21 	bl	80012d0 <GPIO_WriteToOutputPin>

	// 3. Send  the higer and lower nibble
	write_4_bits(cmd >> 4);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	091b      	lsrs	r3, r3, #4
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff25 	bl	8000ae4 <write_4_bits>
	write_4_bits(cmd & 0x0F);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 030f 	and.w	r3, r3, #15
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff1e 	bl	8000ae4 <write_4_bits>

}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <lcd_send_char>:

void lcd_send_char(uint8_t data){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]

	// 1. RS=1 for LCD user data
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <lcd_send_char+0x40>)
 8000cc4:	f000 fb04 	bl	80012d0 <GPIO_WriteToOutputPin>

	// 2. R/nW=0, for write
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <lcd_send_char+0x40>)
 8000cce:	f000 faff 	bl	80012d0 <GPIO_WriteToOutputPin>

	// 3. Send  the higer and lower nibble
	write_4_bits(data >> 4);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	091b      	lsrs	r3, r3, #4
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff03 	bl	8000ae4 <write_4_bits>
	write_4_bits(data & 0x0F);
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fefc 	bl	8000ae4 <write_4_bits>

}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40020c00 	.word	0x40020c00

08000cf8 <lcd_display_clear>:

void lcd_display_clear(void){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff ffb7 	bl	8000c70 <lcd_send_command>
	mdelay(2);
 8000d02:	2002      	movs	r0, #2
 8000d04:	f7ff feac 	bl	8000a60 <mdelay>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <lcd_send_string>:
void lcd_display_return_home(void){
	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
	mdelay(2);
}

void lcd_send_string(const char *message){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	while(*message != '\0')
 8000d14:	e006      	b.n	8000d24 <lcd_send_string+0x18>
		lcd_send_char(*message++);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ffc8 	bl	8000cb4 <lcd_send_char>
	while(*message != '\0')
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1f4      	bne.n	8000d16 <lcd_send_string+0xa>
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <lcd_set_cursor>:
/*
 * Set LCD to a specifiede location given by row and column
 * row (1 to 2)
 * column (1 to 16)
 */
void lcd_set_cursor(uint8_t row, uint8_t column){
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	460a      	mov	r2, r1
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	4613      	mov	r3, r2
 8000d44:	71bb      	strb	r3, [r7, #6]
	uint8_t lcd_cmd;

	column--;
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	71bb      	strb	r3, [r7, #6]

	// 1. Find out which row the cursor is going and generate the command
	lcd_cmd = (row == 1)? (0x80 | column): (0xC0 | column);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d104      	bne.n	8000d5c <lcd_set_cursor+0x26>
 8000d52:	79bb      	ldrb	r3, [r7, #6]
 8000d54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	e003      	b.n	8000d64 <lcd_set_cursor+0x2e>
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	73fb      	strb	r3, [r7, #15]

	// 2. Send the command
	lcd_send_command(lcd_cmd);
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff81 	bl	8000c70 <lcd_send_command>

}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <GPIO_PeriClockControl>:
 * @return                - none
 *
 * @Note                  - none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d162      	bne.n	8000e50 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a64      	ldr	r2, [pc, #400]	; (8000f20 <GPIO_PeriClockControl+0x1a8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d106      	bne.n	8000da0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000d92:	4b64      	ldr	r3, [pc, #400]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a63      	ldr	r2, [pc, #396]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		else if(pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}

}
 8000d9e:	e0b9      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a61      	ldr	r2, [pc, #388]	; (8000f28 <GPIO_PeriClockControl+0x1b0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d106      	bne.n	8000db6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000da8:	4b5e      	ldr	r3, [pc, #376]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a5d      	ldr	r2, [pc, #372]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000db4:	e0ae      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a5c      	ldr	r2, [pc, #368]	; (8000f2c <GPIO_PeriClockControl+0x1b4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d106      	bne.n	8000dcc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000dbe:	4b59      	ldr	r3, [pc, #356]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a58      	ldr	r2, [pc, #352]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000dca:	e0a3      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a58      	ldr	r2, [pc, #352]	; (8000f30 <GPIO_PeriClockControl+0x1b8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d106      	bne.n	8000de2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000dd4:	4b53      	ldr	r3, [pc, #332]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a52      	ldr	r2, [pc, #328]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000de0:	e098      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a53      	ldr	r2, [pc, #332]	; (8000f34 <GPIO_PeriClockControl+0x1bc>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d106      	bne.n	8000df8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000dea:	4b4e      	ldr	r3, [pc, #312]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a4d      	ldr	r2, [pc, #308]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000df0:	f043 0310 	orr.w	r3, r3, #16
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000df6:	e08d      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a4f      	ldr	r2, [pc, #316]	; (8000f38 <GPIO_PeriClockControl+0x1c0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d106      	bne.n	8000e0e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000e00:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4a47      	ldr	r2, [pc, #284]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e06:	f043 0320 	orr.w	r3, r3, #32
 8000e0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e0c:	e082      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4a      	ldr	r2, [pc, #296]	; (8000f3c <GPIO_PeriClockControl+0x1c4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d106      	bne.n	8000e24 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000e16:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a42      	ldr	r2, [pc, #264]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e22:	e077      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a46      	ldr	r2, [pc, #280]	; (8000f40 <GPIO_PeriClockControl+0x1c8>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d106      	bne.n	8000e3a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000e2c:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	4a3c      	ldr	r2, [pc, #240]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e36:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e38:	e06c      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a41      	ldr	r2, [pc, #260]	; (8000f44 <GPIO_PeriClockControl+0x1cc>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d168      	bne.n	8000f14 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a37      	ldr	r2, [pc, #220]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e4e:	e061      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a33      	ldr	r2, [pc, #204]	; (8000f20 <GPIO_PeriClockControl+0x1a8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d106      	bne.n	8000e66 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000e58:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e5e:	f023 0301 	bic.w	r3, r3, #1
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e64:	e056      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a2f      	ldr	r2, [pc, #188]	; (8000f28 <GPIO_PeriClockControl+0x1b0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d106      	bne.n	8000e7c <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000e6e:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a2c      	ldr	r2, [pc, #176]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e74:	f023 0302 	bic.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e7a:	e04b      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a2b      	ldr	r2, [pc, #172]	; (8000f2c <GPIO_PeriClockControl+0x1b4>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d106      	bne.n	8000e92 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000e84:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a26      	ldr	r2, [pc, #152]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e8a:	f023 0304 	bic.w	r3, r3, #4
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e90:	e040      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a26      	ldr	r2, [pc, #152]	; (8000f30 <GPIO_PeriClockControl+0x1b8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d106      	bne.n	8000ea8 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000ea0:	f023 0308 	bic.w	r3, r3, #8
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ea6:	e035      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a22      	ldr	r2, [pc, #136]	; (8000f34 <GPIO_PeriClockControl+0x1bc>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d106      	bne.n	8000ebe <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000eb6:	f023 0310 	bic.w	r3, r3, #16
 8000eba:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ebc:	e02a      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <GPIO_PeriClockControl+0x1c0>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d106      	bne.n	8000ed4 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000ecc:	f023 0320 	bic.w	r3, r3, #32
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ed2:	e01f      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <GPIO_PeriClockControl+0x1c4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d106      	bne.n	8000eea <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ee6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ee8:	e014      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <GPIO_PeriClockControl+0x1c8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d106      	bne.n	8000f00 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000efe:	e009      	b.n	8000f14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <GPIO_PeriClockControl+0x1cc>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d105      	bne.n	8000f14 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <GPIO_PeriClockControl+0x1ac>)
 8000f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f12:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	40020c00 	.word	0x40020c00
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40021400 	.word	0x40021400
 8000f3c:	40021800 	.word	0x40021800
 8000f40:	40021c00 	.word	0x40021c00
 8000f44:	40022000 	.word	0x40022000

08000f48 <GPIO_Init>:


// Init and De-init -------------------------------------------------------------
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0; // Temp register
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff0c 	bl	8000d78 <GPIO_PeriClockControl>

	// 1. Configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	795b      	ldrb	r3, [r3, #5]
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d820      	bhi.n	8000faa <GPIO_Init+0x62>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	795b      	ldrb	r3, [r3, #5]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	791b      	ldrb	r3, [r3, #4]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	791b      	ldrb	r3, [r3, #4]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2103      	movs	r1, #3
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	400a      	ands	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6819      	ldr	r1, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	e0f3      	b.n	8001192 <GPIO_Init+0x24a>
	}else{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	795b      	ldrb	r3, [r3, #5]
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d117      	bne.n	8000fe2 <GPIO_Init+0x9a>
			// Configure the FTSR
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;  // Set FTSR bit
 8000fb2:	4b4b      	ldr	r3, [pc, #300]	; (80010e0 <GPIO_Init+0x198>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	7912      	ldrb	r2, [r2, #4]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	408a      	lsls	r2, r1
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4a47      	ldr	r2, [pc, #284]	; (80010e0 <GPIO_Init+0x198>)
 8000fc4:	430b      	orrs	r3, r1
 8000fc6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  // Clear RTSR bit
 8000fc8:	4b45      	ldr	r3, [pc, #276]	; (80010e0 <GPIO_Init+0x198>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	7912      	ldrb	r2, [r2, #4]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	408a      	lsls	r2, r1
 8000fd6:	43d2      	mvns	r2, r2
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4a41      	ldr	r2, [pc, #260]	; (80010e0 <GPIO_Init+0x198>)
 8000fdc:	400b      	ands	r3, r1
 8000fde:	6093      	str	r3, [r2, #8]
 8000fe0:	e035      	b.n	800104e <GPIO_Init+0x106>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	795b      	ldrb	r3, [r3, #5]
 8000fe6:	2b05      	cmp	r3, #5
 8000fe8:	d117      	bne.n	800101a <GPIO_Init+0xd2>
			// Configure the RTSR
			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;  // Set RTSR bit
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <GPIO_Init+0x198>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	7912      	ldrb	r2, [r2, #4]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	408a      	lsls	r2, r1
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4a39      	ldr	r2, [pc, #228]	; (80010e0 <GPIO_Init+0x198>)
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  // Clear FTSR bit
 8001000:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <GPIO_Init+0x198>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	7912      	ldrb	r2, [r2, #4]
 8001008:	4611      	mov	r1, r2
 800100a:	2201      	movs	r2, #1
 800100c:	408a      	lsls	r2, r1
 800100e:	43d2      	mvns	r2, r2
 8001010:	4611      	mov	r1, r2
 8001012:	4a33      	ldr	r2, [pc, #204]	; (80010e0 <GPIO_Init+0x198>)
 8001014:	400b      	ands	r3, r1
 8001016:	60d3      	str	r3, [r2, #12]
 8001018:	e019      	b.n	800104e <GPIO_Init+0x106>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	795b      	ldrb	r3, [r3, #5]
 800101e:	2b06      	cmp	r3, #6
 8001020:	d115      	bne.n	800104e <GPIO_Init+0x106>
			// Configure the FTSR and RTSR
			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;  // Set RTSR bit
 8001022:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <GPIO_Init+0x198>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	7912      	ldrb	r2, [r2, #4]
 800102a:	4611      	mov	r1, r2
 800102c:	2201      	movs	r2, #1
 800102e:	408a      	lsls	r2, r1
 8001030:	4611      	mov	r1, r2
 8001032:	4a2b      	ldr	r2, [pc, #172]	; (80010e0 <GPIO_Init+0x198>)
 8001034:	430b      	orrs	r3, r1
 8001036:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;  // Set FTSR bit
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <GPIO_Init+0x198>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	7912      	ldrb	r2, [r2, #4]
 8001040:	4611      	mov	r1, r2
 8001042:	2201      	movs	r2, #1
 8001044:	408a      	lsls	r2, r1
 8001046:	4611      	mov	r1, r2
 8001048:	4a25      	ldr	r2, [pc, #148]	; (80010e0 <GPIO_Init+0x198>)
 800104a:	430b      	orrs	r3, r1
 800104c:	60d3      	str	r3, [r2, #12]
		}
		// Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	791b      	ldrb	r3, [r3, #4]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	791b      	ldrb	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <GPIO_Init+0x19c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d04e      	beq.n	8001108 <GPIO_Init+0x1c0>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <GPIO_Init+0x1a0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d032      	beq.n	80010da <GPIO_Init+0x192>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <GPIO_Init+0x1a4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d02b      	beq.n	80010d6 <GPIO_Init+0x18e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <GPIO_Init+0x1a8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d024      	beq.n	80010d2 <GPIO_Init+0x18a>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <GPIO_Init+0x1ac>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d01d      	beq.n	80010ce <GPIO_Init+0x186>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <GPIO_Init+0x1b0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d016      	beq.n	80010ca <GPIO_Init+0x182>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a16      	ldr	r2, [pc, #88]	; (80010fc <GPIO_Init+0x1b4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00f      	beq.n	80010c6 <GPIO_Init+0x17e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <GPIO_Init+0x1b8>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d008      	beq.n	80010c2 <GPIO_Init+0x17a>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a13      	ldr	r2, [pc, #76]	; (8001104 <GPIO_Init+0x1bc>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <GPIO_Init+0x176>
 80010ba:	2308      	movs	r3, #8
 80010bc:	e025      	b.n	800110a <GPIO_Init+0x1c2>
 80010be:	2300      	movs	r3, #0
 80010c0:	e023      	b.n	800110a <GPIO_Init+0x1c2>
 80010c2:	2307      	movs	r3, #7
 80010c4:	e021      	b.n	800110a <GPIO_Init+0x1c2>
 80010c6:	2306      	movs	r3, #6
 80010c8:	e01f      	b.n	800110a <GPIO_Init+0x1c2>
 80010ca:	2305      	movs	r3, #5
 80010cc:	e01d      	b.n	800110a <GPIO_Init+0x1c2>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e01b      	b.n	800110a <GPIO_Init+0x1c2>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e019      	b.n	800110a <GPIO_Init+0x1c2>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e017      	b.n	800110a <GPIO_Init+0x1c2>
 80010da:	2301      	movs	r3, #1
 80010dc:	e015      	b.n	800110a <GPIO_Init+0x1c2>
 80010de:	bf00      	nop
 80010e0:	40013c00 	.word	0x40013c00
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40021400 	.word	0x40021400
 80010fc:	40021800 	.word	0x40021800
 8001100:	40021c00 	.word	0x40021c00
 8001104:	40022000 	.word	0x40022000
 8001108:	2300      	movs	r3, #0
 800110a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800110c:	4b6d      	ldr	r3, [pc, #436]	; (80012c4 <GPIO_Init+0x37c>)
 800110e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001110:	4a6c      	ldr	r2, [pc, #432]	; (80012c4 <GPIO_Init+0x37c>)
 8001112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001116:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] &= ~(0xF << (4 * temp2));
 8001118:	4a6b      	ldr	r2, [pc, #428]	; (80012c8 <GPIO_Init+0x380>)
 800111a:	7cfb      	ldrb	r3, [r7, #19]
 800111c:	3302      	adds	r3, #2
 800111e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001122:	7cbb      	ldrb	r3, [r7, #18]
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	210f      	movs	r1, #15
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	4965      	ldr	r1, [pc, #404]	; (80012c8 <GPIO_Init+0x380>)
 8001132:	7cfb      	ldrb	r3, [r7, #19]
 8001134:	4002      	ands	r2, r0
 8001136:	3302      	adds	r3, #2
 8001138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (4 * temp2);
 800113c:	4a62      	ldr	r2, [pc, #392]	; (80012c8 <GPIO_Init+0x380>)
 800113e:	7cfb      	ldrb	r3, [r7, #19]
 8001140:	3302      	adds	r3, #2
 8001142:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001146:	7c79      	ldrb	r1, [r7, #17]
 8001148:	7cbb      	ldrb	r3, [r7, #18]
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	4618      	mov	r0, r3
 8001152:	495d      	ldr	r1, [pc, #372]	; (80012c8 <GPIO_Init+0x380>)
 8001154:	7cfb      	ldrb	r3, [r7, #19]
 8001156:	4302      	orrs	r2, r0
 8001158:	3302      	adds	r3, #2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// Configure the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800115e:	4b5b      	ldr	r3, [pc, #364]	; (80012cc <GPIO_Init+0x384>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	7912      	ldrb	r2, [r2, #4]
 8001166:	4611      	mov	r1, r2
 8001168:	2201      	movs	r2, #1
 800116a:	408a      	lsls	r2, r1
 800116c:	4611      	mov	r1, r2
 800116e:	4a57      	ldr	r2, [pc, #348]	; (80012cc <GPIO_Init+0x384>)
 8001170:	430b      	orrs	r3, r1
 8001172:	6013      	str	r3, [r2, #0]
		// Configure pin as input
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	791b      	ldrb	r3, [r3, #4]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2103      	movs	r1, #3
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	4619      	mov	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	400a      	ands	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
	}

	// 2. Configure the speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	791b      	ldrb	r3, [r3, #4]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2103      	movs	r1, #3
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	4619      	mov	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	400a      	ands	r2, r1
 80011be:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6899      	ldr	r1, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	609a      	str	r2, [r3, #8]

	// 3. Configure the pupd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7b1b      	ldrb	r3, [r3, #12]
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	791b      	ldrb	r3, [r3, #4]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	791b      	ldrb	r3, [r3, #4]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2103      	movs	r1, #3
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	4619      	mov	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	400a      	ands	r2, r1
 80011fe:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68d9      	ldr	r1, [r3, #12]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	430a      	orrs	r2, r1
 800120e:	60da      	str	r2, [r3, #12]

	// 4. Configure the output type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7b5b      	ldrb	r3, [r3, #13]
 8001214:	461a      	mov	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	791b      	ldrb	r3, [r3, #4]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	791b      	ldrb	r3, [r3, #4]
 800122a:	4619      	mov	r1, r3
 800122c:	2301      	movs	r3, #1
 800122e:	408b      	lsls	r3, r1
 8001230:	43db      	mvns	r3, r3
 8001232:	4619      	mov	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	400a      	ands	r2, r1
 800123a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6859      	ldr	r1, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	430a      	orrs	r2, r1
 800124a:	605a      	str	r2, [r3, #4]

	// 5. Configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	795b      	ldrb	r3, [r3, #5]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d133      	bne.n	80012bc <GPIO_Init+0x374>
		//configure the alt funct regs.
		uint32_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	791b      	ldrb	r3, [r3, #4]
 8001258:	08db      	lsrs	r3, r3, #3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	791b      	ldrb	r3, [r3, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60bb      	str	r3, [r7, #8]
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7b9b      	ldrb	r3, [r3, #14]
 800126c:	461a      	mov	r2, r3
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4 * temp2)); //clearing
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	3208      	adds	r2, #8
 8001280:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	210f      	movs	r1, #15
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	4619      	mov	r1, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4011      	ands	r1, r2
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	3208      	adds	r2, #8
 800129c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	3208      	adds	r2, #8
 80012a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	4311      	orrs	r1, r2
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	3208      	adds	r2, #8
 80012b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40013800 	.word	0x40013800
 80012cc:	40013c00 	.word	0x40013c00

080012d0 <GPIO_WriteToOutputPin>:

uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx){
	return (uint16_t)(pGPIOx->IDR);
}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
 80012dc:	4613      	mov	r3, r2
 80012de:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_RESET)
 80012e0:	78bb      	ldrb	r3, [r7, #2]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10a      	bne.n	80012fc <GPIO_WriteToOutputPin+0x2c>
		pGPIOx->ODR &= ~(1 << PinNumber);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	78fa      	ldrb	r2, [r7, #3]
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	43d2      	mvns	r2, r2
 80012f4:	401a      	ands	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	615a      	str	r2, [r3, #20]
	else
		pGPIOx->ODR |= 1 << PinNumber;
}
 80012fa:	e008      	b.n	800130e <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR |= 1 << PinNumber;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f202 	lsl.w	r2, r1, r2
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	615a      	str	r2, [r3, #20]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <I2C_GenerateStartCondition>:

#include "stm32f407xx.h"

// ******************************* Private Helper functions **************************************

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= 1 << I2C_CR1_START;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr

08001336 <I2C_ExecuteAddressPhase>:

static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t ReadOrWrite){
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	70fb      	strb	r3, [r7, #3]
 8001342:	4613      	mov	r3, r2
 8001344:	70bb      	strb	r3, [r7, #2]
	pI2Cx->DR = (SlaveAddr << 1) | ReadOrWrite;
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	005a      	lsls	r2, r3, #1
 800134a:	78bb      	ldrb	r3, [r7, #2]
 800134c:	4313      	orrs	r3, r2
 800134e:	461a      	mov	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	611a      	str	r2, [r3, #16]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
 800135e:	b480      	push	{r7}
 8001360:	b085      	sub	sp, #20
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <RCC_GetPLLOutputClock>:
	(void)dummyRead;
}

// ************************ API ****************************************************

uint32_t RCC_GetPLLOutputClock(void){
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	// To be done
	return 0;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= 1 << I2C_CR1_STOP;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <I2C_GetFlagStatus>:



uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName){
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695a      	ldr	r2, [r3, #20]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE)
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d106      	bne.n	80013ee <I2C_ManageAcking+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	601a      	str	r2, [r3, #0]
	else{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80013ec:	e005      	b.n	80013fa <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	601a      	str	r2, [r3, #0]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <I2C_PeripheralControl>:


// Peripheral Enable/Disable
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d106      	bne.n	8001424 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
	}
	else{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8001422:	e005      	b.n	8001430 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 0201 	bic.w	r2, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
	...

0800143c <I2C_PeriClockControl>:

// Peripheral clock setup
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d120      	bne.n	8001490 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a22      	ldr	r2, [pc, #136]	; (80014dc <I2C_PeriClockControl+0xa0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d106      	bne.n	8001464 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <I2C_PeriClockControl+0xa4>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <I2C_PeriClockControl+0xa4>)
 800145c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
		}
		else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 8001462:	e035      	b.n	80014d0 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2){
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <I2C_PeriClockControl+0xa8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d106      	bne.n	800147a <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <I2C_PeriClockControl+0xa4>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <I2C_PeriClockControl+0xa4>)
 8001472:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001476:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001478:	e02a      	b.n	80014d0 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3){
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a1a      	ldr	r2, [pc, #104]	; (80014e8 <I2C_PeriClockControl+0xac>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d126      	bne.n	80014d0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <I2C_PeriClockControl+0xa4>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <I2C_PeriClockControl+0xa4>)
 8001488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800148e:	e01f      	b.n	80014d0 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <I2C_PeriClockControl+0xa0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d106      	bne.n	80014a6 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <I2C_PeriClockControl+0xa4>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <I2C_PeriClockControl+0xa4>)
 800149e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80014a2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80014a4:	e014      	b.n	80014d0 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2){
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <I2C_PeriClockControl+0xa8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d106      	bne.n	80014bc <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <I2C_PeriClockControl+0xa4>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <I2C_PeriClockControl+0xa4>)
 80014b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80014ba:	e009      	b.n	80014d0 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <I2C_PeriClockControl+0xac>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d105      	bne.n	80014d0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <I2C_PeriClockControl+0xa4>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <I2C_PeriClockControl+0xa4>)
 80014ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40005400 	.word	0x40005400
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40005800 	.word	0x40005800
 80014e8:	40005c00 	.word	0x40005c00

080014ec <I2C_Init>:

// Init and De-init
void I2C_Init(I2C_Handle_t *pI2CHandle){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

	// Enable the clock
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2101      	movs	r1, #1
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff9e 	bl	800143c <I2C_PeriClockControl>

	// Peripheral clock frequency - Freq field of CR2
	uint32_t tempreg = RCC_GetPCLK1Value()/1000000;
 8001500:	f000 f94e 	bl	80017a0 <RCC_GetPCLK1Value>
 8001504:	4603      	mov	r3, r0
 8001506:	4a43      	ldr	r2, [pc, #268]	; (8001614 <I2C_Init+0x128>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	0c9b      	lsrs	r3, r3, #18
 800150e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = tempreg;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	605a      	str	r2, [r3, #4]

	// Device own address
	tempreg = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7a1b      	ldrb	r3, [r3, #8]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
	tempreg |= 1 << 14;  // Manual says bit 14 must be kept at 1
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001526:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	609a      	str	r2, [r3, #8]

	// CCR calculations
	uint16_t ccr_value = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a36      	ldr	r2, [pc, #216]	; (8001618 <I2C_Init+0x12c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d80f      	bhi.n	8001562 <I2C_Init+0x76>
		// standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8001542:	f000 f92d 	bl	80017a0 <RCC_GetPCLK1Value>
 8001546:	4602      	mov	r2, r0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001552:	817b      	strh	r3, [r7, #10]
		tempreg |= ccr_value & 0xFFF;
 8001554:	897b      	ldrh	r3, [r7, #10]
 8001556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e02d      	b.n	80015be <I2C_Init+0xd2>
	}
	else{
		// fast mode
		tempreg |= (1 << 15);  // Fast mode configure
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001568:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);  // Fm mode duty cycle
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7a9b      	ldrb	r3, [r3, #10]
 800156e:	039b      	lsls	r3, r3, #14
 8001570:	461a      	mov	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7a9b      	ldrb	r3, [r3, #10]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10b      	bne.n	8001598 <I2C_Init+0xac>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8001580:	f000 f90e 	bl	80017a0 <RCC_GetPCLK1Value>
 8001584:	4601      	mov	r1, r0
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	fbb1 f3f3 	udiv	r3, r1, r3
 8001594:	817b      	strh	r3, [r7, #10]
 8001596:	e00c      	b.n	80015b2 <I2C_Init+0xc6>
		}
		else{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8001598:	f000 f902 	bl	80017a0 <RCC_GetPCLK1Value>
 800159c:	4601      	mov	r1, r0
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	009a      	lsls	r2, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b0:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccr_value & 0xFFF;
 80015b2:	897b      	ldrh	r3, [r7, #10]
 80015b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	61da      	str	r2, [r3, #28]

	// TRISE Configuration
	uint8_t trise;
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <I2C_Init+0x12c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d80a      	bhi.n	80015e6 <I2C_Init+0xfa>
		// standard mode
		trise = (RCC_GetPCLK1Value() / 1000000) + 1;
 80015d0:	f000 f8e6 	bl	80017a0 <RCC_GetPCLK1Value>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <I2C_Init+0x128>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	0c9b      	lsrs	r3, r3, #18
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	3301      	adds	r3, #1
 80015e2:	727b      	strb	r3, [r7, #9]
 80015e4:	e00c      	b.n	8001600 <I2C_Init+0x114>
	}
	else{
		// fast mode
		trise = (RCC_GetPCLK1Value() * 3 / 10000000) + 1;
 80015e6:	f000 f8db 	bl	80017a0 <RCC_GetPCLK1Value>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <I2C_Init+0x130>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	0d9b      	lsrs	r3, r3, #22
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	727b      	strb	r3, [r7, #9]
	}
	pI2CHandle->pI2Cx->TRISE = (trise & 0x3F);
 8001600:	7a7a      	ldrb	r2, [r7, #9]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800160a:	621a      	str	r2, [r3, #32]
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	431bde83 	.word	0x431bde83
 8001618:	000186a0 	.word	0x000186a0
 800161c:	6b5fca6b 	.word	0x6b5fca6b

08001620 <I2C_MasterSendData>:
void I2C_DeInit(I2C_RegDef_t *pI2Cx){

}

// Send and receive data
void I2C_MasterSendData(I2C_RegDef_t *pI2Cx, uint8_t *pTxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr){
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	4611      	mov	r1, r2
 800162c:	461a      	mov	r2, r3
 800162e:	460b      	mov	r3, r1
 8001630:	71fb      	strb	r3, [r7, #7]
 8001632:	4613      	mov	r3, r2
 8001634:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2Cx);
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7ff fe6e 	bl	8001318 <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled low)
	while(I2C_GetFlagStatus(pI2Cx, I2C_FLAG_SB) == 0);
 800163c:	bf00      	nop
 800163e:	2101      	movs	r1, #1
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff feb1 	bl	80013a8 <I2C_GetFlagStatus>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f8      	beq.n	800163e <I2C_MasterSendData+0x1e>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2Cx, SlaveAddr, I2C_WRITE);
 800164c:	79bb      	ldrb	r3, [r7, #6]
 800164e:	2200      	movs	r2, #0
 8001650:	4619      	mov	r1, r3
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7ff fe6f 	bl	8001336 <I2C_ExecuteAddressPhase>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(I2C_GetFlagStatus(pI2Cx, I2C_FLAG_ADDR) == 0);
 8001658:	bf00      	nop
 800165a:	2102      	movs	r1, #2
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff fea3 	bl	80013a8 <I2C_GetFlagStatus>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f8      	beq.n	800165a <I2C_MasterSendData+0x3a>

	//5. Clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be streched (pulled low)
	I2C_ClearADDRFlag(pI2Cx);
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7ff fe78 	bl	800135e <I2C_ClearADDRFlag>

	//6. Send the data until Len becomes 0
	for(; Len>0; Len--){
 800166e:	e011      	b.n	8001694 <I2C_MasterSendData+0x74>
		while(I2C_GetFlagStatus(pI2Cx, I2C_FLAG_TXE) == 0);  // Wait until TXE is set
 8001670:	bf00      	nop
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff fe97 	bl	80013a8 <I2C_GetFlagStatus>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f8      	beq.n	8001672 <I2C_MasterSendData+0x52>
		pI2Cx->DR = *(pTxBuffer++);
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	60ba      	str	r2, [r7, #8]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	611a      	str	r2, [r3, #16]
	for(; Len>0; Len--){
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	3b01      	subs	r3, #1
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ea      	bne.n	8001670 <I2C_MasterSendData+0x50>
	}

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be streched (pulled to LOW)
	while(I2C_GetFlagStatus(pI2Cx, I2C_FLAG_TXE) == 0);  // Wait until TXE is set
 800169a:	bf00      	nop
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f7ff fe82 	bl	80013a8 <I2C_GetFlagStatus>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f8      	beq.n	800169c <I2C_MasterSendData+0x7c>
	while(I2C_GetFlagStatus(pI2Cx, I2C_FLAG_BTF) == 0);  // Wait until BTF is set
 80016aa:	bf00      	nop
 80016ac:	2104      	movs	r1, #4
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7ff fe7a 	bl	80013a8 <I2C_GetFlagStatus>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f8      	beq.n	80016ac <I2C_MasterSendData+0x8c>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR)
 80016ba:	7e3b      	ldrb	r3, [r7, #24]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <I2C_MasterSendData+0xa6>
		I2C_GenerateStopCondition(pI2Cx);
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f7ff fe62 	bl	800138a <I2C_GenerateStopCondition>
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <I2C_MasterRecieveData>:

void I2C_MasterRecieveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr){
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	4611      	mov	r1, r2
 80016da:	461a      	mov	r2, r3
 80016dc:	460b      	mov	r3, r1
 80016de:	71fb      	strb	r3, [r7, #7]
 80016e0:	4613      	mov	r3, r2
 80016e2:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fe15 	bl	8001318 <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled low)
	while(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB) == 0);
 80016ee:	bf00      	nop
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fe56 	bl	80013a8 <I2C_GetFlagStatus>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f6      	beq.n	80016f0 <I2C_MasterRecieveData+0x22>

	//3. Send the address of the slave with r/nw bit set to r(1) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr, I2C_READ);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	79b9      	ldrb	r1, [r7, #6]
 8001708:	2201      	movs	r2, #1
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fe13 	bl	8001336 <I2C_ExecuteAddressPhase>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR) == 0);
 8001710:	bf00      	nop
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2102      	movs	r1, #2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fe45 	bl	80013a8 <I2C_GetFlagStatus>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f6      	beq.n	8001712 <I2C_MasterRecieveData+0x44>

	//5. Clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be streched (pulled low)

	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fe18 	bl	800135e <I2C_ClearADDRFlag>

	//5. Read Data
	while(Len > 0){
 800172e:	e025      	b.n	800177c <I2C_MasterRecieveData+0xae>

		if(Len == 1){
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d10d      	bne.n	8001752 <I2C_MasterRecieveData+0x84>
			// Disable Acking
			I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fe46 	bl	80013ce <I2C_ManageAcking>
			// generate STOP condition
			if(Sr == I2C_DISABLE_SR)
 8001742:	7e3b      	ldrb	r3, [r7, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d104      	bne.n	8001752 <I2C_MasterRecieveData+0x84>
				I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fe1c 	bl	800138a <I2C_GenerateStopCondition>
		}

		// wait until RXNE becomes 1
		while(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE) == 0);
 8001752:	bf00      	nop
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2140      	movs	r1, #64	; 0x40
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fe24 	bl	80013a8 <I2C_GetFlagStatus>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f6      	beq.n	8001754 <I2C_MasterRecieveData+0x86>
		// read the data from data register in to buffer and increment the buffer address
		*(pRxBuffer++) = pI2CHandle->pI2Cx->DR;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6919      	ldr	r1, [r3, #16]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	60ba      	str	r2, [r7, #8]
 8001772:	b2ca      	uxtb	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
		Len--;
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	3b01      	subs	r3, #1
 800177a:	71fb      	strb	r3, [r7, #7]
	while(Len > 0){
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1d6      	bne.n	8001730 <I2C_MasterRecieveData+0x62>

	}
	//6. Re-enable acking
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	7a5b      	ldrb	r3, [r3, #9]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d105      	bne.n	8001796 <I2C_MasterRecieveData+0xc8>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2101      	movs	r1, #1
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fe1c 	bl	80013ce <I2C_ManageAcking>
	}
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <RCC_GetPCLK1Value>:
#include "stm32f407xx.h"

uint16_t const AHB_PreScaler[8] = {2, 4, 8, 16, 128, 256, 512};
uint16_t const APB1_PreScaler[8] = {2, 4, 8, 16, 128, 256, 512};

uint32_t RCC_GetPCLK1Value(void){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
	uint32_t ahbClk;
	uint32_t SystemClk;

	uint8_t rcc_cfgr_sws, rcc_cfgr_hpre, rcc_cfgr_ppre1;

	rcc_cfgr_sws = (RCC->CFGR >> 2) & 0x03;
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <RCC_GetPCLK1Value+0xa4>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	70fb      	strb	r3, [r7, #3]

	if(rcc_cfgr_sws == 0){
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <RCC_GetPCLK1Value+0xa8>)
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	e00b      	b.n	80017d8 <RCC_GetPCLK1Value+0x38>
	}else if(rcc_cfgr_sws == 1){
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d102      	bne.n	80017cc <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <RCC_GetPCLK1Value+0xac>)
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	e005      	b.n	80017d8 <RCC_GetPCLK1Value+0x38>
	}else if(rcc_cfgr_sws == 2){
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d102      	bne.n	80017d8 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 80017d2:	f7ff fdd3 	bl	800137c <RCC_GetPLLOutputClock>
 80017d6:	6078      	str	r0, [r7, #4]
	}

	rcc_cfgr_hpre = (RCC->CFGR >> 4) & 0x0F;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <RCC_GetPCLK1Value+0xa4>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	70bb      	strb	r3, [r7, #2]

	if(rcc_cfgr_hpre < 8){
 80017e6:	78bb      	ldrb	r3, [r7, #2]
 80017e8:	2b07      	cmp	r3, #7
 80017ea:	d802      	bhi.n	80017f2 <RCC_GetPCLK1Value+0x52>
		ahbClk = SystemClk;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	e00a      	b.n	8001808 <RCC_GetPCLK1Value+0x68>
	}
	else{
		ahbClk = SystemClk / AHB_PreScaler[rcc_cfgr_hpre & 0x07];
 80017f2:	78bb      	ldrb	r3, [r7, #2]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	4a15      	ldr	r2, [pc, #84]	; (8001850 <RCC_GetPCLK1Value+0xb0>)
 80017fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017fe:	461a      	mov	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	fbb3 f3f2 	udiv	r3, r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
	}

	rcc_cfgr_ppre1 = (RCC->CFGR >> 10) & 0x07;
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <RCC_GetPCLK1Value+0xa4>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	0a9b      	lsrs	r3, r3, #10
 800180e:	b2db      	uxtb	r3, r3
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	707b      	strb	r3, [r7, #1]

	if(rcc_cfgr_hpre < 4){
 8001816:	78bb      	ldrb	r3, [r7, #2]
 8001818:	2b03      	cmp	r3, #3
 800181a:	d802      	bhi.n	8001822 <RCC_GetPCLK1Value+0x82>
		pClk1 = ahbClk;
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e00a      	b.n	8001838 <RCC_GetPCLK1Value+0x98>
	}
	else{
		pClk1 = ahbClk / APB1_PreScaler[rcc_cfgr_ppre1 & 0x03];
 8001822:	787b      	ldrb	r3, [r7, #1]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <RCC_GetPCLK1Value+0xb4>)
 800182a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800182e:	461a      	mov	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	fbb3 f3f2 	udiv	r3, r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
	}

	return pClk1;
 8001838:	68fb      	ldr	r3, [r7, #12]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	00f42400 	.word	0x00f42400
 800184c:	007a1200 	.word	0x007a1200
 8001850:	08002994 	.word	0x08002994
 8001854:	080029a4 	.word	0x080029a4

08001858 <__errno>:
 8001858:	4b01      	ldr	r3, [pc, #4]	; (8001860 <__errno+0x8>)
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000020 	.word	0x20000020

08001864 <__libc_init_array>:
 8001864:	b570      	push	{r4, r5, r6, lr}
 8001866:	4d0d      	ldr	r5, [pc, #52]	; (800189c <__libc_init_array+0x38>)
 8001868:	4c0d      	ldr	r4, [pc, #52]	; (80018a0 <__libc_init_array+0x3c>)
 800186a:	1b64      	subs	r4, r4, r5
 800186c:	10a4      	asrs	r4, r4, #2
 800186e:	2600      	movs	r6, #0
 8001870:	42a6      	cmp	r6, r4
 8001872:	d109      	bne.n	8001888 <__libc_init_array+0x24>
 8001874:	4d0b      	ldr	r5, [pc, #44]	; (80018a4 <__libc_init_array+0x40>)
 8001876:	4c0c      	ldr	r4, [pc, #48]	; (80018a8 <__libc_init_array+0x44>)
 8001878:	f001 f84a 	bl	8002910 <_init>
 800187c:	1b64      	subs	r4, r4, r5
 800187e:	10a4      	asrs	r4, r4, #2
 8001880:	2600      	movs	r6, #0
 8001882:	42a6      	cmp	r6, r4
 8001884:	d105      	bne.n	8001892 <__libc_init_array+0x2e>
 8001886:	bd70      	pop	{r4, r5, r6, pc}
 8001888:	f855 3b04 	ldr.w	r3, [r5], #4
 800188c:	4798      	blx	r3
 800188e:	3601      	adds	r6, #1
 8001890:	e7ee      	b.n	8001870 <__libc_init_array+0xc>
 8001892:	f855 3b04 	ldr.w	r3, [r5], #4
 8001896:	4798      	blx	r3
 8001898:	3601      	adds	r6, #1
 800189a:	e7f2      	b.n	8001882 <__libc_init_array+0x1e>
 800189c:	08002a4c 	.word	0x08002a4c
 80018a0:	08002a4c 	.word	0x08002a4c
 80018a4:	08002a4c 	.word	0x08002a4c
 80018a8:	08002a50 	.word	0x08002a50

080018ac <memset>:
 80018ac:	4402      	add	r2, r0
 80018ae:	4603      	mov	r3, r0
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d100      	bne.n	80018b6 <memset+0xa>
 80018b4:	4770      	bx	lr
 80018b6:	f803 1b01 	strb.w	r1, [r3], #1
 80018ba:	e7f9      	b.n	80018b0 <memset+0x4>

080018bc <_puts_r>:
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	460e      	mov	r6, r1
 80018c0:	4605      	mov	r5, r0
 80018c2:	b118      	cbz	r0, 80018cc <_puts_r+0x10>
 80018c4:	6983      	ldr	r3, [r0, #24]
 80018c6:	b90b      	cbnz	r3, 80018cc <_puts_r+0x10>
 80018c8:	f000 fa68 	bl	8001d9c <__sinit>
 80018cc:	69ab      	ldr	r3, [r5, #24]
 80018ce:	68ac      	ldr	r4, [r5, #8]
 80018d0:	b913      	cbnz	r3, 80018d8 <_puts_r+0x1c>
 80018d2:	4628      	mov	r0, r5
 80018d4:	f000 fa62 	bl	8001d9c <__sinit>
 80018d8:	4b2c      	ldr	r3, [pc, #176]	; (800198c <_puts_r+0xd0>)
 80018da:	429c      	cmp	r4, r3
 80018dc:	d120      	bne.n	8001920 <_puts_r+0x64>
 80018de:	686c      	ldr	r4, [r5, #4]
 80018e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018e2:	07db      	lsls	r3, r3, #31
 80018e4:	d405      	bmi.n	80018f2 <_puts_r+0x36>
 80018e6:	89a3      	ldrh	r3, [r4, #12]
 80018e8:	0598      	lsls	r0, r3, #22
 80018ea:	d402      	bmi.n	80018f2 <_puts_r+0x36>
 80018ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018ee:	f000 faf3 	bl	8001ed8 <__retarget_lock_acquire_recursive>
 80018f2:	89a3      	ldrh	r3, [r4, #12]
 80018f4:	0719      	lsls	r1, r3, #28
 80018f6:	d51d      	bpl.n	8001934 <_puts_r+0x78>
 80018f8:	6923      	ldr	r3, [r4, #16]
 80018fa:	b1db      	cbz	r3, 8001934 <_puts_r+0x78>
 80018fc:	3e01      	subs	r6, #1
 80018fe:	68a3      	ldr	r3, [r4, #8]
 8001900:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001904:	3b01      	subs	r3, #1
 8001906:	60a3      	str	r3, [r4, #8]
 8001908:	bb39      	cbnz	r1, 800195a <_puts_r+0x9e>
 800190a:	2b00      	cmp	r3, #0
 800190c:	da38      	bge.n	8001980 <_puts_r+0xc4>
 800190e:	4622      	mov	r2, r4
 8001910:	210a      	movs	r1, #10
 8001912:	4628      	mov	r0, r5
 8001914:	f000 f868 	bl	80019e8 <__swbuf_r>
 8001918:	3001      	adds	r0, #1
 800191a:	d011      	beq.n	8001940 <_puts_r+0x84>
 800191c:	250a      	movs	r5, #10
 800191e:	e011      	b.n	8001944 <_puts_r+0x88>
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <_puts_r+0xd4>)
 8001922:	429c      	cmp	r4, r3
 8001924:	d101      	bne.n	800192a <_puts_r+0x6e>
 8001926:	68ac      	ldr	r4, [r5, #8]
 8001928:	e7da      	b.n	80018e0 <_puts_r+0x24>
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <_puts_r+0xd8>)
 800192c:	429c      	cmp	r4, r3
 800192e:	bf08      	it	eq
 8001930:	68ec      	ldreq	r4, [r5, #12]
 8001932:	e7d5      	b.n	80018e0 <_puts_r+0x24>
 8001934:	4621      	mov	r1, r4
 8001936:	4628      	mov	r0, r5
 8001938:	f000 f8a8 	bl	8001a8c <__swsetup_r>
 800193c:	2800      	cmp	r0, #0
 800193e:	d0dd      	beq.n	80018fc <_puts_r+0x40>
 8001940:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001946:	07da      	lsls	r2, r3, #31
 8001948:	d405      	bmi.n	8001956 <_puts_r+0x9a>
 800194a:	89a3      	ldrh	r3, [r4, #12]
 800194c:	059b      	lsls	r3, r3, #22
 800194e:	d402      	bmi.n	8001956 <_puts_r+0x9a>
 8001950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001952:	f000 fac2 	bl	8001eda <__retarget_lock_release_recursive>
 8001956:	4628      	mov	r0, r5
 8001958:	bd70      	pop	{r4, r5, r6, pc}
 800195a:	2b00      	cmp	r3, #0
 800195c:	da04      	bge.n	8001968 <_puts_r+0xac>
 800195e:	69a2      	ldr	r2, [r4, #24]
 8001960:	429a      	cmp	r2, r3
 8001962:	dc06      	bgt.n	8001972 <_puts_r+0xb6>
 8001964:	290a      	cmp	r1, #10
 8001966:	d004      	beq.n	8001972 <_puts_r+0xb6>
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	6022      	str	r2, [r4, #0]
 800196e:	7019      	strb	r1, [r3, #0]
 8001970:	e7c5      	b.n	80018fe <_puts_r+0x42>
 8001972:	4622      	mov	r2, r4
 8001974:	4628      	mov	r0, r5
 8001976:	f000 f837 	bl	80019e8 <__swbuf_r>
 800197a:	3001      	adds	r0, #1
 800197c:	d1bf      	bne.n	80018fe <_puts_r+0x42>
 800197e:	e7df      	b.n	8001940 <_puts_r+0x84>
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	250a      	movs	r5, #10
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	6022      	str	r2, [r4, #0]
 8001988:	701d      	strb	r5, [r3, #0]
 800198a:	e7db      	b.n	8001944 <_puts_r+0x88>
 800198c:	080029d8 	.word	0x080029d8
 8001990:	080029f8 	.word	0x080029f8
 8001994:	080029b8 	.word	0x080029b8

08001998 <puts>:
 8001998:	4b02      	ldr	r3, [pc, #8]	; (80019a4 <puts+0xc>)
 800199a:	4601      	mov	r1, r0
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	f7ff bf8d 	b.w	80018bc <_puts_r>
 80019a2:	bf00      	nop
 80019a4:	20000020 	.word	0x20000020

080019a8 <siprintf>:
 80019a8:	b40e      	push	{r1, r2, r3}
 80019aa:	b500      	push	{lr}
 80019ac:	b09c      	sub	sp, #112	; 0x70
 80019ae:	ab1d      	add	r3, sp, #116	; 0x74
 80019b0:	9002      	str	r0, [sp, #8]
 80019b2:	9006      	str	r0, [sp, #24]
 80019b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80019b8:	4809      	ldr	r0, [pc, #36]	; (80019e0 <siprintf+0x38>)
 80019ba:	9107      	str	r1, [sp, #28]
 80019bc:	9104      	str	r1, [sp, #16]
 80019be:	4909      	ldr	r1, [pc, #36]	; (80019e4 <siprintf+0x3c>)
 80019c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80019c4:	9105      	str	r1, [sp, #20]
 80019c6:	6800      	ldr	r0, [r0, #0]
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	a902      	add	r1, sp, #8
 80019cc:	f000 fbee 	bl	80021ac <_svfiprintf_r>
 80019d0:	9b02      	ldr	r3, [sp, #8]
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	b01c      	add	sp, #112	; 0x70
 80019d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80019dc:	b003      	add	sp, #12
 80019de:	4770      	bx	lr
 80019e0:	20000020 	.word	0x20000020
 80019e4:	ffff0208 	.word	0xffff0208

080019e8 <__swbuf_r>:
 80019e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ea:	460e      	mov	r6, r1
 80019ec:	4614      	mov	r4, r2
 80019ee:	4605      	mov	r5, r0
 80019f0:	b118      	cbz	r0, 80019fa <__swbuf_r+0x12>
 80019f2:	6983      	ldr	r3, [r0, #24]
 80019f4:	b90b      	cbnz	r3, 80019fa <__swbuf_r+0x12>
 80019f6:	f000 f9d1 	bl	8001d9c <__sinit>
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <__swbuf_r+0x98>)
 80019fc:	429c      	cmp	r4, r3
 80019fe:	d12b      	bne.n	8001a58 <__swbuf_r+0x70>
 8001a00:	686c      	ldr	r4, [r5, #4]
 8001a02:	69a3      	ldr	r3, [r4, #24]
 8001a04:	60a3      	str	r3, [r4, #8]
 8001a06:	89a3      	ldrh	r3, [r4, #12]
 8001a08:	071a      	lsls	r2, r3, #28
 8001a0a:	d52f      	bpl.n	8001a6c <__swbuf_r+0x84>
 8001a0c:	6923      	ldr	r3, [r4, #16]
 8001a0e:	b36b      	cbz	r3, 8001a6c <__swbuf_r+0x84>
 8001a10:	6923      	ldr	r3, [r4, #16]
 8001a12:	6820      	ldr	r0, [r4, #0]
 8001a14:	1ac0      	subs	r0, r0, r3
 8001a16:	6963      	ldr	r3, [r4, #20]
 8001a18:	b2f6      	uxtb	r6, r6
 8001a1a:	4283      	cmp	r3, r0
 8001a1c:	4637      	mov	r7, r6
 8001a1e:	dc04      	bgt.n	8001a2a <__swbuf_r+0x42>
 8001a20:	4621      	mov	r1, r4
 8001a22:	4628      	mov	r0, r5
 8001a24:	f000 f926 	bl	8001c74 <_fflush_r>
 8001a28:	bb30      	cbnz	r0, 8001a78 <__swbuf_r+0x90>
 8001a2a:	68a3      	ldr	r3, [r4, #8]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	60a3      	str	r3, [r4, #8]
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	6022      	str	r2, [r4, #0]
 8001a36:	701e      	strb	r6, [r3, #0]
 8001a38:	6963      	ldr	r3, [r4, #20]
 8001a3a:	3001      	adds	r0, #1
 8001a3c:	4283      	cmp	r3, r0
 8001a3e:	d004      	beq.n	8001a4a <__swbuf_r+0x62>
 8001a40:	89a3      	ldrh	r3, [r4, #12]
 8001a42:	07db      	lsls	r3, r3, #31
 8001a44:	d506      	bpl.n	8001a54 <__swbuf_r+0x6c>
 8001a46:	2e0a      	cmp	r6, #10
 8001a48:	d104      	bne.n	8001a54 <__swbuf_r+0x6c>
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f000 f911 	bl	8001c74 <_fflush_r>
 8001a52:	b988      	cbnz	r0, 8001a78 <__swbuf_r+0x90>
 8001a54:	4638      	mov	r0, r7
 8001a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <__swbuf_r+0x9c>)
 8001a5a:	429c      	cmp	r4, r3
 8001a5c:	d101      	bne.n	8001a62 <__swbuf_r+0x7a>
 8001a5e:	68ac      	ldr	r4, [r5, #8]
 8001a60:	e7cf      	b.n	8001a02 <__swbuf_r+0x1a>
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <__swbuf_r+0xa0>)
 8001a64:	429c      	cmp	r4, r3
 8001a66:	bf08      	it	eq
 8001a68:	68ec      	ldreq	r4, [r5, #12]
 8001a6a:	e7ca      	b.n	8001a02 <__swbuf_r+0x1a>
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	4628      	mov	r0, r5
 8001a70:	f000 f80c 	bl	8001a8c <__swsetup_r>
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d0cb      	beq.n	8001a10 <__swbuf_r+0x28>
 8001a78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001a7c:	e7ea      	b.n	8001a54 <__swbuf_r+0x6c>
 8001a7e:	bf00      	nop
 8001a80:	080029d8 	.word	0x080029d8
 8001a84:	080029f8 	.word	0x080029f8
 8001a88:	080029b8 	.word	0x080029b8

08001a8c <__swsetup_r>:
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <__swsetup_r+0xcc>)
 8001a8e:	b570      	push	{r4, r5, r6, lr}
 8001a90:	681d      	ldr	r5, [r3, #0]
 8001a92:	4606      	mov	r6, r0
 8001a94:	460c      	mov	r4, r1
 8001a96:	b125      	cbz	r5, 8001aa2 <__swsetup_r+0x16>
 8001a98:	69ab      	ldr	r3, [r5, #24]
 8001a9a:	b913      	cbnz	r3, 8001aa2 <__swsetup_r+0x16>
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	f000 f97d 	bl	8001d9c <__sinit>
 8001aa2:	4b2e      	ldr	r3, [pc, #184]	; (8001b5c <__swsetup_r+0xd0>)
 8001aa4:	429c      	cmp	r4, r3
 8001aa6:	d10f      	bne.n	8001ac8 <__swsetup_r+0x3c>
 8001aa8:	686c      	ldr	r4, [r5, #4]
 8001aaa:	89a3      	ldrh	r3, [r4, #12]
 8001aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ab0:	0719      	lsls	r1, r3, #28
 8001ab2:	d42c      	bmi.n	8001b0e <__swsetup_r+0x82>
 8001ab4:	06dd      	lsls	r5, r3, #27
 8001ab6:	d411      	bmi.n	8001adc <__swsetup_r+0x50>
 8001ab8:	2309      	movs	r3, #9
 8001aba:	6033      	str	r3, [r6, #0]
 8001abc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001ac0:	81a3      	strh	r3, [r4, #12]
 8001ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ac6:	e03e      	b.n	8001b46 <__swsetup_r+0xba>
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <__swsetup_r+0xd4>)
 8001aca:	429c      	cmp	r4, r3
 8001acc:	d101      	bne.n	8001ad2 <__swsetup_r+0x46>
 8001ace:	68ac      	ldr	r4, [r5, #8]
 8001ad0:	e7eb      	b.n	8001aaa <__swsetup_r+0x1e>
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <__swsetup_r+0xd8>)
 8001ad4:	429c      	cmp	r4, r3
 8001ad6:	bf08      	it	eq
 8001ad8:	68ec      	ldreq	r4, [r5, #12]
 8001ada:	e7e6      	b.n	8001aaa <__swsetup_r+0x1e>
 8001adc:	0758      	lsls	r0, r3, #29
 8001ade:	d512      	bpl.n	8001b06 <__swsetup_r+0x7a>
 8001ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ae2:	b141      	cbz	r1, 8001af6 <__swsetup_r+0x6a>
 8001ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ae8:	4299      	cmp	r1, r3
 8001aea:	d002      	beq.n	8001af2 <__swsetup_r+0x66>
 8001aec:	4630      	mov	r0, r6
 8001aee:	f000 fa59 	bl	8001fa4 <_free_r>
 8001af2:	2300      	movs	r3, #0
 8001af4:	6363      	str	r3, [r4, #52]	; 0x34
 8001af6:	89a3      	ldrh	r3, [r4, #12]
 8001af8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001afc:	81a3      	strh	r3, [r4, #12]
 8001afe:	2300      	movs	r3, #0
 8001b00:	6063      	str	r3, [r4, #4]
 8001b02:	6923      	ldr	r3, [r4, #16]
 8001b04:	6023      	str	r3, [r4, #0]
 8001b06:	89a3      	ldrh	r3, [r4, #12]
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	81a3      	strh	r3, [r4, #12]
 8001b0e:	6923      	ldr	r3, [r4, #16]
 8001b10:	b94b      	cbnz	r3, 8001b26 <__swsetup_r+0x9a>
 8001b12:	89a3      	ldrh	r3, [r4, #12]
 8001b14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b1c:	d003      	beq.n	8001b26 <__swsetup_r+0x9a>
 8001b1e:	4621      	mov	r1, r4
 8001b20:	4630      	mov	r0, r6
 8001b22:	f000 f9ff 	bl	8001f24 <__smakebuf_r>
 8001b26:	89a0      	ldrh	r0, [r4, #12]
 8001b28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b2c:	f010 0301 	ands.w	r3, r0, #1
 8001b30:	d00a      	beq.n	8001b48 <__swsetup_r+0xbc>
 8001b32:	2300      	movs	r3, #0
 8001b34:	60a3      	str	r3, [r4, #8]
 8001b36:	6963      	ldr	r3, [r4, #20]
 8001b38:	425b      	negs	r3, r3
 8001b3a:	61a3      	str	r3, [r4, #24]
 8001b3c:	6923      	ldr	r3, [r4, #16]
 8001b3e:	b943      	cbnz	r3, 8001b52 <__swsetup_r+0xc6>
 8001b40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001b44:	d1ba      	bne.n	8001abc <__swsetup_r+0x30>
 8001b46:	bd70      	pop	{r4, r5, r6, pc}
 8001b48:	0781      	lsls	r1, r0, #30
 8001b4a:	bf58      	it	pl
 8001b4c:	6963      	ldrpl	r3, [r4, #20]
 8001b4e:	60a3      	str	r3, [r4, #8]
 8001b50:	e7f4      	b.n	8001b3c <__swsetup_r+0xb0>
 8001b52:	2000      	movs	r0, #0
 8001b54:	e7f7      	b.n	8001b46 <__swsetup_r+0xba>
 8001b56:	bf00      	nop
 8001b58:	20000020 	.word	0x20000020
 8001b5c:	080029d8 	.word	0x080029d8
 8001b60:	080029f8 	.word	0x080029f8
 8001b64:	080029b8 	.word	0x080029b8

08001b68 <__sflush_r>:
 8001b68:	898a      	ldrh	r2, [r1, #12]
 8001b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b6e:	4605      	mov	r5, r0
 8001b70:	0710      	lsls	r0, r2, #28
 8001b72:	460c      	mov	r4, r1
 8001b74:	d458      	bmi.n	8001c28 <__sflush_r+0xc0>
 8001b76:	684b      	ldr	r3, [r1, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	dc05      	bgt.n	8001b88 <__sflush_r+0x20>
 8001b7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	dc02      	bgt.n	8001b88 <__sflush_r+0x20>
 8001b82:	2000      	movs	r0, #0
 8001b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b8a:	2e00      	cmp	r6, #0
 8001b8c:	d0f9      	beq.n	8001b82 <__sflush_r+0x1a>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001b94:	682f      	ldr	r7, [r5, #0]
 8001b96:	602b      	str	r3, [r5, #0]
 8001b98:	d032      	beq.n	8001c00 <__sflush_r+0x98>
 8001b9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b9c:	89a3      	ldrh	r3, [r4, #12]
 8001b9e:	075a      	lsls	r2, r3, #29
 8001ba0:	d505      	bpl.n	8001bae <__sflush_r+0x46>
 8001ba2:	6863      	ldr	r3, [r4, #4]
 8001ba4:	1ac0      	subs	r0, r0, r3
 8001ba6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ba8:	b10b      	cbz	r3, 8001bae <__sflush_r+0x46>
 8001baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bac:	1ac0      	subs	r0, r0, r3
 8001bae:	2300      	movs	r3, #0
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bb4:	6a21      	ldr	r1, [r4, #32]
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	47b0      	blx	r6
 8001bba:	1c43      	adds	r3, r0, #1
 8001bbc:	89a3      	ldrh	r3, [r4, #12]
 8001bbe:	d106      	bne.n	8001bce <__sflush_r+0x66>
 8001bc0:	6829      	ldr	r1, [r5, #0]
 8001bc2:	291d      	cmp	r1, #29
 8001bc4:	d82c      	bhi.n	8001c20 <__sflush_r+0xb8>
 8001bc6:	4a2a      	ldr	r2, [pc, #168]	; (8001c70 <__sflush_r+0x108>)
 8001bc8:	40ca      	lsrs	r2, r1
 8001bca:	07d6      	lsls	r6, r2, #31
 8001bcc:	d528      	bpl.n	8001c20 <__sflush_r+0xb8>
 8001bce:	2200      	movs	r2, #0
 8001bd0:	6062      	str	r2, [r4, #4]
 8001bd2:	04d9      	lsls	r1, r3, #19
 8001bd4:	6922      	ldr	r2, [r4, #16]
 8001bd6:	6022      	str	r2, [r4, #0]
 8001bd8:	d504      	bpl.n	8001be4 <__sflush_r+0x7c>
 8001bda:	1c42      	adds	r2, r0, #1
 8001bdc:	d101      	bne.n	8001be2 <__sflush_r+0x7a>
 8001bde:	682b      	ldr	r3, [r5, #0]
 8001be0:	b903      	cbnz	r3, 8001be4 <__sflush_r+0x7c>
 8001be2:	6560      	str	r0, [r4, #84]	; 0x54
 8001be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001be6:	602f      	str	r7, [r5, #0]
 8001be8:	2900      	cmp	r1, #0
 8001bea:	d0ca      	beq.n	8001b82 <__sflush_r+0x1a>
 8001bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bf0:	4299      	cmp	r1, r3
 8001bf2:	d002      	beq.n	8001bfa <__sflush_r+0x92>
 8001bf4:	4628      	mov	r0, r5
 8001bf6:	f000 f9d5 	bl	8001fa4 <_free_r>
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	6360      	str	r0, [r4, #52]	; 0x34
 8001bfe:	e7c1      	b.n	8001b84 <__sflush_r+0x1c>
 8001c00:	6a21      	ldr	r1, [r4, #32]
 8001c02:	2301      	movs	r3, #1
 8001c04:	4628      	mov	r0, r5
 8001c06:	47b0      	blx	r6
 8001c08:	1c41      	adds	r1, r0, #1
 8001c0a:	d1c7      	bne.n	8001b9c <__sflush_r+0x34>
 8001c0c:	682b      	ldr	r3, [r5, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0c4      	beq.n	8001b9c <__sflush_r+0x34>
 8001c12:	2b1d      	cmp	r3, #29
 8001c14:	d001      	beq.n	8001c1a <__sflush_r+0xb2>
 8001c16:	2b16      	cmp	r3, #22
 8001c18:	d101      	bne.n	8001c1e <__sflush_r+0xb6>
 8001c1a:	602f      	str	r7, [r5, #0]
 8001c1c:	e7b1      	b.n	8001b82 <__sflush_r+0x1a>
 8001c1e:	89a3      	ldrh	r3, [r4, #12]
 8001c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c24:	81a3      	strh	r3, [r4, #12]
 8001c26:	e7ad      	b.n	8001b84 <__sflush_r+0x1c>
 8001c28:	690f      	ldr	r7, [r1, #16]
 8001c2a:	2f00      	cmp	r7, #0
 8001c2c:	d0a9      	beq.n	8001b82 <__sflush_r+0x1a>
 8001c2e:	0793      	lsls	r3, r2, #30
 8001c30:	680e      	ldr	r6, [r1, #0]
 8001c32:	bf08      	it	eq
 8001c34:	694b      	ldreq	r3, [r1, #20]
 8001c36:	600f      	str	r7, [r1, #0]
 8001c38:	bf18      	it	ne
 8001c3a:	2300      	movne	r3, #0
 8001c3c:	eba6 0807 	sub.w	r8, r6, r7
 8001c40:	608b      	str	r3, [r1, #8]
 8001c42:	f1b8 0f00 	cmp.w	r8, #0
 8001c46:	dd9c      	ble.n	8001b82 <__sflush_r+0x1a>
 8001c48:	6a21      	ldr	r1, [r4, #32]
 8001c4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c4c:	4643      	mov	r3, r8
 8001c4e:	463a      	mov	r2, r7
 8001c50:	4628      	mov	r0, r5
 8001c52:	47b0      	blx	r6
 8001c54:	2800      	cmp	r0, #0
 8001c56:	dc06      	bgt.n	8001c66 <__sflush_r+0xfe>
 8001c58:	89a3      	ldrh	r3, [r4, #12]
 8001c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c5e:	81a3      	strh	r3, [r4, #12]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c64:	e78e      	b.n	8001b84 <__sflush_r+0x1c>
 8001c66:	4407      	add	r7, r0
 8001c68:	eba8 0800 	sub.w	r8, r8, r0
 8001c6c:	e7e9      	b.n	8001c42 <__sflush_r+0xda>
 8001c6e:	bf00      	nop
 8001c70:	20400001 	.word	0x20400001

08001c74 <_fflush_r>:
 8001c74:	b538      	push	{r3, r4, r5, lr}
 8001c76:	690b      	ldr	r3, [r1, #16]
 8001c78:	4605      	mov	r5, r0
 8001c7a:	460c      	mov	r4, r1
 8001c7c:	b913      	cbnz	r3, 8001c84 <_fflush_r+0x10>
 8001c7e:	2500      	movs	r5, #0
 8001c80:	4628      	mov	r0, r5
 8001c82:	bd38      	pop	{r3, r4, r5, pc}
 8001c84:	b118      	cbz	r0, 8001c8e <_fflush_r+0x1a>
 8001c86:	6983      	ldr	r3, [r0, #24]
 8001c88:	b90b      	cbnz	r3, 8001c8e <_fflush_r+0x1a>
 8001c8a:	f000 f887 	bl	8001d9c <__sinit>
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <_fflush_r+0x6c>)
 8001c90:	429c      	cmp	r4, r3
 8001c92:	d11b      	bne.n	8001ccc <_fflush_r+0x58>
 8001c94:	686c      	ldr	r4, [r5, #4]
 8001c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0ef      	beq.n	8001c7e <_fflush_r+0xa>
 8001c9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ca0:	07d0      	lsls	r0, r2, #31
 8001ca2:	d404      	bmi.n	8001cae <_fflush_r+0x3a>
 8001ca4:	0599      	lsls	r1, r3, #22
 8001ca6:	d402      	bmi.n	8001cae <_fflush_r+0x3a>
 8001ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001caa:	f000 f915 	bl	8001ed8 <__retarget_lock_acquire_recursive>
 8001cae:	4628      	mov	r0, r5
 8001cb0:	4621      	mov	r1, r4
 8001cb2:	f7ff ff59 	bl	8001b68 <__sflush_r>
 8001cb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001cb8:	07da      	lsls	r2, r3, #31
 8001cba:	4605      	mov	r5, r0
 8001cbc:	d4e0      	bmi.n	8001c80 <_fflush_r+0xc>
 8001cbe:	89a3      	ldrh	r3, [r4, #12]
 8001cc0:	059b      	lsls	r3, r3, #22
 8001cc2:	d4dd      	bmi.n	8001c80 <_fflush_r+0xc>
 8001cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cc6:	f000 f908 	bl	8001eda <__retarget_lock_release_recursive>
 8001cca:	e7d9      	b.n	8001c80 <_fflush_r+0xc>
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <_fflush_r+0x70>)
 8001cce:	429c      	cmp	r4, r3
 8001cd0:	d101      	bne.n	8001cd6 <_fflush_r+0x62>
 8001cd2:	68ac      	ldr	r4, [r5, #8]
 8001cd4:	e7df      	b.n	8001c96 <_fflush_r+0x22>
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <_fflush_r+0x74>)
 8001cd8:	429c      	cmp	r4, r3
 8001cda:	bf08      	it	eq
 8001cdc:	68ec      	ldreq	r4, [r5, #12]
 8001cde:	e7da      	b.n	8001c96 <_fflush_r+0x22>
 8001ce0:	080029d8 	.word	0x080029d8
 8001ce4:	080029f8 	.word	0x080029f8
 8001ce8:	080029b8 	.word	0x080029b8

08001cec <std>:
 8001cec:	2300      	movs	r3, #0
 8001cee:	b510      	push	{r4, lr}
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8001cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001cfa:	6083      	str	r3, [r0, #8]
 8001cfc:	8181      	strh	r1, [r0, #12]
 8001cfe:	6643      	str	r3, [r0, #100]	; 0x64
 8001d00:	81c2      	strh	r2, [r0, #14]
 8001d02:	6183      	str	r3, [r0, #24]
 8001d04:	4619      	mov	r1, r3
 8001d06:	2208      	movs	r2, #8
 8001d08:	305c      	adds	r0, #92	; 0x5c
 8001d0a:	f7ff fdcf 	bl	80018ac <memset>
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <std+0x38>)
 8001d10:	6263      	str	r3, [r4, #36]	; 0x24
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <std+0x3c>)
 8001d14:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <std+0x40>)
 8001d18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <std+0x44>)
 8001d1c:	6224      	str	r4, [r4, #32]
 8001d1e:	6323      	str	r3, [r4, #48]	; 0x30
 8001d20:	bd10      	pop	{r4, pc}
 8001d22:	bf00      	nop
 8001d24:	080026f5 	.word	0x080026f5
 8001d28:	08002717 	.word	0x08002717
 8001d2c:	0800274f 	.word	0x0800274f
 8001d30:	08002773 	.word	0x08002773

08001d34 <_cleanup_r>:
 8001d34:	4901      	ldr	r1, [pc, #4]	; (8001d3c <_cleanup_r+0x8>)
 8001d36:	f000 b8af 	b.w	8001e98 <_fwalk_reent>
 8001d3a:	bf00      	nop
 8001d3c:	08001c75 	.word	0x08001c75

08001d40 <__sfmoreglue>:
 8001d40:	b570      	push	{r4, r5, r6, lr}
 8001d42:	1e4a      	subs	r2, r1, #1
 8001d44:	2568      	movs	r5, #104	; 0x68
 8001d46:	4355      	muls	r5, r2
 8001d48:	460e      	mov	r6, r1
 8001d4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d4e:	f000 f977 	bl	8002040 <_malloc_r>
 8001d52:	4604      	mov	r4, r0
 8001d54:	b140      	cbz	r0, 8001d68 <__sfmoreglue+0x28>
 8001d56:	2100      	movs	r1, #0
 8001d58:	e9c0 1600 	strd	r1, r6, [r0]
 8001d5c:	300c      	adds	r0, #12
 8001d5e:	60a0      	str	r0, [r4, #8]
 8001d60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d64:	f7ff fda2 	bl	80018ac <memset>
 8001d68:	4620      	mov	r0, r4
 8001d6a:	bd70      	pop	{r4, r5, r6, pc}

08001d6c <__sfp_lock_acquire>:
 8001d6c:	4801      	ldr	r0, [pc, #4]	; (8001d74 <__sfp_lock_acquire+0x8>)
 8001d6e:	f000 b8b3 	b.w	8001ed8 <__retarget_lock_acquire_recursive>
 8001d72:	bf00      	nop
 8001d74:	200000f4 	.word	0x200000f4

08001d78 <__sfp_lock_release>:
 8001d78:	4801      	ldr	r0, [pc, #4]	; (8001d80 <__sfp_lock_release+0x8>)
 8001d7a:	f000 b8ae 	b.w	8001eda <__retarget_lock_release_recursive>
 8001d7e:	bf00      	nop
 8001d80:	200000f4 	.word	0x200000f4

08001d84 <__sinit_lock_acquire>:
 8001d84:	4801      	ldr	r0, [pc, #4]	; (8001d8c <__sinit_lock_acquire+0x8>)
 8001d86:	f000 b8a7 	b.w	8001ed8 <__retarget_lock_acquire_recursive>
 8001d8a:	bf00      	nop
 8001d8c:	200000ef 	.word	0x200000ef

08001d90 <__sinit_lock_release>:
 8001d90:	4801      	ldr	r0, [pc, #4]	; (8001d98 <__sinit_lock_release+0x8>)
 8001d92:	f000 b8a2 	b.w	8001eda <__retarget_lock_release_recursive>
 8001d96:	bf00      	nop
 8001d98:	200000ef 	.word	0x200000ef

08001d9c <__sinit>:
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	4604      	mov	r4, r0
 8001da0:	f7ff fff0 	bl	8001d84 <__sinit_lock_acquire>
 8001da4:	69a3      	ldr	r3, [r4, #24]
 8001da6:	b11b      	cbz	r3, 8001db0 <__sinit+0x14>
 8001da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dac:	f7ff bff0 	b.w	8001d90 <__sinit_lock_release>
 8001db0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001db4:	6523      	str	r3, [r4, #80]	; 0x50
 8001db6:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <__sinit+0x68>)
 8001db8:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <__sinit+0x6c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8001dbe:	42a3      	cmp	r3, r4
 8001dc0:	bf04      	itt	eq
 8001dc2:	2301      	moveq	r3, #1
 8001dc4:	61a3      	streq	r3, [r4, #24]
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f000 f820 	bl	8001e0c <__sfp>
 8001dcc:	6060      	str	r0, [r4, #4]
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f000 f81c 	bl	8001e0c <__sfp>
 8001dd4:	60a0      	str	r0, [r4, #8]
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f000 f818 	bl	8001e0c <__sfp>
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60e0      	str	r0, [r4, #12]
 8001de0:	2104      	movs	r1, #4
 8001de2:	6860      	ldr	r0, [r4, #4]
 8001de4:	f7ff ff82 	bl	8001cec <std>
 8001de8:	68a0      	ldr	r0, [r4, #8]
 8001dea:	2201      	movs	r2, #1
 8001dec:	2109      	movs	r1, #9
 8001dee:	f7ff ff7d 	bl	8001cec <std>
 8001df2:	68e0      	ldr	r0, [r4, #12]
 8001df4:	2202      	movs	r2, #2
 8001df6:	2112      	movs	r1, #18
 8001df8:	f7ff ff78 	bl	8001cec <std>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	61a3      	str	r3, [r4, #24]
 8001e00:	e7d2      	b.n	8001da8 <__sinit+0xc>
 8001e02:	bf00      	nop
 8001e04:	080029b4 	.word	0x080029b4
 8001e08:	08001d35 	.word	0x08001d35

08001e0c <__sfp>:
 8001e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0e:	4607      	mov	r7, r0
 8001e10:	f7ff ffac 	bl	8001d6c <__sfp_lock_acquire>
 8001e14:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <__sfp+0x84>)
 8001e16:	681e      	ldr	r6, [r3, #0]
 8001e18:	69b3      	ldr	r3, [r6, #24]
 8001e1a:	b913      	cbnz	r3, 8001e22 <__sfp+0x16>
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	f7ff ffbd 	bl	8001d9c <__sinit>
 8001e22:	3648      	adds	r6, #72	; 0x48
 8001e24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	d503      	bpl.n	8001e34 <__sfp+0x28>
 8001e2c:	6833      	ldr	r3, [r6, #0]
 8001e2e:	b30b      	cbz	r3, 8001e74 <__sfp+0x68>
 8001e30:	6836      	ldr	r6, [r6, #0]
 8001e32:	e7f7      	b.n	8001e24 <__sfp+0x18>
 8001e34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e38:	b9d5      	cbnz	r5, 8001e70 <__sfp+0x64>
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <__sfp+0x88>)
 8001e3c:	60e3      	str	r3, [r4, #12]
 8001e3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e42:	6665      	str	r5, [r4, #100]	; 0x64
 8001e44:	f000 f847 	bl	8001ed6 <__retarget_lock_init_recursive>
 8001e48:	f7ff ff96 	bl	8001d78 <__sfp_lock_release>
 8001e4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001e50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001e54:	6025      	str	r5, [r4, #0]
 8001e56:	61a5      	str	r5, [r4, #24]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001e60:	f7ff fd24 	bl	80018ac <memset>
 8001e64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001e68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e70:	3468      	adds	r4, #104	; 0x68
 8001e72:	e7d9      	b.n	8001e28 <__sfp+0x1c>
 8001e74:	2104      	movs	r1, #4
 8001e76:	4638      	mov	r0, r7
 8001e78:	f7ff ff62 	bl	8001d40 <__sfmoreglue>
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	6030      	str	r0, [r6, #0]
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d1d5      	bne.n	8001e30 <__sfp+0x24>
 8001e84:	f7ff ff78 	bl	8001d78 <__sfp_lock_release>
 8001e88:	230c      	movs	r3, #12
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	e7ee      	b.n	8001e6c <__sfp+0x60>
 8001e8e:	bf00      	nop
 8001e90:	080029b4 	.word	0x080029b4
 8001e94:	ffff0001 	.word	0xffff0001

08001e98 <_fwalk_reent>:
 8001e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e9c:	4606      	mov	r6, r0
 8001e9e:	4688      	mov	r8, r1
 8001ea0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ea4:	2700      	movs	r7, #0
 8001ea6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001eaa:	f1b9 0901 	subs.w	r9, r9, #1
 8001eae:	d505      	bpl.n	8001ebc <_fwalk_reent+0x24>
 8001eb0:	6824      	ldr	r4, [r4, #0]
 8001eb2:	2c00      	cmp	r4, #0
 8001eb4:	d1f7      	bne.n	8001ea6 <_fwalk_reent+0xe>
 8001eb6:	4638      	mov	r0, r7
 8001eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ebc:	89ab      	ldrh	r3, [r5, #12]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d907      	bls.n	8001ed2 <_fwalk_reent+0x3a>
 8001ec2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	d003      	beq.n	8001ed2 <_fwalk_reent+0x3a>
 8001eca:	4629      	mov	r1, r5
 8001ecc:	4630      	mov	r0, r6
 8001ece:	47c0      	blx	r8
 8001ed0:	4307      	orrs	r7, r0
 8001ed2:	3568      	adds	r5, #104	; 0x68
 8001ed4:	e7e9      	b.n	8001eaa <_fwalk_reent+0x12>

08001ed6 <__retarget_lock_init_recursive>:
 8001ed6:	4770      	bx	lr

08001ed8 <__retarget_lock_acquire_recursive>:
 8001ed8:	4770      	bx	lr

08001eda <__retarget_lock_release_recursive>:
 8001eda:	4770      	bx	lr

08001edc <__swhatbuf_r>:
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	460e      	mov	r6, r1
 8001ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ee4:	2900      	cmp	r1, #0
 8001ee6:	b096      	sub	sp, #88	; 0x58
 8001ee8:	4614      	mov	r4, r2
 8001eea:	461d      	mov	r5, r3
 8001eec:	da07      	bge.n	8001efe <__swhatbuf_r+0x22>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	602b      	str	r3, [r5, #0]
 8001ef2:	89b3      	ldrh	r3, [r6, #12]
 8001ef4:	061a      	lsls	r2, r3, #24
 8001ef6:	d410      	bmi.n	8001f1a <__swhatbuf_r+0x3e>
 8001ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efc:	e00e      	b.n	8001f1c <__swhatbuf_r+0x40>
 8001efe:	466a      	mov	r2, sp
 8001f00:	f000 fc5e 	bl	80027c0 <_fstat_r>
 8001f04:	2800      	cmp	r0, #0
 8001f06:	dbf2      	blt.n	8001eee <__swhatbuf_r+0x12>
 8001f08:	9a01      	ldr	r2, [sp, #4]
 8001f0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f12:	425a      	negs	r2, r3
 8001f14:	415a      	adcs	r2, r3
 8001f16:	602a      	str	r2, [r5, #0]
 8001f18:	e7ee      	b.n	8001ef8 <__swhatbuf_r+0x1c>
 8001f1a:	2340      	movs	r3, #64	; 0x40
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	6023      	str	r3, [r4, #0]
 8001f20:	b016      	add	sp, #88	; 0x58
 8001f22:	bd70      	pop	{r4, r5, r6, pc}

08001f24 <__smakebuf_r>:
 8001f24:	898b      	ldrh	r3, [r1, #12]
 8001f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f28:	079d      	lsls	r5, r3, #30
 8001f2a:	4606      	mov	r6, r0
 8001f2c:	460c      	mov	r4, r1
 8001f2e:	d507      	bpl.n	8001f40 <__smakebuf_r+0x1c>
 8001f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f34:	6023      	str	r3, [r4, #0]
 8001f36:	6123      	str	r3, [r4, #16]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	6163      	str	r3, [r4, #20]
 8001f3c:	b002      	add	sp, #8
 8001f3e:	bd70      	pop	{r4, r5, r6, pc}
 8001f40:	ab01      	add	r3, sp, #4
 8001f42:	466a      	mov	r2, sp
 8001f44:	f7ff ffca 	bl	8001edc <__swhatbuf_r>
 8001f48:	9900      	ldr	r1, [sp, #0]
 8001f4a:	4605      	mov	r5, r0
 8001f4c:	4630      	mov	r0, r6
 8001f4e:	f000 f877 	bl	8002040 <_malloc_r>
 8001f52:	b948      	cbnz	r0, 8001f68 <__smakebuf_r+0x44>
 8001f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f58:	059a      	lsls	r2, r3, #22
 8001f5a:	d4ef      	bmi.n	8001f3c <__smakebuf_r+0x18>
 8001f5c:	f023 0303 	bic.w	r3, r3, #3
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	81a3      	strh	r3, [r4, #12]
 8001f66:	e7e3      	b.n	8001f30 <__smakebuf_r+0xc>
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <__smakebuf_r+0x7c>)
 8001f6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f6c:	89a3      	ldrh	r3, [r4, #12]
 8001f6e:	6020      	str	r0, [r4, #0]
 8001f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f74:	81a3      	strh	r3, [r4, #12]
 8001f76:	9b00      	ldr	r3, [sp, #0]
 8001f78:	6163      	str	r3, [r4, #20]
 8001f7a:	9b01      	ldr	r3, [sp, #4]
 8001f7c:	6120      	str	r0, [r4, #16]
 8001f7e:	b15b      	cbz	r3, 8001f98 <__smakebuf_r+0x74>
 8001f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f84:	4630      	mov	r0, r6
 8001f86:	f000 fc2d 	bl	80027e4 <_isatty_r>
 8001f8a:	b128      	cbz	r0, 8001f98 <__smakebuf_r+0x74>
 8001f8c:	89a3      	ldrh	r3, [r4, #12]
 8001f8e:	f023 0303 	bic.w	r3, r3, #3
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	81a3      	strh	r3, [r4, #12]
 8001f98:	89a0      	ldrh	r0, [r4, #12]
 8001f9a:	4305      	orrs	r5, r0
 8001f9c:	81a5      	strh	r5, [r4, #12]
 8001f9e:	e7cd      	b.n	8001f3c <__smakebuf_r+0x18>
 8001fa0:	08001d35 	.word	0x08001d35

08001fa4 <_free_r>:
 8001fa4:	b538      	push	{r3, r4, r5, lr}
 8001fa6:	4605      	mov	r5, r0
 8001fa8:	2900      	cmp	r1, #0
 8001faa:	d045      	beq.n	8002038 <_free_r+0x94>
 8001fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fb0:	1f0c      	subs	r4, r1, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bfb8      	it	lt
 8001fb6:	18e4      	addlt	r4, r4, r3
 8001fb8:	f000 fc5e 	bl	8002878 <__malloc_lock>
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <_free_r+0x98>)
 8001fbe:	6813      	ldr	r3, [r2, #0]
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	b933      	cbnz	r3, 8001fd2 <_free_r+0x2e>
 8001fc4:	6063      	str	r3, [r4, #4]
 8001fc6:	6014      	str	r4, [r2, #0]
 8001fc8:	4628      	mov	r0, r5
 8001fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fce:	f000 bc59 	b.w	8002884 <__malloc_unlock>
 8001fd2:	42a3      	cmp	r3, r4
 8001fd4:	d90b      	bls.n	8001fee <_free_r+0x4a>
 8001fd6:	6821      	ldr	r1, [r4, #0]
 8001fd8:	1862      	adds	r2, r4, r1
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	bf04      	itt	eq
 8001fde:	681a      	ldreq	r2, [r3, #0]
 8001fe0:	685b      	ldreq	r3, [r3, #4]
 8001fe2:	6063      	str	r3, [r4, #4]
 8001fe4:	bf04      	itt	eq
 8001fe6:	1852      	addeq	r2, r2, r1
 8001fe8:	6022      	streq	r2, [r4, #0]
 8001fea:	6004      	str	r4, [r0, #0]
 8001fec:	e7ec      	b.n	8001fc8 <_free_r+0x24>
 8001fee:	461a      	mov	r2, r3
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	b10b      	cbz	r3, 8001ff8 <_free_r+0x54>
 8001ff4:	42a3      	cmp	r3, r4
 8001ff6:	d9fa      	bls.n	8001fee <_free_r+0x4a>
 8001ff8:	6811      	ldr	r1, [r2, #0]
 8001ffa:	1850      	adds	r0, r2, r1
 8001ffc:	42a0      	cmp	r0, r4
 8001ffe:	d10b      	bne.n	8002018 <_free_r+0x74>
 8002000:	6820      	ldr	r0, [r4, #0]
 8002002:	4401      	add	r1, r0
 8002004:	1850      	adds	r0, r2, r1
 8002006:	4283      	cmp	r3, r0
 8002008:	6011      	str	r1, [r2, #0]
 800200a:	d1dd      	bne.n	8001fc8 <_free_r+0x24>
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	6053      	str	r3, [r2, #4]
 8002012:	4401      	add	r1, r0
 8002014:	6011      	str	r1, [r2, #0]
 8002016:	e7d7      	b.n	8001fc8 <_free_r+0x24>
 8002018:	d902      	bls.n	8002020 <_free_r+0x7c>
 800201a:	230c      	movs	r3, #12
 800201c:	602b      	str	r3, [r5, #0]
 800201e:	e7d3      	b.n	8001fc8 <_free_r+0x24>
 8002020:	6820      	ldr	r0, [r4, #0]
 8002022:	1821      	adds	r1, r4, r0
 8002024:	428b      	cmp	r3, r1
 8002026:	bf04      	itt	eq
 8002028:	6819      	ldreq	r1, [r3, #0]
 800202a:	685b      	ldreq	r3, [r3, #4]
 800202c:	6063      	str	r3, [r4, #4]
 800202e:	bf04      	itt	eq
 8002030:	1809      	addeq	r1, r1, r0
 8002032:	6021      	streq	r1, [r4, #0]
 8002034:	6054      	str	r4, [r2, #4]
 8002036:	e7c7      	b.n	8001fc8 <_free_r+0x24>
 8002038:	bd38      	pop	{r3, r4, r5, pc}
 800203a:	bf00      	nop
 800203c:	200000bc 	.word	0x200000bc

08002040 <_malloc_r>:
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002042:	1ccd      	adds	r5, r1, #3
 8002044:	f025 0503 	bic.w	r5, r5, #3
 8002048:	3508      	adds	r5, #8
 800204a:	2d0c      	cmp	r5, #12
 800204c:	bf38      	it	cc
 800204e:	250c      	movcc	r5, #12
 8002050:	2d00      	cmp	r5, #0
 8002052:	4606      	mov	r6, r0
 8002054:	db01      	blt.n	800205a <_malloc_r+0x1a>
 8002056:	42a9      	cmp	r1, r5
 8002058:	d903      	bls.n	8002062 <_malloc_r+0x22>
 800205a:	230c      	movs	r3, #12
 800205c:	6033      	str	r3, [r6, #0]
 800205e:	2000      	movs	r0, #0
 8002060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002062:	f000 fc09 	bl	8002878 <__malloc_lock>
 8002066:	4921      	ldr	r1, [pc, #132]	; (80020ec <_malloc_r+0xac>)
 8002068:	680a      	ldr	r2, [r1, #0]
 800206a:	4614      	mov	r4, r2
 800206c:	b99c      	cbnz	r4, 8002096 <_malloc_r+0x56>
 800206e:	4f20      	ldr	r7, [pc, #128]	; (80020f0 <_malloc_r+0xb0>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	b923      	cbnz	r3, 800207e <_malloc_r+0x3e>
 8002074:	4621      	mov	r1, r4
 8002076:	4630      	mov	r0, r6
 8002078:	f000 fb2c 	bl	80026d4 <_sbrk_r>
 800207c:	6038      	str	r0, [r7, #0]
 800207e:	4629      	mov	r1, r5
 8002080:	4630      	mov	r0, r6
 8002082:	f000 fb27 	bl	80026d4 <_sbrk_r>
 8002086:	1c43      	adds	r3, r0, #1
 8002088:	d123      	bne.n	80020d2 <_malloc_r+0x92>
 800208a:	230c      	movs	r3, #12
 800208c:	6033      	str	r3, [r6, #0]
 800208e:	4630      	mov	r0, r6
 8002090:	f000 fbf8 	bl	8002884 <__malloc_unlock>
 8002094:	e7e3      	b.n	800205e <_malloc_r+0x1e>
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	1b5b      	subs	r3, r3, r5
 800209a:	d417      	bmi.n	80020cc <_malloc_r+0x8c>
 800209c:	2b0b      	cmp	r3, #11
 800209e:	d903      	bls.n	80020a8 <_malloc_r+0x68>
 80020a0:	6023      	str	r3, [r4, #0]
 80020a2:	441c      	add	r4, r3
 80020a4:	6025      	str	r5, [r4, #0]
 80020a6:	e004      	b.n	80020b2 <_malloc_r+0x72>
 80020a8:	6863      	ldr	r3, [r4, #4]
 80020aa:	42a2      	cmp	r2, r4
 80020ac:	bf0c      	ite	eq
 80020ae:	600b      	streq	r3, [r1, #0]
 80020b0:	6053      	strne	r3, [r2, #4]
 80020b2:	4630      	mov	r0, r6
 80020b4:	f000 fbe6 	bl	8002884 <__malloc_unlock>
 80020b8:	f104 000b 	add.w	r0, r4, #11
 80020bc:	1d23      	adds	r3, r4, #4
 80020be:	f020 0007 	bic.w	r0, r0, #7
 80020c2:	1ac2      	subs	r2, r0, r3
 80020c4:	d0cc      	beq.n	8002060 <_malloc_r+0x20>
 80020c6:	1a1b      	subs	r3, r3, r0
 80020c8:	50a3      	str	r3, [r4, r2]
 80020ca:	e7c9      	b.n	8002060 <_malloc_r+0x20>
 80020cc:	4622      	mov	r2, r4
 80020ce:	6864      	ldr	r4, [r4, #4]
 80020d0:	e7cc      	b.n	800206c <_malloc_r+0x2c>
 80020d2:	1cc4      	adds	r4, r0, #3
 80020d4:	f024 0403 	bic.w	r4, r4, #3
 80020d8:	42a0      	cmp	r0, r4
 80020da:	d0e3      	beq.n	80020a4 <_malloc_r+0x64>
 80020dc:	1a21      	subs	r1, r4, r0
 80020de:	4630      	mov	r0, r6
 80020e0:	f000 faf8 	bl	80026d4 <_sbrk_r>
 80020e4:	3001      	adds	r0, #1
 80020e6:	d1dd      	bne.n	80020a4 <_malloc_r+0x64>
 80020e8:	e7cf      	b.n	800208a <_malloc_r+0x4a>
 80020ea:	bf00      	nop
 80020ec:	200000bc 	.word	0x200000bc
 80020f0:	200000c0 	.word	0x200000c0

080020f4 <__ssputs_r>:
 80020f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020f8:	688e      	ldr	r6, [r1, #8]
 80020fa:	429e      	cmp	r6, r3
 80020fc:	4682      	mov	sl, r0
 80020fe:	460c      	mov	r4, r1
 8002100:	4690      	mov	r8, r2
 8002102:	461f      	mov	r7, r3
 8002104:	d838      	bhi.n	8002178 <__ssputs_r+0x84>
 8002106:	898a      	ldrh	r2, [r1, #12]
 8002108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800210c:	d032      	beq.n	8002174 <__ssputs_r+0x80>
 800210e:	6825      	ldr	r5, [r4, #0]
 8002110:	6909      	ldr	r1, [r1, #16]
 8002112:	eba5 0901 	sub.w	r9, r5, r1
 8002116:	6965      	ldr	r5, [r4, #20]
 8002118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800211c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002120:	3301      	adds	r3, #1
 8002122:	444b      	add	r3, r9
 8002124:	106d      	asrs	r5, r5, #1
 8002126:	429d      	cmp	r5, r3
 8002128:	bf38      	it	cc
 800212a:	461d      	movcc	r5, r3
 800212c:	0553      	lsls	r3, r2, #21
 800212e:	d531      	bpl.n	8002194 <__ssputs_r+0xa0>
 8002130:	4629      	mov	r1, r5
 8002132:	f7ff ff85 	bl	8002040 <_malloc_r>
 8002136:	4606      	mov	r6, r0
 8002138:	b950      	cbnz	r0, 8002150 <__ssputs_r+0x5c>
 800213a:	230c      	movs	r3, #12
 800213c:	f8ca 3000 	str.w	r3, [sl]
 8002140:	89a3      	ldrh	r3, [r4, #12]
 8002142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002146:	81a3      	strh	r3, [r4, #12]
 8002148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800214c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002150:	6921      	ldr	r1, [r4, #16]
 8002152:	464a      	mov	r2, r9
 8002154:	f000 fb68 	bl	8002828 <memcpy>
 8002158:	89a3      	ldrh	r3, [r4, #12]
 800215a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800215e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002162:	81a3      	strh	r3, [r4, #12]
 8002164:	6126      	str	r6, [r4, #16]
 8002166:	6165      	str	r5, [r4, #20]
 8002168:	444e      	add	r6, r9
 800216a:	eba5 0509 	sub.w	r5, r5, r9
 800216e:	6026      	str	r6, [r4, #0]
 8002170:	60a5      	str	r5, [r4, #8]
 8002172:	463e      	mov	r6, r7
 8002174:	42be      	cmp	r6, r7
 8002176:	d900      	bls.n	800217a <__ssputs_r+0x86>
 8002178:	463e      	mov	r6, r7
 800217a:	4632      	mov	r2, r6
 800217c:	6820      	ldr	r0, [r4, #0]
 800217e:	4641      	mov	r1, r8
 8002180:	f000 fb60 	bl	8002844 <memmove>
 8002184:	68a3      	ldr	r3, [r4, #8]
 8002186:	6822      	ldr	r2, [r4, #0]
 8002188:	1b9b      	subs	r3, r3, r6
 800218a:	4432      	add	r2, r6
 800218c:	60a3      	str	r3, [r4, #8]
 800218e:	6022      	str	r2, [r4, #0]
 8002190:	2000      	movs	r0, #0
 8002192:	e7db      	b.n	800214c <__ssputs_r+0x58>
 8002194:	462a      	mov	r2, r5
 8002196:	f000 fb7b 	bl	8002890 <_realloc_r>
 800219a:	4606      	mov	r6, r0
 800219c:	2800      	cmp	r0, #0
 800219e:	d1e1      	bne.n	8002164 <__ssputs_r+0x70>
 80021a0:	6921      	ldr	r1, [r4, #16]
 80021a2:	4650      	mov	r0, sl
 80021a4:	f7ff fefe 	bl	8001fa4 <_free_r>
 80021a8:	e7c7      	b.n	800213a <__ssputs_r+0x46>
	...

080021ac <_svfiprintf_r>:
 80021ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021b0:	4698      	mov	r8, r3
 80021b2:	898b      	ldrh	r3, [r1, #12]
 80021b4:	061b      	lsls	r3, r3, #24
 80021b6:	b09d      	sub	sp, #116	; 0x74
 80021b8:	4607      	mov	r7, r0
 80021ba:	460d      	mov	r5, r1
 80021bc:	4614      	mov	r4, r2
 80021be:	d50e      	bpl.n	80021de <_svfiprintf_r+0x32>
 80021c0:	690b      	ldr	r3, [r1, #16]
 80021c2:	b963      	cbnz	r3, 80021de <_svfiprintf_r+0x32>
 80021c4:	2140      	movs	r1, #64	; 0x40
 80021c6:	f7ff ff3b 	bl	8002040 <_malloc_r>
 80021ca:	6028      	str	r0, [r5, #0]
 80021cc:	6128      	str	r0, [r5, #16]
 80021ce:	b920      	cbnz	r0, 80021da <_svfiprintf_r+0x2e>
 80021d0:	230c      	movs	r3, #12
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d8:	e0d1      	b.n	800237e <_svfiprintf_r+0x1d2>
 80021da:	2340      	movs	r3, #64	; 0x40
 80021dc:	616b      	str	r3, [r5, #20]
 80021de:	2300      	movs	r3, #0
 80021e0:	9309      	str	r3, [sp, #36]	; 0x24
 80021e2:	2320      	movs	r3, #32
 80021e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80021ec:	2330      	movs	r3, #48	; 0x30
 80021ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002398 <_svfiprintf_r+0x1ec>
 80021f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021f6:	f04f 0901 	mov.w	r9, #1
 80021fa:	4623      	mov	r3, r4
 80021fc:	469a      	mov	sl, r3
 80021fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002202:	b10a      	cbz	r2, 8002208 <_svfiprintf_r+0x5c>
 8002204:	2a25      	cmp	r2, #37	; 0x25
 8002206:	d1f9      	bne.n	80021fc <_svfiprintf_r+0x50>
 8002208:	ebba 0b04 	subs.w	fp, sl, r4
 800220c:	d00b      	beq.n	8002226 <_svfiprintf_r+0x7a>
 800220e:	465b      	mov	r3, fp
 8002210:	4622      	mov	r2, r4
 8002212:	4629      	mov	r1, r5
 8002214:	4638      	mov	r0, r7
 8002216:	f7ff ff6d 	bl	80020f4 <__ssputs_r>
 800221a:	3001      	adds	r0, #1
 800221c:	f000 80aa 	beq.w	8002374 <_svfiprintf_r+0x1c8>
 8002220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002222:	445a      	add	r2, fp
 8002224:	9209      	str	r2, [sp, #36]	; 0x24
 8002226:	f89a 3000 	ldrb.w	r3, [sl]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80a2 	beq.w	8002374 <_svfiprintf_r+0x1c8>
 8002230:	2300      	movs	r3, #0
 8002232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800223a:	f10a 0a01 	add.w	sl, sl, #1
 800223e:	9304      	str	r3, [sp, #16]
 8002240:	9307      	str	r3, [sp, #28]
 8002242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002246:	931a      	str	r3, [sp, #104]	; 0x68
 8002248:	4654      	mov	r4, sl
 800224a:	2205      	movs	r2, #5
 800224c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002250:	4851      	ldr	r0, [pc, #324]	; (8002398 <_svfiprintf_r+0x1ec>)
 8002252:	f7fd ffcd 	bl	80001f0 <memchr>
 8002256:	9a04      	ldr	r2, [sp, #16]
 8002258:	b9d8      	cbnz	r0, 8002292 <_svfiprintf_r+0xe6>
 800225a:	06d0      	lsls	r0, r2, #27
 800225c:	bf44      	itt	mi
 800225e:	2320      	movmi	r3, #32
 8002260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002264:	0711      	lsls	r1, r2, #28
 8002266:	bf44      	itt	mi
 8002268:	232b      	movmi	r3, #43	; 0x2b
 800226a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800226e:	f89a 3000 	ldrb.w	r3, [sl]
 8002272:	2b2a      	cmp	r3, #42	; 0x2a
 8002274:	d015      	beq.n	80022a2 <_svfiprintf_r+0xf6>
 8002276:	9a07      	ldr	r2, [sp, #28]
 8002278:	4654      	mov	r4, sl
 800227a:	2000      	movs	r0, #0
 800227c:	f04f 0c0a 	mov.w	ip, #10
 8002280:	4621      	mov	r1, r4
 8002282:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002286:	3b30      	subs	r3, #48	; 0x30
 8002288:	2b09      	cmp	r3, #9
 800228a:	d94e      	bls.n	800232a <_svfiprintf_r+0x17e>
 800228c:	b1b0      	cbz	r0, 80022bc <_svfiprintf_r+0x110>
 800228e:	9207      	str	r2, [sp, #28]
 8002290:	e014      	b.n	80022bc <_svfiprintf_r+0x110>
 8002292:	eba0 0308 	sub.w	r3, r0, r8
 8002296:	fa09 f303 	lsl.w	r3, r9, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	9304      	str	r3, [sp, #16]
 800229e:	46a2      	mov	sl, r4
 80022a0:	e7d2      	b.n	8002248 <_svfiprintf_r+0x9c>
 80022a2:	9b03      	ldr	r3, [sp, #12]
 80022a4:	1d19      	adds	r1, r3, #4
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	9103      	str	r1, [sp, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bfbb      	ittet	lt
 80022ae:	425b      	neglt	r3, r3
 80022b0:	f042 0202 	orrlt.w	r2, r2, #2
 80022b4:	9307      	strge	r3, [sp, #28]
 80022b6:	9307      	strlt	r3, [sp, #28]
 80022b8:	bfb8      	it	lt
 80022ba:	9204      	strlt	r2, [sp, #16]
 80022bc:	7823      	ldrb	r3, [r4, #0]
 80022be:	2b2e      	cmp	r3, #46	; 0x2e
 80022c0:	d10c      	bne.n	80022dc <_svfiprintf_r+0x130>
 80022c2:	7863      	ldrb	r3, [r4, #1]
 80022c4:	2b2a      	cmp	r3, #42	; 0x2a
 80022c6:	d135      	bne.n	8002334 <_svfiprintf_r+0x188>
 80022c8:	9b03      	ldr	r3, [sp, #12]
 80022ca:	1d1a      	adds	r2, r3, #4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	9203      	str	r2, [sp, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bfb8      	it	lt
 80022d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80022d8:	3402      	adds	r4, #2
 80022da:	9305      	str	r3, [sp, #20]
 80022dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80023a8 <_svfiprintf_r+0x1fc>
 80022e0:	7821      	ldrb	r1, [r4, #0]
 80022e2:	2203      	movs	r2, #3
 80022e4:	4650      	mov	r0, sl
 80022e6:	f7fd ff83 	bl	80001f0 <memchr>
 80022ea:	b140      	cbz	r0, 80022fe <_svfiprintf_r+0x152>
 80022ec:	2340      	movs	r3, #64	; 0x40
 80022ee:	eba0 000a 	sub.w	r0, r0, sl
 80022f2:	fa03 f000 	lsl.w	r0, r3, r0
 80022f6:	9b04      	ldr	r3, [sp, #16]
 80022f8:	4303      	orrs	r3, r0
 80022fa:	3401      	adds	r4, #1
 80022fc:	9304      	str	r3, [sp, #16]
 80022fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002302:	4826      	ldr	r0, [pc, #152]	; (800239c <_svfiprintf_r+0x1f0>)
 8002304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002308:	2206      	movs	r2, #6
 800230a:	f7fd ff71 	bl	80001f0 <memchr>
 800230e:	2800      	cmp	r0, #0
 8002310:	d038      	beq.n	8002384 <_svfiprintf_r+0x1d8>
 8002312:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <_svfiprintf_r+0x1f4>)
 8002314:	bb1b      	cbnz	r3, 800235e <_svfiprintf_r+0x1b2>
 8002316:	9b03      	ldr	r3, [sp, #12]
 8002318:	3307      	adds	r3, #7
 800231a:	f023 0307 	bic.w	r3, r3, #7
 800231e:	3308      	adds	r3, #8
 8002320:	9303      	str	r3, [sp, #12]
 8002322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002324:	4433      	add	r3, r6
 8002326:	9309      	str	r3, [sp, #36]	; 0x24
 8002328:	e767      	b.n	80021fa <_svfiprintf_r+0x4e>
 800232a:	fb0c 3202 	mla	r2, ip, r2, r3
 800232e:	460c      	mov	r4, r1
 8002330:	2001      	movs	r0, #1
 8002332:	e7a5      	b.n	8002280 <_svfiprintf_r+0xd4>
 8002334:	2300      	movs	r3, #0
 8002336:	3401      	adds	r4, #1
 8002338:	9305      	str	r3, [sp, #20]
 800233a:	4619      	mov	r1, r3
 800233c:	f04f 0c0a 	mov.w	ip, #10
 8002340:	4620      	mov	r0, r4
 8002342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002346:	3a30      	subs	r2, #48	; 0x30
 8002348:	2a09      	cmp	r2, #9
 800234a:	d903      	bls.n	8002354 <_svfiprintf_r+0x1a8>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0c5      	beq.n	80022dc <_svfiprintf_r+0x130>
 8002350:	9105      	str	r1, [sp, #20]
 8002352:	e7c3      	b.n	80022dc <_svfiprintf_r+0x130>
 8002354:	fb0c 2101 	mla	r1, ip, r1, r2
 8002358:	4604      	mov	r4, r0
 800235a:	2301      	movs	r3, #1
 800235c:	e7f0      	b.n	8002340 <_svfiprintf_r+0x194>
 800235e:	ab03      	add	r3, sp, #12
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	462a      	mov	r2, r5
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <_svfiprintf_r+0x1f8>)
 8002366:	a904      	add	r1, sp, #16
 8002368:	4638      	mov	r0, r7
 800236a:	f3af 8000 	nop.w
 800236e:	1c42      	adds	r2, r0, #1
 8002370:	4606      	mov	r6, r0
 8002372:	d1d6      	bne.n	8002322 <_svfiprintf_r+0x176>
 8002374:	89ab      	ldrh	r3, [r5, #12]
 8002376:	065b      	lsls	r3, r3, #25
 8002378:	f53f af2c 	bmi.w	80021d4 <_svfiprintf_r+0x28>
 800237c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800237e:	b01d      	add	sp, #116	; 0x74
 8002380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002384:	ab03      	add	r3, sp, #12
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	462a      	mov	r2, r5
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <_svfiprintf_r+0x1f8>)
 800238c:	a904      	add	r1, sp, #16
 800238e:	4638      	mov	r0, r7
 8002390:	f000 f87a 	bl	8002488 <_printf_i>
 8002394:	e7eb      	b.n	800236e <_svfiprintf_r+0x1c2>
 8002396:	bf00      	nop
 8002398:	08002a18 	.word	0x08002a18
 800239c:	08002a22 	.word	0x08002a22
 80023a0:	00000000 	.word	0x00000000
 80023a4:	080020f5 	.word	0x080020f5
 80023a8:	08002a1e 	.word	0x08002a1e

080023ac <_printf_common>:
 80023ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023b0:	4616      	mov	r6, r2
 80023b2:	4699      	mov	r9, r3
 80023b4:	688a      	ldr	r2, [r1, #8]
 80023b6:	690b      	ldr	r3, [r1, #16]
 80023b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023bc:	4293      	cmp	r3, r2
 80023be:	bfb8      	it	lt
 80023c0:	4613      	movlt	r3, r2
 80023c2:	6033      	str	r3, [r6, #0]
 80023c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023c8:	4607      	mov	r7, r0
 80023ca:	460c      	mov	r4, r1
 80023cc:	b10a      	cbz	r2, 80023d2 <_printf_common+0x26>
 80023ce:	3301      	adds	r3, #1
 80023d0:	6033      	str	r3, [r6, #0]
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	0699      	lsls	r1, r3, #26
 80023d6:	bf42      	ittt	mi
 80023d8:	6833      	ldrmi	r3, [r6, #0]
 80023da:	3302      	addmi	r3, #2
 80023dc:	6033      	strmi	r3, [r6, #0]
 80023de:	6825      	ldr	r5, [r4, #0]
 80023e0:	f015 0506 	ands.w	r5, r5, #6
 80023e4:	d106      	bne.n	80023f4 <_printf_common+0x48>
 80023e6:	f104 0a19 	add.w	sl, r4, #25
 80023ea:	68e3      	ldr	r3, [r4, #12]
 80023ec:	6832      	ldr	r2, [r6, #0]
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	42ab      	cmp	r3, r5
 80023f2:	dc26      	bgt.n	8002442 <_printf_common+0x96>
 80023f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023f8:	1e13      	subs	r3, r2, #0
 80023fa:	6822      	ldr	r2, [r4, #0]
 80023fc:	bf18      	it	ne
 80023fe:	2301      	movne	r3, #1
 8002400:	0692      	lsls	r2, r2, #26
 8002402:	d42b      	bmi.n	800245c <_printf_common+0xb0>
 8002404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002408:	4649      	mov	r1, r9
 800240a:	4638      	mov	r0, r7
 800240c:	47c0      	blx	r8
 800240e:	3001      	adds	r0, #1
 8002410:	d01e      	beq.n	8002450 <_printf_common+0xa4>
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	68e5      	ldr	r5, [r4, #12]
 8002416:	6832      	ldr	r2, [r6, #0]
 8002418:	f003 0306 	and.w	r3, r3, #6
 800241c:	2b04      	cmp	r3, #4
 800241e:	bf08      	it	eq
 8002420:	1aad      	subeq	r5, r5, r2
 8002422:	68a3      	ldr	r3, [r4, #8]
 8002424:	6922      	ldr	r2, [r4, #16]
 8002426:	bf0c      	ite	eq
 8002428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800242c:	2500      	movne	r5, #0
 800242e:	4293      	cmp	r3, r2
 8002430:	bfc4      	itt	gt
 8002432:	1a9b      	subgt	r3, r3, r2
 8002434:	18ed      	addgt	r5, r5, r3
 8002436:	2600      	movs	r6, #0
 8002438:	341a      	adds	r4, #26
 800243a:	42b5      	cmp	r5, r6
 800243c:	d11a      	bne.n	8002474 <_printf_common+0xc8>
 800243e:	2000      	movs	r0, #0
 8002440:	e008      	b.n	8002454 <_printf_common+0xa8>
 8002442:	2301      	movs	r3, #1
 8002444:	4652      	mov	r2, sl
 8002446:	4649      	mov	r1, r9
 8002448:	4638      	mov	r0, r7
 800244a:	47c0      	blx	r8
 800244c:	3001      	adds	r0, #1
 800244e:	d103      	bne.n	8002458 <_printf_common+0xac>
 8002450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002458:	3501      	adds	r5, #1
 800245a:	e7c6      	b.n	80023ea <_printf_common+0x3e>
 800245c:	18e1      	adds	r1, r4, r3
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	2030      	movs	r0, #48	; 0x30
 8002462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002466:	4422      	add	r2, r4
 8002468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800246c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002470:	3302      	adds	r3, #2
 8002472:	e7c7      	b.n	8002404 <_printf_common+0x58>
 8002474:	2301      	movs	r3, #1
 8002476:	4622      	mov	r2, r4
 8002478:	4649      	mov	r1, r9
 800247a:	4638      	mov	r0, r7
 800247c:	47c0      	blx	r8
 800247e:	3001      	adds	r0, #1
 8002480:	d0e6      	beq.n	8002450 <_printf_common+0xa4>
 8002482:	3601      	adds	r6, #1
 8002484:	e7d9      	b.n	800243a <_printf_common+0x8e>
	...

08002488 <_printf_i>:
 8002488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800248c:	460c      	mov	r4, r1
 800248e:	4691      	mov	r9, r2
 8002490:	7e27      	ldrb	r7, [r4, #24]
 8002492:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002494:	2f78      	cmp	r7, #120	; 0x78
 8002496:	4680      	mov	r8, r0
 8002498:	469a      	mov	sl, r3
 800249a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800249e:	d807      	bhi.n	80024b0 <_printf_i+0x28>
 80024a0:	2f62      	cmp	r7, #98	; 0x62
 80024a2:	d80a      	bhi.n	80024ba <_printf_i+0x32>
 80024a4:	2f00      	cmp	r7, #0
 80024a6:	f000 80d8 	beq.w	800265a <_printf_i+0x1d2>
 80024aa:	2f58      	cmp	r7, #88	; 0x58
 80024ac:	f000 80a3 	beq.w	80025f6 <_printf_i+0x16e>
 80024b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80024b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024b8:	e03a      	b.n	8002530 <_printf_i+0xa8>
 80024ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80024be:	2b15      	cmp	r3, #21
 80024c0:	d8f6      	bhi.n	80024b0 <_printf_i+0x28>
 80024c2:	a001      	add	r0, pc, #4	; (adr r0, 80024c8 <_printf_i+0x40>)
 80024c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80024c8:	08002521 	.word	0x08002521
 80024cc:	08002535 	.word	0x08002535
 80024d0:	080024b1 	.word	0x080024b1
 80024d4:	080024b1 	.word	0x080024b1
 80024d8:	080024b1 	.word	0x080024b1
 80024dc:	080024b1 	.word	0x080024b1
 80024e0:	08002535 	.word	0x08002535
 80024e4:	080024b1 	.word	0x080024b1
 80024e8:	080024b1 	.word	0x080024b1
 80024ec:	080024b1 	.word	0x080024b1
 80024f0:	080024b1 	.word	0x080024b1
 80024f4:	08002641 	.word	0x08002641
 80024f8:	08002565 	.word	0x08002565
 80024fc:	08002623 	.word	0x08002623
 8002500:	080024b1 	.word	0x080024b1
 8002504:	080024b1 	.word	0x080024b1
 8002508:	08002663 	.word	0x08002663
 800250c:	080024b1 	.word	0x080024b1
 8002510:	08002565 	.word	0x08002565
 8002514:	080024b1 	.word	0x080024b1
 8002518:	080024b1 	.word	0x080024b1
 800251c:	0800262b 	.word	0x0800262b
 8002520:	680b      	ldr	r3, [r1, #0]
 8002522:	1d1a      	adds	r2, r3, #4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	600a      	str	r2, [r1, #0]
 8002528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800252c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002530:	2301      	movs	r3, #1
 8002532:	e0a3      	b.n	800267c <_printf_i+0x1f4>
 8002534:	6825      	ldr	r5, [r4, #0]
 8002536:	6808      	ldr	r0, [r1, #0]
 8002538:	062e      	lsls	r6, r5, #24
 800253a:	f100 0304 	add.w	r3, r0, #4
 800253e:	d50a      	bpl.n	8002556 <_printf_i+0xce>
 8002540:	6805      	ldr	r5, [r0, #0]
 8002542:	600b      	str	r3, [r1, #0]
 8002544:	2d00      	cmp	r5, #0
 8002546:	da03      	bge.n	8002550 <_printf_i+0xc8>
 8002548:	232d      	movs	r3, #45	; 0x2d
 800254a:	426d      	negs	r5, r5
 800254c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002550:	485e      	ldr	r0, [pc, #376]	; (80026cc <_printf_i+0x244>)
 8002552:	230a      	movs	r3, #10
 8002554:	e019      	b.n	800258a <_printf_i+0x102>
 8002556:	f015 0f40 	tst.w	r5, #64	; 0x40
 800255a:	6805      	ldr	r5, [r0, #0]
 800255c:	600b      	str	r3, [r1, #0]
 800255e:	bf18      	it	ne
 8002560:	b22d      	sxthne	r5, r5
 8002562:	e7ef      	b.n	8002544 <_printf_i+0xbc>
 8002564:	680b      	ldr	r3, [r1, #0]
 8002566:	6825      	ldr	r5, [r4, #0]
 8002568:	1d18      	adds	r0, r3, #4
 800256a:	6008      	str	r0, [r1, #0]
 800256c:	0628      	lsls	r0, r5, #24
 800256e:	d501      	bpl.n	8002574 <_printf_i+0xec>
 8002570:	681d      	ldr	r5, [r3, #0]
 8002572:	e002      	b.n	800257a <_printf_i+0xf2>
 8002574:	0669      	lsls	r1, r5, #25
 8002576:	d5fb      	bpl.n	8002570 <_printf_i+0xe8>
 8002578:	881d      	ldrh	r5, [r3, #0]
 800257a:	4854      	ldr	r0, [pc, #336]	; (80026cc <_printf_i+0x244>)
 800257c:	2f6f      	cmp	r7, #111	; 0x6f
 800257e:	bf0c      	ite	eq
 8002580:	2308      	moveq	r3, #8
 8002582:	230a      	movne	r3, #10
 8002584:	2100      	movs	r1, #0
 8002586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800258a:	6866      	ldr	r6, [r4, #4]
 800258c:	60a6      	str	r6, [r4, #8]
 800258e:	2e00      	cmp	r6, #0
 8002590:	bfa2      	ittt	ge
 8002592:	6821      	ldrge	r1, [r4, #0]
 8002594:	f021 0104 	bicge.w	r1, r1, #4
 8002598:	6021      	strge	r1, [r4, #0]
 800259a:	b90d      	cbnz	r5, 80025a0 <_printf_i+0x118>
 800259c:	2e00      	cmp	r6, #0
 800259e:	d04d      	beq.n	800263c <_printf_i+0x1b4>
 80025a0:	4616      	mov	r6, r2
 80025a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80025a6:	fb03 5711 	mls	r7, r3, r1, r5
 80025aa:	5dc7      	ldrb	r7, [r0, r7]
 80025ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025b0:	462f      	mov	r7, r5
 80025b2:	42bb      	cmp	r3, r7
 80025b4:	460d      	mov	r5, r1
 80025b6:	d9f4      	bls.n	80025a2 <_printf_i+0x11a>
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d10b      	bne.n	80025d4 <_printf_i+0x14c>
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	07df      	lsls	r7, r3, #31
 80025c0:	d508      	bpl.n	80025d4 <_printf_i+0x14c>
 80025c2:	6923      	ldr	r3, [r4, #16]
 80025c4:	6861      	ldr	r1, [r4, #4]
 80025c6:	4299      	cmp	r1, r3
 80025c8:	bfde      	ittt	le
 80025ca:	2330      	movle	r3, #48	; 0x30
 80025cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025d0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80025d4:	1b92      	subs	r2, r2, r6
 80025d6:	6122      	str	r2, [r4, #16]
 80025d8:	f8cd a000 	str.w	sl, [sp]
 80025dc:	464b      	mov	r3, r9
 80025de:	aa03      	add	r2, sp, #12
 80025e0:	4621      	mov	r1, r4
 80025e2:	4640      	mov	r0, r8
 80025e4:	f7ff fee2 	bl	80023ac <_printf_common>
 80025e8:	3001      	adds	r0, #1
 80025ea:	d14c      	bne.n	8002686 <_printf_i+0x1fe>
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025f0:	b004      	add	sp, #16
 80025f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025f6:	4835      	ldr	r0, [pc, #212]	; (80026cc <_printf_i+0x244>)
 80025f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80025fc:	6823      	ldr	r3, [r4, #0]
 80025fe:	680e      	ldr	r6, [r1, #0]
 8002600:	061f      	lsls	r7, r3, #24
 8002602:	f856 5b04 	ldr.w	r5, [r6], #4
 8002606:	600e      	str	r6, [r1, #0]
 8002608:	d514      	bpl.n	8002634 <_printf_i+0x1ac>
 800260a:	07d9      	lsls	r1, r3, #31
 800260c:	bf44      	itt	mi
 800260e:	f043 0320 	orrmi.w	r3, r3, #32
 8002612:	6023      	strmi	r3, [r4, #0]
 8002614:	b91d      	cbnz	r5, 800261e <_printf_i+0x196>
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	f023 0320 	bic.w	r3, r3, #32
 800261c:	6023      	str	r3, [r4, #0]
 800261e:	2310      	movs	r3, #16
 8002620:	e7b0      	b.n	8002584 <_printf_i+0xfc>
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	f043 0320 	orr.w	r3, r3, #32
 8002628:	6023      	str	r3, [r4, #0]
 800262a:	2378      	movs	r3, #120	; 0x78
 800262c:	4828      	ldr	r0, [pc, #160]	; (80026d0 <_printf_i+0x248>)
 800262e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002632:	e7e3      	b.n	80025fc <_printf_i+0x174>
 8002634:	065e      	lsls	r6, r3, #25
 8002636:	bf48      	it	mi
 8002638:	b2ad      	uxthmi	r5, r5
 800263a:	e7e6      	b.n	800260a <_printf_i+0x182>
 800263c:	4616      	mov	r6, r2
 800263e:	e7bb      	b.n	80025b8 <_printf_i+0x130>
 8002640:	680b      	ldr	r3, [r1, #0]
 8002642:	6826      	ldr	r6, [r4, #0]
 8002644:	6960      	ldr	r0, [r4, #20]
 8002646:	1d1d      	adds	r5, r3, #4
 8002648:	600d      	str	r5, [r1, #0]
 800264a:	0635      	lsls	r5, r6, #24
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	d501      	bpl.n	8002654 <_printf_i+0x1cc>
 8002650:	6018      	str	r0, [r3, #0]
 8002652:	e002      	b.n	800265a <_printf_i+0x1d2>
 8002654:	0671      	lsls	r1, r6, #25
 8002656:	d5fb      	bpl.n	8002650 <_printf_i+0x1c8>
 8002658:	8018      	strh	r0, [r3, #0]
 800265a:	2300      	movs	r3, #0
 800265c:	6123      	str	r3, [r4, #16]
 800265e:	4616      	mov	r6, r2
 8002660:	e7ba      	b.n	80025d8 <_printf_i+0x150>
 8002662:	680b      	ldr	r3, [r1, #0]
 8002664:	1d1a      	adds	r2, r3, #4
 8002666:	600a      	str	r2, [r1, #0]
 8002668:	681e      	ldr	r6, [r3, #0]
 800266a:	6862      	ldr	r2, [r4, #4]
 800266c:	2100      	movs	r1, #0
 800266e:	4630      	mov	r0, r6
 8002670:	f7fd fdbe 	bl	80001f0 <memchr>
 8002674:	b108      	cbz	r0, 800267a <_printf_i+0x1f2>
 8002676:	1b80      	subs	r0, r0, r6
 8002678:	6060      	str	r0, [r4, #4]
 800267a:	6863      	ldr	r3, [r4, #4]
 800267c:	6123      	str	r3, [r4, #16]
 800267e:	2300      	movs	r3, #0
 8002680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002684:	e7a8      	b.n	80025d8 <_printf_i+0x150>
 8002686:	6923      	ldr	r3, [r4, #16]
 8002688:	4632      	mov	r2, r6
 800268a:	4649      	mov	r1, r9
 800268c:	4640      	mov	r0, r8
 800268e:	47d0      	blx	sl
 8002690:	3001      	adds	r0, #1
 8002692:	d0ab      	beq.n	80025ec <_printf_i+0x164>
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	079b      	lsls	r3, r3, #30
 8002698:	d413      	bmi.n	80026c2 <_printf_i+0x23a>
 800269a:	68e0      	ldr	r0, [r4, #12]
 800269c:	9b03      	ldr	r3, [sp, #12]
 800269e:	4298      	cmp	r0, r3
 80026a0:	bfb8      	it	lt
 80026a2:	4618      	movlt	r0, r3
 80026a4:	e7a4      	b.n	80025f0 <_printf_i+0x168>
 80026a6:	2301      	movs	r3, #1
 80026a8:	4632      	mov	r2, r6
 80026aa:	4649      	mov	r1, r9
 80026ac:	4640      	mov	r0, r8
 80026ae:	47d0      	blx	sl
 80026b0:	3001      	adds	r0, #1
 80026b2:	d09b      	beq.n	80025ec <_printf_i+0x164>
 80026b4:	3501      	adds	r5, #1
 80026b6:	68e3      	ldr	r3, [r4, #12]
 80026b8:	9903      	ldr	r1, [sp, #12]
 80026ba:	1a5b      	subs	r3, r3, r1
 80026bc:	42ab      	cmp	r3, r5
 80026be:	dcf2      	bgt.n	80026a6 <_printf_i+0x21e>
 80026c0:	e7eb      	b.n	800269a <_printf_i+0x212>
 80026c2:	2500      	movs	r5, #0
 80026c4:	f104 0619 	add.w	r6, r4, #25
 80026c8:	e7f5      	b.n	80026b6 <_printf_i+0x22e>
 80026ca:	bf00      	nop
 80026cc:	08002a29 	.word	0x08002a29
 80026d0:	08002a3a 	.word	0x08002a3a

080026d4 <_sbrk_r>:
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	4d06      	ldr	r5, [pc, #24]	; (80026f0 <_sbrk_r+0x1c>)
 80026d8:	2300      	movs	r3, #0
 80026da:	4604      	mov	r4, r0
 80026dc:	4608      	mov	r0, r1
 80026de:	602b      	str	r3, [r5, #0]
 80026e0:	f7fd ff42 	bl	8000568 <_sbrk>
 80026e4:	1c43      	adds	r3, r0, #1
 80026e6:	d102      	bne.n	80026ee <_sbrk_r+0x1a>
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	b103      	cbz	r3, 80026ee <_sbrk_r+0x1a>
 80026ec:	6023      	str	r3, [r4, #0]
 80026ee:	bd38      	pop	{r3, r4, r5, pc}
 80026f0:	200000f8 	.word	0x200000f8

080026f4 <__sread>:
 80026f4:	b510      	push	{r4, lr}
 80026f6:	460c      	mov	r4, r1
 80026f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026fc:	f000 f8ee 	bl	80028dc <_read_r>
 8002700:	2800      	cmp	r0, #0
 8002702:	bfab      	itete	ge
 8002704:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002706:	89a3      	ldrhlt	r3, [r4, #12]
 8002708:	181b      	addge	r3, r3, r0
 800270a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800270e:	bfac      	ite	ge
 8002710:	6563      	strge	r3, [r4, #84]	; 0x54
 8002712:	81a3      	strhlt	r3, [r4, #12]
 8002714:	bd10      	pop	{r4, pc}

08002716 <__swrite>:
 8002716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800271a:	461f      	mov	r7, r3
 800271c:	898b      	ldrh	r3, [r1, #12]
 800271e:	05db      	lsls	r3, r3, #23
 8002720:	4605      	mov	r5, r0
 8002722:	460c      	mov	r4, r1
 8002724:	4616      	mov	r6, r2
 8002726:	d505      	bpl.n	8002734 <__swrite+0x1e>
 8002728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800272c:	2302      	movs	r3, #2
 800272e:	2200      	movs	r2, #0
 8002730:	f000 f868 	bl	8002804 <_lseek_r>
 8002734:	89a3      	ldrh	r3, [r4, #12]
 8002736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800273a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800273e:	81a3      	strh	r3, [r4, #12]
 8002740:	4632      	mov	r2, r6
 8002742:	463b      	mov	r3, r7
 8002744:	4628      	mov	r0, r5
 8002746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800274a:	f000 b817 	b.w	800277c <_write_r>

0800274e <__sseek>:
 800274e:	b510      	push	{r4, lr}
 8002750:	460c      	mov	r4, r1
 8002752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002756:	f000 f855 	bl	8002804 <_lseek_r>
 800275a:	1c43      	adds	r3, r0, #1
 800275c:	89a3      	ldrh	r3, [r4, #12]
 800275e:	bf15      	itete	ne
 8002760:	6560      	strne	r0, [r4, #84]	; 0x54
 8002762:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002766:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800276a:	81a3      	strheq	r3, [r4, #12]
 800276c:	bf18      	it	ne
 800276e:	81a3      	strhne	r3, [r4, #12]
 8002770:	bd10      	pop	{r4, pc}

08002772 <__sclose>:
 8002772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002776:	f000 b813 	b.w	80027a0 <_close_r>
	...

0800277c <_write_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	4d07      	ldr	r5, [pc, #28]	; (800279c <_write_r+0x20>)
 8002780:	4604      	mov	r4, r0
 8002782:	4608      	mov	r0, r1
 8002784:	4611      	mov	r1, r2
 8002786:	2200      	movs	r2, #0
 8002788:	602a      	str	r2, [r5, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	f7fd fe9f 	bl	80004ce <_write>
 8002790:	1c43      	adds	r3, r0, #1
 8002792:	d102      	bne.n	800279a <_write_r+0x1e>
 8002794:	682b      	ldr	r3, [r5, #0]
 8002796:	b103      	cbz	r3, 800279a <_write_r+0x1e>
 8002798:	6023      	str	r3, [r4, #0]
 800279a:	bd38      	pop	{r3, r4, r5, pc}
 800279c:	200000f8 	.word	0x200000f8

080027a0 <_close_r>:
 80027a0:	b538      	push	{r3, r4, r5, lr}
 80027a2:	4d06      	ldr	r5, [pc, #24]	; (80027bc <_close_r+0x1c>)
 80027a4:	2300      	movs	r3, #0
 80027a6:	4604      	mov	r4, r0
 80027a8:	4608      	mov	r0, r1
 80027aa:	602b      	str	r3, [r5, #0]
 80027ac:	f7fd feab 	bl	8000506 <_close>
 80027b0:	1c43      	adds	r3, r0, #1
 80027b2:	d102      	bne.n	80027ba <_close_r+0x1a>
 80027b4:	682b      	ldr	r3, [r5, #0]
 80027b6:	b103      	cbz	r3, 80027ba <_close_r+0x1a>
 80027b8:	6023      	str	r3, [r4, #0]
 80027ba:	bd38      	pop	{r3, r4, r5, pc}
 80027bc:	200000f8 	.word	0x200000f8

080027c0 <_fstat_r>:
 80027c0:	b538      	push	{r3, r4, r5, lr}
 80027c2:	4d07      	ldr	r5, [pc, #28]	; (80027e0 <_fstat_r+0x20>)
 80027c4:	2300      	movs	r3, #0
 80027c6:	4604      	mov	r4, r0
 80027c8:	4608      	mov	r0, r1
 80027ca:	4611      	mov	r1, r2
 80027cc:	602b      	str	r3, [r5, #0]
 80027ce:	f7fd fea5 	bl	800051c <_fstat>
 80027d2:	1c43      	adds	r3, r0, #1
 80027d4:	d102      	bne.n	80027dc <_fstat_r+0x1c>
 80027d6:	682b      	ldr	r3, [r5, #0]
 80027d8:	b103      	cbz	r3, 80027dc <_fstat_r+0x1c>
 80027da:	6023      	str	r3, [r4, #0]
 80027dc:	bd38      	pop	{r3, r4, r5, pc}
 80027de:	bf00      	nop
 80027e0:	200000f8 	.word	0x200000f8

080027e4 <_isatty_r>:
 80027e4:	b538      	push	{r3, r4, r5, lr}
 80027e6:	4d06      	ldr	r5, [pc, #24]	; (8002800 <_isatty_r+0x1c>)
 80027e8:	2300      	movs	r3, #0
 80027ea:	4604      	mov	r4, r0
 80027ec:	4608      	mov	r0, r1
 80027ee:	602b      	str	r3, [r5, #0]
 80027f0:	f7fd fea3 	bl	800053a <_isatty>
 80027f4:	1c43      	adds	r3, r0, #1
 80027f6:	d102      	bne.n	80027fe <_isatty_r+0x1a>
 80027f8:	682b      	ldr	r3, [r5, #0]
 80027fa:	b103      	cbz	r3, 80027fe <_isatty_r+0x1a>
 80027fc:	6023      	str	r3, [r4, #0]
 80027fe:	bd38      	pop	{r3, r4, r5, pc}
 8002800:	200000f8 	.word	0x200000f8

08002804 <_lseek_r>:
 8002804:	b538      	push	{r3, r4, r5, lr}
 8002806:	4d07      	ldr	r5, [pc, #28]	; (8002824 <_lseek_r+0x20>)
 8002808:	4604      	mov	r4, r0
 800280a:	4608      	mov	r0, r1
 800280c:	4611      	mov	r1, r2
 800280e:	2200      	movs	r2, #0
 8002810:	602a      	str	r2, [r5, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	f7fd fe9b 	bl	800054e <_lseek>
 8002818:	1c43      	adds	r3, r0, #1
 800281a:	d102      	bne.n	8002822 <_lseek_r+0x1e>
 800281c:	682b      	ldr	r3, [r5, #0]
 800281e:	b103      	cbz	r3, 8002822 <_lseek_r+0x1e>
 8002820:	6023      	str	r3, [r4, #0]
 8002822:	bd38      	pop	{r3, r4, r5, pc}
 8002824:	200000f8 	.word	0x200000f8

08002828 <memcpy>:
 8002828:	440a      	add	r2, r1
 800282a:	4291      	cmp	r1, r2
 800282c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002830:	d100      	bne.n	8002834 <memcpy+0xc>
 8002832:	4770      	bx	lr
 8002834:	b510      	push	{r4, lr}
 8002836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800283a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800283e:	4291      	cmp	r1, r2
 8002840:	d1f9      	bne.n	8002836 <memcpy+0xe>
 8002842:	bd10      	pop	{r4, pc}

08002844 <memmove>:
 8002844:	4288      	cmp	r0, r1
 8002846:	b510      	push	{r4, lr}
 8002848:	eb01 0402 	add.w	r4, r1, r2
 800284c:	d902      	bls.n	8002854 <memmove+0x10>
 800284e:	4284      	cmp	r4, r0
 8002850:	4623      	mov	r3, r4
 8002852:	d807      	bhi.n	8002864 <memmove+0x20>
 8002854:	1e43      	subs	r3, r0, #1
 8002856:	42a1      	cmp	r1, r4
 8002858:	d008      	beq.n	800286c <memmove+0x28>
 800285a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800285e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002862:	e7f8      	b.n	8002856 <memmove+0x12>
 8002864:	4402      	add	r2, r0
 8002866:	4601      	mov	r1, r0
 8002868:	428a      	cmp	r2, r1
 800286a:	d100      	bne.n	800286e <memmove+0x2a>
 800286c:	bd10      	pop	{r4, pc}
 800286e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002876:	e7f7      	b.n	8002868 <memmove+0x24>

08002878 <__malloc_lock>:
 8002878:	4801      	ldr	r0, [pc, #4]	; (8002880 <__malloc_lock+0x8>)
 800287a:	f7ff bb2d 	b.w	8001ed8 <__retarget_lock_acquire_recursive>
 800287e:	bf00      	nop
 8002880:	200000f0 	.word	0x200000f0

08002884 <__malloc_unlock>:
 8002884:	4801      	ldr	r0, [pc, #4]	; (800288c <__malloc_unlock+0x8>)
 8002886:	f7ff bb28 	b.w	8001eda <__retarget_lock_release_recursive>
 800288a:	bf00      	nop
 800288c:	200000f0 	.word	0x200000f0

08002890 <_realloc_r>:
 8002890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002892:	4607      	mov	r7, r0
 8002894:	4614      	mov	r4, r2
 8002896:	460e      	mov	r6, r1
 8002898:	b921      	cbnz	r1, 80028a4 <_realloc_r+0x14>
 800289a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800289e:	4611      	mov	r1, r2
 80028a0:	f7ff bbce 	b.w	8002040 <_malloc_r>
 80028a4:	b922      	cbnz	r2, 80028b0 <_realloc_r+0x20>
 80028a6:	f7ff fb7d 	bl	8001fa4 <_free_r>
 80028aa:	4625      	mov	r5, r4
 80028ac:	4628      	mov	r0, r5
 80028ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028b0:	f000 f826 	bl	8002900 <_malloc_usable_size_r>
 80028b4:	42a0      	cmp	r0, r4
 80028b6:	d20f      	bcs.n	80028d8 <_realloc_r+0x48>
 80028b8:	4621      	mov	r1, r4
 80028ba:	4638      	mov	r0, r7
 80028bc:	f7ff fbc0 	bl	8002040 <_malloc_r>
 80028c0:	4605      	mov	r5, r0
 80028c2:	2800      	cmp	r0, #0
 80028c4:	d0f2      	beq.n	80028ac <_realloc_r+0x1c>
 80028c6:	4631      	mov	r1, r6
 80028c8:	4622      	mov	r2, r4
 80028ca:	f7ff ffad 	bl	8002828 <memcpy>
 80028ce:	4631      	mov	r1, r6
 80028d0:	4638      	mov	r0, r7
 80028d2:	f7ff fb67 	bl	8001fa4 <_free_r>
 80028d6:	e7e9      	b.n	80028ac <_realloc_r+0x1c>
 80028d8:	4635      	mov	r5, r6
 80028da:	e7e7      	b.n	80028ac <_realloc_r+0x1c>

080028dc <_read_r>:
 80028dc:	b538      	push	{r3, r4, r5, lr}
 80028de:	4d07      	ldr	r5, [pc, #28]	; (80028fc <_read_r+0x20>)
 80028e0:	4604      	mov	r4, r0
 80028e2:	4608      	mov	r0, r1
 80028e4:	4611      	mov	r1, r2
 80028e6:	2200      	movs	r2, #0
 80028e8:	602a      	str	r2, [r5, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f7fd fdd2 	bl	8000494 <_read>
 80028f0:	1c43      	adds	r3, r0, #1
 80028f2:	d102      	bne.n	80028fa <_read_r+0x1e>
 80028f4:	682b      	ldr	r3, [r5, #0]
 80028f6:	b103      	cbz	r3, 80028fa <_read_r+0x1e>
 80028f8:	6023      	str	r3, [r4, #0]
 80028fa:	bd38      	pop	{r3, r4, r5, pc}
 80028fc:	200000f8 	.word	0x200000f8

08002900 <_malloc_usable_size_r>:
 8002900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002904:	1f18      	subs	r0, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	bfbc      	itt	lt
 800290a:	580b      	ldrlt	r3, [r1, r0]
 800290c:	18c0      	addlt	r0, r0, r3
 800290e:	4770      	bx	lr

08002910 <_init>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	bf00      	nop
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr

0800291c <_fini>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	bf00      	nop
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr
